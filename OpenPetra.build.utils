<?xml version="1.0"?>
<!-- this contains the csharp functions that are used in OpenPetra.build -->
<project name="OpenPetra" default="help">
    <script language="C#">
        <imports>
          <import namespace="System.Text.RegularExpressions" />
        </imports>    
        <code>
        <![CDATA[

    [Function("ReplaceInFile")]
    public static bool ReplaceInFile(string filename, string oldValue, string newValue)
    {
      String line = "start";
      StreamReader sr = new StreamReader(filename);
      StreamWriter sw = new StreamWriter(filename + ".new");
      bool doRegExpr = false;
      if (oldValue.StartsWith("RegEx:"))
      {
        doRegExpr = true;
        oldValue = oldValue.Substring("RegEx:".Length);
      }
      bool firstLine = true;
      while (line != null)
      {
        line = sr.ReadLine();
        if (line != null)
        {
            if (!firstLine)
            {
                // for uncrustify we have no linebreak on the last line
                sw.WriteLine();
            }
            firstLine = false;
            if (doRegExpr)
            {
                Regex reg=new Regex(oldValue);
                line=reg.Replace(line,newValue);
            }
            else
            {
                line = line.Replace(oldValue, newValue);
            }
            
            sw.Write(line);
        }
      }
      sr.Close();
      sw.Close();
      File.Delete(filename);
      File.Move(filename + ".new", filename);
      return true;
    }

    [Function("GetFilenameWithoutExtension")]
    public static string GetFilenameWithoutExtension(string filename)
    {
      return System.IO.Path.GetFileNameWithoutExtension(filename);
    }
    
    [Function("GetDesignerFilename")]
    public static string GetDesignerFilename(string AFilename)
    {
      return Path.GetDirectoryName(AFilename) + Path.DirectorySeparatorChar + System.IO.Path.GetFileNameWithoutExtension(AFilename) + ".Designer.cs";
    }

    [Function("IsAutoGeneratedFile")]
    public static bool IsAutoGeneratedFile(string filename)
    {
      StreamReader sr = new StreamReader(filename);
      string line = sr.ReadLine();
      sr.Close();
      return line.ToLower().IndexOf("auto generated with nant") != -1;
    }

    [Function("CheckCode")]
    public static bool CheckCode(string filename)
    {
      bool fileOK = true;
      StreamReader sr = new StreamReader(filename);
      string line = sr.ReadToEnd();
      sr.Close();
      // todo: more checks; eg. file header, licensing, copyright;
      
      // check for xml comments written during compilation
      if (filename.EndsWith(".csproj") && line.IndexOf("<DocumentationFile>") == -1)
      {
        fileOK = false;
        Console.WriteLine("Project {0} does not write XML comments for NDoc", System.IO.Path.GetFileName(filename));
      }
      return fileOK;
    }

    [Function("GetMainVersionWithoutBuildNr")]
    public static string GetMainVersionWithoutBuildNr(string AReleaseVersion)
    {
        return AReleaseVersion.Substring(0, AReleaseVersion.IndexOf("-"));
    }

    [Function("ChangeProjectFileRelease")]
    public static bool ChangeProjectFileRelease(string filename, bool makerelease)
    {
        if (makerelease)
        {
            if (!System.IO.File.Exists(filename + ".origDebug"))
            {
                System.IO.File.Copy(filename, filename + ".origDebug");
            }
            ReplaceInFile(filename, "_bin\\Debug", "_bin\\Release");
            ReplaceInFile(filename, "Server_Client\\Debug", "Server_Client\\Release");
            ReplaceInFile(filename, "Server_ServerAdmin\\Debug", "Server_ServerAdmin\\Release");
        }
        else
        {
            if (System.IO.File.Exists(filename + ".origDebug"))
            {
                System.IO.File.Delete(filename);
                System.IO.File.Move(filename + ".origDebug", filename);
            }
        }
        return true;
    }

    [Function("ChangeAssemblyVersion")]
    public static bool ChangeAssemblyVersion(string filename, string releaseID, bool makerelease)
    {
        if (makerelease)
        {
            if (!System.IO.File.Exists(filename + ".origDebug"))
            {
                System.IO.File.Copy(filename, filename + ".origDebug");
            }
            ReplaceInFile(filename, "RegEx:AssemblyVersion(.*)]", "AssemblyVersion(\"" + releaseID + "\")]");
        }
        else
        {
            if (System.IO.File.Exists(filename + ".origDebug"))
            {
                System.IO.File.Delete(filename);
                System.IO.File.Move(filename + ".origDebug", filename);
            }
        }
        return true;
    }
    ]]>
        </code>
    </script>    
    <script language="C#">
          <references>
              <include name="System.Web.dll" />
          </references>
          <imports>
              <import namespace="System.Web.Security" />
              <import namespace="System.Security.Cryptography" />
          </imports>    
          <code>
            <![CDATA[
              [Function("GetPasswordSalt")]
              public static string GetPasswordSalt() {
                    //Generate a cryptographic random number.
                    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
                    byte[] buff = new byte[32];
                    rng.GetBytes(buff);

                    // Return a Base64 string representation of the random number.
                    return Convert.ToBase64String(buff);
              }
              [Function("GetPasswordHash")]
              public static string GetPasswordHash(string APassword, string ASalt) {
                  return FormsAuthentication.HashPasswordForStoringInConfigFile(String.Concat(APassword, ASalt), "SHA1"); 
              }
            ]]>
          </code>
    </script>    
</project>