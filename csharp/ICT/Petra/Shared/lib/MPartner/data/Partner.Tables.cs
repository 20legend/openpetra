/* Auto generated with nant generateORM
 * Do not modify this file manually!
 */
namespace Ict.Petra.Shared.MPartner.Partner.Data
{
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Odbc;
    using System.Runtime.Serialization;
    using System.Xml;
    using Ict.Common;
    using Ict.Common.Data;
    
    
    /// List of statuses for partners
    [Serializable()]
    public class PPartnerStatusTable : TTypedDataTable
    {
        
        /// This code describes the status of a partner.
        ///Eg,  Active, Deceased etc
        public DataColumn ColumnStatusCode;
        
        /// 
        public DataColumn ColumnPartnerStatusDescription;
        
        /// If set to yes, then Partners with this status are considered as active Partners
        public DataColumn ColumnPartnerIsActive;
        
        /// 
        public DataColumn ColumnIncludePartnerOnReport;
        
        /// This defines if the partner status code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerStatusTable() : 
                base("PPartnerStatus")
        {
        }
        
        /// constructor
        public PPartnerStatusTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerStatusRow this[int i]
        {
            get
            {
                return ((PPartnerStatusRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "p_status_code_c";
        }
        
        /// get help text for column
        public static string GetStatusCodeHelp()
        {
            return "Enter a partner status";
        }
        
        /// get label of column
        public static string GetStatusCodeLabel()
        {
            return "Partner Status";
        }
        
        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerStatusDescriptionDBName()
        {
            return "p_partner_status_description_c";
        }
        
        /// get help text for column
        public static string GetPartnerStatusDescriptionHelp()
        {
            return "Enter a full description";
        }
        
        /// get label of column
        public static string GetPartnerStatusDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetPartnerStatusDescriptionLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerIsActiveDBName()
        {
            return "p_partner_is_active_l";
        }
        
        /// get help text for column
        public static string GetPartnerIsActiveHelp()
        {
            return "Select if partner status should be considered as active";
        }
        
        /// get label of column
        public static string GetPartnerIsActiveLabel()
        {
            return "Partner has an active Status";
        }
        
        /// get display format for column
        public static short GetPartnerIsActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIncludePartnerOnReportDBName()
        {
            return "p_include_partner_on_report_l";
        }
        
        /// get help text for column
        public static string GetIncludePartnerOnReportHelp()
        {
            return "Select if partner should be included on reports";
        }
        
        /// get label of column
        public static string GetIncludePartnerOnReportLabel()
        {
            return "Include Partner On Report";
        }
        
        /// get display format for column
        public static short GetIncludePartnerOnReportLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerStatus";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_status";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Status";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_status_code_c",
                    "p_partner_status_description_c",
                    "p_partner_is_active_l",
                    "p_include_partner_on_report_l",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatusCode = this.Columns["p_status_code_c"];
            this.ColumnPartnerStatusDescription = this.Columns["p_partner_status_description_c"];
            this.ColumnPartnerIsActive = this.Columns["p_partner_is_active_l"];
            this.ColumnIncludePartnerOnReport = this.Columns["p_include_partner_on_report_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnStatusCode};
        }
        
        /// get typed set of changes
        public PPartnerStatusTable GetChangesTyped()
        {
            return ((PPartnerStatusTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerStatusRow ret = ((PPartnerStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerStatusRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_status_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_is_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_include_partner_on_report_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnStatusCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPartnerStatusDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnPartnerIsActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnIncludePartnerOnReport))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of statuses for partners
    [Serializable()]
    public class PPartnerStatusRow : System.Data.DataRow
    {
        
        private PPartnerStatusTable myTable;
        
        /// Constructor
        public PPartnerStatusRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerStatusTable)(this.Table));
        }
        
        /// This code describes the status of a partner.
        ///Eg,  Active, Deceased etc
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode) 
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }
        
        /// 
        public String PartnerStatusDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerStatusDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerStatusDescription) 
                            || (((String)(this[this.myTable.ColumnPartnerStatusDescription])) != value)))
                {
                    this[this.myTable.ColumnPartnerStatusDescription] = value;
                }
            }
        }
        
        /// If set to yes, then Partners with this status are considered as active Partners
        public Boolean PartnerIsActive
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerIsActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerIsActive) 
                            || (((Boolean)(this[this.myTable.ColumnPartnerIsActive])) != value)))
                {
                    this[this.myTable.ColumnPartnerIsActive] = value;
                }
            }
        }
        
        /// 
        public Boolean IncludePartnerOnReport
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIncludePartnerOnReport.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIncludePartnerOnReport) 
                            || (((Boolean)(this[this.myTable.ColumnIncludePartnerOnReport])) != value)))
                {
                    this[this.myTable.ColumnIncludePartnerOnReport] = value;
                }
            }
        }
        
        /// This defines if the partner status code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
            this.SetNull(this.myTable.ColumnPartnerStatusDescription);
            this[this.myTable.ColumnPartnerIsActive.Ordinal] = true;
            this[this.myTable.ColumnIncludePartnerOnReport.Ordinal] = false;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPartnerIsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerIsActive);
        }
        
        /// assign NULL value
        public void SetPartnerIsActiveNull()
        {
            this.SetNull(this.myTable.ColumnPartnerIsActive);
        }
        
        /// test for NULL value
        public bool IsIncludePartnerOnReportNull()
        {
            return this.IsNull(this.myTable.ColumnIncludePartnerOnReport);
        }
        
        /// assign NULL value
        public void SetIncludePartnerOnReportNull()
        {
            this.SetNull(this.myTable.ColumnIncludePartnerOnReport);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table is used to describe how a partner first came into contact with the organisation.  Which department entered them.
    [Serializable()]
    public class PAcquisitionTable : TTypedDataTable
    {
        
        /// This code identifies the method of aquisition.
        public DataColumn ColumnAcquisitionCode;
        
        /// This describes the method of aquisition.
        public DataColumn ColumnAcquisitionDescription;
        
        /// Defines if the acquisition code is still for use
        public DataColumn ColumnValidAcquisition;
        
        /// This defines if the acquisition code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// This defines if the acquisition code listed represents a recruiting effort.
        public DataColumn ColumnRecruitingEffort;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PAcquisitionTable() : 
                base("PAcquisition")
        {
        }
        
        /// constructor
        public PAcquisitionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PAcquisitionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PAcquisitionRow this[int i]
        {
            get
            {
                return ((PAcquisitionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetAcquisitionCodeDBName()
        {
            return "p_acquisition_code_c";
        }
        
        /// get help text for column
        public static string GetAcquisitionCodeHelp()
        {
            return "How has this Partner entered this system? By which Dept?";
        }
        
        /// get label of column
        public static string GetAcquisitionCodeLabel()
        {
            return "Acquisition Code";
        }
        
        /// get character length for column
        public static short GetAcquisitionCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAcquisitionDescriptionDBName()
        {
            return "p_acquisition_description_c";
        }
        
        /// get help text for column
        public static string GetAcquisitionDescriptionHelp()
        {
            return "Enter the code description of how the partner was acquired";
        }
        
        /// get label of column
        public static string GetAcquisitionDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetAcquisitionDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidAcquisitionDBName()
        {
            return "p_valid_acquisition_l";
        }
        
        /// get help text for column
        public static string GetValidAcquisitionHelp()
        {
            return "Select if this Acquisition Code is still in Use";
        }
        
        /// get label of column
        public static string GetValidAcquisitionLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetValidAcquisitionLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecruitingEffortDBName()
        {
            return "p_recruiting_effort_l";
        }
        
        /// get help text for column
        public static string GetRecruitingEffortHelp()
        {
            return "Indicates if acquisition code represents a recruiting effort.";
        }
        
        /// get label of column
        public static string GetRecruitingEffortLabel()
        {
            return "Recruiting Effort";
        }
        
        /// get display format for column
        public static short GetRecruitingEffortLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PAcquisition";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_acquisition";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Acquisition";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_acquisition_code_c",
                    "p_acquisition_description_c",
                    "p_valid_acquisition_l",
                    "p_deletable_l",
                    "p_recruiting_effort_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAcquisitionCode = this.Columns["p_acquisition_code_c"];
            this.ColumnAcquisitionDescription = this.Columns["p_acquisition_description_c"];
            this.ColumnValidAcquisition = this.Columns["p_valid_acquisition_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnRecruitingEffort = this.Columns["p_recruiting_effort_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnAcquisitionCode};
        }
        
        /// get typed set of changes
        public PAcquisitionTable GetChangesTyped()
        {
            return ((PAcquisitionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PAcquisitionRow NewRowTyped(bool AWithDefaultValues)
        {
            PAcquisitionRow ret = ((PAcquisitionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PAcquisitionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PAcquisitionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_acquisition_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_acquisition_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_acquisition_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_recruiting_effort_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnAcquisitionCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAcquisitionDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnValidAcquisition))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRecruitingEffort))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table is used to describe how a partner first came into contact with the organisation.  Which department entered them.
    [Serializable()]
    public class PAcquisitionRow : System.Data.DataRow
    {
        
        private PAcquisitionTable myTable;
        
        /// Constructor
        public PAcquisitionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PAcquisitionTable)(this.Table));
        }
        
        /// This code identifies the method of aquisition.
        public String AcquisitionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAcquisitionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAcquisitionCode) 
                            || (((String)(this[this.myTable.ColumnAcquisitionCode])) != value)))
                {
                    this[this.myTable.ColumnAcquisitionCode] = value;
                }
            }
        }
        
        /// This describes the method of aquisition.
        public String AcquisitionDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAcquisitionDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAcquisitionDescription) 
                            || (((String)(this[this.myTable.ColumnAcquisitionDescription])) != value)))
                {
                    this[this.myTable.ColumnAcquisitionDescription] = value;
                }
            }
        }
        
        /// Defines if the acquisition code is still for use
        public Boolean ValidAcquisition
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidAcquisition.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidAcquisition) 
                            || (((Boolean)(this[this.myTable.ColumnValidAcquisition])) != value)))
                {
                    this[this.myTable.ColumnValidAcquisition] = value;
                }
            }
        }
        
        /// This defines if the acquisition code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// This defines if the acquisition code listed represents a recruiting effort.
        public Boolean RecruitingEffort
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecruitingEffort.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecruitingEffort) 
                            || (((Boolean)(this[this.myTable.ColumnRecruitingEffort])) != value)))
                {
                    this[this.myTable.ColumnRecruitingEffort] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAcquisitionCode);
            this.SetNull(this.myTable.ColumnAcquisitionDescription);
            this[this.myTable.ColumnValidAcquisition.Ordinal] = true;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnRecruitingEffort.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsValidAcquisitionNull()
        {
            return this.IsNull(this.myTable.ColumnValidAcquisition);
        }
        
        /// assign NULL value
        public void SetValidAcquisitionNull()
        {
            this.SetNull(this.myTable.ColumnValidAcquisition);
        }
        
        /// test for NULL value
        public bool IsRecruitingEffortNull()
        {
            return this.IsNull(this.myTable.ColumnRecruitingEffort);
        }
        
        /// assign NULL value
        public void SetRecruitingEffortNull()
        {
            this.SetNull(this.myTable.ColumnRecruitingEffort);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Ex. Fam - Family, SM - Single Male, etc.
    [Serializable()]
    public class PAddresseeTypeTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnAddresseeTypeCode;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// This defines if the adressee type code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PAddresseeTypeTable() : 
                base("PAddresseeType")
        {
        }
        
        /// constructor
        public PAddresseeTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PAddresseeTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PAddresseeTypeRow this[int i]
        {
            get
            {
                return ((PAddresseeTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetAddresseeTypeCodeDBName()
        {
            return "p_addressee_type_code_c";
        }
        
        /// get help text for column
        public static string GetAddresseeTypeCodeHelp()
        {
            return "Enter an addressee type code";
        }
        
        /// get label of column
        public static string GetAddresseeTypeCodeLabel()
        {
            return "Addressee Type Code";
        }
        
        /// get character length for column
        public static short GetAddresseeTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PAddresseeType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_addressee_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Addressee Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_addressee_type_code_c",
                    "p_description_c",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAddresseeTypeCode = this.Columns["p_addressee_type_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnAddresseeTypeCode};
        }
        
        /// get typed set of changes
        public PAddresseeTypeTable GetChangesTyped()
        {
            return ((PAddresseeTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PAddresseeTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PAddresseeTypeRow ret = ((PAddresseeTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PAddresseeTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PAddresseeTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_addressee_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnAddresseeTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Ex. Fam - Family, SM - Single Male, etc.
    [Serializable()]
    public class PAddresseeTypeRow : System.Data.DataRow
    {
        
        private PAddresseeTypeTable myTable;
        
        /// Constructor
        public PAddresseeTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PAddresseeTypeTable)(this.Table));
        }
        
        /// 
        public String AddresseeTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAddresseeTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAddresseeTypeCode) 
                            || (((String)(this[this.myTable.ColumnAddresseeTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAddresseeTypeCode] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// This defines if the adressee type code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAddresseeTypeCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Titles available for use
    [Serializable()]
    public class PTitleTable : TTypedDataTable
    {
        
        /// Title
        public DataColumn ColumnTitle;
        
        /// Default addressee type code to be used for this title
        public DataColumn ColumnDefaultAddresseeTypeCode;
        
        /// This defines if the title is a common one to be used more often in this system
        public DataColumn ColumnCommonTitle;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PTitleTable() : 
                base("PTitle")
        {
        }
        
        /// constructor
        public PTitleTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PTitleTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PTitleRow this[int i]
        {
            get
            {
                return ((PTitleRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "p_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "Enter a title";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultAddresseeTypeCodeDBName()
        {
            return "p_default_addressee_type_code_c";
        }
        
        /// get help text for column
        public static string GetDefaultAddresseeTypeCodeHelp()
        {
            return "Enter the default addressee type to be used for this title";
        }
        
        /// get label of column
        public static string GetDefaultAddresseeTypeCodeLabel()
        {
            return "Default Addresse Type";
        }
        
        /// get character length for column
        public static short GetDefaultAddresseeTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommonTitleDBName()
        {
            return "p_common_title_l";
        }
        
        /// get help text for column
        public static string GetCommonTitleHelp()
        {
            return "This title is a common one";
        }
        
        /// get label of column
        public static string GetCommonTitleLabel()
        {
            return "Common Title";
        }
        
        /// get display format for column
        public static short GetCommonTitleLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PTitle";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_title";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Title";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_title_c",
                    "p_default_addressee_type_code_c",
                    "p_common_title_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnTitle = this.Columns["p_title_c"];
            this.ColumnDefaultAddresseeTypeCode = this.Columns["p_default_addressee_type_code_c"];
            this.ColumnCommonTitle = this.Columns["p_common_title_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnTitle};
        }
        
        /// get typed set of changes
        public PTitleTable GetChangesTyped()
        {
            return ((PTitleTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PTitleRow NewRowTyped(bool AWithDefaultValues)
        {
            PTitleRow ret = ((PTitleRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PTitleRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PTitleRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_default_addressee_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_common_title_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDefaultAddresseeTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnCommonTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Titles available for use
    [Serializable()]
    public class PTitleRow : System.Data.DataRow
    {
        
        private PTitleTable myTable;
        
        /// Constructor
        public PTitleRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PTitleTable)(this.Table));
        }
        
        /// Title
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// Default addressee type code to be used for this title
        public String DefaultAddresseeTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultAddresseeTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultAddresseeTypeCode) 
                            || (((String)(this[this.myTable.ColumnDefaultAddresseeTypeCode])) != value)))
                {
                    this[this.myTable.ColumnDefaultAddresseeTypeCode] = value;
                }
            }
        }
        
        /// This defines if the title is a common one to be used more often in this system
        public Boolean CommonTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommonTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommonTitle) 
                            || (((Boolean)(this[this.myTable.ColumnCommonTitle])) != value)))
                {
                    this[this.myTable.ColumnCommonTitle] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnDefaultAddresseeTypeCode);
            this[this.myTable.ColumnCommonTitle.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDefaultAddresseeTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultAddresseeTypeCode);
        }
        
        /// assign NULL value
        public void SetDefaultAddresseeTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnDefaultAddresseeTypeCode);
        }
        
        /// test for NULL value
        public bool IsCommonTitleNull()
        {
            return this.IsNull(this.myTable.ColumnCommonTitle);
        }
        
        /// assign NULL value
        public void SetCommonTitleNull()
        {
            this.SetNull(this.myTable.ColumnCommonTitle);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The class a partner is (PERSON, UNIT, etc.
    [Serializable()]
    public class PPartnerClassesTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnPartnerClass;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerClassesTable() : 
                base("PPartnerClasses")
        {
        }
        
        /// constructor
        public PPartnerClassesTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerClassesTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerClassesRow this[int i]
        {
            get
            {
                return ((PPartnerClassesRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerClassDBName()
        {
            return "p_partner_class_c";
        }
        
        /// get help text for column
        public static string GetPartnerClassHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPartnerClassLabel()
        {
            return "p_partner_class_c";
        }
        
        /// get character length for column
        public static short GetPartnerClassLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "p_description_c";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerClasses";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_classes";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Classes";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_class_c",
                    "p_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerClass = this.Columns["p_partner_class_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerClass};
        }
        
        /// get typed set of changes
        public PPartnerClassesTable GetChangesTyped()
        {
            return ((PPartnerClassesTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerClassesRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerClassesRow ret = ((PPartnerClassesRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerClassesRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerClassesRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_class_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerClass))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The class a partner is (PERSON, UNIT, etc.
    [Serializable()]
    public class PPartnerClassesRow : System.Data.DataRow
    {
        
        private PPartnerClassesTable myTable;
        
        /// Constructor
        public PPartnerClassesRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerClassesTable)(this.Table));
        }
        
        /// 
        public String PartnerClass
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerClass.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerClass) 
                            || (((String)(this[this.myTable.ColumnPartnerClass])) != value)))
                {
                    this[this.myTable.ColumnPartnerClass] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerClass);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This is the main table of the partner system.  Partners can be individuals, families, organisations (churches, businesses), fields, cost centers, and others.  These represent various classes of partners.
    [Serializable()]
    public class PPartnerTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// This defines what type of partner this is. The classes that may be assigned are PERSON, FAMILY, CHURCH, ORGANISATION, UNIT, VENUE and BANK.
        public DataColumn ColumnPartnerClass;
        
        /// This is a sub-class of the partner class.
        public DataColumn ColumnAddresseeTypeCode;
        
        /// Name of the person or organisation.  If a person, more name info is stored in p_person.
        public DataColumn ColumnPartnerShortName;
        
        /// An alternative name for a partner - mainly for entering the local language equivalent.
        public DataColumn ColumnPartnerShortNameLoc;
        
        /// Partner name how it should appear as printed version (to be used if mechanism
        ///to build short name from first and last name does not work e.g. in case of different surnames for husband and wife)
        public DataColumn ColumnPrintedName;
        
        /// Identifies the preferred language of the partner.
        public DataColumn ColumnLanguageCode;
        
        /// Important information about this partner that users need to be aware of.
        public DataColumn ColumnKeyInformation;
        
        /// Additional information about the partner that is important to store in the database.
        public DataColumn ColumnComment;
        
        /// This code identifies the method of aquisition.
        public DataColumn ColumnAcquisitionCode;
        
        /// This code describes the status of a partner.
        ///Eg,  Active, Deceased etc
        public DataColumn ColumnStatusCode;
        
        /// This is the date the status of the partner was last updated.
        public DataColumn ColumnStatusChange;
        
        /// Why was the status changed?
        public DataColumn ColumnStatusChangeReason;
        
        /// Yes if this partner has been &quot;&quot;deleted.&quot;&quot;
        public DataColumn ColumnDeletedPartner;
        
        /// This is the finance details comment.
        public DataColumn ColumnFinanceComment;
        
        /// How often the partner receives a receipt letter.
        public DataColumn ColumnReceiptLetterFrequency;
        
        /// Flags whether each gift given by a user is receipted
        public DataColumn ColumnReceiptEachGift;
        
        /// Flag whether to include this partner when running the Recipient Gift Email report
        public DataColumn ColumnEmailGiftStatement;
        
        /// Yes if the donor wants to remain anonymous.  Names of anonymous donors will not appear on recipient gift statements.
        public DataColumn ColumnAnonymousDonor;
        
        /// Yes if not ok to solicit the partner for funds.
        public DataColumn ColumnNoSolicitations;
        
        /// Inicates if this partner has been assigned as a child unit to another unit. 
        public DataColumn ColumnChildIndicator;
        
        /// Restricts use of the partner record to the user in p_user_id_c if 2 or the group in p_group_id_c if 1.
        public DataColumn ColumnRestricted;
        
        /// The Petra user that the partner record is restricted to if p_restricted_i is 2.
        public DataColumn ColumnUserId;
        
        /// The group of Petra users that the partner record is restricted to if p_restricted_i is 1.
        public DataColumn ColumnGroupId;
        
        /// 
        public DataColumn ColumnPreviousName;
        
        /// How did this Partner first hear about us?
        public DataColumn ColumnFirstContactCode;
        
        /// How did this Partner first hear about us (freetext)?
        public DataColumn ColumnFirstContactFreeform;
        
        /// Intranet ID. Needed for making the link to the International Website, e.g. for using the Online Address Book.
        public DataColumn ColumnIntranetId;
        
        /// Timezone that applies to the partner (address does not necessarily determine that).
        ///This refers to data in the International Address Book.
        public DataColumn ColumnTimezone;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerTable() : 
                base("PPartner")
        {
        }
        
        /// constructor
        public PPartnerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerRow this[int i]
        {
            get
            {
                return ((PPartnerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerClassDBName()
        {
            return "p_partner_class_c";
        }
        
        /// get help text for column
        public static string GetPartnerClassHelp()
        {
            return "Select a partner class";
        }
        
        /// get label of column
        public static string GetPartnerClassLabel()
        {
            return "Partner Class";
        }
        
        /// get character length for column
        public static short GetPartnerClassLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAddresseeTypeCodeDBName()
        {
            return "p_addressee_type_code_c";
        }
        
        /// get help text for column
        public static string GetAddresseeTypeCodeHelp()
        {
            return "Enter an addressee type code";
        }
        
        /// get label of column
        public static string GetAddresseeTypeCodeLabel()
        {
            return "Addressee Type Code";
        }
        
        /// get character length for column
        public static short GetAddresseeTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerShortNameDBName()
        {
            return "p_partner_short_name_c";
        }
        
        /// get help text for column
        public static string GetPartnerShortNameHelp()
        {
            return "Enter a short name for this partner";
        }
        
        /// get label of column
        public static string GetPartnerShortNameLabel()
        {
            return "Short Name";
        }
        
        /// get character length for column
        public static short GetPartnerShortNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerShortNameLocDBName()
        {
            return "p_partner_short_name_loc_c";
        }
        
        /// get help text for column
        public static string GetPartnerShortNameLocHelp()
        {
            return "Enter a short name for this partner in your local language";
        }
        
        /// get label of column
        public static string GetPartnerShortNameLocLabel()
        {
            return "Short Name (Local)";
        }
        
        /// get character length for column
        public static short GetPartnerShortNameLocLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrintedNameDBName()
        {
            return "p_printed_name_c";
        }
        
        /// get help text for column
        public static string GetPrintedNameHelp()
        {
            return "Enter the name that can be used for printing if normal mechanism can not be used";
        }
        
        /// get label of column
        public static string GetPrintedNameLabel()
        {
            return "Printed Name";
        }
        
        /// get character length for column
        public static short GetPrintedNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "p_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "Select the partner\'s preferred language";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language Code";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyInformationDBName()
        {
            return "p_key_information_c";
        }
        
        /// get help text for column
        public static string GetKeyInformationHelp()
        {
            return "Important information about this partner that users need to be aware of";
        }
        
        /// get label of column
        public static string GetKeyInformationLabel()
        {
            return "Key Information";
        }
        
        /// get character length for column
        public static short GetKeyInformationLength()
        {
            return 250;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Enter any additional comments (if full, use notebook)";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comments";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 5000;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAcquisitionCodeDBName()
        {
            return "p_acquisition_code_c";
        }
        
        /// get help text for column
        public static string GetAcquisitionCodeHelp()
        {
            return "Select a method-of-acquisition code";
        }
        
        /// get label of column
        public static string GetAcquisitionCodeLabel()
        {
            return "Acquisition Code";
        }
        
        /// get character length for column
        public static short GetAcquisitionCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "p_status_code_c";
        }
        
        /// get help text for column
        public static string GetStatusCodeHelp()
        {
            return "Select a partner status";
        }
        
        /// get label of column
        public static string GetStatusCodeLabel()
        {
            return "Partner Status";
        }
        
        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusChangeDBName()
        {
            return "p_status_change_d";
        }
        
        /// get help text for column
        public static string GetStatusChangeHelp()
        {
            return "Date when status field was updated";
        }
        
        /// get label of column
        public static string GetStatusChangeLabel()
        {
            return "Status Updated";
        }
        
        /// get display format for column
        public static short GetStatusChangeLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusChangeReasonDBName()
        {
            return "p_status_change_reason_c";
        }
        
        /// get help text for column
        public static string GetStatusChangeReasonHelp()
        {
            return "What is the reason for this change of status?";
        }
        
        /// get label of column
        public static string GetStatusChangeReasonLabel()
        {
            return "Reason for Status Change";
        }
        
        /// get character length for column
        public static short GetStatusChangeReasonLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletedPartnerDBName()
        {
            return "p_deleted_partner_l";
        }
        
        /// get help text for column
        public static string GetDeletedPartnerHelp()
        {
            return "Select if partner has been deleted or removed";
        }
        
        /// get label of column
        public static string GetDeletedPartnerLabel()
        {
            return "Deleted Partner";
        }
        
        /// get display format for column
        public static short GetDeletedPartnerLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFinanceCommentDBName()
        {
            return "p_finance_comment_c";
        }
        
        /// get help text for column
        public static string GetFinanceCommentHelp()
        {
            return "Enter any finance related comments for this partner.";
        }
        
        /// get label of column
        public static string GetFinanceCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetFinanceCommentLength()
        {
            return 255;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReceiptLetterFrequencyDBName()
        {
            return "p_receipt_letter_frequency_c";
        }
        
        /// get help text for column
        public static string GetReceiptLetterFrequencyHelp()
        {
            return "Enter how often the partner wants a receipt";
        }
        
        /// get label of column
        public static string GetReceiptLetterFrequencyLabel()
        {
            return "Receipt frequency";
        }
        
        /// get character length for column
        public static short GetReceiptLetterFrequencyLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReceiptEachGiftDBName()
        {
            return "p_receipt_each_gift_l";
        }
        
        /// get help text for column
        public static string GetReceiptEachGiftHelp()
        {
            return "Does the partner want a receipt for each gift?";
        }
        
        /// get label of column
        public static string GetReceiptEachGiftLabel()
        {
            return "Receipt Each Gift";
        }
        
        /// get display format for column
        public static short GetReceiptEachGiftLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEmailGiftStatementDBName()
        {
            return "p_email_gift_statement_l";
        }
        
        /// get help text for column
        public static string GetEmailGiftStatementHelp()
        {
            return "Include this partner in the Recipient Gift Email report?";
        }
        
        /// get label of column
        public static string GetEmailGiftStatementLabel()
        {
            return "Email Gift Statement";
        }
        
        /// get display format for column
        public static short GetEmailGiftStatementLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnonymousDonorDBName()
        {
            return "p_anonymous_donor_l";
        }
        
        /// get help text for column
        public static string GetAnonymousDonorHelp()
        {
            return "Set this when the partner wishes to donate anonymously";
        }
        
        /// get label of column
        public static string GetAnonymousDonorLabel()
        {
            return "Anonymous Donor ?";
        }
        
        /// get display format for column
        public static short GetAnonymousDonorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNoSolicitationsDBName()
        {
            return "p_no_solicitations_l";
        }
        
        /// get help text for column
        public static string GetNoSolicitationsHelp()
        {
            return "Set this if the partner does not want extra mailings";
        }
        
        /// get label of column
        public static string GetNoSolicitationsLabel()
        {
            return "No Solicitations ?";
        }
        
        /// get display format for column
        public static short GetNoSolicitationsLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChildIndicatorDBName()
        {
            return "p_child_indicator_l";
        }
        
        /// get help text for column
        public static string GetChildIndicatorHelp()
        {
            return "Indicates if partner is a child unit to another unit";
        }
        
        /// get label of column
        public static string GetChildIndicatorLabel()
        {
            return "p_child_indicator_l";
        }
        
        /// get display format for column
        public static short GetChildIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_i";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Indicate partner is a User, Group or neither";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "Restrictions";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 1;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "p_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Select a corresponding User Restriction";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "p_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Select the corresponding Group Restriction";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPreviousNameDBName()
        {
            return "p_previous_name_c";
        }
        
        /// get help text for column
        public static string GetPreviousNameHelp()
        {
            return "Enter the previously used Surname (eg before marriage)";
        }
        
        /// get label of column
        public static string GetPreviousNameLabel()
        {
            return "Previous Name";
        }
        
        /// get character length for column
        public static short GetPreviousNameLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstContactCodeDBName()
        {
            return "p_first_contact_code_c";
        }
        
        /// get help text for column
        public static string GetFirstContactCodeHelp()
        {
            return "How did this Partner first hear about us?";
        }
        
        /// get label of column
        public static string GetFirstContactCodeLabel()
        {
            return "p_first_contact_code_c";
        }
        
        /// get character length for column
        public static short GetFirstContactCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstContactFreeformDBName()
        {
            return "p_first_contact_freeform_c";
        }
        
        /// get help text for column
        public static string GetFirstContactFreeformHelp()
        {
            return "How did this Partner first hear about us (freetext)?";
        }
        
        /// get label of column
        public static string GetFirstContactFreeformLabel()
        {
            return "p_first_contact_freeform_c";
        }
        
        /// get character length for column
        public static short GetFirstContactFreeformLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIntranetIdDBName()
        {
            return "p_intranet_id_c";
        }
        
        /// get help text for column
        public static string GetIntranetIdHelp()
        {
            return "Intranet ID. Needed for making the link to the International Website, e.g. for us" +
                "ing the Online Address Book.";
        }
        
        /// get label of column
        public static string GetIntranetIdLabel()
        {
            return "p_intranet_id_c";
        }
        
        /// get character length for column
        public static short GetIntranetIdLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimezoneDBName()
        {
            return "p_timezone_c";
        }
        
        /// get help text for column
        public static string GetTimezoneHelp()
        {
            return "Timezone that applies to the partner (address does not necessarily determine that" +
                ").\r\nThis refers to data in the International Address Book.";
        }
        
        /// get label of column
        public static string GetTimezoneLabel()
        {
            return "p_timezone_c";
        }
        
        /// get character length for column
        public static short GetTimezoneLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartner";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_partner_class_c",
                    "p_addressee_type_code_c",
                    "p_partner_short_name_c",
                    "p_partner_short_name_loc_c",
                    "p_printed_name_c",
                    "p_language_code_c",
                    "p_key_information_c",
                    "p_comment_c",
                    "p_acquisition_code_c",
                    "p_status_code_c",
                    "p_status_change_d",
                    "p_status_change_reason_c",
                    "p_deleted_partner_l",
                    "p_finance_comment_c",
                    "p_receipt_letter_frequency_c",
                    "p_receipt_each_gift_l",
                    "p_email_gift_statement_l",
                    "p_anonymous_donor_l",
                    "p_no_solicitations_l",
                    "p_child_indicator_l",
                    "p_restricted_i",
                    "p_user_id_c",
                    "p_group_id_c",
                    "p_previous_name_c",
                    "p_first_contact_code_c",
                    "p_first_contact_freeform_c",
                    "p_intranet_id_c",
                    "p_timezone_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnPartnerClass = this.Columns["p_partner_class_c"];
            this.ColumnAddresseeTypeCode = this.Columns["p_addressee_type_code_c"];
            this.ColumnPartnerShortName = this.Columns["p_partner_short_name_c"];
            this.ColumnPartnerShortNameLoc = this.Columns["p_partner_short_name_loc_c"];
            this.ColumnPrintedName = this.Columns["p_printed_name_c"];
            this.ColumnLanguageCode = this.Columns["p_language_code_c"];
            this.ColumnKeyInformation = this.Columns["p_key_information_c"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnAcquisitionCode = this.Columns["p_acquisition_code_c"];
            this.ColumnStatusCode = this.Columns["p_status_code_c"];
            this.ColumnStatusChange = this.Columns["p_status_change_d"];
            this.ColumnStatusChangeReason = this.Columns["p_status_change_reason_c"];
            this.ColumnDeletedPartner = this.Columns["p_deleted_partner_l"];
            this.ColumnFinanceComment = this.Columns["p_finance_comment_c"];
            this.ColumnReceiptLetterFrequency = this.Columns["p_receipt_letter_frequency_c"];
            this.ColumnReceiptEachGift = this.Columns["p_receipt_each_gift_l"];
            this.ColumnEmailGiftStatement = this.Columns["p_email_gift_statement_l"];
            this.ColumnAnonymousDonor = this.Columns["p_anonymous_donor_l"];
            this.ColumnNoSolicitations = this.Columns["p_no_solicitations_l"];
            this.ColumnChildIndicator = this.Columns["p_child_indicator_l"];
            this.ColumnRestricted = this.Columns["p_restricted_i"];
            this.ColumnUserId = this.Columns["p_user_id_c"];
            this.ColumnGroupId = this.Columns["p_group_id_c"];
            this.ColumnPreviousName = this.Columns["p_previous_name_c"];
            this.ColumnFirstContactCode = this.Columns["p_first_contact_code_c"];
            this.ColumnFirstContactFreeform = this.Columns["p_first_contact_freeform_c"];
            this.ColumnIntranetId = this.Columns["p_intranet_id_c"];
            this.ColumnTimezone = this.Columns["p_timezone_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PPartnerTable GetChangesTyped()
        {
            return ((PPartnerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerRow ret = ((PPartnerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_class_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_addressee_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_short_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_short_name_loc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_printed_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_key_information_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_acquisition_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_status_change_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_status_change_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_deleted_partner_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_finance_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_receipt_letter_frequency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_receipt_each_gift_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_email_gift_statement_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_anonymous_donor_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_no_solicitations_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_child_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_previous_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_contact_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_contact_freeform_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_intranet_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_timezone_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerClass))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAddresseeTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnPartnerShortName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnPartnerShortNameLoc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnPrintedName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnKeyInformation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 500);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 10000);
            }
            if ((ACol == ColumnAcquisitionCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnStatusCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnStatusChange))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnStatusChangeReason))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDeletedPartner))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnFinanceComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 510);
            }
            if ((ACol == ColumnReceiptLetterFrequency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnReceiptEachGift))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnEmailGiftStatement))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAnonymousDonor))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNoSolicitations))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnChildIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnPreviousName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnFirstContactCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnFirstContactFreeform))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnIntranetId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnTimezone))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This is the main table of the partner system.  Partners can be individuals, families, organisations (churches, businesses), fields, cost centers, and others.  These represent various classes of partners.
    [Serializable()]
    public class PPartnerRow : System.Data.DataRow
    {
        
        private PPartnerTable myTable;
        
        /// Constructor
        public PPartnerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This defines what type of partner this is. The classes that may be assigned are PERSON, FAMILY, CHURCH, ORGANISATION, UNIT, VENUE and BANK.
        public String PartnerClass
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerClass.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerClass) 
                            || (((String)(this[this.myTable.ColumnPartnerClass])) != value)))
                {
                    this[this.myTable.ColumnPartnerClass] = value;
                }
            }
        }
        
        /// This is a sub-class of the partner class.
        public String AddresseeTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAddresseeTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAddresseeTypeCode) 
                            || (((String)(this[this.myTable.ColumnAddresseeTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAddresseeTypeCode] = value;
                }
            }
        }
        
        /// Name of the person or organisation.  If a person, more name info is stored in p_person.
        public String PartnerShortName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerShortName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerShortName) 
                            || (((String)(this[this.myTable.ColumnPartnerShortName])) != value)))
                {
                    this[this.myTable.ColumnPartnerShortName] = value;
                }
            }
        }
        
        /// An alternative name for a partner - mainly for entering the local language equivalent.
        public String PartnerShortNameLoc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerShortNameLoc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerShortNameLoc) 
                            || (((String)(this[this.myTable.ColumnPartnerShortNameLoc])) != value)))
                {
                    this[this.myTable.ColumnPartnerShortNameLoc] = value;
                }
            }
        }
        
        /// Partner name how it should appear as printed version (to be used if mechanism
        ///to build short name from first and last name does not work e.g. in case of different surnames for husband and wife)
        public String PrintedName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrintedName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrintedName) 
                            || (((String)(this[this.myTable.ColumnPrintedName])) != value)))
                {
                    this[this.myTable.ColumnPrintedName] = value;
                }
            }
        }
        
        /// Identifies the preferred language of the partner.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// Important information about this partner that users need to be aware of.
        public String KeyInformation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyInformation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyInformation) 
                            || (((String)(this[this.myTable.ColumnKeyInformation])) != value)))
                {
                    this[this.myTable.ColumnKeyInformation] = value;
                }
            }
        }
        
        /// Additional information about the partner that is important to store in the database.
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// This code identifies the method of aquisition.
        public String AcquisitionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAcquisitionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAcquisitionCode) 
                            || (((String)(this[this.myTable.ColumnAcquisitionCode])) != value)))
                {
                    this[this.myTable.ColumnAcquisitionCode] = value;
                }
            }
        }
        
        /// This code describes the status of a partner.
        ///Eg,  Active, Deceased etc
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode) 
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }
        
        /// This is the date the status of the partner was last updated.
        public System.DateTime StatusChange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusChange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusChange) 
                            || (((System.DateTime)(this[this.myTable.ColumnStatusChange])) != value)))
                {
                    this[this.myTable.ColumnStatusChange] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime StatusChangeLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStatusChange], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime StatusChangeHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStatusChange.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Why was the status changed?
        public String StatusChangeReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusChangeReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusChangeReason) 
                            || (((String)(this[this.myTable.ColumnStatusChangeReason])) != value)))
                {
                    this[this.myTable.ColumnStatusChangeReason] = value;
                }
            }
        }
        
        /// Yes if this partner has been &quot;&quot;deleted.&quot;&quot;
        public Boolean DeletedPartner
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletedPartner.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletedPartner) 
                            || (((Boolean)(this[this.myTable.ColumnDeletedPartner])) != value)))
                {
                    this[this.myTable.ColumnDeletedPartner] = value;
                }
            }
        }
        
        /// This is the finance details comment.
        public String FinanceComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFinanceComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFinanceComment) 
                            || (((String)(this[this.myTable.ColumnFinanceComment])) != value)))
                {
                    this[this.myTable.ColumnFinanceComment] = value;
                }
            }
        }
        
        /// How often the partner receives a receipt letter.
        public String ReceiptLetterFrequency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReceiptLetterFrequency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReceiptLetterFrequency) 
                            || (((String)(this[this.myTable.ColumnReceiptLetterFrequency])) != value)))
                {
                    this[this.myTable.ColumnReceiptLetterFrequency] = value;
                }
            }
        }
        
        /// Flags whether each gift given by a user is receipted
        public Boolean ReceiptEachGift
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReceiptEachGift.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReceiptEachGift) 
                            || (((Boolean)(this[this.myTable.ColumnReceiptEachGift])) != value)))
                {
                    this[this.myTable.ColumnReceiptEachGift] = value;
                }
            }
        }
        
        /// Flag whether to include this partner when running the Recipient Gift Email report
        public Boolean EmailGiftStatement
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailGiftStatement.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailGiftStatement) 
                            || (((Boolean)(this[this.myTable.ColumnEmailGiftStatement])) != value)))
                {
                    this[this.myTable.ColumnEmailGiftStatement] = value;
                }
            }
        }
        
        /// Yes if the donor wants to remain anonymous.  Names of anonymous donors will not appear on recipient gift statements.
        public Boolean AnonymousDonor
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnonymousDonor.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnonymousDonor) 
                            || (((Boolean)(this[this.myTable.ColumnAnonymousDonor])) != value)))
                {
                    this[this.myTable.ColumnAnonymousDonor] = value;
                }
            }
        }
        
        /// Yes if not ok to solicit the partner for funds.
        public Boolean NoSolicitations
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNoSolicitations.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNoSolicitations) 
                            || (((Boolean)(this[this.myTable.ColumnNoSolicitations])) != value)))
                {
                    this[this.myTable.ColumnNoSolicitations] = value;
                }
            }
        }
        
        /// Inicates if this partner has been assigned as a child unit to another unit. 
        public Boolean ChildIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChildIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChildIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnChildIndicator])) != value)))
                {
                    this[this.myTable.ColumnChildIndicator] = value;
                }
            }
        }
        
        /// Restricts use of the partner record to the user in p_user_id_c if 2 or the group in p_group_id_c if 1.
        public Int32 Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Int32)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// The Petra user that the partner record is restricted to if p_restricted_i is 2.
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// The group of Petra users that the partner record is restricted to if p_restricted_i is 1.
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// 
        public String PreviousName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPreviousName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPreviousName) 
                            || (((String)(this[this.myTable.ColumnPreviousName])) != value)))
                {
                    this[this.myTable.ColumnPreviousName] = value;
                }
            }
        }
        
        /// How did this Partner first hear about us?
        public String FirstContactCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstContactCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstContactCode) 
                            || (((String)(this[this.myTable.ColumnFirstContactCode])) != value)))
                {
                    this[this.myTable.ColumnFirstContactCode] = value;
                }
            }
        }
        
        /// How did this Partner first hear about us (freetext)?
        public String FirstContactFreeform
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstContactFreeform.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstContactFreeform) 
                            || (((String)(this[this.myTable.ColumnFirstContactFreeform])) != value)))
                {
                    this[this.myTable.ColumnFirstContactFreeform] = value;
                }
            }
        }
        
        /// Intranet ID. Needed for making the link to the International Website, e.g. for using the Online Address Book.
        public String IntranetId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntranetId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntranetId) 
                            || (((String)(this[this.myTable.ColumnIntranetId])) != value)))
                {
                    this[this.myTable.ColumnIntranetId] = value;
                }
            }
        }
        
        /// Timezone that applies to the partner (address does not necessarily determine that).
        ///This refers to data in the International Address Book.
        public String Timezone
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimezone.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimezone) 
                            || (((String)(this[this.myTable.ColumnTimezone])) != value)))
                {
                    this[this.myTable.ColumnTimezone] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerClass);
            this[this.myTable.ColumnAddresseeTypeCode.Ordinal] = "DEFAULT";
            this.SetNull(this.myTable.ColumnPartnerShortName);
            this.SetNull(this.myTable.ColumnPartnerShortNameLoc);
            this.SetNull(this.myTable.ColumnPrintedName);
            this[this.myTable.ColumnLanguageCode.Ordinal] = "99";
            this.SetNull(this.myTable.ColumnKeyInformation);
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnAcquisitionCode);
            this.SetNull(this.myTable.ColumnStatusCode);
            this[this.myTable.ColumnStatusChange.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnStatusChangeReason);
            this[this.myTable.ColumnDeletedPartner.Ordinal] = false;
            this.SetNull(this.myTable.ColumnFinanceComment);
            this.SetNull(this.myTable.ColumnReceiptLetterFrequency);
            this[this.myTable.ColumnReceiptEachGift.Ordinal] = true;
            this[this.myTable.ColumnEmailGiftStatement.Ordinal] = false;
            this[this.myTable.ColumnAnonymousDonor.Ordinal] = false;
            this[this.myTable.ColumnNoSolicitations.Ordinal] = false;
            this[this.myTable.ColumnChildIndicator.Ordinal] = false;
            this[this.myTable.ColumnRestricted.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnGroupId);
            this.SetNull(this.myTable.ColumnPreviousName);
            this.SetNull(this.myTable.ColumnFirstContactCode);
            this.SetNull(this.myTable.ColumnFirstContactFreeform);
            this.SetNull(this.myTable.ColumnIntranetId);
            this.SetNull(this.myTable.ColumnTimezone);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPartnerClassNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerClass);
        }
        
        /// assign NULL value
        public void SetPartnerClassNull()
        {
            this.SetNull(this.myTable.ColumnPartnerClass);
        }
        
        /// test for NULL value
        public bool IsAddresseeTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAddresseeTypeCode);
        }
        
        /// assign NULL value
        public void SetAddresseeTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAddresseeTypeCode);
        }
        
        /// test for NULL value
        public bool IsPartnerShortNameNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerShortName);
        }
        
        /// assign NULL value
        public void SetPartnerShortNameNull()
        {
            this.SetNull(this.myTable.ColumnPartnerShortName);
        }
        
        /// test for NULL value
        public bool IsPartnerShortNameLocNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerShortNameLoc);
        }
        
        /// assign NULL value
        public void SetPartnerShortNameLocNull()
        {
            this.SetNull(this.myTable.ColumnPartnerShortNameLoc);
        }
        
        /// test for NULL value
        public bool IsPrintedNameNull()
        {
            return this.IsNull(this.myTable.ColumnPrintedName);
        }
        
        /// assign NULL value
        public void SetPrintedNameNull()
        {
            this.SetNull(this.myTable.ColumnPrintedName);
        }
        
        /// test for NULL value
        public bool IsLanguageCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageCode);
        }
        
        /// assign NULL value
        public void SetLanguageCodeNull()
        {
            this.SetNull(this.myTable.ColumnLanguageCode);
        }
        
        /// test for NULL value
        public bool IsKeyInformationNull()
        {
            return this.IsNull(this.myTable.ColumnKeyInformation);
        }
        
        /// assign NULL value
        public void SetKeyInformationNull()
        {
            this.SetNull(this.myTable.ColumnKeyInformation);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsAcquisitionCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAcquisitionCode);
        }
        
        /// assign NULL value
        public void SetAcquisitionCodeNull()
        {
            this.SetNull(this.myTable.ColumnAcquisitionCode);
        }
        
        /// test for NULL value
        public bool IsStatusCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStatusCode);
        }
        
        /// assign NULL value
        public void SetStatusCodeNull()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
        }
        
        /// test for NULL value
        public bool IsStatusChangeNull()
        {
            return this.IsNull(this.myTable.ColumnStatusChange);
        }
        
        /// assign NULL value
        public void SetStatusChangeNull()
        {
            this.SetNull(this.myTable.ColumnStatusChange);
        }
        
        /// test for NULL value
        public bool IsStatusChangeReasonNull()
        {
            return this.IsNull(this.myTable.ColumnStatusChangeReason);
        }
        
        /// assign NULL value
        public void SetStatusChangeReasonNull()
        {
            this.SetNull(this.myTable.ColumnStatusChangeReason);
        }
        
        /// test for NULL value
        public bool IsDeletedPartnerNull()
        {
            return this.IsNull(this.myTable.ColumnDeletedPartner);
        }
        
        /// assign NULL value
        public void SetDeletedPartnerNull()
        {
            this.SetNull(this.myTable.ColumnDeletedPartner);
        }
        
        /// test for NULL value
        public bool IsFinanceCommentNull()
        {
            return this.IsNull(this.myTable.ColumnFinanceComment);
        }
        
        /// assign NULL value
        public void SetFinanceCommentNull()
        {
            this.SetNull(this.myTable.ColumnFinanceComment);
        }
        
        /// test for NULL value
        public bool IsReceiptLetterFrequencyNull()
        {
            return this.IsNull(this.myTable.ColumnReceiptLetterFrequency);
        }
        
        /// assign NULL value
        public void SetReceiptLetterFrequencyNull()
        {
            this.SetNull(this.myTable.ColumnReceiptLetterFrequency);
        }
        
        /// test for NULL value
        public bool IsReceiptEachGiftNull()
        {
            return this.IsNull(this.myTable.ColumnReceiptEachGift);
        }
        
        /// assign NULL value
        public void SetReceiptEachGiftNull()
        {
            this.SetNull(this.myTable.ColumnReceiptEachGift);
        }
        
        /// test for NULL value
        public bool IsEmailGiftStatementNull()
        {
            return this.IsNull(this.myTable.ColumnEmailGiftStatement);
        }
        
        /// assign NULL value
        public void SetEmailGiftStatementNull()
        {
            this.SetNull(this.myTable.ColumnEmailGiftStatement);
        }
        
        /// test for NULL value
        public bool IsAnonymousDonorNull()
        {
            return this.IsNull(this.myTable.ColumnAnonymousDonor);
        }
        
        /// assign NULL value
        public void SetAnonymousDonorNull()
        {
            this.SetNull(this.myTable.ColumnAnonymousDonor);
        }
        
        /// test for NULL value
        public bool IsNoSolicitationsNull()
        {
            return this.IsNull(this.myTable.ColumnNoSolicitations);
        }
        
        /// assign NULL value
        public void SetNoSolicitationsNull()
        {
            this.SetNull(this.myTable.ColumnNoSolicitations);
        }
        
        /// test for NULL value
        public bool IsChildIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnChildIndicator);
        }
        
        /// assign NULL value
        public void SetChildIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnChildIndicator);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsGroupIdNull()
        {
            return this.IsNull(this.myTable.ColumnGroupId);
        }
        
        /// assign NULL value
        public void SetGroupIdNull()
        {
            this.SetNull(this.myTable.ColumnGroupId);
        }
        
        /// test for NULL value
        public bool IsPreviousNameNull()
        {
            return this.IsNull(this.myTable.ColumnPreviousName);
        }
        
        /// assign NULL value
        public void SetPreviousNameNull()
        {
            this.SetNull(this.myTable.ColumnPreviousName);
        }
        
        /// test for NULL value
        public bool IsFirstContactCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFirstContactCode);
        }
        
        /// assign NULL value
        public void SetFirstContactCodeNull()
        {
            this.SetNull(this.myTable.ColumnFirstContactCode);
        }
        
        /// test for NULL value
        public bool IsFirstContactFreeformNull()
        {
            return this.IsNull(this.myTable.ColumnFirstContactFreeform);
        }
        
        /// assign NULL value
        public void SetFirstContactFreeformNull()
        {
            this.SetNull(this.myTable.ColumnFirstContactFreeform);
        }
        
        /// test for NULL value
        public bool IsIntranetIdNull()
        {
            return this.IsNull(this.myTable.ColumnIntranetId);
        }
        
        /// assign NULL value
        public void SetIntranetIdNull()
        {
            this.SetNull(this.myTable.ColumnIntranetId);
        }
        
        /// test for NULL value
        public bool IsTimezoneNull()
        {
            return this.IsNull(this.myTable.ColumnTimezone);
        }
        
        /// assign NULL value
        public void SetTimezoneNull()
        {
            this.SetNull(this.myTable.ColumnTimezone);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The partners a user has been working with recently
    [Serializable()]
    public class PRecentPartnersTable : TTypedDataTable
    {
        
        /// When was this partner edited by this user?
        public DataColumn ColumnwhenDate;
        
        /// 
        public DataColumn ColumnwhenTime;
        
        /// Who is this for
        public DataColumn ColumnUserId;
        
        /// What partner is it about?
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PRecentPartnersTable() : 
                base("PRecentPartners")
        {
        }
        
        /// constructor
        public PRecentPartnersTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PRecentPartnersTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PRecentPartnersRow this[int i]
        {
            get
            {
                return ((PRecentPartnersRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetwhenDateDBName()
        {
            return "p_when_d";
        }
        
        /// get help text for column
        public static string GetwhenDateHelp()
        {
            return "When was this partner edited by this user?";
        }
        
        /// get label of column
        public static string GetwhenDateLabel()
        {
            return "p_when_d";
        }
        
        /// get display format for column
        public static short GetwhenDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetwhenTimeDBName()
        {
            return "p_when_t";
        }
        
        /// get help text for column
        public static string GetwhenTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetwhenTimeLabel()
        {
            return "p_when_t";
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Who is this for";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "s_user_id_c";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "What partner is it about?";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "p_partner_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PRecentPartners";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_recent_partners";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Recent Partners";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_when_d",
                    "p_when_t",
                    "s_user_id_c",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnwhenDate = this.Columns["p_when_d"];
            this.ColumnwhenTime = this.Columns["p_when_t"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PRecentPartnersTable GetChangesTyped()
        {
            return ((PRecentPartnersTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PRecentPartnersRow NewRowTyped(bool AWithDefaultValues)
        {
            PRecentPartnersRow ret = ((PRecentPartnersRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PRecentPartnersRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PRecentPartnersRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_when_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_when_t", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnwhenDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnwhenTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The partners a user has been working with recently
    [Serializable()]
    public class PRecentPartnersRow : System.Data.DataRow
    {
        
        private PRecentPartnersTable myTable;
        
        /// Constructor
        public PRecentPartnersRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PRecentPartnersTable)(this.Table));
        }
        
        /// When was this partner edited by this user?
        public System.DateTime whenDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnwhenDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnwhenDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnwhenDate])) != value)))
                {
                    this[this.myTable.ColumnwhenDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime whenDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnwhenDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime whenDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnwhenDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 whenTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnwhenTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnwhenTime) 
                            || (((Int32)(this[this.myTable.ColumnwhenTime])) != value)))
                {
                    this[this.myTable.ColumnwhenTime] = value;
                }
            }
        }
        
        /// Who is this for
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// What partner is it about?
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnwhenDate);
            this.SetNull(this.myTable.ColumnwhenTime);
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IswhenDateNull()
        {
            return this.IsNull(this.myTable.ColumnwhenDate);
        }
        
        /// assign NULL value
        public void SetwhenDateNull()
        {
            this.SetNull(this.myTable.ColumnwhenDate);
        }
        
        /// test for NULL value
        public bool IswhenTimeNull()
        {
            return this.IsNull(this.myTable.ColumnwhenTime);
        }
        
        /// assign NULL value
        public void SetwhenTimeNull()
        {
            this.SetNull(this.myTable.ColumnwhenTime);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Any graphic associated to a partner can be stored here.
    [Serializable()]
    public class PPartnerGraphicTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnFileInfoKey;
        
        /// The label for the graphic related to the partner.
        public DataColumn ColumnGraphicLabel;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerGraphicTable() : 
                base("PPartnerGraphic")
        {
        }
        
        /// constructor
        public PPartnerGraphicTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerGraphicTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerGraphicRow this[int i]
        {
            get
            {
                return ((PPartnerGraphicRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }
        
        /// get help text for column
        public static string GetFileInfoKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileInfoKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGraphicLabelDBName()
        {
            return "p_graphic_label_c";
        }
        
        /// get help text for column
        public static string GetGraphicLabelHelp()
        {
            return "Enter a short description (e.g. Photograph, Map etc)";
        }
        
        /// get label of column
        public static string GetGraphicLabelLabel()
        {
            return "Graphic Label Name";
        }
        
        /// get character length for column
        public static short GetGraphicLabelLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerGraphic";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_graphic";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Graphic";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_file_info_key_n",
                    "p_graphic_label_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnGraphicLabel = this.Columns["p_graphic_label_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileInfoKey};
        }
        
        /// get typed set of changes
        public PPartnerGraphicTable GetChangesTyped()
        {
            return ((PPartnerGraphicTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerGraphicRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerGraphicRow ret = ((PPartnerGraphicRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerGraphicRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerGraphicRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_graphic_label_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFileInfoKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnGraphicLabel))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Any graphic associated to a partner can be stored here.
    [Serializable()]
    public class PPartnerGraphicRow : System.Data.DataRow
    {
        
        private PPartnerGraphicTable myTable;
        
        /// Constructor
        public PPartnerGraphicRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerGraphicTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey) 
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }
        
        /// The label for the graphic related to the partner.
        public String GraphicLabel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGraphicLabel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGraphicLabel) 
                            || (((String)(this[this.myTable.ColumnGraphicLabel])) != value)))
                {
                    this[this.myTable.ColumnGraphicLabel] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnGraphicLabel);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsGraphicLabelNull()
        {
            return this.IsNull(this.myTable.ColumnGraphicLabel);
        }
        
        /// assign NULL value
        public void SetGraphicLabelNull()
        {
            this.SetNull(this.myTable.ColumnGraphicLabel);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Address and other data related to that address.
    [Serializable()]
    public class PLocationTable : TTypedDataTable
    {
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public DataColumn ColumnSiteKey;
        
        /// 
        public DataColumn ColumnLocationKey;
        
        /// The name of the building
        public DataColumn ColumnBuilding1;
        
        /// The name of the building (continued)
        public DataColumn ColumnBuilding2;
        
        /// The name of the street that the house is located on
        public DataColumn ColumnStreetName;
        
        /// This is the first element of an address
        public DataColumn ColumnLocality;
        
        /// The name of the suburb
        public DataColumn ColumnSuburb;
        
        /// This can be a post town or city
        public DataColumn ColumnCity;
        
        /// This can be a county (UK), a state (US), province (CDN), canton (CH) etc.
        public DataColumn ColumnCounty;
        
        /// This is the national post code
        public DataColumn ColumnPostalCode;
        
        /// This is a code which identifies a country.
        ///It is taken from the ISO 3166-1-alpha-2 code elements.
        public DataColumn ColumnCountryCode;
        
        /// This is the third element of an address (if required)
        public DataColumn ColumnAddress3;
        
        /// The latitude of the location; a number between -90 and +90; precision is 6 digits (11cm)
        public DataColumn ColumnGeoLatitude;
        
        /// The longitude of the location; a number between -180 and +180; precision is 6 digits (11cm)
        public DataColumn ColumnGeoLongitude;
        
        /// The distance in km of this location to the location 0 if location 0 was on the same longitude; this is for improving query performance
        public DataColumn ColumnGeoKmX;
        
        /// The distance in km of this location to the location 0 if location 0 was on the same latitude; this is for improving query performance
        public DataColumn ColumnGeoKmY;
        
        /// The accuracy of the stored geo data;                  -2: server did not respond;                 -1: not processed yet;                 0: Unknown Location;                 1: Country level accuracy;                 2: Region;                 3: Sub-Region;                 4: Town/City/Village;                 5: Post code;                 6: Street;                 7: Intersection;                 8: Address level accuracy
        public DataColumn ColumnGeoAccuracy;
        
        /// Indicates whether or not the location has restricted access. If it does then the access will be controlled by s_group_location.
        public DataColumn ColumnRestricted;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PLocationTable() : 
                base("PLocation")
        {
        }
        
        /// constructor
        public PLocationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PLocationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PLocationRow this[int i]
        {
            get
            {
                return ((PLocationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }
        
        /// get help text for column
        public static string GetSiteKeyHelp()
        {
            return "Enter the site key";
        }
        
        /// get label of column
        public static string GetSiteKeyLabel()
        {
            return "Site Key";
        }
        
        /// get display format for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationKeyDBName()
        {
            return "p_location_key_i";
        }
        
        /// get help text for column
        public static string GetLocationKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLocationKeyLabel()
        {
            return "Location Key";
        }
        
        /// get display format for column
        public static short GetLocationKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBuilding1DBName()
        {
            return "p_building_1_c";
        }
        
        /// get help text for column
        public static string GetBuilding1Help()
        {
            return "Enter the name of the building";
        }
        
        /// get label of column
        public static string GetBuilding1Label()
        {
            return "Building";
        }
        
        /// get character length for column
        public static short GetBuilding1Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBuilding2DBName()
        {
            return "p_building_2_c";
        }
        
        /// get help text for column
        public static string GetBuilding2Help()
        {
            return "Enter the name of the building (cont.)";
        }
        
        /// get label of column
        public static string GetBuilding2Label()
        {
            return "Building (cont.)";
        }
        
        /// get character length for column
        public static short GetBuilding2Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStreetNameDBName()
        {
            return "p_street_name_c";
        }
        
        /// get help text for column
        public static string GetStreetNameHelp()
        {
            return "Enter the second part of the address (e.g. name of the street)";
        }
        
        /// get label of column
        public static string GetStreetNameLabel()
        {
            return "Addr2";
        }
        
        /// get character length for column
        public static short GetStreetNameLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocalityDBName()
        {
            return "p_locality_c";
        }
        
        /// get help text for column
        public static string GetLocalityHelp()
        {
            return "The part of the address preceding the street, eg business name";
        }
        
        /// get label of column
        public static string GetLocalityLabel()
        {
            return "Addr1";
        }
        
        /// get character length for column
        public static short GetLocalityLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSuburbDBName()
        {
            return "p_suburb_c";
        }
        
        /// get help text for column
        public static string GetSuburbHelp()
        {
            return "Enter the name of the suburb";
        }
        
        /// get label of column
        public static string GetSuburbLabel()
        {
            return "Suburb";
        }
        
        /// get character length for column
        public static short GetSuburbLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCityDBName()
        {
            return "p_city_c";
        }
        
        /// get help text for column
        public static string GetCityHelp()
        {
            return "Enter a post town or city";
        }
        
        /// get label of column
        public static string GetCityLabel()
        {
            return "City";
        }
        
        /// get character length for column
        public static short GetCityLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCountyDBName()
        {
            return "p_county_c";
        }
        
        /// get help text for column
        public static string GetCountyHelp()
        {
            return "Enter a county/province/state/district/canton";
        }
        
        /// get label of column
        public static string GetCountyLabel()
        {
            return "Province";
        }
        
        /// get character length for column
        public static short GetCountyLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPostalCodeDBName()
        {
            return "p_postal_code_c";
        }
        
        /// get help text for column
        public static string GetPostalCodeHelp()
        {
            return "Enter the international postal/zip code";
        }
        
        /// get label of column
        public static string GetPostalCodeLabel()
        {
            return "Post Code";
        }
        
        /// get character length for column
        public static short GetPostalCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCountryCodeDBName()
        {
            return "p_country_code_c";
        }
        
        /// get help text for column
        public static string GetCountryCodeHelp()
        {
            return "Select a country code";
        }
        
        /// get label of column
        public static string GetCountryCodeLabel()
        {
            return "Country Code";
        }
        
        /// get character length for column
        public static short GetCountryCodeLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAddress3DBName()
        {
            return "p_address_3_c";
        }
        
        /// get help text for column
        public static string GetAddress3Help()
        {
            return "Enter the third part of the address, eg district of the city";
        }
        
        /// get label of column
        public static string GetAddress3Label()
        {
            return "Addr3";
        }
        
        /// get character length for column
        public static short GetAddress3Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGeoLatitudeDBName()
        {
            return "p_geo_latitude_n";
        }
        
        /// get help text for column
        public static string GetGeoLatitudeHelp()
        {
            return "The latitude of the location; a number between -90 and +90; precision is 6 digits" +
                " (11cm)";
        }
        
        /// get label of column
        public static string GetGeoLatitudeLabel()
        {
            return "p_geo_latitude_n";
        }
        
        /// get display format for column
        public static short GetGeoLatitudeLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGeoLongitudeDBName()
        {
            return "p_geo_longitude_n";
        }
        
        /// get help text for column
        public static string GetGeoLongitudeHelp()
        {
            return "The longitude of the location; a number between -180 and +180; precision is 6 dig" +
                "its (11cm)";
        }
        
        /// get label of column
        public static string GetGeoLongitudeLabel()
        {
            return "p_geo_longitude_n";
        }
        
        /// get display format for column
        public static short GetGeoLongitudeLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGeoKmXDBName()
        {
            return "p_geo_km_x_i";
        }
        
        /// get help text for column
        public static string GetGeoKmXHelp()
        {
            return "The distance in km of this location to the location 0 if location 0 was on the sa" +
                "me longitude; this is for improving query performance";
        }
        
        /// get label of column
        public static string GetGeoKmXLabel()
        {
            return "p_geo_km_x_i";
        }
        
        /// get display format for column
        public static short GetGeoKmXLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGeoKmYDBName()
        {
            return "p_geo_km_y_i";
        }
        
        /// get help text for column
        public static string GetGeoKmYHelp()
        {
            return "The distance in km of this location to the location 0 if location 0 was on the sa" +
                "me latitude; this is for improving query performance";
        }
        
        /// get label of column
        public static string GetGeoKmYLabel()
        {
            return "p_geo_km_y_i";
        }
        
        /// get display format for column
        public static short GetGeoKmYLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGeoAccuracyDBName()
        {
            return "p_geo_accuracy_i";
        }
        
        /// get help text for column
        public static string GetGeoAccuracyHelp()
        {
            return @"The accuracy of the stored geo data;                  -2: server did not respond;                 -1: not processed yet;                 0: Unknown Location;                 1: Country level accuracy;                 2: Region;                 3: Sub-Region;                 4: Town/City/Village;                 5: Post code;                 6: Street;                 7: Intersection;                 8: Address level accuracy";
        }
        
        /// get label of column
        public static string GetGeoAccuracyLabel()
        {
            return "p_geo_accuracy_i";
        }
        
        /// get display format for column
        public static short GetGeoAccuracyLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_l";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Should access to this location be restricted to some people?";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "Location Restricted";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PLocation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_location";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Location";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_site_key_n",
                    "p_location_key_i",
                    "p_building_1_c",
                    "p_building_2_c",
                    "p_street_name_c",
                    "p_locality_c",
                    "p_suburb_c",
                    "p_city_c",
                    "p_county_c",
                    "p_postal_code_c",
                    "p_country_code_c",
                    "p_address_3_c",
                    "p_geo_latitude_n",
                    "p_geo_longitude_n",
                    "p_geo_km_x_i",
                    "p_geo_km_y_i",
                    "p_geo_accuracy_i",
                    "p_restricted_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnLocationKey = this.Columns["p_location_key_i"];
            this.ColumnBuilding1 = this.Columns["p_building_1_c"];
            this.ColumnBuilding2 = this.Columns["p_building_2_c"];
            this.ColumnStreetName = this.Columns["p_street_name_c"];
            this.ColumnLocality = this.Columns["p_locality_c"];
            this.ColumnSuburb = this.Columns["p_suburb_c"];
            this.ColumnCity = this.Columns["p_city_c"];
            this.ColumnCounty = this.Columns["p_county_c"];
            this.ColumnPostalCode = this.Columns["p_postal_code_c"];
            this.ColumnCountryCode = this.Columns["p_country_code_c"];
            this.ColumnAddress3 = this.Columns["p_address_3_c"];
            this.ColumnGeoLatitude = this.Columns["p_geo_latitude_n"];
            this.ColumnGeoLongitude = this.Columns["p_geo_longitude_n"];
            this.ColumnGeoKmX = this.Columns["p_geo_km_x_i"];
            this.ColumnGeoKmY = this.Columns["p_geo_km_y_i"];
            this.ColumnGeoAccuracy = this.Columns["p_geo_accuracy_i"];
            this.ColumnRestricted = this.Columns["p_restricted_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnSiteKey,
                    this.ColumnLocationKey};
        }
        
        /// get typed set of changes
        public PLocationTable GetChangesTyped()
        {
            return ((PLocationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PLocationRow NewRowTyped(bool AWithDefaultValues)
        {
            PLocationRow ret = ((PLocationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PLocationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PLocationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_location_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_building_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_building_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_street_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_locality_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_suburb_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_city_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_county_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_postal_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_country_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_address_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_geo_latitude_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_geo_longitude_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_geo_km_x_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_geo_km_y_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_geo_accuracy_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnSiteKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLocationKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBuilding1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnBuilding2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnStreetName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnLocality))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSuburb))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnCity))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnCounty))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPostalCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnCountryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 8);
            }
            if ((ACol == ColumnAddress3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnGeoLatitude))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 9);
            }
            if ((ACol == ColumnGeoLongitude))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 9);
            }
            if ((ACol == ColumnGeoKmX))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGeoKmY))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGeoAccuracy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Address and other data related to that address.
    [Serializable()]
    public class PLocationRow : System.Data.DataRow
    {
        
        private PLocationTable myTable;
        
        /// Constructor
        public PLocationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PLocationTable)(this.Table));
        }
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey) 
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }
        
        /// 
        public Int32 LocationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationKey) 
                            || (((Int32)(this[this.myTable.ColumnLocationKey])) != value)))
                {
                    this[this.myTable.ColumnLocationKey] = value;
                }
            }
        }
        
        /// The name of the building
        public String Building1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBuilding1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBuilding1) 
                            || (((String)(this[this.myTable.ColumnBuilding1])) != value)))
                {
                    this[this.myTable.ColumnBuilding1] = value;
                }
            }
        }
        
        /// The name of the building (continued)
        public String Building2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBuilding2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBuilding2) 
                            || (((String)(this[this.myTable.ColumnBuilding2])) != value)))
                {
                    this[this.myTable.ColumnBuilding2] = value;
                }
            }
        }
        
        /// The name of the street that the house is located on
        public String StreetName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStreetName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStreetName) 
                            || (((String)(this[this.myTable.ColumnStreetName])) != value)))
                {
                    this[this.myTable.ColumnStreetName] = value;
                }
            }
        }
        
        /// This is the first element of an address
        public String Locality
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocality.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocality) 
                            || (((String)(this[this.myTable.ColumnLocality])) != value)))
                {
                    this[this.myTable.ColumnLocality] = value;
                }
            }
        }
        
        /// The name of the suburb
        public String Suburb
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSuburb.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSuburb) 
                            || (((String)(this[this.myTable.ColumnSuburb])) != value)))
                {
                    this[this.myTable.ColumnSuburb] = value;
                }
            }
        }
        
        /// This can be a post town or city
        public String City
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCity.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCity) 
                            || (((String)(this[this.myTable.ColumnCity])) != value)))
                {
                    this[this.myTable.ColumnCity] = value;
                }
            }
        }
        
        /// This can be a county (UK), a state (US), province (CDN), canton (CH) etc.
        public String County
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCounty.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCounty) 
                            || (((String)(this[this.myTable.ColumnCounty])) != value)))
                {
                    this[this.myTable.ColumnCounty] = value;
                }
            }
        }
        
        /// This is the national post code
        public String PostalCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostalCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostalCode) 
                            || (((String)(this[this.myTable.ColumnPostalCode])) != value)))
                {
                    this[this.myTable.ColumnPostalCode] = value;
                }
            }
        }
        
        /// This is a code which identifies a country.
        ///It is taken from the ISO 3166-1-alpha-2 code elements.
        public String CountryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryCode) 
                            || (((String)(this[this.myTable.ColumnCountryCode])) != value)))
                {
                    this[this.myTable.ColumnCountryCode] = value;
                }
            }
        }
        
        /// This is the third element of an address (if required)
        public String Address3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAddress3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAddress3) 
                            || (((String)(this[this.myTable.ColumnAddress3])) != value)))
                {
                    this[this.myTable.ColumnAddress3] = value;
                }
            }
        }
        
        /// The latitude of the location; a number between -90 and +90; precision is 6 digits (11cm)
        public Decimal GeoLatitude
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGeoLatitude.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGeoLatitude) 
                            || (((Decimal)(this[this.myTable.ColumnGeoLatitude])) != value)))
                {
                    this[this.myTable.ColumnGeoLatitude] = value;
                }
            }
        }
        
        /// The longitude of the location; a number between -180 and +180; precision is 6 digits (11cm)
        public Decimal GeoLongitude
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGeoLongitude.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGeoLongitude) 
                            || (((Decimal)(this[this.myTable.ColumnGeoLongitude])) != value)))
                {
                    this[this.myTable.ColumnGeoLongitude] = value;
                }
            }
        }
        
        /// The distance in km of this location to the location 0 if location 0 was on the same longitude; this is for improving query performance
        public Int32 GeoKmX
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGeoKmX.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGeoKmX) 
                            || (((Int32)(this[this.myTable.ColumnGeoKmX])) != value)))
                {
                    this[this.myTable.ColumnGeoKmX] = value;
                }
            }
        }
        
        /// The distance in km of this location to the location 0 if location 0 was on the same latitude; this is for improving query performance
        public Int32 GeoKmY
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGeoKmY.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGeoKmY) 
                            || (((Int32)(this[this.myTable.ColumnGeoKmY])) != value)))
                {
                    this[this.myTable.ColumnGeoKmY] = value;
                }
            }
        }
        
        /// The accuracy of the stored geo data;                  -2: server did not respond;                 -1: not processed yet;                 0: Unknown Location;                 1: Country level accuracy;                 2: Region;                 3: Sub-Region;                 4: Town/City/Village;                 5: Post code;                 6: Street;                 7: Intersection;                 8: Address level accuracy
        public Int32 GeoAccuracy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGeoAccuracy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGeoAccuracy) 
                            || (((Int32)(this[this.myTable.ColumnGeoAccuracy])) != value)))
                {
                    this[this.myTable.ColumnGeoAccuracy] = value;
                }
            }
        }
        
        /// Indicates whether or not the location has restricted access. If it does then the access will be controlled by s_group_location.
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnLocationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBuilding1);
            this.SetNull(this.myTable.ColumnBuilding2);
            this.SetNull(this.myTable.ColumnStreetName);
            this.SetNull(this.myTable.ColumnLocality);
            this.SetNull(this.myTable.ColumnSuburb);
            this.SetNull(this.myTable.ColumnCity);
            this.SetNull(this.myTable.ColumnCounty);
            this.SetNull(this.myTable.ColumnPostalCode);
            this.SetNull(this.myTable.ColumnCountryCode);
            this.SetNull(this.myTable.ColumnAddress3);
            this.SetNull(this.myTable.ColumnGeoLatitude);
            this.SetNull(this.myTable.ColumnGeoLongitude);
            this.SetNull(this.myTable.ColumnGeoKmX);
            this.SetNull(this.myTable.ColumnGeoKmY);
            this[this.myTable.ColumnGeoAccuracy.Ordinal] = -1;
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBuilding1Null()
        {
            return this.IsNull(this.myTable.ColumnBuilding1);
        }
        
        /// assign NULL value
        public void SetBuilding1Null()
        {
            this.SetNull(this.myTable.ColumnBuilding1);
        }
        
        /// test for NULL value
        public bool IsBuilding2Null()
        {
            return this.IsNull(this.myTable.ColumnBuilding2);
        }
        
        /// assign NULL value
        public void SetBuilding2Null()
        {
            this.SetNull(this.myTable.ColumnBuilding2);
        }
        
        /// test for NULL value
        public bool IsStreetNameNull()
        {
            return this.IsNull(this.myTable.ColumnStreetName);
        }
        
        /// assign NULL value
        public void SetStreetNameNull()
        {
            this.SetNull(this.myTable.ColumnStreetName);
        }
        
        /// test for NULL value
        public bool IsLocalityNull()
        {
            return this.IsNull(this.myTable.ColumnLocality);
        }
        
        /// assign NULL value
        public void SetLocalityNull()
        {
            this.SetNull(this.myTable.ColumnLocality);
        }
        
        /// test for NULL value
        public bool IsSuburbNull()
        {
            return this.IsNull(this.myTable.ColumnSuburb);
        }
        
        /// assign NULL value
        public void SetSuburbNull()
        {
            this.SetNull(this.myTable.ColumnSuburb);
        }
        
        /// test for NULL value
        public bool IsCityNull()
        {
            return this.IsNull(this.myTable.ColumnCity);
        }
        
        /// assign NULL value
        public void SetCityNull()
        {
            this.SetNull(this.myTable.ColumnCity);
        }
        
        /// test for NULL value
        public bool IsCountyNull()
        {
            return this.IsNull(this.myTable.ColumnCounty);
        }
        
        /// assign NULL value
        public void SetCountyNull()
        {
            this.SetNull(this.myTable.ColumnCounty);
        }
        
        /// test for NULL value
        public bool IsPostalCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPostalCode);
        }
        
        /// assign NULL value
        public void SetPostalCodeNull()
        {
            this.SetNull(this.myTable.ColumnPostalCode);
        }
        
        /// test for NULL value
        public bool IsCountryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCountryCode);
        }
        
        /// assign NULL value
        public void SetCountryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCountryCode);
        }
        
        /// test for NULL value
        public bool IsAddress3Null()
        {
            return this.IsNull(this.myTable.ColumnAddress3);
        }
        
        /// assign NULL value
        public void SetAddress3Null()
        {
            this.SetNull(this.myTable.ColumnAddress3);
        }
        
        /// test for NULL value
        public bool IsGeoLatitudeNull()
        {
            return this.IsNull(this.myTable.ColumnGeoLatitude);
        }
        
        /// assign NULL value
        public void SetGeoLatitudeNull()
        {
            this.SetNull(this.myTable.ColumnGeoLatitude);
        }
        
        /// test for NULL value
        public bool IsGeoLongitudeNull()
        {
            return this.IsNull(this.myTable.ColumnGeoLongitude);
        }
        
        /// assign NULL value
        public void SetGeoLongitudeNull()
        {
            this.SetNull(this.myTable.ColumnGeoLongitude);
        }
        
        /// test for NULL value
        public bool IsGeoKmXNull()
        {
            return this.IsNull(this.myTable.ColumnGeoKmX);
        }
        
        /// assign NULL value
        public void SetGeoKmXNull()
        {
            this.SetNull(this.myTable.ColumnGeoKmX);
        }
        
        /// test for NULL value
        public bool IsGeoKmYNull()
        {
            return this.IsNull(this.myTable.ColumnGeoKmY);
        }
        
        /// assign NULL value
        public void SetGeoKmYNull()
        {
            this.SetNull(this.myTable.ColumnGeoKmY);
        }
        
        /// test for NULL value
        public bool IsGeoAccuracyNull()
        {
            return this.IsNull(this.myTable.ColumnGeoAccuracy);
        }
        
        /// assign NULL value
        public void SetGeoAccuracyNull()
        {
            this.SetNull(this.myTable.ColumnGeoAccuracy);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Types of address e.g. home, business
    [Serializable()]
    public class PLocationTypeTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnCode;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// 
        public DataColumn ColumnDeletable;
        
        /// 
        public DataColumn ColumnAssignable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PLocationTypeTable() : 
                base("PLocationType")
        {
        }
        
        /// constructor
        public PLocationTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PLocationTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PLocationTypeRow this[int i]
        {
            get
            {
                return ((PLocationTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Location Code";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Location Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAssignableDBName()
        {
            return "p_assignable_l";
        }
        
        /// get help text for column
        public static string GetAssignableHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAssignableLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetAssignableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PLocationType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_location_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Location Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_code_c",
                    "p_description_c",
                    "p_deletable_l",
                    "p_assignable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnAssignable = this.Columns["p_assignable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PLocationTypeTable GetChangesTyped()
        {
            return ((PLocationTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PLocationTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PLocationTypeRow ret = ((PLocationTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PLocationTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PLocationTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_assignable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAssignable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Types of address e.g. home, business
    [Serializable()]
    public class PLocationTypeRow : System.Data.DataRow
    {
        
        private PLocationTypeTable myTable;
        
        /// Constructor
        public PLocationTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PLocationTypeTable)(this.Table));
        }
        
        /// 
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// 
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// 
        public Boolean Assignable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssignable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssignable) 
                            || (((Boolean)(this[this.myTable.ColumnAssignable])) != value)))
                {
                    this[this.myTable.ColumnAssignable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnAssignable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Links partners with locations (addresses) and has specific info about the link (e.g. phone number)
    [Serializable()]
    public class PPartnerLocationTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// This is the key that tell what site created the linked location
        public DataColumn ColumnSiteKey;
        
        /// 
        public DataColumn ColumnLocationKey;
        
        /// 
        public DataColumn ColumnDateEffective;
        
        /// 
        public DataColumn ColumnDateGoodUntil;
        
        /// 
        public DataColumn ColumnLocationType;
        
        /// 
        public DataColumn ColumnSendMail;
        
        /// 
        public DataColumn ColumnFaxNumber;
        
        /// 
        public DataColumn ColumnTelex;
        
        /// 
        public DataColumn ColumnTelephoneNumber;
        
        /// 
        public DataColumn ColumnExtension;
        
        /// 
        public DataColumn ColumnEmailAddress;
        
        /// 
        public DataColumn ColumnLocationDetailComment;
        
        /// 
        public DataColumn ColumnFaxExtension;
        
        /// 
        public DataColumn ColumnMobileNumber;
        
        /// 
        public DataColumn ColumnAlternateTelephone;
        
        /// 
        public DataColumn ColumnUrl;
        
        /// Indicates whether or not the partner location has restricted access. If it does then the access will be controlled by s_group_partner_location.
        public DataColumn ColumnRestricted;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerLocationTable() : 
                base("PPartnerLocation")
        {
        }
        
        /// constructor
        public PPartnerLocationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerLocationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerLocationRow this[int i]
        {
            get
            {
                return ((PPartnerLocationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }
        
        /// get help text for column
        public static string GetSiteKeyHelp()
        {
            return "Enter the site key";
        }
        
        /// get label of column
        public static string GetSiteKeyLabel()
        {
            return "Site Key";
        }
        
        /// get display format for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationKeyDBName()
        {
            return "p_location_key_i";
        }
        
        /// get help text for column
        public static string GetLocationKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLocationKeyLabel()
        {
            return "Location Key";
        }
        
        /// get display format for column
        public static short GetLocationKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "p_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Enter the date this address is effective";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Valid From";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateGoodUntilDBName()
        {
            return "p_date_good_until_d";
        }
        
        /// get help text for column
        public static string GetDateGoodUntilHelp()
        {
            return "Enter the date this address expires on";
        }
        
        /// get label of column
        public static string GetDateGoodUntilLabel()
        {
            return "Valid To";
        }
        
        /// get display format for column
        public static short GetDateGoodUntilLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationTypeDBName()
        {
            return "p_location_type_c";
        }
        
        /// get help text for column
        public static string GetLocationTypeHelp()
        {
            return "Select the address location type";
        }
        
        /// get label of column
        public static string GetLocationTypeLabel()
        {
            return "Location Type";
        }
        
        /// get character length for column
        public static short GetLocationTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSendMailDBName()
        {
            return "p_send_mail_l";
        }
        
        /// get help text for column
        public static string GetSendMailHelp()
        {
            return "Can or should, postal mail be sent to this address?";
        }
        
        /// get label of column
        public static string GetSendMailLabel()
        {
            return "Mailing Address";
        }
        
        /// get display format for column
        public static short GetSendMailLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaxNumberDBName()
        {
            return "p_fax_number_c";
        }
        
        /// get help text for column
        public static string GetFaxNumberHelp()
        {
            return "Enter a Fax number for this address location (if available)";
        }
        
        /// get label of column
        public static string GetFaxNumberLabel()
        {
            return "Fax";
        }
        
        /// get character length for column
        public static short GetFaxNumberLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTelexDBName()
        {
            return "p_telex_i";
        }
        
        /// get help text for column
        public static string GetTelexHelp()
        {
            return "Enter a Telex number for this location (if available)";
        }
        
        /// get label of column
        public static string GetTelexLabel()
        {
            return "Telex";
        }
        
        /// get display format for column
        public static short GetTelexLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTelephoneNumberDBName()
        {
            return "p_telephone_number_c";
        }
        
        /// get help text for column
        public static string GetTelephoneNumberHelp()
        {
            return "Enter a Telephone number for this address (if available)";
        }
        
        /// get label of column
        public static string GetTelephoneNumberLabel()
        {
            return "Phone";
        }
        
        /// get character length for column
        public static short GetTelephoneNumberLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExtensionDBName()
        {
            return "p_extension_i";
        }
        
        /// get help text for column
        public static string GetExtensionHelp()
        {
            return "Enter the Telephone Extension (if available)";
        }
        
        /// get label of column
        public static string GetExtensionLabel()
        {
            return "Phone Extension";
        }
        
        /// get display format for column
        public static short GetExtensionLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }
        
        /// get help text for column
        public static string GetEmailAddressHelp()
        {
            return "Enter an Email address (if available)";
        }
        
        /// get label of column
        public static string GetEmailAddressLabel()
        {
            return "Email";
        }
        
        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationDetailCommentDBName()
        {
            return "p_location_detail_comment_c";
        }
        
        /// get help text for column
        public static string GetLocationDetailCommentHelp()
        {
            return "Enter any additional comments about this address location";
        }
        
        /// get label of column
        public static string GetLocationDetailCommentLabel()
        {
            return "Comments";
        }
        
        /// get character length for column
        public static short GetLocationDetailCommentLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaxExtensionDBName()
        {
            return "p_fax_extension_i";
        }
        
        /// get help text for column
        public static string GetFaxExtensionHelp()
        {
            return "Enter the Fax Extension (if available)";
        }
        
        /// get label of column
        public static string GetFaxExtensionLabel()
        {
            return "Fax Extension";
        }
        
        /// get display format for column
        public static short GetFaxExtensionLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMobileNumberDBName()
        {
            return "p_mobile_number_c";
        }
        
        /// get help text for column
        public static string GetMobileNumberHelp()
        {
            return "Enter a Mobile phone number for this address (if available)";
        }
        
        /// get label of column
        public static string GetMobileNumberLabel()
        {
            return "Mobile";
        }
        
        /// get character length for column
        public static short GetMobileNumberLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAlternateTelephoneDBName()
        {
            return "p_alternate_telephone_c";
        }
        
        /// get help text for column
        public static string GetAlternateTelephoneHelp()
        {
            return "Enter an Alternative phone number (if available)";
        }
        
        /// get label of column
        public static string GetAlternateTelephoneLabel()
        {
            return "Alternate";
        }
        
        /// get character length for column
        public static short GetAlternateTelephoneLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUrlDBName()
        {
            return "p_url_c";
        }
        
        /// get help text for column
        public static string GetUrlHelp()
        {
            return "URL for this Partner\'s Web Home Page";
        }
        
        /// get label of column
        public static string GetUrlLabel()
        {
            return "Website";
        }
        
        /// get character length for column
        public static short GetUrlLength()
        {
            return 64;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_l";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Should access to this partner location be restricted to some people?";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "Partner Location Restricted";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerLocation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_location";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Location";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_site_key_n",
                    "p_location_key_i",
                    "p_date_effective_d",
                    "p_date_good_until_d",
                    "p_location_type_c",
                    "p_send_mail_l",
                    "p_fax_number_c",
                    "p_telex_i",
                    "p_telephone_number_c",
                    "p_extension_i",
                    "p_email_address_c",
                    "p_location_detail_comment_c",
                    "p_fax_extension_i",
                    "p_mobile_number_c",
                    "p_alternate_telephone_c",
                    "p_url_c",
                    "p_restricted_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnLocationKey = this.Columns["p_location_key_i"];
            this.ColumnDateEffective = this.Columns["p_date_effective_d"];
            this.ColumnDateGoodUntil = this.Columns["p_date_good_until_d"];
            this.ColumnLocationType = this.Columns["p_location_type_c"];
            this.ColumnSendMail = this.Columns["p_send_mail_l"];
            this.ColumnFaxNumber = this.Columns["p_fax_number_c"];
            this.ColumnTelex = this.Columns["p_telex_i"];
            this.ColumnTelephoneNumber = this.Columns["p_telephone_number_c"];
            this.ColumnExtension = this.Columns["p_extension_i"];
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnLocationDetailComment = this.Columns["p_location_detail_comment_c"];
            this.ColumnFaxExtension = this.Columns["p_fax_extension_i"];
            this.ColumnMobileNumber = this.Columns["p_mobile_number_c"];
            this.ColumnAlternateTelephone = this.Columns["p_alternate_telephone_c"];
            this.ColumnUrl = this.Columns["p_url_c"];
            this.ColumnRestricted = this.Columns["p_restricted_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnSiteKey,
                    this.ColumnLocationKey};
        }
        
        /// get typed set of changes
        public PPartnerLocationTable GetChangesTyped()
        {
            return ((PPartnerLocationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerLocationRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerLocationRow ret = ((PPartnerLocationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerLocationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerLocationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_location_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_date_good_until_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_location_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_send_mail_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_fax_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_telex_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_telephone_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_extension_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_location_detail_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_fax_extension_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_mobile_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_alternate_telephone_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_url_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnSiteKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLocationKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateGoodUntil))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLocationType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnSendMail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnFaxNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnTelex))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTelephoneNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnExtension))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnEmailAddress))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnLocationDetailComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnFaxExtension))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMobileNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnAlternateTelephone))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnUrl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 128);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Links partners with locations (addresses) and has specific info about the link (e.g. phone number)
    [Serializable()]
    public class PPartnerLocationRow : System.Data.DataRow
    {
        
        private PPartnerLocationTable myTable;
        
        /// Constructor
        public PPartnerLocationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerLocationTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This is the key that tell what site created the linked location
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey) 
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }
        
        /// 
        public Int32 LocationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationKey) 
                            || (((Int32)(this[this.myTable.ColumnLocationKey])) != value)))
                {
                    this[this.myTable.ColumnLocationKey] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public System.DateTime DateGoodUntil
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateGoodUntil.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateGoodUntil) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateGoodUntil])) != value)))
                {
                    this[this.myTable.ColumnDateGoodUntil] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateGoodUntilLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateGoodUntil], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateGoodUntilHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateGoodUntil.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String LocationType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationType) 
                            || (((String)(this[this.myTable.ColumnLocationType])) != value)))
                {
                    this[this.myTable.ColumnLocationType] = value;
                }
            }
        }
        
        /// 
        public Boolean SendMail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSendMail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSendMail) 
                            || (((Boolean)(this[this.myTable.ColumnSendMail])) != value)))
                {
                    this[this.myTable.ColumnSendMail] = value;
                }
            }
        }
        
        /// 
        public String FaxNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaxNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaxNumber) 
                            || (((String)(this[this.myTable.ColumnFaxNumber])) != value)))
                {
                    this[this.myTable.ColumnFaxNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 Telex
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTelex.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTelex) 
                            || (((Int32)(this[this.myTable.ColumnTelex])) != value)))
                {
                    this[this.myTable.ColumnTelex] = value;
                }
            }
        }
        
        /// 
        public String TelephoneNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTelephoneNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTelephoneNumber) 
                            || (((String)(this[this.myTable.ColumnTelephoneNumber])) != value)))
                {
                    this[this.myTable.ColumnTelephoneNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 Extension
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtension.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtension) 
                            || (((Int32)(this[this.myTable.ColumnExtension])) != value)))
                {
                    this[this.myTable.ColumnExtension] = value;
                }
            }
        }
        
        /// 
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress) 
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }
        
        /// 
        public String LocationDetailComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationDetailComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationDetailComment) 
                            || (((String)(this[this.myTable.ColumnLocationDetailComment])) != value)))
                {
                    this[this.myTable.ColumnLocationDetailComment] = value;
                }
            }
        }
        
        /// 
        public Int32 FaxExtension
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaxExtension.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaxExtension) 
                            || (((Int32)(this[this.myTable.ColumnFaxExtension])) != value)))
                {
                    this[this.myTable.ColumnFaxExtension] = value;
                }
            }
        }
        
        /// 
        public String MobileNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMobileNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMobileNumber) 
                            || (((String)(this[this.myTable.ColumnMobileNumber])) != value)))
                {
                    this[this.myTable.ColumnMobileNumber] = value;
                }
            }
        }
        
        /// 
        public String AlternateTelephone
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAlternateTelephone.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAlternateTelephone) 
                            || (((String)(this[this.myTable.ColumnAlternateTelephone])) != value)))
                {
                    this[this.myTable.ColumnAlternateTelephone] = value;
                }
            }
        }
        
        /// 
        public String Url
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUrl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUrl) 
                            || (((String)(this[this.myTable.ColumnUrl])) != value)))
                {
                    this[this.myTable.ColumnUrl] = value;
                }
            }
        }
        
        /// Indicates whether or not the partner location has restricted access. If it does then the access will be controlled by s_group_partner_location.
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnLocationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDateEffective);
            this.SetNull(this.myTable.ColumnDateGoodUntil);
            this.SetNull(this.myTable.ColumnLocationType);
            this[this.myTable.ColumnSendMail.Ordinal] = false;
            this.SetNull(this.myTable.ColumnFaxNumber);
            this[this.myTable.ColumnTelex.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTelephoneNumber);
            this[this.myTable.ColumnExtension.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnEmailAddress);
            this.SetNull(this.myTable.ColumnLocationDetailComment);
            this[this.myTable.ColumnFaxExtension.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMobileNumber);
            this.SetNull(this.myTable.ColumnAlternateTelephone);
            this.SetNull(this.myTable.ColumnUrl);
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }
        
        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }
        
        /// test for NULL value
        public bool IsDateGoodUntilNull()
        {
            return this.IsNull(this.myTable.ColumnDateGoodUntil);
        }
        
        /// assign NULL value
        public void SetDateGoodUntilNull()
        {
            this.SetNull(this.myTable.ColumnDateGoodUntil);
        }
        
        /// test for NULL value
        public bool IsLocationTypeNull()
        {
            return this.IsNull(this.myTable.ColumnLocationType);
        }
        
        /// assign NULL value
        public void SetLocationTypeNull()
        {
            this.SetNull(this.myTable.ColumnLocationType);
        }
        
        /// test for NULL value
        public bool IsSendMailNull()
        {
            return this.IsNull(this.myTable.ColumnSendMail);
        }
        
        /// assign NULL value
        public void SetSendMailNull()
        {
            this.SetNull(this.myTable.ColumnSendMail);
        }
        
        /// test for NULL value
        public bool IsFaxNumberNull()
        {
            return this.IsNull(this.myTable.ColumnFaxNumber);
        }
        
        /// assign NULL value
        public void SetFaxNumberNull()
        {
            this.SetNull(this.myTable.ColumnFaxNumber);
        }
        
        /// test for NULL value
        public bool IsTelexNull()
        {
            return this.IsNull(this.myTable.ColumnTelex);
        }
        
        /// assign NULL value
        public void SetTelexNull()
        {
            this.SetNull(this.myTable.ColumnTelex);
        }
        
        /// test for NULL value
        public bool IsTelephoneNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTelephoneNumber);
        }
        
        /// assign NULL value
        public void SetTelephoneNumberNull()
        {
            this.SetNull(this.myTable.ColumnTelephoneNumber);
        }
        
        /// test for NULL value
        public bool IsExtensionNull()
        {
            return this.IsNull(this.myTable.ColumnExtension);
        }
        
        /// assign NULL value
        public void SetExtensionNull()
        {
            this.SetNull(this.myTable.ColumnExtension);
        }
        
        /// test for NULL value
        public bool IsEmailAddressNull()
        {
            return this.IsNull(this.myTable.ColumnEmailAddress);
        }
        
        /// assign NULL value
        public void SetEmailAddressNull()
        {
            this.SetNull(this.myTable.ColumnEmailAddress);
        }
        
        /// test for NULL value
        public bool IsLocationDetailCommentNull()
        {
            return this.IsNull(this.myTable.ColumnLocationDetailComment);
        }
        
        /// assign NULL value
        public void SetLocationDetailCommentNull()
        {
            this.SetNull(this.myTable.ColumnLocationDetailComment);
        }
        
        /// test for NULL value
        public bool IsFaxExtensionNull()
        {
            return this.IsNull(this.myTable.ColumnFaxExtension);
        }
        
        /// assign NULL value
        public void SetFaxExtensionNull()
        {
            this.SetNull(this.myTable.ColumnFaxExtension);
        }
        
        /// test for NULL value
        public bool IsMobileNumberNull()
        {
            return this.IsNull(this.myTable.ColumnMobileNumber);
        }
        
        /// assign NULL value
        public void SetMobileNumberNull()
        {
            this.SetNull(this.myTable.ColumnMobileNumber);
        }
        
        /// test for NULL value
        public bool IsAlternateTelephoneNull()
        {
            return this.IsNull(this.myTable.ColumnAlternateTelephone);
        }
        
        /// assign NULL value
        public void SetAlternateTelephoneNull()
        {
            this.SetNull(this.myTable.ColumnAlternateTelephone);
        }
        
        /// test for NULL value
        public bool IsUrlNull()
        {
            return this.IsNull(this.myTable.ColumnUrl);
        }
        
        /// assign NULL value
        public void SetUrlNull()
        {
            this.SetNull(this.myTable.ColumnUrl);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// All the different Partner attribute types will be stored in here.
    [Serializable()]
    public class PPartnerAttributeTypeTable : TTypedDataTable
    {
        
        /// Attribute Type. This can be anything really: Mobile Number, Email Addresses, etc.
        public DataColumn ColumnCode;
        
        /// Some description of what this attribute type is all about.
        public DataColumn ColumnDescription;
        
        /// Flag to indicate whether this attribute is a contact detail attrib or not. 
        public DataColumn ColumnIsContactDetail;
        
        /// Flag to indicate whether this attribute deletable by a user or not. 
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerAttributeTypeTable() : 
                base("PPartnerAttributeType")
        {
        }
        
        /// constructor
        public PPartnerAttributeTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerAttributeTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerAttributeTypeRow this[int i]
        {
            get
            {
                return ((PPartnerAttributeTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "Attribute Type. This can be anything really: Mobile Number, Email Addresses, etc." +
                "";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Partner Attribute Code";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Some description of what this attribute type is all about.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Partner Type Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIsContactDetailDBName()
        {
            return "p_is_contact_detail_l";
        }
        
        /// get help text for column
        public static string GetIsContactDetailHelp()
        {
            return "Flag to indicate whether this attribute is a contact detail attrib or not. ";
        }
        
        /// get label of column
        public static string GetIsContactDetailLabel()
        {
            return "Is Contact Detail";
        }
        
        /// get display format for column
        public static short GetIsContactDetailLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "Flag to indicate whether this attribute deletable by a user or not. ";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Is Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerAttributeType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_attribute_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "p_partner_attribute_type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_code_c",
                    "p_description_c",
                    "p_is_contact_detail_l",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnIsContactDetail = this.Columns["p_is_contact_detail_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PPartnerAttributeTypeTable GetChangesTyped()
        {
            return ((PPartnerAttributeTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerAttributeTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerAttributeTypeRow ret = ((PPartnerAttributeTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerAttributeTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerAttributeTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_is_contact_detail_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnIsContactDetail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// All the different Partner attribute types will be stored in here.
    [Serializable()]
    public class PPartnerAttributeTypeRow : System.Data.DataRow
    {
        
        private PPartnerAttributeTypeTable myTable;
        
        /// Constructor
        public PPartnerAttributeTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerAttributeTypeTable)(this.Table));
        }
        
        /// Attribute Type. This can be anything really: Mobile Number, Email Addresses, etc.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// Some description of what this attribute type is all about.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Flag to indicate whether this attribute is a contact detail attrib or not. 
        public Boolean IsContactDetail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIsContactDetail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIsContactDetail) 
                            || (((Boolean)(this[this.myTable.ColumnIsContactDetail])) != value)))
                {
                    this[this.myTable.ColumnIsContactDetail] = value;
                }
            }
        }
        
        /// Flag to indicate whether this attribute deletable by a user or not. 
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnIsContactDetail);
            this[this.myTable.ColumnDeletable.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsIsContactDetailNull()
        {
            return this.IsNull(this.myTable.ColumnIsContactDetail);
        }
        
        /// assign NULL value
        public void SetIsContactDetailNull()
        {
            this.SetNull(this.myTable.ColumnIsContactDetail);
        }
        
        /// test for NULL value
        public bool IsDeletableNull()
        {
            return this.IsNull(this.myTable.ColumnDeletable);
        }
        
        /// assign NULL value
        public void SetDeletableNull()
        {
            this.SetNull(this.myTable.ColumnDeletable);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Mainly introduced for contact details like email addresses and mobile phone numbers, but can be used for any attribute you might want to save for a partner.
    [Serializable()]
    public class PPartnerAttributeTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// The attribute type that is assigned here.
        public DataColumn ColumnCode;
        
        /// A normal sequence so that each partner can have more than one value for any particular attribute type.
        public DataColumn ColumnSequence;
        
        /// The value of the attribute.
        public DataColumn ColumnValue;
        
        /// Any comment to explain this attribute value, or some additional info that may be required.
        public DataColumn ColumnComment;
        
        /// A date when this attribute is valid from.
        public DataColumn ColumnValidFrom;
        
        /// When this attribute value is valid until.
        public DataColumn ColumnValidTo;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerAttributeTable() : 
                base("PPartnerAttribute")
        {
        }
        
        /// constructor
        public PPartnerAttributeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerAttributeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerAttributeRow this[int i]
        {
            get
            {
                return ((PPartnerAttributeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "The attribute type that is assigned here.";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Partner Attribute Code";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSequenceDBName()
        {
            return "p_sequence_i";
        }
        
        /// get help text for column
        public static string GetSequenceHelp()
        {
            return "A normal sequence so that each partner can have more than one value for any parti" +
                "cular attribute type.";
        }
        
        /// get label of column
        public static string GetSequenceLabel()
        {
            return "Sequence";
        }
        
        /// get display format for column
        public static short GetSequenceLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueDBName()
        {
            return "p_value_c";
        }
        
        /// get help text for column
        public static string GetValueHelp()
        {
            return "The value of the attribute.";
        }
        
        /// get label of column
        public static string GetValueLabel()
        {
            return "Attribute Value";
        }
        
        /// get character length for column
        public static short GetValueLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Any comment to explain this attribute value, or some additional info that may be " +
                "required.";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidFromDBName()
        {
            return "p_valid_from_d";
        }
        
        /// get help text for column
        public static string GetValidFromHelp()
        {
            return "A date when this attribute is valid from.";
        }
        
        /// get label of column
        public static string GetValidFromLabel()
        {
            return "Valid From";
        }
        
        /// get display format for column
        public static short GetValidFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidToDBName()
        {
            return "p_valid_to_d";
        }
        
        /// get help text for column
        public static string GetValidToHelp()
        {
            return "When this attribute value is valid until.";
        }
        
        /// get label of column
        public static string GetValidToLabel()
        {
            return "Valid To";
        }
        
        /// get display format for column
        public static short GetValidToLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerAttribute";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_attribute";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Attribute";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_code_c",
                    "p_sequence_i",
                    "p_value_c",
                    "p_comment_c",
                    "p_valid_from_d",
                    "p_valid_to_d",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnSequence = this.Columns["p_sequence_i"];
            this.ColumnValue = this.Columns["p_value_c"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnValidFrom = this.Columns["p_valid_from_d"];
            this.ColumnValidTo = this.Columns["p_valid_to_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnCode,
                    this.ColumnSequence};
        }
        
        /// get typed set of changes
        public PPartnerAttributeTable GetChangesTyped()
        {
            return ((PPartnerAttributeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerAttributeRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerAttributeRow ret = ((PPartnerAttributeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerAttributeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerAttributeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_to_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnValidFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnValidTo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Mainly introduced for contact details like email addresses and mobile phone numbers, but can be used for any attribute you might want to save for a partner.
    [Serializable()]
    public class PPartnerAttributeRow : System.Data.DataRow
    {
        
        private PPartnerAttributeTable myTable;
        
        /// Constructor
        public PPartnerAttributeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerAttributeTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The attribute type that is assigned here.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// A normal sequence so that each partner can have more than one value for any particular attribute type.
        public Int32 Sequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSequence) 
                            || (((Int32)(this[this.myTable.ColumnSequence])) != value)))
                {
                    this[this.myTable.ColumnSequence] = value;
                }
            }
        }
        
        /// The value of the attribute.
        public String Value
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValue) 
                            || (((String)(this[this.myTable.ColumnValue])) != value)))
                {
                    this[this.myTable.ColumnValue] = value;
                }
            }
        }
        
        /// Any comment to explain this attribute value, or some additional info that may be required.
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// A date when this attribute is valid from.
        public System.DateTime ValidFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidFrom])) != value)))
                {
                    this[this.myTable.ColumnValidFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// When this attribute value is valid until.
        public System.DateTime ValidTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidTo) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidTo])) != value)))
                {
                    this[this.myTable.ColumnValidTo] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidToLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidTo], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidToHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidTo.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCode);
            this[this.myTable.ColumnSequence.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnValue);
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnValidFrom);
            this.SetNull(this.myTable.ColumnValidTo);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsValidFromNull()
        {
            return this.IsNull(this.myTable.ColumnValidFrom);
        }
        
        /// assign NULL value
        public void SetValidFromNull()
        {
            this.SetNull(this.myTable.ColumnValidFrom);
        }
        
        /// test for NULL value
        public bool IsValidToNull()
        {
            return this.IsNull(this.myTable.ColumnValidTo);
        }
        
        /// assign NULL value
        public void SetValidToNull()
        {
            this.SetNull(this.myTable.ColumnValidTo);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// General information about the unit such as unit type and entry conference. 
    [Serializable()]
    public class UUnitTypeTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnUnitTypeCode;
        
        /// 
        public DataColumn ColumnUnitTypeName;
        
        /// This defines if the type code can be deleted.
        ///This can only be updated by the system manager.
        public DataColumn ColumnTypeDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public UUnitTypeTable() : 
                base("UUnitType")
        {
        }
        
        /// constructor
        public UUnitTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public UUnitTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public UUnitTypeRow this[int i]
        {
            get
            {
                return ((UUnitTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitTypeCodeDBName()
        {
            return "u_unit_type_code_c";
        }
        
        /// get help text for column
        public static string GetUnitTypeCodeHelp()
        {
            return "Enter the unit type";
        }
        
        /// get label of column
        public static string GetUnitTypeCodeLabel()
        {
            return "Unit Type";
        }
        
        /// get character length for column
        public static short GetUnitTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitTypeNameDBName()
        {
            return "u_unit_type_name_c";
        }
        
        /// get help text for column
        public static string GetUnitTypeNameHelp()
        {
            return "Enter the name of the unit";
        }
        
        /// get label of column
        public static string GetUnitTypeNameLabel()
        {
            return "Unit Type Name";
        }
        
        /// get character length for column
        public static short GetUnitTypeNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDeletableDBName()
        {
            return "p_type_deletable_l";
        }
        
        /// get help text for column
        public static string GetTypeDeletableHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetTypeDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetTypeDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "UUnitType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "u_unit_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Unit Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "u_unit_type_code_c",
                    "u_unit_type_name_c",
                    "p_type_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUnitTypeCode = this.Columns["u_unit_type_code_c"];
            this.ColumnUnitTypeName = this.Columns["u_unit_type_name_c"];
            this.ColumnTypeDeletable = this.Columns["p_type_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUnitTypeCode};
        }
        
        /// get typed set of changes
        public UUnitTypeTable GetChangesTyped()
        {
            return ((UUnitTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public UUnitTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            UUnitTypeRow ret = ((UUnitTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public UUnitTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new UUnitTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("u_unit_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("u_unit_type_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_type_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUnitTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnUnitTypeName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnTypeDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// General information about the unit such as unit type and entry conference. 
    [Serializable()]
    public class UUnitTypeRow : System.Data.DataRow
    {
        
        private UUnitTypeTable myTable;
        
        /// Constructor
        public UUnitTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((UUnitTypeTable)(this.Table));
        }
        
        /// 
        public String UnitTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitTypeCode) 
                            || (((String)(this[this.myTable.ColumnUnitTypeCode])) != value)))
                {
                    this[this.myTable.ColumnUnitTypeCode] = value;
                }
            }
        }
        
        /// 
        public String UnitTypeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitTypeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitTypeName) 
                            || (((String)(this[this.myTable.ColumnUnitTypeName])) != value)))
                {
                    this[this.myTable.ColumnUnitTypeName] = value;
                }
            }
        }
        
        /// This defines if the type code can be deleted.
        ///This can only be updated by the system manager.
        public Boolean TypeDeletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnTypeDeletable])) != value)))
                {
                    this[this.myTable.ColumnTypeDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUnitTypeCode);
            this.SetNull(this.myTable.ColumnUnitTypeName);
            this[this.myTable.ColumnTypeDeletable.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details of a unit.  This is an organizational unit such as an om field, department, local cost center, etc.
    [Serializable()]
    public class PUnitTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnUnitName;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// 
        public DataColumn ColumnUnitTypeCode;
        
        /// Indicates the minimum number of staff required.
        ///(Computed from um_jobs.)
        public DataColumn ColumnMinimum;
        
        /// Indicates the maximum number of staff required.
        ///(Computed from um_jobs.)
        public DataColumn ColumnMaximum;
        
        /// Indicates the present number on staff.
        ///(Computed from um_jobs.)
        public DataColumn ColumnPresent;
        
        /// Number of part-timers acceptable.
        ///(Computed from um_jobs.)
        public DataColumn ColumnPartTimers;
        
        /// todo
        public DataColumn ColumnXyzTbdCode;
        
        /// This is the cost of the Xyz_tbd/Event
        public DataColumn ColumnXyzTbdCost;
        
        /// This is the currency that is used for the xyz_tbd cost.
        public DataColumn ColumnXyzTbdCostCurrencyCode;
        
        /// This is a code which identifies a country.
        ///It is the ISO code
        public DataColumn ColumnCountryCode;
        
        /// The partner key of the office that will be this field's primary office..
        public DataColumn ColumnPrimaryOffice;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PUnitTable() : 
                base("PUnit")
        {
        }
        
        /// constructor
        public PUnitTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PUnitTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PUnitRow this[int i]
        {
            get
            {
                return ((PUnitRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitNameDBName()
        {
            return "p_unit_name_c";
        }
        
        /// get help text for column
        public static string GetUnitNameHelp()
        {
            return "Enter the name of the unit";
        }
        
        /// get label of column
        public static string GetUnitNameLabel()
        {
            return "Unit Name";
        }
        
        /// get character length for column
        public static short GetUnitNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Enter any comments";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitTypeCodeDBName()
        {
            return "u_unit_type_code_c";
        }
        
        /// get help text for column
        public static string GetUnitTypeCodeHelp()
        {
            return "Enter the unit type";
        }
        
        /// get label of column
        public static string GetUnitTypeCodeLabel()
        {
            return "Unit Type";
        }
        
        /// get character length for column
        public static short GetUnitTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMinimumDBName()
        {
            return "um_minimum_i";
        }
        
        /// get help text for column
        public static string GetMinimumHelp()
        {
            return "Enter the minimum number of staff required.";
        }
        
        /// get label of column
        public static string GetMinimumLabel()
        {
            return "Minimum Staff";
        }
        
        /// get display format for column
        public static short GetMinimumLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaximumDBName()
        {
            return "um_maximum_i";
        }
        
        /// get help text for column
        public static string GetMaximumHelp()
        {
            return "Enter the maximum number of staff required.";
        }
        
        /// get label of column
        public static string GetMaximumLabel()
        {
            return "Maximum Staff";
        }
        
        /// get display format for column
        public static short GetMaximumLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPresentDBName()
        {
            return "um_present_i";
        }
        
        /// get help text for column
        public static string GetPresentHelp()
        {
            return "Enter the present number on staff.";
        }
        
        /// get label of column
        public static string GetPresentLabel()
        {
            return "Present Staff";
        }
        
        /// get display format for column
        public static short GetPresentLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartTimersDBName()
        {
            return "um_part_timers_i";
        }
        
        /// get help text for column
        public static string GetPartTimersHelp()
        {
            return "Enter the number of part_timers acceptable.";
        }
        
        /// get label of column
        public static string GetPartTimersLabel()
        {
            return "Part-Timers";
        }
        
        /// get display format for column
        public static short GetPartTimersLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetXyzTbdCodeDBName()
        {
            return "p_xyz_tbd_code_c";
        }
        
        /// get help text for column
        public static string GetXyzTbdCodeHelp()
        {
            return "todo";
        }
        
        /// get label of column
        public static string GetXyzTbdCodeLabel()
        {
            return "Xyz_tbd Code";
        }
        
        /// get character length for column
        public static short GetXyzTbdCodeLength()
        {
            return 13;
        }
        
        /// get the name of the field in the database for this column
        public static string GetXyzTbdCostDBName()
        {
            return "p_xyz_tbd_cost_n";
        }
        
        /// get help text for column
        public static string GetXyzTbdCostHelp()
        {
            return "Enter the cost of this xyz_tbd";
        }
        
        /// get label of column
        public static string GetXyzTbdCostLabel()
        {
            return "Xyz_tbd Cost";
        }
        
        /// get display format for column
        public static short GetXyzTbdCostLength()
        {
            return 14;
        }
        
        /// get the name of the field in the database for this column
        public static string GetXyzTbdCostCurrencyCodeDBName()
        {
            return "p_xyz_tbd_cost_currency_code_c";
        }
        
        /// get help text for column
        public static string GetXyzTbdCostCurrencyCodeHelp()
        {
            return "Currency used for the xyz_tbd cost";
        }
        
        /// get label of column
        public static string GetXyzTbdCostCurrencyCodeLabel()
        {
            return "Currency Code for Xyz_tbd Cost";
        }
        
        /// get character length for column
        public static short GetXyzTbdCostCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCountryCodeDBName()
        {
            return "p_country_code_c";
        }
        
        /// get help text for column
        public static string GetCountryCodeHelp()
        {
            return "Country in which this Unit is found";
        }
        
        /// get label of column
        public static string GetCountryCodeLabel()
        {
            return "Country Code";
        }
        
        /// get character length for column
        public static short GetCountryCodeLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryOfficeDBName()
        {
            return "p_primary_office_n";
        }
        
        /// get help text for column
        public static string GetPrimaryOfficeHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPrimaryOfficeLabel()
        {
            return "Primary Office Key";
        }
        
        /// get display format for column
        public static short GetPrimaryOfficeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PUnit";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_unit";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Unit";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_unit_name_c",
                    "p_description_c",
                    "u_unit_type_code_c",
                    "um_minimum_i",
                    "um_maximum_i",
                    "um_present_i",
                    "um_part_timers_i",
                    "p_xyz_tbd_code_c",
                    "p_xyz_tbd_cost_n",
                    "p_xyz_tbd_cost_currency_code_c",
                    "p_country_code_c",
                    "p_primary_office_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnUnitName = this.Columns["p_unit_name_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnUnitTypeCode = this.Columns["u_unit_type_code_c"];
            this.ColumnMinimum = this.Columns["um_minimum_i"];
            this.ColumnMaximum = this.Columns["um_maximum_i"];
            this.ColumnPresent = this.Columns["um_present_i"];
            this.ColumnPartTimers = this.Columns["um_part_timers_i"];
            this.ColumnXyzTbdCode = this.Columns["p_xyz_tbd_code_c"];
            this.ColumnXyzTbdCost = this.Columns["p_xyz_tbd_cost_n"];
            this.ColumnXyzTbdCostCurrencyCode = this.Columns["p_xyz_tbd_cost_currency_code_c"];
            this.ColumnCountryCode = this.Columns["p_country_code_c"];
            this.ColumnPrimaryOffice = this.Columns["p_primary_office_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PUnitTable GetChangesTyped()
        {
            return ((PUnitTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PUnitRow NewRowTyped(bool AWithDefaultValues)
        {
            PUnitRow ret = ((PUnitRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PUnitRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PUnitRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_unit_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("u_unit_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("um_minimum_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("um_maximum_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("um_present_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("um_part_timers_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_xyz_tbd_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_xyz_tbd_cost_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("p_xyz_tbd_cost_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_country_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_primary_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnUnitName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnUnitTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnMinimum))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMaximum))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPresent))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPartTimers))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnXyzTbdCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 26);
            }
            if ((ACol == ColumnXyzTbdCost))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnXyzTbdCostCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCountryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 8);
            }
            if ((ACol == ColumnPrimaryOffice))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details of a unit.  This is an organizational unit such as an om field, department, local cost center, etc.
    [Serializable()]
    public class PUnitRow : System.Data.DataRow
    {
        
        private PUnitTable myTable;
        
        /// Constructor
        public PUnitRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PUnitTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String UnitName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitName) 
                            || (((String)(this[this.myTable.ColumnUnitName])) != value)))
                {
                    this[this.myTable.ColumnUnitName] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// 
        public String UnitTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitTypeCode) 
                            || (((String)(this[this.myTable.ColumnUnitTypeCode])) != value)))
                {
                    this[this.myTable.ColumnUnitTypeCode] = value;
                }
            }
        }
        
        /// Indicates the minimum number of staff required.
        ///(Computed from um_jobs.)
        public Int32 Minimum
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinimum.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinimum) 
                            || (((Int32)(this[this.myTable.ColumnMinimum])) != value)))
                {
                    this[this.myTable.ColumnMinimum] = value;
                }
            }
        }
        
        /// Indicates the maximum number of staff required.
        ///(Computed from um_jobs.)
        public Int32 Maximum
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaximum.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaximum) 
                            || (((Int32)(this[this.myTable.ColumnMaximum])) != value)))
                {
                    this[this.myTable.ColumnMaximum] = value;
                }
            }
        }
        
        /// Indicates the present number on staff.
        ///(Computed from um_jobs.)
        public Int32 Present
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPresent.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPresent) 
                            || (((Int32)(this[this.myTable.ColumnPresent])) != value)))
                {
                    this[this.myTable.ColumnPresent] = value;
                }
            }
        }
        
        /// Number of part-timers acceptable.
        ///(Computed from um_jobs.)
        public Int32 PartTimers
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartTimers.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartTimers) 
                            || (((Int32)(this[this.myTable.ColumnPartTimers])) != value)))
                {
                    this[this.myTable.ColumnPartTimers] = value;
                }
            }
        }
        
        /// todo
        public String XyzTbdCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnXyzTbdCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnXyzTbdCode) 
                            || (((String)(this[this.myTable.ColumnXyzTbdCode])) != value)))
                {
                    this[this.myTable.ColumnXyzTbdCode] = value;
                }
            }
        }
        
        /// This is the cost of the Xyz_tbd/Event
        public Double XyzTbdCost
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnXyzTbdCost.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnXyzTbdCost) 
                            || (((Double)(this[this.myTable.ColumnXyzTbdCost])) != value)))
                {
                    this[this.myTable.ColumnXyzTbdCost] = value;
                }
            }
        }
        
        /// This is the currency that is used for the xyz_tbd cost.
        public String XyzTbdCostCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnXyzTbdCostCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnXyzTbdCostCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnXyzTbdCostCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnXyzTbdCostCurrencyCode] = value;
                }
            }
        }
        
        /// This is a code which identifies a country.
        ///It is the ISO code
        public String CountryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryCode) 
                            || (((String)(this[this.myTable.ColumnCountryCode])) != value)))
                {
                    this[this.myTable.ColumnCountryCode] = value;
                }
            }
        }
        
        /// The partner key of the office that will be this field's primary office..
        public Int64 PrimaryOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryOffice) 
                            || (((Int64)(this[this.myTable.ColumnPrimaryOffice])) != value)))
                {
                    this[this.myTable.ColumnPrimaryOffice] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnUnitName);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnUnitTypeCode);
            this[this.myTable.ColumnMinimum.Ordinal] = 0;
            this[this.myTable.ColumnMaximum.Ordinal] = 0;
            this[this.myTable.ColumnPresent.Ordinal] = 0;
            this[this.myTable.ColumnPartTimers.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnXyzTbdCode);
            this[this.myTable.ColumnXyzTbdCost.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnXyzTbdCostCurrencyCode);
            this[this.myTable.ColumnCountryCode.Ordinal] = "99";
            this[this.myTable.ColumnPrimaryOffice.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsUnitNameNull()
        {
            return this.IsNull(this.myTable.ColumnUnitName);
        }
        
        /// assign NULL value
        public void SetUnitNameNull()
        {
            this.SetNull(this.myTable.ColumnUnitName);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsUnitTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnUnitTypeCode);
        }
        
        /// assign NULL value
        public void SetUnitTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnUnitTypeCode);
        }
        
        /// test for NULL value
        public bool IsMinimumNull()
        {
            return this.IsNull(this.myTable.ColumnMinimum);
        }
        
        /// assign NULL value
        public void SetMinimumNull()
        {
            this.SetNull(this.myTable.ColumnMinimum);
        }
        
        /// test for NULL value
        public bool IsMaximumNull()
        {
            return this.IsNull(this.myTable.ColumnMaximum);
        }
        
        /// assign NULL value
        public void SetMaximumNull()
        {
            this.SetNull(this.myTable.ColumnMaximum);
        }
        
        /// test for NULL value
        public bool IsPresentNull()
        {
            return this.IsNull(this.myTable.ColumnPresent);
        }
        
        /// assign NULL value
        public void SetPresentNull()
        {
            this.SetNull(this.myTable.ColumnPresent);
        }
        
        /// test for NULL value
        public bool IsPartTimersNull()
        {
            return this.IsNull(this.myTable.ColumnPartTimers);
        }
        
        /// assign NULL value
        public void SetPartTimersNull()
        {
            this.SetNull(this.myTable.ColumnPartTimers);
        }
        
        /// test for NULL value
        public bool IsXyzTbdCodeNull()
        {
            return this.IsNull(this.myTable.ColumnXyzTbdCode);
        }
        
        /// assign NULL value
        public void SetXyzTbdCodeNull()
        {
            this.SetNull(this.myTable.ColumnXyzTbdCode);
        }
        
        /// test for NULL value
        public bool IsXyzTbdCostCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnXyzTbdCostCurrencyCode);
        }
        
        /// assign NULL value
        public void SetXyzTbdCostCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnXyzTbdCostCurrencyCode);
        }
        
        /// test for NULL value
        public bool IsCountryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCountryCode);
        }
        
        /// assign NULL value
        public void SetCountryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCountryCode);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This contains parent/child relationships.
    [Serializable()]
    public class UmUnitStructureTable : TTypedDataTable
    {
        
        /// This is an alias of the partner key. This is used to identify parent-child relationships. It consists of the fund id followed 
        ///by a computer generated six digit number.
        public DataColumn ColumnParentUnitKey;
        
        /// This is an alias of the partner key. This is used to identify parent-child relationships. It consists of the fund id followed 
        ///by a computer generated six digit number.
        public DataColumn ColumnChildUnitKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public UmUnitStructureTable() : 
                base("UmUnitStructure")
        {
        }
        
        /// constructor
        public UmUnitStructureTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public UmUnitStructureTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public UmUnitStructureRow this[int i]
        {
            get
            {
                return ((UmUnitStructureRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetParentUnitKeyDBName()
        {
            return "um_parent_unit_key_n";
        }
        
        /// get help text for column
        public static string GetParentUnitKeyHelp()
        {
            return "Enter the partner key of the parent.";
        }
        
        /// get label of column
        public static string GetParentUnitKeyLabel()
        {
            return "Parent Unit Key";
        }
        
        /// get display format for column
        public static short GetParentUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChildUnitKeyDBName()
        {
            return "um_child_unit_key_n";
        }
        
        /// get help text for column
        public static string GetChildUnitKeyHelp()
        {
            return "Enter the partner key of the child.";
        }
        
        /// get label of column
        public static string GetChildUnitKeyLabel()
        {
            return "Child Unit Key";
        }
        
        /// get display format for column
        public static short GetChildUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "UmUnitStructure";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "um_unit_structure";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Unit Structure";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "um_parent_unit_key_n",
                    "um_child_unit_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnParentUnitKey = this.Columns["um_parent_unit_key_n"];
            this.ColumnChildUnitKey = this.Columns["um_child_unit_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnParentUnitKey,
                    this.ColumnChildUnitKey};
        }
        
        /// get typed set of changes
        public UmUnitStructureTable GetChangesTyped()
        {
            return ((UmUnitStructureTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public UmUnitStructureRow NewRowTyped(bool AWithDefaultValues)
        {
            UmUnitStructureRow ret = ((UmUnitStructureRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public UmUnitStructureRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new UmUnitStructureRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("um_parent_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("um_child_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnParentUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnChildUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This contains parent/child relationships.
    [Serializable()]
    public class UmUnitStructureRow : System.Data.DataRow
    {
        
        private UmUnitStructureTable myTable;
        
        /// Constructor
        public UmUnitStructureRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((UmUnitStructureTable)(this.Table));
        }
        
        /// This is an alias of the partner key. This is used to identify parent-child relationships. It consists of the fund id followed 
        ///by a computer generated six digit number.
        public Int64 ParentUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnParentUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnParentUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnParentUnitKey])) != value)))
                {
                    this[this.myTable.ColumnParentUnitKey] = value;
                }
            }
        }
        
        /// This is an alias of the partner key. This is used to identify parent-child relationships. It consists of the fund id followed 
        ///by a computer generated six digit number.
        public Int64 ChildUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChildUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChildUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnChildUnitKey])) != value)))
                {
                    this[this.myTable.ColumnChildUnitKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnParentUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnChildUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Contains details about a family in Partnership with us.  May have P_Person records linked to it.
    [Serializable()]
    public class PFamilyTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// Flag is set if there are family members with their own records in the p_person table. IMPORTANT: Don't rely on this flag anymore but determine this state on-the-fly! Reason: The value of this field isn't maintained reliably any more and the field will be removed in a future version of the DB!
        public DataColumn ColumnFamilyMembers;
        
        /// How the family is to be addressed
        public DataColumn ColumnTitle;
        
        /// 
        public DataColumn ColumnFirstName;
        
        /// 
        public DataColumn ColumnFamilyName;
        
        /// Flag is set if there are different surnames entered for husband and wife
        public DataColumn ColumnDifferentSurnames;
        
        /// This is the partner key of the field in which the partner (should be a Worker or ExWorker is serving.
        public DataColumn ColumnFieldKey;
        
        /// 
        public DataColumn ColumnMaritalStatus;
        
        /// 
        public DataColumn ColumnMaritalStatusSince;
        
        /// 
        public DataColumn ColumnMaritalStatusComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFamilyTable() : 
                base("PFamily")
        {
        }
        
        /// constructor
        public PFamilyTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFamilyTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFamilyRow this[int i]
        {
            get
            {
                return ((PFamilyRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFamilyMembersDBName()
        {
            return "p_family_members_l";
        }
        
        /// get help text for column
        public static string GetFamilyMembersHelp()
        {
            return @"Flag is set if there are family members with their own records in the p_person table. IMPORTANT: Don't rely on this flag anymore but determine this state on-the-fly! Reason: The value of this field isn't maintained reliably any more and the field will be removed in a future version of the DB!";
        }
        
        /// get label of column
        public static string GetFamilyMembersLabel()
        {
            return "p_family_members_l";
        }
        
        /// get display format for column
        public static short GetFamilyMembersLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "p_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "e.g. Family, Mr & Mrs, Herr und Frau";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "p_first_name_c";
        }
        
        /// get help text for column
        public static string GetFirstNameHelp()
        {
            return "Enter the person\'s full first name";
        }
        
        /// get label of column
        public static string GetFirstNameLabel()
        {
            return "First Name";
        }
        
        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 48;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFamilyNameDBName()
        {
            return "p_family_name_c";
        }
        
        /// get help text for column
        public static string GetFamilyNameHelp()
        {
            return "Enter a Last Name/Surname/Family Name";
        }
        
        /// get label of column
        public static string GetFamilyNameLabel()
        {
            return "Family Name";
        }
        
        /// get character length for column
        public static short GetFamilyNameLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDifferentSurnamesDBName()
        {
            return "p_different_surnames_l";
        }
        
        /// get help text for column
        public static string GetDifferentSurnamesHelp()
        {
            return "Flag is set if there are different surnames entered for husband and wife";
        }
        
        /// get label of column
        public static string GetDifferentSurnamesLabel()
        {
            return "p_different_surnames_l";
        }
        
        /// get display format for column
        public static short GetDifferentSurnamesLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldKeyDBName()
        {
            return "p_field_key_n";
        }
        
        /// get help text for column
        public static string GetFieldKeyHelp()
        {
            return "Partner key for the partner\'s current field";
        }
        
        /// get label of column
        public static string GetFieldKeyLabel()
        {
            return "Field Key";
        }
        
        /// get display format for column
        public static short GetFieldKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusDBName()
        {
            return "p_marital_status_c";
        }
        
        /// get help text for column
        public static string GetMaritalStatusHelp()
        {
            return "Select marital status";
        }
        
        /// get label of column
        public static string GetMaritalStatusLabel()
        {
            return "Marital Status";
        }
        
        /// get character length for column
        public static short GetMaritalStatusLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusSinceDBName()
        {
            return "p_marital_status_since_d";
        }
        
        /// get help text for column
        public static string GetMaritalStatusSinceHelp()
        {
            return "Date from which the marital status is valid";
        }
        
        /// get label of column
        public static string GetMaritalStatusSinceLabel()
        {
            return "Since";
        }
        
        /// get display format for column
        public static short GetMaritalStatusSinceLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusCommentDBName()
        {
            return "p_marital_status_comment_c";
        }
        
        /// get help text for column
        public static string GetMaritalStatusCommentHelp()
        {
            return "Enter a comment for the marital status";
        }
        
        /// get label of column
        public static string GetMaritalStatusCommentLabel()
        {
            return "Marital Status Comment";
        }
        
        /// get character length for column
        public static short GetMaritalStatusCommentLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFamily";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_family";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Family";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_family_members_l",
                    "p_title_c",
                    "p_first_name_c",
                    "p_family_name_c",
                    "p_different_surnames_l",
                    "p_field_key_n",
                    "p_marital_status_c",
                    "p_marital_status_since_d",
                    "p_marital_status_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnFamilyMembers = this.Columns["p_family_members_l"];
            this.ColumnTitle = this.Columns["p_title_c"];
            this.ColumnFirstName = this.Columns["p_first_name_c"];
            this.ColumnFamilyName = this.Columns["p_family_name_c"];
            this.ColumnDifferentSurnames = this.Columns["p_different_surnames_l"];
            this.ColumnFieldKey = this.Columns["p_field_key_n"];
            this.ColumnMaritalStatus = this.Columns["p_marital_status_c"];
            this.ColumnMaritalStatusSince = this.Columns["p_marital_status_since_d"];
            this.ColumnMaritalStatusComment = this.Columns["p_marital_status_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PFamilyTable GetChangesTyped()
        {
            return ((PFamilyTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFamilyRow NewRowTyped(bool AWithDefaultValues)
        {
            PFamilyRow ret = ((PFamilyRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFamilyRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFamilyRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_family_members_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_family_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_different_surnames_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_field_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_since_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFamilyMembers))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnFirstName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 96);
            }
            if ((ACol == ColumnFamilyName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnDifferentSurnames))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnFieldKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnMaritalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 4);
            }
            if ((ACol == ColumnMaritalStatusSince))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnMaritalStatusComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Contains details about a family in Partnership with us.  May have P_Person records linked to it.
    [Serializable()]
    public class PFamilyRow : System.Data.DataRow
    {
        
        private PFamilyTable myTable;
        
        /// Constructor
        public PFamilyRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFamilyTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Flag is set if there are family members with their own records in the p_person table. IMPORTANT: Don't rely on this flag anymore but determine this state on-the-fly! Reason: The value of this field isn't maintained reliably any more and the field will be removed in a future version of the DB!
        public Boolean FamilyMembers
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFamilyMembers.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFamilyMembers) 
                            || (((Boolean)(this[this.myTable.ColumnFamilyMembers])) != value)))
                {
                    this[this.myTable.ColumnFamilyMembers] = value;
                }
            }
        }
        
        /// How the family is to be addressed
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// 
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName) 
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }
        
        /// 
        public String FamilyName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFamilyName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFamilyName) 
                            || (((String)(this[this.myTable.ColumnFamilyName])) != value)))
                {
                    this[this.myTable.ColumnFamilyName] = value;
                }
            }
        }
        
        /// Flag is set if there are different surnames entered for husband and wife
        public Boolean DifferentSurnames
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDifferentSurnames.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDifferentSurnames) 
                            || (((Boolean)(this[this.myTable.ColumnDifferentSurnames])) != value)))
                {
                    this[this.myTable.ColumnDifferentSurnames] = value;
                }
            }
        }
        
        /// This is the partner key of the field in which the partner (should be a Worker or ExWorker is serving.
        public Int64 FieldKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldKey])) != value)))
                {
                    this[this.myTable.ColumnFieldKey] = value;
                }
            }
        }
        
        /// 
        public String MaritalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatus) 
                            || (((String)(this[this.myTable.ColumnMaritalStatus])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatus] = value;
                }
            }
        }
        
        /// 
        public System.DateTime MaritalStatusSince
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatusSince.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatusSince) 
                            || (((System.DateTime)(this[this.myTable.ColumnMaritalStatusSince])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatusSince] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime MaritalStatusSinceLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMaritalStatusSince], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime MaritalStatusSinceHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMaritalStatusSince.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String MaritalStatusComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatusComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatusComment) 
                            || (((String)(this[this.myTable.ColumnMaritalStatusComment])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatusComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnFamilyMembers.Ordinal] = false;
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnFamilyName);
            this[this.myTable.ColumnDifferentSurnames.Ordinal] = false;
            this.SetNull(this.myTable.ColumnFieldKey);
            this[this.myTable.ColumnMaritalStatus.Ordinal] = "U";
            this.SetNull(this.myTable.ColumnMaritalStatusSince);
            this.SetNull(this.myTable.ColumnMaritalStatusComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFamilyMembersNull()
        {
            return this.IsNull(this.myTable.ColumnFamilyMembers);
        }
        
        /// assign NULL value
        public void SetFamilyMembersNull()
        {
            this.SetNull(this.myTable.ColumnFamilyMembers);
        }
        
        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }
        
        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }
        
        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }
        
        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }
        
        /// test for NULL value
        public bool IsFamilyNameNull()
        {
            return this.IsNull(this.myTable.ColumnFamilyName);
        }
        
        /// assign NULL value
        public void SetFamilyNameNull()
        {
            this.SetNull(this.myTable.ColumnFamilyName);
        }
        
        /// test for NULL value
        public bool IsDifferentSurnamesNull()
        {
            return this.IsNull(this.myTable.ColumnDifferentSurnames);
        }
        
        /// assign NULL value
        public void SetDifferentSurnamesNull()
        {
            this.SetNull(this.myTable.ColumnDifferentSurnames);
        }
        
        /// test for NULL value
        public bool IsFieldKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFieldKey);
        }
        
        /// assign NULL value
        public void SetFieldKeyNull()
        {
            this.SetNull(this.myTable.ColumnFieldKey);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatus);
        }
        
        /// assign NULL value
        public void SetMaritalStatusNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatus);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusSinceNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatusSince);
        }
        
        /// assign NULL value
        public void SetMaritalStatusSinceNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatusSince);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusCommentNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatusComment);
        }
        
        /// assign NULL value
        public void SetMaritalStatusCommentNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatusComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table contains the codes indicating someones marital status.
    [Serializable()]
    public class PtMaritalStatusTable : TTypedDataTable
    {
        
        /// This code indicates the different marital statuses.
        public DataColumn ColumnCode;
        
        /// This describes the marital statuses.
        public DataColumn ColumnDescription;
        
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnAssignableFlag;
        
        /// Date from which this code was made unassignable.
        public DataColumn ColumnAssignableDate;
        
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PtMaritalStatusTable() : 
                base("PtMaritalStatus")
        {
        }
        
        /// constructor
        public PtMaritalStatusTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PtMaritalStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PtMaritalStatusRow this[int i]
        {
            get
            {
                return ((PtMaritalStatusRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "This code indicates the different marital statuses.";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Marital Status Code";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "This describes the marital statuses.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAssignableFlagDBName()
        {
            return "pt_assignable_flag_l";
        }
        
        /// get help text for column
        public static string GetAssignableFlagHelp()
        {
            return "Indicates if this code can still be assigned?";
        }
        
        /// get label of column
        public static string GetAssignableFlagLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetAssignableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAssignableDateDBName()
        {
            return "pt_assignable_date_d";
        }
        
        /// get help text for column
        public static string GetAssignableDateHelp()
        {
            return "Date from which this code was made unassignable.";
        }
        
        /// get label of column
        public static string GetAssignableDateLabel()
        {
            return "Unassignable Date";
        }
        
        /// get display format for column
        public static short GetAssignableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }
        
        /// get help text for column
        public static string GetDeletableFlagHelp()
        {
            return "Indicates if a record can be deleted.";
        }
        
        /// get label of column
        public static string GetDeletableFlagLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PtMaritalStatus";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "pt_marital_status";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Marital Status";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "pt_code_c",
                    "pt_description_c",
                    "pt_assignable_flag_l",
                    "pt_assignable_date_d",
                    "pt_deletable_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnAssignableFlag = this.Columns["pt_assignable_flag_l"];
            this.ColumnAssignableDate = this.Columns["pt_assignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PtMaritalStatusTable GetChangesTyped()
        {
            return ((PtMaritalStatusTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PtMaritalStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PtMaritalStatusRow ret = ((PtMaritalStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PtMaritalStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtMaritalStatusRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_assignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_assignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 4);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnAssignableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAssignableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDeletableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table contains the codes indicating someones marital status.
    [Serializable()]
    public class PtMaritalStatusRow : System.Data.DataRow
    {
        
        private PtMaritalStatusTable myTable;
        
        /// Constructor
        public PtMaritalStatusRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PtMaritalStatusTable)(this.Table));
        }
        
        /// This code indicates the different marital statuses.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// This describes the marital statuses.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Indicates if this code can still be assigned?
        public Boolean AssignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssignableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnAssignableFlag])) != value)))
                {
                    this[this.myTable.ColumnAssignableFlag] = value;
                }
            }
        }
        
        /// Date from which this code was made unassignable.
        public System.DateTime AssignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssignableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnAssignableDate])) != value)))
                {
                    this[this.myTable.ColumnAssignableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime AssignableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnAssignableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime AssignableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnAssignableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnAssignableFlag.Ordinal] = true;
            this.SetNull(this.myTable.ColumnAssignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsAssignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnAssignableDate);
        }
        
        /// assign NULL value
        public void SetAssignableDateNull()
        {
            this.SetNull(this.myTable.ColumnAssignableDate);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of occupations with codes
    [Serializable()]
    public class POccupationTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnOccupationCode;
        
        /// 
        public DataColumn ColumnOccupationDescription;
        
        /// 
        public DataColumn ColumnValidOccupation;
        
        /// This defines if the occupation code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public POccupationTable() : 
                base("POccupation")
        {
        }
        
        /// constructor
        public POccupationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public POccupationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public POccupationRow this[int i]
        {
            get
            {
                return ((POccupationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetOccupationCodeDBName()
        {
            return "p_occupation_code_c";
        }
        
        /// get help text for column
        public static string GetOccupationCodeHelp()
        {
            return "Enter an approved occupation code";
        }
        
        /// get label of column
        public static string GetOccupationCodeLabel()
        {
            return "Occupation Code";
        }
        
        /// get character length for column
        public static short GetOccupationCodeLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOccupationDescriptionDBName()
        {
            return "p_occupation_description_c";
        }
        
        /// get help text for column
        public static string GetOccupationDescriptionHelp()
        {
            return "Enter a full description or name";
        }
        
        /// get label of column
        public static string GetOccupationDescriptionLabel()
        {
            return "Occupation";
        }
        
        /// get character length for column
        public static short GetOccupationDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidOccupationDBName()
        {
            return "p_valid_occupation_l";
        }
        
        /// get help text for column
        public static string GetValidOccupationHelp()
        {
            return "Select this to make this available to selection lists";
        }
        
        /// get label of column
        public static string GetValidOccupationLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetValidOccupationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "POccupation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_occupation";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Occupation";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_occupation_code_c",
                    "p_occupation_description_c",
                    "p_valid_occupation_l",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnOccupationCode = this.Columns["p_occupation_code_c"];
            this.ColumnOccupationDescription = this.Columns["p_occupation_description_c"];
            this.ColumnValidOccupation = this.Columns["p_valid_occupation_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnOccupationCode};
        }
        
        /// get typed set of changes
        public POccupationTable GetChangesTyped()
        {
            return ((POccupationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public POccupationRow NewRowTyped(bool AWithDefaultValues)
        {
            POccupationRow ret = ((POccupationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public POccupationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new POccupationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_occupation_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_occupation_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_occupation_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnOccupationCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnOccupationDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnValidOccupation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of occupations with codes
    [Serializable()]
    public class POccupationRow : System.Data.DataRow
    {
        
        private POccupationTable myTable;
        
        /// Constructor
        public POccupationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((POccupationTable)(this.Table));
        }
        
        /// 
        public String OccupationCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOccupationCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOccupationCode) 
                            || (((String)(this[this.myTable.ColumnOccupationCode])) != value)))
                {
                    this[this.myTable.ColumnOccupationCode] = value;
                }
            }
        }
        
        /// 
        public String OccupationDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOccupationDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOccupationDescription) 
                            || (((String)(this[this.myTable.ColumnOccupationDescription])) != value)))
                {
                    this[this.myTable.ColumnOccupationDescription] = value;
                }
            }
        }
        
        /// 
        public Boolean ValidOccupation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidOccupation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidOccupation) 
                            || (((Boolean)(this[this.myTable.ColumnValidOccupation])) != value)))
                {
                    this[this.myTable.ColumnValidOccupation] = value;
                }
            }
        }
        
        /// This defines if the occupation code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnOccupationCode.Ordinal] = "UNKNOWN";
            this.SetNull(this.myTable.ColumnOccupationDescription);
            this[this.myTable.ColumnValidOccupation.Ordinal] = true;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsValidOccupationNull()
        {
            return this.IsNull(this.myTable.ColumnValidOccupation);
        }
        
        /// assign NULL value
        public void SetValidOccupationNull()
        {
            this.SetNull(this.myTable.ColumnValidOccupation);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details of a person.  A person must also have a related FAMILY class p_partner record.
    [Serializable()]
    public class PPersonTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnTitle;
        
        /// 
        public DataColumn ColumnFirstName;
        
        /// 
        public DataColumn ColumnPreferedName;
        
        /// 
        public DataColumn ColumnMiddleName1;
        
        /// 
        public DataColumn ColumnMiddleName2;
        
        /// 
        public DataColumn ColumnMiddleName3;
        
        /// 
        public DataColumn ColumnFamilyName;
        
        /// 
        public DataColumn ColumnDecorations;
        
        /// This is the date the rthe person was born
        public DataColumn ColumnDateOfBirth;
        
        /// 
        public DataColumn ColumnGender;
        
        /// 
        public DataColumn ColumnMaritalStatus;
        
        /// 
        public DataColumn ColumnOccupationCode;
        
        /// This is the year the person became a Believer.
        public DataColumn ColumnBelieverSinceYear;
        
        /// Comment about the year or how the person became a believer
        public DataColumn ColumnBelieverSinceComment;
        
        /// A cross reference to the family record of this person.
        ///It should be set to ? (not 0 because such a record does not exist!) when there is no family record.
        public DataColumn ColumnFamilyKey;
        
        /// This field indicates the family id of the individual.
        ///ID's 0 and 1 are used for parents; 2, 3, 4 ... 9 are used for children.
        public DataColumn ColumnFamilyId;
        
        /// This is the partner key of the field in which the partner (should be a Worker or ExWorker) is serving.
        public DataColumn ColumnFieldKey;
        
        /// A person's academic title such as BSc(Hons) or Prof. (eg. Herr Prof. Klaus Shmitt)
        public DataColumn ColumnAcademicTitle;
        
        /// 
        public DataColumn ColumnMaritalStatusSince;
        
        /// 
        public DataColumn ColumnMaritalStatusComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPersonTable() : 
                base("PPerson")
        {
        }
        
        /// constructor
        public PPersonTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPersonTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPersonRow this[int i]
        {
            get
            {
                return ((PPersonRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "p_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "e.g. Herr, Mr(s)., Frau, Miss., Senor(ita), M., Mme., Dr., et";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "p_first_name_c";
        }
        
        /// get help text for column
        public static string GetFirstNameHelp()
        {
            return "Enter the person\'s full first name";
        }
        
        /// get label of column
        public static string GetFirstNameLabel()
        {
            return "First Name";
        }
        
        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPreferedNameDBName()
        {
            return "p_prefered_name_c";
        }
        
        /// get help text for column
        public static string GetPreferedNameHelp()
        {
            return "Enter the name this person is commonly known by";
        }
        
        /// get label of column
        public static string GetPreferedNameLabel()
        {
            return "Prefered Name";
        }
        
        /// get character length for column
        public static short GetPreferedNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMiddleName1DBName()
        {
            return "p_middle_name_1_c";
        }
        
        /// get help text for column
        public static string GetMiddleName1Help()
        {
            return "Enter the person\'s full middle name or initial";
        }
        
        /// get label of column
        public static string GetMiddleName1Label()
        {
            return "Middle Name";
        }
        
        /// get character length for column
        public static short GetMiddleName1Length()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMiddleName2DBName()
        {
            return "p_middle_name_2_c";
        }
        
        /// get help text for column
        public static string GetMiddleName2Help()
        {
            return "Enter the person\'s second middle name or initial";
        }
        
        /// get label of column
        public static string GetMiddleName2Label()
        {
            return "Middle Name 2";
        }
        
        /// get character length for column
        public static short GetMiddleName2Length()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMiddleName3DBName()
        {
            return "p_middle_name_3_c";
        }
        
        /// get help text for column
        public static string GetMiddleName3Help()
        {
            return "Enter the person\'s third middle name or initial";
        }
        
        /// get label of column
        public static string GetMiddleName3Label()
        {
            return "Middle Name 3";
        }
        
        /// get character length for column
        public static short GetMiddleName3Length()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFamilyNameDBName()
        {
            return "p_family_name_c";
        }
        
        /// get help text for column
        public static string GetFamilyNameHelp()
        {
            return "Enter a Last Name/Surname/Family Name";
        }
        
        /// get label of column
        public static string GetFamilyNameLabel()
        {
            return "Family Name";
        }
        
        /// get character length for column
        public static short GetFamilyNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDecorationsDBName()
        {
            return "p_decorations_c";
        }
        
        /// get help text for column
        public static string GetDecorationsHelp()
        {
            return "ie. Nobel Peace Prize, Olympic Gold Medal, ?, etc.";
        }
        
        /// get label of column
        public static string GetDecorationsLabel()
        {
            return "Decorations";
        }
        
        /// get character length for column
        public static short GetDecorationsLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfBirthDBName()
        {
            return "p_date_of_birth_d";
        }
        
        /// get help text for column
        public static string GetDateOfBirthHelp()
        {
            return "Enter the date the person was born";
        }
        
        /// get label of column
        public static string GetDateOfBirthLabel()
        {
            return "Date of Birth";
        }
        
        /// get display format for column
        public static short GetDateOfBirthLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGenderDBName()
        {
            return "p_gender_c";
        }
        
        /// get help text for column
        public static string GetGenderHelp()
        {
            return "Select the gender of the Person";
        }
        
        /// get label of column
        public static string GetGenderLabel()
        {
            return "Gender";
        }
        
        /// get character length for column
        public static short GetGenderLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusDBName()
        {
            return "p_marital_status_c";
        }
        
        /// get help text for column
        public static string GetMaritalStatusHelp()
        {
            return "Select marital status";
        }
        
        /// get label of column
        public static string GetMaritalStatusLabel()
        {
            return "Marital Status";
        }
        
        /// get character length for column
        public static short GetMaritalStatusLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOccupationCodeDBName()
        {
            return "p_occupation_code_c";
        }
        
        /// get help text for column
        public static string GetOccupationCodeHelp()
        {
            return "Enter an occupation code";
        }
        
        /// get label of column
        public static string GetOccupationCodeLabel()
        {
            return "Occupation Code";
        }
        
        /// get character length for column
        public static short GetOccupationCodeLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBelieverSinceYearDBName()
        {
            return "p_believer_since_year_i";
        }
        
        /// get help text for column
        public static string GetBelieverSinceYearHelp()
        {
            return "Year the Person became a Believer";
        }
        
        /// get label of column
        public static string GetBelieverSinceYearLabel()
        {
            return "Believer since";
        }
        
        /// get display format for column
        public static short GetBelieverSinceYearLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBelieverSinceCommentDBName()
        {
            return "p_believer_since_comment_c";
        }
        
        /// get help text for column
        public static string GetBelieverSinceCommentHelp()
        {
            return "Comment about the Year or how the Person became a Believer";
        }
        
        /// get label of column
        public static string GetBelieverSinceCommentLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetBelieverSinceCommentLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFamilyKeyDBName()
        {
            return "p_family_key_n";
        }
        
        /// get help text for column
        public static string GetFamilyKeyHelp()
        {
            return "Enter the partner key of the Family record";
        }
        
        /// get label of column
        public static string GetFamilyKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetFamilyKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFamilyIdDBName()
        {
            return "p_family_id_i";
        }
        
        /// get help text for column
        public static string GetFamilyIdHelp()
        {
            return "This field indicates the family id of the individual.";
        }
        
        /// get label of column
        public static string GetFamilyIdLabel()
        {
            return "Family ID";
        }
        
        /// get display format for column
        public static short GetFamilyIdLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldKeyDBName()
        {
            return "p_field_key_n";
        }
        
        /// get help text for column
        public static string GetFieldKeyHelp()
        {
            return "Partner key for the partner\'s current field";
        }
        
        /// get label of column
        public static string GetFieldKeyLabel()
        {
            return "Field Key";
        }
        
        /// get display format for column
        public static short GetFieldKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAcademicTitleDBName()
        {
            return "p_academic_title_c";
        }
        
        /// get help text for column
        public static string GetAcademicTitleHelp()
        {
            return "Enter the academic title for the person";
        }
        
        /// get label of column
        public static string GetAcademicTitleLabel()
        {
            return "Academic Title";
        }
        
        /// get character length for column
        public static short GetAcademicTitleLength()
        {
            return 24;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusSinceDBName()
        {
            return "p_marital_status_since_d";
        }
        
        /// get help text for column
        public static string GetMaritalStatusSinceHelp()
        {
            return "Date from which the marital status is valid";
        }
        
        /// get label of column
        public static string GetMaritalStatusSinceLabel()
        {
            return "Since";
        }
        
        /// get display format for column
        public static short GetMaritalStatusSinceLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaritalStatusCommentDBName()
        {
            return "p_marital_status_comment_c";
        }
        
        /// get help text for column
        public static string GetMaritalStatusCommentHelp()
        {
            return "Enter a comment for the marital status";
        }
        
        /// get label of column
        public static string GetMaritalStatusCommentLabel()
        {
            return "Marital Status Comment";
        }
        
        /// get character length for column
        public static short GetMaritalStatusCommentLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPerson";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_person";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Person";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_title_c",
                    "p_first_name_c",
                    "p_prefered_name_c",
                    "p_middle_name_1_c",
                    "p_middle_name_2_c",
                    "p_middle_name_3_c",
                    "p_family_name_c",
                    "p_decorations_c",
                    "p_date_of_birth_d",
                    "p_gender_c",
                    "p_marital_status_c",
                    "p_occupation_code_c",
                    "p_believer_since_year_i",
                    "p_believer_since_comment_c",
                    "p_family_key_n",
                    "p_family_id_i",
                    "p_field_key_n",
                    "p_academic_title_c",
                    "p_marital_status_since_d",
                    "p_marital_status_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnTitle = this.Columns["p_title_c"];
            this.ColumnFirstName = this.Columns["p_first_name_c"];
            this.ColumnPreferedName = this.Columns["p_prefered_name_c"];
            this.ColumnMiddleName1 = this.Columns["p_middle_name_1_c"];
            this.ColumnMiddleName2 = this.Columns["p_middle_name_2_c"];
            this.ColumnMiddleName3 = this.Columns["p_middle_name_3_c"];
            this.ColumnFamilyName = this.Columns["p_family_name_c"];
            this.ColumnDecorations = this.Columns["p_decorations_c"];
            this.ColumnDateOfBirth = this.Columns["p_date_of_birth_d"];
            this.ColumnGender = this.Columns["p_gender_c"];
            this.ColumnMaritalStatus = this.Columns["p_marital_status_c"];
            this.ColumnOccupationCode = this.Columns["p_occupation_code_c"];
            this.ColumnBelieverSinceYear = this.Columns["p_believer_since_year_i"];
            this.ColumnBelieverSinceComment = this.Columns["p_believer_since_comment_c"];
            this.ColumnFamilyKey = this.Columns["p_family_key_n"];
            this.ColumnFamilyId = this.Columns["p_family_id_i"];
            this.ColumnFieldKey = this.Columns["p_field_key_n"];
            this.ColumnAcademicTitle = this.Columns["p_academic_title_c"];
            this.ColumnMaritalStatusSince = this.Columns["p_marital_status_since_d"];
            this.ColumnMaritalStatusComment = this.Columns["p_marital_status_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PPersonTable GetChangesTyped()
        {
            return ((PPersonTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPersonRow NewRowTyped(bool AWithDefaultValues)
        {
            PPersonRow ret = ((PPersonRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPersonRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPersonRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_prefered_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_middle_name_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_middle_name_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_middle_name_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_family_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_decorations_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_date_of_birth_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_gender_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_occupation_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_believer_since_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_believer_since_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_family_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_family_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_field_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_academic_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_since_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_marital_status_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnFirstName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPreferedName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnMiddleName1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnMiddleName2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnMiddleName3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnFamilyName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDecorations))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateOfBirth))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnGender))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMaritalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 4);
            }
            if ((ACol == ColumnOccupationCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnBelieverSinceYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBelieverSinceComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnFamilyKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFamilyId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFieldKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnAcademicTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 48);
            }
            if ((ACol == ColumnMaritalStatusSince))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnMaritalStatusComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details of a person.  A person must also have a related FAMILY class p_partner record.
    [Serializable()]
    public class PPersonRow : System.Data.DataRow
    {
        
        private PPersonTable myTable;
        
        /// Constructor
        public PPersonRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPersonTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// 
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName) 
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }
        
        /// 
        public String PreferedName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPreferedName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPreferedName) 
                            || (((String)(this[this.myTable.ColumnPreferedName])) != value)))
                {
                    this[this.myTable.ColumnPreferedName] = value;
                }
            }
        }
        
        /// 
        public String MiddleName1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName1) 
                            || (((String)(this[this.myTable.ColumnMiddleName1])) != value)))
                {
                    this[this.myTable.ColumnMiddleName1] = value;
                }
            }
        }
        
        /// 
        public String MiddleName2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName2) 
                            || (((String)(this[this.myTable.ColumnMiddleName2])) != value)))
                {
                    this[this.myTable.ColumnMiddleName2] = value;
                }
            }
        }
        
        /// 
        public String MiddleName3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName3) 
                            || (((String)(this[this.myTable.ColumnMiddleName3])) != value)))
                {
                    this[this.myTable.ColumnMiddleName3] = value;
                }
            }
        }
        
        /// 
        public String FamilyName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFamilyName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFamilyName) 
                            || (((String)(this[this.myTable.ColumnFamilyName])) != value)))
                {
                    this[this.myTable.ColumnFamilyName] = value;
                }
            }
        }
        
        /// 
        public String Decorations
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecorations.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecorations) 
                            || (((String)(this[this.myTable.ColumnDecorations])) != value)))
                {
                    this[this.myTable.ColumnDecorations] = value;
                }
            }
        }
        
        /// This is the date the rthe person was born
        public System.DateTime DateOfBirth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfBirth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfBirth) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfBirth])) != value)))
                {
                    this[this.myTable.ColumnDateOfBirth] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfBirthLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfBirth], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfBirthHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfBirth.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String Gender
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGender.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGender) 
                            || (((String)(this[this.myTable.ColumnGender])) != value)))
                {
                    this[this.myTable.ColumnGender] = value;
                }
            }
        }
        
        /// 
        public String MaritalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatus) 
                            || (((String)(this[this.myTable.ColumnMaritalStatus])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatus] = value;
                }
            }
        }
        
        /// 
        public String OccupationCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOccupationCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOccupationCode) 
                            || (((String)(this[this.myTable.ColumnOccupationCode])) != value)))
                {
                    this[this.myTable.ColumnOccupationCode] = value;
                }
            }
        }
        
        /// This is the year the person became a Believer.
        public Int32 BelieverSinceYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBelieverSinceYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBelieverSinceYear) 
                            || (((Int32)(this[this.myTable.ColumnBelieverSinceYear])) != value)))
                {
                    this[this.myTable.ColumnBelieverSinceYear] = value;
                }
            }
        }
        
        /// Comment about the year or how the person became a believer
        public String BelieverSinceComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBelieverSinceComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBelieverSinceComment) 
                            || (((String)(this[this.myTable.ColumnBelieverSinceComment])) != value)))
                {
                    this[this.myTable.ColumnBelieverSinceComment] = value;
                }
            }
        }
        
        /// A cross reference to the family record of this person.
        ///It should be set to ? (not 0 because such a record does not exist!) when there is no family record.
        public Int64 FamilyKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFamilyKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFamilyKey) 
                            || (((Int64)(this[this.myTable.ColumnFamilyKey])) != value)))
                {
                    this[this.myTable.ColumnFamilyKey] = value;
                }
            }
        }
        
        /// This field indicates the family id of the individual.
        ///ID's 0 and 1 are used for parents; 2, 3, 4 ... 9 are used for children.
        public Int32 FamilyId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFamilyId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFamilyId) 
                            || (((Int32)(this[this.myTable.ColumnFamilyId])) != value)))
                {
                    this[this.myTable.ColumnFamilyId] = value;
                }
            }
        }
        
        /// This is the partner key of the field in which the partner (should be a Worker or ExWorker) is serving.
        public Int64 FieldKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldKey])) != value)))
                {
                    this[this.myTable.ColumnFieldKey] = value;
                }
            }
        }
        
        /// A person's academic title such as BSc(Hons) or Prof. (eg. Herr Prof. Klaus Shmitt)
        public String AcademicTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAcademicTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAcademicTitle) 
                            || (((String)(this[this.myTable.ColumnAcademicTitle])) != value)))
                {
                    this[this.myTable.ColumnAcademicTitle] = value;
                }
            }
        }
        
        /// 
        public System.DateTime MaritalStatusSince
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatusSince.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatusSince) 
                            || (((System.DateTime)(this[this.myTable.ColumnMaritalStatusSince])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatusSince] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime MaritalStatusSinceLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMaritalStatusSince], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime MaritalStatusSinceHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMaritalStatusSince.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String MaritalStatusComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaritalStatusComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaritalStatusComment) 
                            || (((String)(this[this.myTable.ColumnMaritalStatusComment])) != value)))
                {
                    this[this.myTable.ColumnMaritalStatusComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnPreferedName);
            this.SetNull(this.myTable.ColumnMiddleName1);
            this.SetNull(this.myTable.ColumnMiddleName2);
            this.SetNull(this.myTable.ColumnMiddleName3);
            this.SetNull(this.myTable.ColumnFamilyName);
            this.SetNull(this.myTable.ColumnDecorations);
            this.SetNull(this.myTable.ColumnDateOfBirth);
            this[this.myTable.ColumnGender.Ordinal] = "Unknown";
            this[this.myTable.ColumnMaritalStatus.Ordinal] = "U";
            this.SetNull(this.myTable.ColumnOccupationCode);
            this.SetNull(this.myTable.ColumnBelieverSinceYear);
            this.SetNull(this.myTable.ColumnBelieverSinceComment);
            this[this.myTable.ColumnFamilyKey.Ordinal] = 0;
            this[this.myTable.ColumnFamilyId.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFieldKey);
            this.SetNull(this.myTable.ColumnAcademicTitle);
            this.SetNull(this.myTable.ColumnMaritalStatusSince);
            this.SetNull(this.myTable.ColumnMaritalStatusComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }
        
        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }
        
        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }
        
        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }
        
        /// test for NULL value
        public bool IsPreferedNameNull()
        {
            return this.IsNull(this.myTable.ColumnPreferedName);
        }
        
        /// assign NULL value
        public void SetPreferedNameNull()
        {
            this.SetNull(this.myTable.ColumnPreferedName);
        }
        
        /// test for NULL value
        public bool IsMiddleName1Null()
        {
            return this.IsNull(this.myTable.ColumnMiddleName1);
        }
        
        /// assign NULL value
        public void SetMiddleName1Null()
        {
            this.SetNull(this.myTable.ColumnMiddleName1);
        }
        
        /// test for NULL value
        public bool IsMiddleName2Null()
        {
            return this.IsNull(this.myTable.ColumnMiddleName2);
        }
        
        /// assign NULL value
        public void SetMiddleName2Null()
        {
            this.SetNull(this.myTable.ColumnMiddleName2);
        }
        
        /// test for NULL value
        public bool IsMiddleName3Null()
        {
            return this.IsNull(this.myTable.ColumnMiddleName3);
        }
        
        /// assign NULL value
        public void SetMiddleName3Null()
        {
            this.SetNull(this.myTable.ColumnMiddleName3);
        }
        
        /// test for NULL value
        public bool IsFamilyNameNull()
        {
            return this.IsNull(this.myTable.ColumnFamilyName);
        }
        
        /// assign NULL value
        public void SetFamilyNameNull()
        {
            this.SetNull(this.myTable.ColumnFamilyName);
        }
        
        /// test for NULL value
        public bool IsDecorationsNull()
        {
            return this.IsNull(this.myTable.ColumnDecorations);
        }
        
        /// assign NULL value
        public void SetDecorationsNull()
        {
            this.SetNull(this.myTable.ColumnDecorations);
        }
        
        /// test for NULL value
        public bool IsDateOfBirthNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfBirth);
        }
        
        /// assign NULL value
        public void SetDateOfBirthNull()
        {
            this.SetNull(this.myTable.ColumnDateOfBirth);
        }
        
        /// test for NULL value
        public bool IsGenderNull()
        {
            return this.IsNull(this.myTable.ColumnGender);
        }
        
        /// assign NULL value
        public void SetGenderNull()
        {
            this.SetNull(this.myTable.ColumnGender);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatus);
        }
        
        /// assign NULL value
        public void SetMaritalStatusNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatus);
        }
        
        /// test for NULL value
        public bool IsOccupationCodeNull()
        {
            return this.IsNull(this.myTable.ColumnOccupationCode);
        }
        
        /// assign NULL value
        public void SetOccupationCodeNull()
        {
            this.SetNull(this.myTable.ColumnOccupationCode);
        }
        
        /// test for NULL value
        public bool IsBelieverSinceYearNull()
        {
            return this.IsNull(this.myTable.ColumnBelieverSinceYear);
        }
        
        /// assign NULL value
        public void SetBelieverSinceYearNull()
        {
            this.SetNull(this.myTable.ColumnBelieverSinceYear);
        }
        
        /// test for NULL value
        public bool IsBelieverSinceCommentNull()
        {
            return this.IsNull(this.myTable.ColumnBelieverSinceComment);
        }
        
        /// assign NULL value
        public void SetBelieverSinceCommentNull()
        {
            this.SetNull(this.myTable.ColumnBelieverSinceComment);
        }
        
        /// test for NULL value
        public bool IsFamilyKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFamilyKey);
        }
        
        /// assign NULL value
        public void SetFamilyKeyNull()
        {
            this.SetNull(this.myTable.ColumnFamilyKey);
        }
        
        /// test for NULL value
        public bool IsFamilyIdNull()
        {
            return this.IsNull(this.myTable.ColumnFamilyId);
        }
        
        /// assign NULL value
        public void SetFamilyIdNull()
        {
            this.SetNull(this.myTable.ColumnFamilyId);
        }
        
        /// test for NULL value
        public bool IsFieldKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFieldKey);
        }
        
        /// assign NULL value
        public void SetFieldKeyNull()
        {
            this.SetNull(this.myTable.ColumnFieldKey);
        }
        
        /// test for NULL value
        public bool IsAcademicTitleNull()
        {
            return this.IsNull(this.myTable.ColumnAcademicTitle);
        }
        
        /// assign NULL value
        public void SetAcademicTitleNull()
        {
            this.SetNull(this.myTable.ColumnAcademicTitle);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusSinceNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatusSince);
        }
        
        /// assign NULL value
        public void SetMaritalStatusSinceNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatusSince);
        }
        
        /// test for NULL value
        public bool IsMaritalStatusCommentNull()
        {
            return this.IsNull(this.myTable.ColumnMaritalStatusComment);
        }
        
        /// assign NULL value
        public void SetMaritalStatusCommentNull()
        {
            this.SetNull(this.myTable.ColumnMaritalStatusComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of denomination codes for churches
    [Serializable()]
    public class PDenominationTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnDenominationCode;
        
        /// 
        public DataColumn ColumnDenominationName;
        
        /// Defines if a denomination is still valid for use
        public DataColumn ColumnValidDenomination;
        
        /// This defines if the denomination code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDenominationTable() : 
                base("PDenomination")
        {
        }
        
        /// constructor
        public PDenominationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDenominationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDenominationRow this[int i]
        {
            get
            {
                return ((PDenominationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetDenominationCodeDBName()
        {
            return "p_denomination_code_c";
        }
        
        /// get help text for column
        public static string GetDenominationCodeHelp()
        {
            return "Enter an approved denomination code";
        }
        
        /// get label of column
        public static string GetDenominationCodeLabel()
        {
            return "Denomination Code";
        }
        
        /// get character length for column
        public static short GetDenominationCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDenominationNameDBName()
        {
            return "p_denomination_name_c";
        }
        
        /// get help text for column
        public static string GetDenominationNameHelp()
        {
            return "Enter the full name of the denomination for this code";
        }
        
        /// get label of column
        public static string GetDenominationNameLabel()
        {
            return "Denomination Name";
        }
        
        /// get character length for column
        public static short GetDenominationNameLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidDenominationDBName()
        {
            return "p_valid_denomination_l";
        }
        
        /// get help text for column
        public static string GetValidDenominationHelp()
        {
            return "Select if denomination can be selected by users";
        }
        
        /// get label of column
        public static string GetValidDenominationLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetValidDenominationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDenomination";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_denomination";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Denomination";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_denomination_code_c",
                    "p_denomination_name_c",
                    "p_valid_denomination_l",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnDenominationCode = this.Columns["p_denomination_code_c"];
            this.ColumnDenominationName = this.Columns["p_denomination_name_c"];
            this.ColumnValidDenomination = this.Columns["p_valid_denomination_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnDenominationCode};
        }
        
        /// get typed set of changes
        public PDenominationTable GetChangesTyped()
        {
            return ((PDenominationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDenominationRow NewRowTyped(bool AWithDefaultValues)
        {
            PDenominationRow ret = ((PDenominationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDenominationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDenominationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_denomination_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_denomination_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_denomination_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnDenominationCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDenominationName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnValidDenomination))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of denomination codes for churches
    [Serializable()]
    public class PDenominationRow : System.Data.DataRow
    {
        
        private PDenominationTable myTable;
        
        /// Constructor
        public PDenominationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDenominationTable)(this.Table));
        }
        
        /// 
        public String DenominationCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDenominationCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDenominationCode) 
                            || (((String)(this[this.myTable.ColumnDenominationCode])) != value)))
                {
                    this[this.myTable.ColumnDenominationCode] = value;
                }
            }
        }
        
        /// 
        public String DenominationName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDenominationName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDenominationName) 
                            || (((String)(this[this.myTable.ColumnDenominationName])) != value)))
                {
                    this[this.myTable.ColumnDenominationName] = value;
                }
            }
        }
        
        /// Defines if a denomination is still valid for use
        public Boolean ValidDenomination
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidDenomination.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidDenomination) 
                            || (((Boolean)(this[this.myTable.ColumnValidDenomination])) != value)))
                {
                    this[this.myTable.ColumnValidDenomination] = value;
                }
            }
        }
        
        /// This defines if the denomination code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnDenominationCode);
            this.SetNull(this.myTable.ColumnDenominationName);
            this[this.myTable.ColumnValidDenomination.Ordinal] = true;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Specific information about a church which is a partner
    [Serializable()]
    public class PChurchTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnChurchName;
        
        /// Number of people in regular attendance.
        public DataColumn ColumnApproximateSize;
        
        /// 
        public DataColumn ColumnDenominationCode;
        
        /// 
        public DataColumn ColumnAccomodation;
        
        /// 
        public DataColumn ColumnPrayerGroup;
        
        /// Paper (Digital?) Map of church is on file at Site
        public DataColumn ColumnMapOnFile;
        
        /// 
        public DataColumn ColumnAccomodationType;
        
        /// 
        public DataColumn ColumnAccomodationSize;
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public DataColumn ColumnContactPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PChurchTable() : 
                base("PChurch")
        {
        }
        
        /// constructor
        public PChurchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PChurchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PChurchRow this[int i]
        {
            get
            {
                return ((PChurchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChurchNameDBName()
        {
            return "p_church_name_c";
        }
        
        /// get help text for column
        public static string GetChurchNameHelp()
        {
            return "Enter the name of the church";
        }
        
        /// get label of column
        public static string GetChurchNameLabel()
        {
            return "Church Name";
        }
        
        /// get character length for column
        public static short GetChurchNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetApproximateSizeDBName()
        {
            return "p_approximate_size_i";
        }
        
        /// get help text for column
        public static string GetApproximateSizeHelp()
        {
            return "Enter the number of people in regular attendence";
        }
        
        /// get label of column
        public static string GetApproximateSizeLabel()
        {
            return "Church Size";
        }
        
        /// get display format for column
        public static short GetApproximateSizeLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDenominationCodeDBName()
        {
            return "p_denomination_code_c";
        }
        
        /// get help text for column
        public static string GetDenominationCodeHelp()
        {
            return "Enter a denomination code";
        }
        
        /// get label of column
        public static string GetDenominationCodeLabel()
        {
            return "Denomination Code";
        }
        
        /// get character length for column
        public static short GetDenominationCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccomodationDBName()
        {
            return "p_accomodation_l";
        }
        
        /// get help text for column
        public static string GetAccomodationHelp()
        {
            return "This church has accommodation for visitors, travelors or teams";
        }
        
        /// get label of column
        public static string GetAccomodationLabel()
        {
            return "Accomodation";
        }
        
        /// get display format for column
        public static short GetAccomodationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrayerGroupDBName()
        {
            return "p_prayer_group_l";
        }
        
        /// get help text for column
        public static string GetPrayerGroupHelp()
        {
            return "Mark if this church is a prayer group";
        }
        
        /// get label of column
        public static string GetPrayerGroupLabel()
        {
            return "Prayer Group";
        }
        
        /// get display format for column
        public static short GetPrayerGroupLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMapOnFileDBName()
        {
            return "p_map_on_file_l";
        }
        
        /// get help text for column
        public static string GetMapOnFileHelp()
        {
            return "Mark if there is a map to the church on file";
        }
        
        /// get label of column
        public static string GetMapOnFileLabel()
        {
            return "Map on File";
        }
        
        /// get display format for column
        public static short GetMapOnFileLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccomodationTypeDBName()
        {
            return "p_accomodation_type_c";
        }
        
        /// get help text for column
        public static string GetAccomodationTypeHelp()
        {
            return "Select type of accomodation";
        }
        
        /// get label of column
        public static string GetAccomodationTypeLabel()
        {
            return "Type";
        }
        
        /// get character length for column
        public static short GetAccomodationTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccomodationSizeDBName()
        {
            return "p_accomodation_size_i";
        }
        
        /// get help text for column
        public static string GetAccomodationSizeHelp()
        {
            return "How many people can they accomodate";
        }
        
        /// get label of column
        public static string GetAccomodationSizeLabel()
        {
            return "Size";
        }
        
        /// get display format for column
        public static short GetAccomodationSizeLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactPartnerKeyDBName()
        {
            return "p_contact_partner_key_n";
        }
        
        /// get help text for column
        public static string GetContactPartnerKeyHelp()
        {
            return "Enter the partner who is to be addressed in correspondence";
        }
        
        /// get label of column
        public static string GetContactPartnerKeyLabel()
        {
            return "Contact Partner";
        }
        
        /// get display format for column
        public static short GetContactPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PChurch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_church";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Church";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_church_name_c",
                    "p_approximate_size_i",
                    "p_denomination_code_c",
                    "p_accomodation_l",
                    "p_prayer_group_l",
                    "p_map_on_file_l",
                    "p_accomodation_type_c",
                    "p_accomodation_size_i",
                    "p_contact_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnChurchName = this.Columns["p_church_name_c"];
            this.ColumnApproximateSize = this.Columns["p_approximate_size_i"];
            this.ColumnDenominationCode = this.Columns["p_denomination_code_c"];
            this.ColumnAccomodation = this.Columns["p_accomodation_l"];
            this.ColumnPrayerGroup = this.Columns["p_prayer_group_l"];
            this.ColumnMapOnFile = this.Columns["p_map_on_file_l"];
            this.ColumnAccomodationType = this.Columns["p_accomodation_type_c"];
            this.ColumnAccomodationSize = this.Columns["p_accomodation_size_i"];
            this.ColumnContactPartnerKey = this.Columns["p_contact_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PChurchTable GetChangesTyped()
        {
            return ((PChurchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PChurchRow NewRowTyped(bool AWithDefaultValues)
        {
            PChurchRow ret = ((PChurchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PChurchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PChurchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_church_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_approximate_size_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_denomination_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_accomodation_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_prayer_group_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_map_on_file_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_accomodation_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_accomodation_size_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnChurchName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnApproximateSize))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDenominationCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAccomodation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnPrayerGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnMapOnFile))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAccomodationType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAccomodationSize))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnContactPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Specific information about a church which is a partner
    [Serializable()]
    public class PChurchRow : System.Data.DataRow
    {
        
        private PChurchTable myTable;
        
        /// Constructor
        public PChurchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PChurchTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String ChurchName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChurchName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChurchName) 
                            || (((String)(this[this.myTable.ColumnChurchName])) != value)))
                {
                    this[this.myTable.ColumnChurchName] = value;
                }
            }
        }
        
        /// Number of people in regular attendance.
        public Int32 ApproximateSize
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApproximateSize.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApproximateSize) 
                            || (((Int32)(this[this.myTable.ColumnApproximateSize])) != value)))
                {
                    this[this.myTable.ColumnApproximateSize] = value;
                }
            }
        }
        
        /// 
        public String DenominationCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDenominationCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDenominationCode) 
                            || (((String)(this[this.myTable.ColumnDenominationCode])) != value)))
                {
                    this[this.myTable.ColumnDenominationCode] = value;
                }
            }
        }
        
        /// 
        public Boolean Accomodation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccomodation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccomodation) 
                            || (((Boolean)(this[this.myTable.ColumnAccomodation])) != value)))
                {
                    this[this.myTable.ColumnAccomodation] = value;
                }
            }
        }
        
        /// 
        public Boolean PrayerGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrayerGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrayerGroup) 
                            || (((Boolean)(this[this.myTable.ColumnPrayerGroup])) != value)))
                {
                    this[this.myTable.ColumnPrayerGroup] = value;
                }
            }
        }
        
        /// Paper (Digital?) Map of church is on file at Site
        public Boolean MapOnFile
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMapOnFile.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMapOnFile) 
                            || (((Boolean)(this[this.myTable.ColumnMapOnFile])) != value)))
                {
                    this[this.myTable.ColumnMapOnFile] = value;
                }
            }
        }
        
        /// 
        public String AccomodationType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccomodationType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccomodationType) 
                            || (((String)(this[this.myTable.ColumnAccomodationType])) != value)))
                {
                    this[this.myTable.ColumnAccomodationType] = value;
                }
            }
        }
        
        /// 
        public Int32 AccomodationSize
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccomodationSize.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccomodationSize) 
                            || (((Int32)(this[this.myTable.ColumnAccomodationSize])) != value)))
                {
                    this[this.myTable.ColumnAccomodationSize] = value;
                }
            }
        }
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public Int64 ContactPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnContactPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnContactPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnChurchName);
            this[this.myTable.ColumnApproximateSize.Ordinal] = 0;
            this[this.myTable.ColumnDenominationCode.Ordinal] = "UNKNOWN";
            this[this.myTable.ColumnAccomodation.Ordinal] = false;
            this[this.myTable.ColumnPrayerGroup.Ordinal] = false;
            this[this.myTable.ColumnMapOnFile.Ordinal] = false;
            this[this.myTable.ColumnAccomodationType.Ordinal] = "OTHER";
            this[this.myTable.ColumnAccomodationSize.Ordinal] = 0;
            this[this.myTable.ColumnContactPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsChurchNameNull()
        {
            return this.IsNull(this.myTable.ColumnChurchName);
        }
        
        /// assign NULL value
        public void SetChurchNameNull()
        {
            this.SetNull(this.myTable.ColumnChurchName);
        }
        
        /// test for NULL value
        public bool IsApproximateSizeNull()
        {
            return this.IsNull(this.myTable.ColumnApproximateSize);
        }
        
        /// assign NULL value
        public void SetApproximateSizeNull()
        {
            this.SetNull(this.myTable.ColumnApproximateSize);
        }
        
        /// test for NULL value
        public bool IsDenominationCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDenominationCode);
        }
        
        /// assign NULL value
        public void SetDenominationCodeNull()
        {
            this.SetNull(this.myTable.ColumnDenominationCode);
        }
        
        /// test for NULL value
        public bool IsAccomodationNull()
        {
            return this.IsNull(this.myTable.ColumnAccomodation);
        }
        
        /// assign NULL value
        public void SetAccomodationNull()
        {
            this.SetNull(this.myTable.ColumnAccomodation);
        }
        
        /// test for NULL value
        public bool IsPrayerGroupNull()
        {
            return this.IsNull(this.myTable.ColumnPrayerGroup);
        }
        
        /// assign NULL value
        public void SetPrayerGroupNull()
        {
            this.SetNull(this.myTable.ColumnPrayerGroup);
        }
        
        /// test for NULL value
        public bool IsMapOnFileNull()
        {
            return this.IsNull(this.myTable.ColumnMapOnFile);
        }
        
        /// assign NULL value
        public void SetMapOnFileNull()
        {
            this.SetNull(this.myTable.ColumnMapOnFile);
        }
        
        /// test for NULL value
        public bool IsAccomodationTypeNull()
        {
            return this.IsNull(this.myTable.ColumnAccomodationType);
        }
        
        /// assign NULL value
        public void SetAccomodationTypeNull()
        {
            this.SetNull(this.myTable.ColumnAccomodationType);
        }
        
        /// test for NULL value
        public bool IsAccomodationSizeNull()
        {
            return this.IsNull(this.myTable.ColumnAccomodationSize);
        }
        
        /// assign NULL value
        public void SetAccomodationSizeNull()
        {
            this.SetNull(this.myTable.ColumnAccomodationSize);
        }
        
        /// test for NULL value
        public bool IsContactPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// assign NULL value
        public void SetContactPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of businesses with codes
    [Serializable()]
    public class PBusinessTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnBusinessCode;
        
        /// 
        public DataColumn ColumnBusinessDescription;
        
        /// This defines if the business code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBusinessTable() : 
                base("PBusiness")
        {
        }
        
        /// constructor
        public PBusinessTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBusinessTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBusinessRow this[int i]
        {
            get
            {
                return ((PBusinessRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBusinessCodeDBName()
        {
            return "p_business_code_c";
        }
        
        /// get help text for column
        public static string GetBusinessCodeHelp()
        {
            return "Enter a business code";
        }
        
        /// get label of column
        public static string GetBusinessCodeLabel()
        {
            return "Business Code";
        }
        
        /// get character length for column
        public static short GetBusinessCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBusinessDescriptionDBName()
        {
            return "p_business_description_c";
        }
        
        /// get help text for column
        public static string GetBusinessDescriptionHelp()
        {
            return "Enter a Business Code Description";
        }
        
        /// get label of column
        public static string GetBusinessDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetBusinessDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBusiness";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_business";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Business";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_business_code_c",
                    "p_business_description_c",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBusinessCode = this.Columns["p_business_code_c"];
            this.ColumnBusinessDescription = this.Columns["p_business_description_c"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBusinessCode};
        }
        
        /// get typed set of changes
        public PBusinessTable GetChangesTyped()
        {
            return ((PBusinessTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBusinessRow NewRowTyped(bool AWithDefaultValues)
        {
            PBusinessRow ret = ((PBusinessRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBusinessRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBusinessRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_business_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_business_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBusinessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBusinessDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of businesses with codes
    [Serializable()]
    public class PBusinessRow : System.Data.DataRow
    {
        
        private PBusinessTable myTable;
        
        /// Constructor
        public PBusinessRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBusinessTable)(this.Table));
        }
        
        /// 
        public String BusinessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBusinessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBusinessCode) 
                            || (((String)(this[this.myTable.ColumnBusinessCode])) != value)))
                {
                    this[this.myTable.ColumnBusinessCode] = value;
                }
            }
        }
        
        /// 
        public String BusinessDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBusinessDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBusinessDescription) 
                            || (((String)(this[this.myTable.ColumnBusinessDescription])) != value)))
                {
                    this[this.myTable.ColumnBusinessDescription] = value;
                }
            }
        }
        
        /// This defines if the business code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBusinessCode);
            this.SetNull(this.myTable.ColumnBusinessDescription);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details of an organisation
    [Serializable()]
    public class POrganisationTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnOrganisationName;
        
        /// 
        public DataColumn ColumnBusinessCode;
        
        /// 
        public DataColumn ColumnReligious;
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public DataColumn ColumnContactPartnerKey;
        
        /// 
        public DataColumn ColumnFoundation;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public POrganisationTable() : 
                base("POrganisation")
        {
        }
        
        /// constructor
        public POrganisationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public POrganisationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public POrganisationRow this[int i]
        {
            get
            {
                return ((POrganisationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOrganisationNameDBName()
        {
            return "p_organisation_name_c";
        }
        
        /// get help text for column
        public static string GetOrganisationNameHelp()
        {
            return "Enter the name of the organisation";
        }
        
        /// get label of column
        public static string GetOrganisationNameLabel()
        {
            return "Name";
        }
        
        /// get character length for column
        public static short GetOrganisationNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBusinessCodeDBName()
        {
            return "p_business_code_c";
        }
        
        /// get help text for column
        public static string GetBusinessCodeHelp()
        {
            return "Select a business code";
        }
        
        /// get label of column
        public static string GetBusinessCodeLabel()
        {
            return "Business Code";
        }
        
        /// get character length for column
        public static short GetBusinessCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReligiousDBName()
        {
            return "p_religious_l";
        }
        
        /// get help text for column
        public static string GetReligiousHelp()
        {
            return "Select if this is a religious Organisation";
        }
        
        /// get label of column
        public static string GetReligiousLabel()
        {
            return "Religious";
        }
        
        /// get display format for column
        public static short GetReligiousLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactPartnerKeyDBName()
        {
            return "p_contact_partner_key_n";
        }
        
        /// get help text for column
        public static string GetContactPartnerKeyHelp()
        {
            return "Enter the partner who is to be addressed in correspondence";
        }
        
        /// get label of column
        public static string GetContactPartnerKeyLabel()
        {
            return "Contact Partner";
        }
        
        /// get display format for column
        public static short GetContactPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationDBName()
        {
            return "p_foundation_l";
        }
        
        /// get help text for column
        public static string GetFoundationHelp()
        {
            return "Select if this is a Foundation";
        }
        
        /// get label of column
        public static string GetFoundationLabel()
        {
            return "Foundation?";
        }
        
        /// get display format for column
        public static short GetFoundationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "POrganisation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_organisation";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Organisation";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_organisation_name_c",
                    "p_business_code_c",
                    "p_religious_l",
                    "p_contact_partner_key_n",
                    "p_foundation_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnOrganisationName = this.Columns["p_organisation_name_c"];
            this.ColumnBusinessCode = this.Columns["p_business_code_c"];
            this.ColumnReligious = this.Columns["p_religious_l"];
            this.ColumnContactPartnerKey = this.Columns["p_contact_partner_key_n"];
            this.ColumnFoundation = this.Columns["p_foundation_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public POrganisationTable GetChangesTyped()
        {
            return ((POrganisationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public POrganisationRow NewRowTyped(bool AWithDefaultValues)
        {
            POrganisationRow ret = ((POrganisationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public POrganisationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new POrganisationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_organisation_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_business_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_religious_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_foundation_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnOrganisationName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnBusinessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReligious))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnContactPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFoundation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details of an organisation
    [Serializable()]
    public class POrganisationRow : System.Data.DataRow
    {
        
        private POrganisationTable myTable;
        
        /// Constructor
        public POrganisationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((POrganisationTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String OrganisationName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOrganisationName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOrganisationName) 
                            || (((String)(this[this.myTable.ColumnOrganisationName])) != value)))
                {
                    this[this.myTable.ColumnOrganisationName] = value;
                }
            }
        }
        
        /// 
        public String BusinessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBusinessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBusinessCode) 
                            || (((String)(this[this.myTable.ColumnBusinessCode])) != value)))
                {
                    this[this.myTable.ColumnBusinessCode] = value;
                }
            }
        }
        
        /// 
        public Boolean Religious
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReligious.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReligious) 
                            || (((Boolean)(this[this.myTable.ColumnReligious])) != value)))
                {
                    this[this.myTable.ColumnReligious] = value;
                }
            }
        }
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public Int64 ContactPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnContactPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnContactPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Boolean Foundation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundation) 
                            || (((Boolean)(this[this.myTable.ColumnFoundation])) != value)))
                {
                    this[this.myTable.ColumnFoundation] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnOrganisationName);
            this[this.myTable.ColumnBusinessCode.Ordinal] = "UNKNOWN";
            this[this.myTable.ColumnReligious.Ordinal] = false;
            this[this.myTable.ColumnContactPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnFoundation.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsOrganisationNameNull()
        {
            return this.IsNull(this.myTable.ColumnOrganisationName);
        }
        
        /// assign NULL value
        public void SetOrganisationNameNull()
        {
            this.SetNull(this.myTable.ColumnOrganisationName);
        }
        
        /// test for NULL value
        public bool IsBusinessCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBusinessCode);
        }
        
        /// assign NULL value
        public void SetBusinessCodeNull()
        {
            this.SetNull(this.myTable.ColumnBusinessCode);
        }
        
        /// test for NULL value
        public bool IsReligiousNull()
        {
            return this.IsNull(this.myTable.ColumnReligious);
        }
        
        /// assign NULL value
        public void SetReligiousNull()
        {
            this.SetNull(this.myTable.ColumnReligious);
        }
        
        /// test for NULL value
        public bool IsContactPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// assign NULL value
        public void SetContactPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// test for NULL value
        public bool IsFoundationNull()
        {
            return this.IsNull(this.myTable.ColumnFoundation);
        }
        
        /// assign NULL value
        public void SetFoundationNull()
        {
            this.SetNull(this.myTable.ColumnFoundation);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details of an bank
    [Serializable()]
    public class PBankTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnBranchName;
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public DataColumn ColumnContactPartnerKey;
        
        /// The bank code/branch code/sort code (synonymous country-specific terms) for identifying a bank branch with a number/code.
        public DataColumn ColumnBranchCode;
        
        /// BIC (Bank Identifier Code)/SWIFT code. The Bank Identifier Code is a unique address which, in telecommunication messages, identifies precisely the financial institutions involved in financial transactions. BICs either have 8 or 11 characters.
        public DataColumn ColumnBic;
        
        /// The format file to be used for electronic payment
        public DataColumn ColumnEpFormatFile;
        
        /// Is this a credit card type (eg. VISA)?
        public DataColumn ColumnCreditCard;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBankTable() : 
                base("PBank")
        {
        }
        
        /// constructor
        public PBankTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBankTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBankRow this[int i]
        {
            get
            {
                return ((PBankRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "This is the partner key assigned to each partner. It consists of the fund id foll" +
                "owed by a computer generated six digit number.";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "p_partner_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBranchNameDBName()
        {
            return "p_branch_name_c";
        }
        
        /// get help text for column
        public static string GetBranchNameHelp()
        {
            return "Enter the name of the bank";
        }
        
        /// get label of column
        public static string GetBranchNameLabel()
        {
            return "p_branch_name_c";
        }
        
        /// get character length for column
        public static short GetBranchNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactPartnerKeyDBName()
        {
            return "p_contact_partner_key_n";
        }
        
        /// get help text for column
        public static string GetContactPartnerKeyHelp()
        {
            return "Generally the contact person for the unit who will be addressed in any correspond" +
                "ence";
        }
        
        /// get label of column
        public static string GetContactPartnerKeyLabel()
        {
            return "p_contact_partner_key_n";
        }
        
        /// get display format for column
        public static short GetContactPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBranchCodeDBName()
        {
            return "p_branch_code_c";
        }
        
        /// get help text for column
        public static string GetBranchCodeHelp()
        {
            return "The bank code/branch code/sort code (synonymous country-specific terms) for ident" +
                "ifying a bank branch with a number/code.";
        }
        
        /// get label of column
        public static string GetBranchCodeLabel()
        {
            return "Bank/Branch Code";
        }
        
        /// get character length for column
        public static short GetBranchCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBicDBName()
        {
            return "p_bic_c";
        }
        
        /// get help text for column
        public static string GetBicHelp()
        {
            return "BIC (Bank Identifier Code)/SWIFT code. The Bank Identifier Code is a unique addre" +
                "ss which, in telecommunication messages, identifies precisely the financial inst" +
                "itutions involved in financial transactions. BICs either have 8 or 11 characters" +
                ".";
        }
        
        /// get label of column
        public static string GetBicLabel()
        {
            return "BIC/SWIFT Code";
        }
        
        /// get character length for column
        public static short GetBicLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEpFormatFileDBName()
        {
            return "p_ep_format_file_c";
        }
        
        /// get help text for column
        public static string GetEpFormatFileHelp()
        {
            return "The format file to be used for electronic payment";
        }
        
        /// get label of column
        public static string GetEpFormatFileLabel()
        {
            return "p_ep_format_file_c";
        }
        
        /// get character length for column
        public static short GetEpFormatFileLength()
        {
            return 48;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreditCardDBName()
        {
            return "p_credit_card_l";
        }
        
        /// get help text for column
        public static string GetCreditCardHelp()
        {
            return "Is this a credit card type (eg. VISA)?";
        }
        
        /// get label of column
        public static string GetCreditCardLabel()
        {
            return "p_credit_card_l";
        }
        
        /// get display format for column
        public static short GetCreditCardLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBank";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_bank";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Bank";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_branch_name_c",
                    "p_contact_partner_key_n",
                    "p_branch_code_c",
                    "p_bic_c",
                    "p_ep_format_file_c",
                    "p_credit_card_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnBranchName = this.Columns["p_branch_name_c"];
            this.ColumnContactPartnerKey = this.Columns["p_contact_partner_key_n"];
            this.ColumnBranchCode = this.Columns["p_branch_code_c"];
            this.ColumnBic = this.Columns["p_bic_c"];
            this.ColumnEpFormatFile = this.Columns["p_ep_format_file_c"];
            this.ColumnCreditCard = this.Columns["p_credit_card_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PBankTable GetChangesTyped()
        {
            return ((PBankTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBankRow NewRowTyped(bool AWithDefaultValues)
        {
            PBankRow ret = ((PBankRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBankRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBankRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_branch_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_branch_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_bic_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_ep_format_file_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_credit_card_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnBranchName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnContactPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnBranchCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnBic))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 22);
            }
            if ((ACol == ColumnEpFormatFile))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 96);
            }
            if ((ACol == ColumnCreditCard))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details of an bank
    [Serializable()]
    public class PBankRow : System.Data.DataRow
    {
        
        private PBankTable myTable;
        
        /// Constructor
        public PBankRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBankTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String BranchName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchName) 
                            || (((String)(this[this.myTable.ColumnBranchName])) != value)))
                {
                    this[this.myTable.ColumnBranchName] = value;
                }
            }
        }
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public Int64 ContactPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnContactPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnContactPartnerKey] = value;
                }
            }
        }
        
        /// The bank code/branch code/sort code (synonymous country-specific terms) for identifying a bank branch with a number/code.
        public String BranchCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchCode) 
                            || (((String)(this[this.myTable.ColumnBranchCode])) != value)))
                {
                    this[this.myTable.ColumnBranchCode] = value;
                }
            }
        }
        
        /// BIC (Bank Identifier Code)/SWIFT code. The Bank Identifier Code is a unique address which, in telecommunication messages, identifies precisely the financial institutions involved in financial transactions. BICs either have 8 or 11 characters.
        public String Bic
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBic.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBic) 
                            || (((String)(this[this.myTable.ColumnBic])) != value)))
                {
                    this[this.myTable.ColumnBic] = value;
                }
            }
        }
        
        /// The format file to be used for electronic payment
        public String EpFormatFile
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEpFormatFile.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEpFormatFile) 
                            || (((String)(this[this.myTable.ColumnEpFormatFile])) != value)))
                {
                    this[this.myTable.ColumnEpFormatFile] = value;
                }
            }
        }
        
        /// Is this a credit card type (eg. VISA)?
        public Boolean CreditCard
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreditCard.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreditCard) 
                            || (((Boolean)(this[this.myTable.ColumnCreditCard])) != value)))
                {
                    this[this.myTable.ColumnCreditCard] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnBranchName);
            this.SetNull(this.myTable.ColumnContactPartnerKey);
            this.SetNull(this.myTable.ColumnBranchCode);
            this.SetNull(this.myTable.ColumnBic);
            this.SetNull(this.myTable.ColumnEpFormatFile);
            this[this.myTable.ColumnCreditCard.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBranchNameNull()
        {
            return this.IsNull(this.myTable.ColumnBranchName);
        }
        
        /// assign NULL value
        public void SetBranchNameNull()
        {
            this.SetNull(this.myTable.ColumnBranchName);
        }
        
        /// test for NULL value
        public bool IsContactPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// assign NULL value
        public void SetContactPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// test for NULL value
        public bool IsBranchCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBranchCode);
        }
        
        /// assign NULL value
        public void SetBranchCodeNull()
        {
            this.SetNull(this.myTable.ColumnBranchCode);
        }
        
        /// test for NULL value
        public bool IsBicNull()
        {
            return this.IsNull(this.myTable.ColumnBic);
        }
        
        /// assign NULL value
        public void SetBicNull()
        {
            this.SetNull(this.myTable.ColumnBic);
        }
        
        /// test for NULL value
        public bool IsEpFormatFileNull()
        {
            return this.IsNull(this.myTable.ColumnEpFormatFile);
        }
        
        /// assign NULL value
        public void SetEpFormatFileNull()
        {
            this.SetNull(this.myTable.ColumnEpFormatFile);
        }
        
        /// test for NULL value
        public bool IsCreditCardNull()
        {
            return this.IsNull(this.myTable.ColumnCreditCard);
        }
        
        /// assign NULL value
        public void SetCreditCardNull()
        {
            this.SetNull(this.myTable.ColumnCreditCard);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details of a venue
    [Serializable()]
    public class PVenueTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnVenueName;
        
        /// 
        public DataColumn ColumnVenueCode;
        
        /// This is the currency that is used for the venue.
        public DataColumn ColumnCurrencyCode;
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public DataColumn ColumnContactPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PVenueTable() : 
                base("PVenue")
        {
        }
        
        /// constructor
        public PVenueTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PVenueTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PVenueRow this[int i]
        {
            get
            {
                return ((PVenueRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "This is the partner key assigned to each partner. It consists of the fund id foll" +
                "owed by a computer generated six digit number.";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get the name of the field in the database for this column
        public static string GetVenueNameDBName()
        {
            return "p_venue_name_c";
        }
        
        /// get help text for column
        public static string GetVenueNameHelp()
        {
            return "Enter the name of the venue";
        }
        
        /// get label of column
        public static string GetVenueNameLabel()
        {
            return "Venue Name";
        }
        
        /// get character length for column
        public static short GetVenueNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetVenueCodeDBName()
        {
            return "p_venue_code_c";
        }
        
        /// get help text for column
        public static string GetVenueCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetVenueCodeLabel()
        {
            return "Venue Code";
        }
        
        /// get character length for column
        public static short GetVenueCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }
        
        /// get help text for column
        public static string GetCurrencyCodeHelp()
        {
            return "Currency used for the venue";
        }
        
        /// get label of column
        public static string GetCurrencyCodeLabel()
        {
            return "Currency Code";
        }
        
        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactPartnerKeyDBName()
        {
            return "p_contact_partner_key_n";
        }
        
        /// get help text for column
        public static string GetContactPartnerKeyHelp()
        {
            return "Generally the contact person for the unit who will be addressed in any correspond" +
                "ence";
        }
        
        /// get label of column
        public static string GetContactPartnerKeyLabel()
        {
            return "Contact Partner Key";
        }
        
        /// get display format for column
        public static short GetContactPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PVenue";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_venue";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Venue";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_venue_name_c",
                    "p_venue_code_c",
                    "a_currency_code_c",
                    "p_contact_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnVenueName = this.Columns["p_venue_name_c"];
            this.ColumnVenueCode = this.Columns["p_venue_code_c"];
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnContactPartnerKey = this.Columns["p_contact_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PVenueTable GetChangesTyped()
        {
            return ((PVenueTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PVenueRow NewRowTyped(bool AWithDefaultValues)
        {
            PVenueRow ret = ((PVenueRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PVenueRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PVenueRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_venue_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_venue_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnVenueName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnVenueCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnContactPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details of a venue
    [Serializable()]
    public class PVenueRow : System.Data.DataRow
    {
        
        private PVenueTable myTable;
        
        /// Constructor
        public PVenueRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PVenueTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String VenueName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVenueName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVenueName) 
                            || (((String)(this[this.myTable.ColumnVenueName])) != value)))
                {
                    this[this.myTable.ColumnVenueName] = value;
                }
            }
        }
        
        /// 
        public String VenueCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVenueCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVenueCode) 
                            || (((String)(this[this.myTable.ColumnVenueCode])) != value)))
                {
                    this[this.myTable.ColumnVenueCode] = value;
                }
            }
        }
        
        /// This is the currency that is used for the venue.
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }
        
        /// Generally the contact person for the unit who will be addressed in any correspondence
        public Int64 ContactPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnContactPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnContactPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnVenueName);
            this.SetNull(this.myTable.ColumnVenueCode);
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this.SetNull(this.myTable.ColumnContactPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsVenueNameNull()
        {
            return this.IsNull(this.myTable.ColumnVenueName);
        }
        
        /// assign NULL value
        public void SetVenueNameNull()
        {
            this.SetNull(this.myTable.ColumnVenueName);
        }
        
        /// test for NULL value
        public bool IsVenueCodeNull()
        {
            return this.IsNull(this.myTable.ColumnVenueCode);
        }
        
        /// assign NULL value
        public void SetVenueCodeNull()
        {
            this.SetNull(this.myTable.ColumnVenueCode);
        }
        
        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }
        
        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }
        
        /// test for NULL value
        public bool IsContactPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// assign NULL value
        public void SetContactPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnContactPartnerKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Tells of what type this banking-detail is (bank-account, visa, mastercard, etc.
    [Serializable()]
    public class PBankingTypeTable : TTypedDataTable
    {
        
        /// The ID of this type
        public DataColumn ColumnId;
        
        /// Human readable form of this type
        public DataColumn ColumnType;
        
        /// What it means
        public DataColumn ColumnDescription;
        
        /// A procedure to check the fields...
        public DataColumn ColumnCheck;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBankingTypeTable() : 
                base("PBankingType")
        {
        }
        
        /// constructor
        public PBankingTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBankingTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBankingTypeRow this[int i]
        {
            get
            {
                return ((PBankingTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetIdDBName()
        {
            return "p_id_i";
        }
        
        /// get help text for column
        public static string GetIdHelp()
        {
            return "The ID of this type";
        }
        
        /// get label of column
        public static string GetIdLabel()
        {
            return "p_id_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDBName()
        {
            return "p_type_c";
        }
        
        /// get help text for column
        public static string GetTypeHelp()
        {
            return "Human readable form of this type";
        }
        
        /// get label of column
        public static string GetTypeLabel()
        {
            return "p_type_c";
        }
        
        /// get character length for column
        public static short GetTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "What it means";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "p_description_c";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCheckDBName()
        {
            return "p_check_procedure";
        }
        
        /// get help text for column
        public static string GetCheckHelp()
        {
            return "A procedure to check the fields...";
        }
        
        /// get label of column
        public static string GetCheckLabel()
        {
            return "p_check_procedure";
        }
        
        /// get character length for column
        public static short GetCheckLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBankingType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_banking_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Banking Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_id_i",
                    "p_type_c",
                    "p_description_c",
                    "p_check_procedure",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnId = this.Columns["p_id_i"];
            this.ColumnType = this.Columns["p_type_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnCheck = this.Columns["p_check_procedure"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnId};
        }
        
        /// get typed set of changes
        public PBankingTypeTable GetChangesTyped()
        {
            return ((PBankingTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBankingTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PBankingTypeRow ret = ((PBankingTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBankingTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBankingTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_check_procedure", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnCheck))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Tells of what type this banking-detail is (bank-account, visa, mastercard, etc.
    [Serializable()]
    public class PBankingTypeRow : System.Data.DataRow
    {
        
        private PBankingTypeTable myTable;
        
        /// Constructor
        public PBankingTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBankingTypeTable)(this.Table));
        }
        
        /// The ID of this type
        public Int32 Id
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnId) 
                            || (((Int32)(this[this.myTable.ColumnId])) != value)))
                {
                    this[this.myTable.ColumnId] = value;
                }
            }
        }
        
        /// Human readable form of this type
        public String Type
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnType) 
                            || (((String)(this[this.myTable.ColumnType])) != value)))
                {
                    this[this.myTable.ColumnType] = value;
                }
            }
        }
        
        /// What it means
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// A procedure to check the fields...
        public String Check
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCheck.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCheck) 
                            || (((String)(this[this.myTable.ColumnCheck])) != value)))
                {
                    this[this.myTable.ColumnCheck] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnId);
            this.SetNull(this.myTable.ColumnType);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnCheck);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsCheckNull()
        {
            return this.IsNull(this.myTable.ColumnCheck);
        }
        
        /// assign NULL value
        public void SetCheckNull()
        {
            this.SetNull(this.myTable.ColumnCheck);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Any bank details for a partner can be store in this table
    [Serializable()]
    public class PBankingDetailsTable : TTypedDataTable
    {
        
        /// A sequence key for the banking details.
        public DataColumn ColumnBankingDetailsKey;
        
        /// The type of banking: BANK ACCOUNT, CREDIT CARD, etc.
        public DataColumn ColumnBankingType;
        
        /// The full name used for authorizing a transaction with this banking entity.
        public DataColumn ColumnAccountName;
        
        /// 
        public DataColumn ColumnTitle;
        
        /// 
        public DataColumn ColumnFirstName;
        
        /// 
        public DataColumn ColumnMiddleName;
        
        /// 
        public DataColumn ColumnLastName;
        
        /// Link to p_bank to see what details the bank has.
        public DataColumn ColumnBankKey;
        
        /// The account number in the bank
        public DataColumn ColumnBankAccountNumber;
        
        /// The IBAN (International Bank Account Number). IBAN is a standardised international format for entering account details which consists of the country code, the local bank code, the (payee) account number and a control number.
        public DataColumn ColumnIban;
        
        /// Credit Card Security Code
        public DataColumn ColumnSecurityCode;
        
        /// When the credit card is valid from
        public DataColumn ColumnValidFromDate;
        
        /// When this expires
        public DataColumn ColumnExpiryDate;
        
        /// This is the finance details comment.
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBankingDetailsTable() : 
                base("PBankingDetails")
        {
        }
        
        /// constructor
        public PBankingDetailsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBankingDetailsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBankingDetailsRow this[int i]
        {
            get
            {
                return ((PBankingDetailsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "p_banking_details_key_i";
        }
        
        /// get help text for column
        public static string GetBankingDetailsKeyHelp()
        {
            return "A sequence key for the banking details.";
        }
        
        /// get label of column
        public static string GetBankingDetailsKeyLabel()
        {
            return "p_banking_details_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingTypeDBName()
        {
            return "p_banking_type_i";
        }
        
        /// get help text for column
        public static string GetBankingTypeHelp()
        {
            return "The type of banking: BANK ACCOUNT, CREDIT CARD, etc.";
        }
        
        /// get label of column
        public static string GetBankingTypeLabel()
        {
            return "p_banking_type_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountNameDBName()
        {
            return "p_account_name_c";
        }
        
        /// get help text for column
        public static string GetAccountNameHelp()
        {
            return "The full name used for authorizing a transaction with this banking entity.";
        }
        
        /// get label of column
        public static string GetAccountNameLabel()
        {
            return "Account Name";
        }
        
        /// get character length for column
        public static short GetAccountNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "p_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "p_first_name_c";
        }
        
        /// get help text for column
        public static string GetFirstNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFirstNameLabel()
        {
            return "First Name";
        }
        
        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMiddleNameDBName()
        {
            return "p_middle_name_c";
        }
        
        /// get help text for column
        public static string GetMiddleNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMiddleNameLabel()
        {
            return "Middle Name";
        }
        
        /// get character length for column
        public static short GetMiddleNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastNameDBName()
        {
            return "p_last_name_c";
        }
        
        /// get help text for column
        public static string GetLastNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastNameLabel()
        {
            return "Last Name";
        }
        
        /// get character length for column
        public static short GetLastNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankKeyDBName()
        {
            return "p_bank_key_n";
        }
        
        /// get help text for column
        public static string GetBankKeyHelp()
        {
            return "Link to p_bank to see what details the bank has.";
        }
        
        /// get label of column
        public static string GetBankKeyLabel()
        {
            return "p_bank_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankAccountNumberDBName()
        {
            return "p_bank_account_number_c";
        }
        
        /// get help text for column
        public static string GetBankAccountNumberHelp()
        {
            return "The account number in the bank";
        }
        
        /// get label of column
        public static string GetBankAccountNumberLabel()
        {
            return "Account Number";
        }
        
        /// get character length for column
        public static short GetBankAccountNumberLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIbanDBName()
        {
            return "p_iban_c";
        }
        
        /// get help text for column
        public static string GetIbanHelp()
        {
            return "The IBAN (International Bank Account Number). IBAN is a standardised internationa" +
                "l format for entering account details which consists of the country code, the lo" +
                "cal bank code, the (payee) account number and a control number.";
        }
        
        /// get label of column
        public static string GetIbanLabel()
        {
            return "IBAN";
        }
        
        /// get character length for column
        public static short GetIbanLength()
        {
            return 64;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSecurityCodeDBName()
        {
            return "p_security_code_c";
        }
        
        /// get help text for column
        public static string GetSecurityCodeHelp()
        {
            return "Credit Card Security Code";
        }
        
        /// get label of column
        public static string GetSecurityCodeLabel()
        {
            return "Security Code";
        }
        
        /// get character length for column
        public static short GetSecurityCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidFromDateDBName()
        {
            return "p_valid_from_date_d";
        }
        
        /// get help text for column
        public static string GetValidFromDateHelp()
        {
            return "When the credit card is valid from";
        }
        
        /// get label of column
        public static string GetValidFromDateLabel()
        {
            return "p_valid_from_date_d";
        }
        
        /// get display format for column
        public static short GetValidFromDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExpiryDateDBName()
        {
            return "p_expiry_date_d";
        }
        
        /// get help text for column
        public static string GetExpiryDateHelp()
        {
            return "When this expires";
        }
        
        /// get label of column
        public static string GetExpiryDateLabel()
        {
            return "p_expiry_date_d";
        }
        
        /// get display format for column
        public static short GetExpiryDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "This is the finance details comment.";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "p_comment_c";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 255;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBankingDetails";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_banking_details";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Banking Details";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_banking_details_key_i",
                    "p_banking_type_i",
                    "p_account_name_c",
                    "p_title_c",
                    "p_first_name_c",
                    "p_middle_name_c",
                    "p_last_name_c",
                    "p_bank_key_n",
                    "p_bank_account_number_c",
                    "p_iban_c",
                    "p_security_code_c",
                    "p_valid_from_date_d",
                    "p_expiry_date_d",
                    "p_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBankingDetailsKey = this.Columns["p_banking_details_key_i"];
            this.ColumnBankingType = this.Columns["p_banking_type_i"];
            this.ColumnAccountName = this.Columns["p_account_name_c"];
            this.ColumnTitle = this.Columns["p_title_c"];
            this.ColumnFirstName = this.Columns["p_first_name_c"];
            this.ColumnMiddleName = this.Columns["p_middle_name_c"];
            this.ColumnLastName = this.Columns["p_last_name_c"];
            this.ColumnBankKey = this.Columns["p_bank_key_n"];
            this.ColumnBankAccountNumber = this.Columns["p_bank_account_number_c"];
            this.ColumnIban = this.Columns["p_iban_c"];
            this.ColumnSecurityCode = this.Columns["p_security_code_c"];
            this.ColumnValidFromDate = this.Columns["p_valid_from_date_d"];
            this.ColumnExpiryDate = this.Columns["p_expiry_date_d"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBankingDetailsKey};
        }
        
        /// get typed set of changes
        public PBankingDetailsTable GetChangesTyped()
        {
            return ((PBankingDetailsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBankingDetailsRow NewRowTyped(bool AWithDefaultValues)
        {
            PBankingDetailsRow ret = ((PBankingDetailsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBankingDetailsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBankingDetailsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_banking_type_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_account_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_middle_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_last_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_bank_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_bank_account_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_iban_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_security_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_from_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_expiry_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBankingDetailsKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBankingType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnFirstName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnMiddleName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnLastName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnBankKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnBankAccountNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnIban))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 128);
            }
            if ((ACol == ColumnSecurityCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnValidFromDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnExpiryDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 510);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Any bank details for a partner can be store in this table
    [Serializable()]
    public class PBankingDetailsRow : System.Data.DataRow
    {
        
        private PBankingDetailsTable myTable;
        
        /// Constructor
        public PBankingDetailsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBankingDetailsTable)(this.Table));
        }
        
        /// A sequence key for the banking details.
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey) 
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }
        
        /// The type of banking: BANK ACCOUNT, CREDIT CARD, etc.
        public Int32 BankingType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingType) 
                            || (((Int32)(this[this.myTable.ColumnBankingType])) != value)))
                {
                    this[this.myTable.ColumnBankingType] = value;
                }
            }
        }
        
        /// The full name used for authorizing a transaction with this banking entity.
        public String AccountName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountName) 
                            || (((String)(this[this.myTable.ColumnAccountName])) != value)))
                {
                    this[this.myTable.ColumnAccountName] = value;
                }
            }
        }
        
        /// 
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// 
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName) 
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }
        
        /// 
        public String MiddleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName) 
                            || (((String)(this[this.myTable.ColumnMiddleName])) != value)))
                {
                    this[this.myTable.ColumnMiddleName] = value;
                }
            }
        }
        
        /// 
        public String LastName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastName) 
                            || (((String)(this[this.myTable.ColumnLastName])) != value)))
                {
                    this[this.myTable.ColumnLastName] = value;
                }
            }
        }
        
        /// Link to p_bank to see what details the bank has.
        public Int64 BankKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankKey) 
                            || (((Int64)(this[this.myTable.ColumnBankKey])) != value)))
                {
                    this[this.myTable.ColumnBankKey] = value;
                }
            }
        }
        
        /// The account number in the bank
        public String BankAccountNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountNumber) 
                            || (((String)(this[this.myTable.ColumnBankAccountNumber])) != value)))
                {
                    this[this.myTable.ColumnBankAccountNumber] = value;
                }
            }
        }
        
        /// The IBAN (International Bank Account Number). IBAN is a standardised international format for entering account details which consists of the country code, the local bank code, the (payee) account number and a control number.
        public String Iban
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIban.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIban) 
                            || (((String)(this[this.myTable.ColumnIban])) != value)))
                {
                    this[this.myTable.ColumnIban] = value;
                }
            }
        }
        
        /// Credit Card Security Code
        public String SecurityCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSecurityCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSecurityCode) 
                            || (((String)(this[this.myTable.ColumnSecurityCode])) != value)))
                {
                    this[this.myTable.ColumnSecurityCode] = value;
                }
            }
        }
        
        /// When the credit card is valid from
        public System.DateTime ValidFromDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidFromDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidFromDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidFromDate])) != value)))
                {
                    this[this.myTable.ColumnValidFromDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidFromDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFromDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidFromDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFromDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// When this expires
        public System.DateTime ExpiryDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExpiryDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExpiryDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnExpiryDate])) != value)))
                {
                    this[this.myTable.ColumnExpiryDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ExpiryDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnExpiryDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ExpiryDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnExpiryDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is the finance details comment.
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this.SetNull(this.myTable.ColumnBankingType);
            this.SetNull(this.myTable.ColumnAccountName);
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnMiddleName);
            this.SetNull(this.myTable.ColumnLastName);
            this.SetNull(this.myTable.ColumnBankKey);
            this.SetNull(this.myTable.ColumnBankAccountNumber);
            this.SetNull(this.myTable.ColumnIban);
            this.SetNull(this.myTable.ColumnSecurityCode);
            this.SetNull(this.myTable.ColumnValidFromDate);
            this.SetNull(this.myTable.ColumnExpiryDate);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsAccountNameNull()
        {
            return this.IsNull(this.myTable.ColumnAccountName);
        }
        
        /// assign NULL value
        public void SetAccountNameNull()
        {
            this.SetNull(this.myTable.ColumnAccountName);
        }
        
        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }
        
        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }
        
        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }
        
        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }
        
        /// test for NULL value
        public bool IsMiddleNameNull()
        {
            return this.IsNull(this.myTable.ColumnMiddleName);
        }
        
        /// assign NULL value
        public void SetMiddleNameNull()
        {
            this.SetNull(this.myTable.ColumnMiddleName);
        }
        
        /// test for NULL value
        public bool IsLastNameNull()
        {
            return this.IsNull(this.myTable.ColumnLastName);
        }
        
        /// assign NULL value
        public void SetLastNameNull()
        {
            this.SetNull(this.myTable.ColumnLastName);
        }
        
        /// test for NULL value
        public bool IsBankAccountNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountNumber);
        }
        
        /// assign NULL value
        public void SetBankAccountNumberNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountNumber);
        }
        
        /// test for NULL value
        public bool IsIbanNull()
        {
            return this.IsNull(this.myTable.ColumnIban);
        }
        
        /// assign NULL value
        public void SetIbanNull()
        {
            this.SetNull(this.myTable.ColumnIban);
        }
        
        /// test for NULL value
        public bool IsSecurityCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSecurityCode);
        }
        
        /// assign NULL value
        public void SetSecurityCodeNull()
        {
            this.SetNull(this.myTable.ColumnSecurityCode);
        }
        
        /// test for NULL value
        public bool IsValidFromDateNull()
        {
            return this.IsNull(this.myTable.ColumnValidFromDate);
        }
        
        /// assign NULL value
        public void SetValidFromDateNull()
        {
            this.SetNull(this.myTable.ColumnValidFromDate);
        }
        
        /// test for NULL value
        public bool IsExpiryDateNull()
        {
            return this.IsNull(this.myTable.ColumnExpiryDate);
        }
        
        /// assign NULL value
        public void SetExpiryDateNull()
        {
            this.SetNull(this.myTable.ColumnExpiryDate);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Links p_partner table with p_banking_details table for many to many relationship
    [Serializable()]
    public class PPartnerBankingDetailsTable : TTypedDataTable
    {
        
        /// The partner to link with
        public DataColumn ColumnPartnerKey;
        
        /// The banking details to link with
        public DataColumn ColumnBankingDetailsKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerBankingDetailsTable() : 
                base("PPartnerBankingDetails")
        {
        }
        
        /// constructor
        public PPartnerBankingDetailsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerBankingDetailsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerBankingDetailsRow this[int i]
        {
            get
            {
                return ((PPartnerBankingDetailsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "The partner to link with";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "p_partner_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "p_banking_details_key_i";
        }
        
        /// get help text for column
        public static string GetBankingDetailsKeyHelp()
        {
            return "The banking details to link with";
        }
        
        /// get label of column
        public static string GetBankingDetailsKeyLabel()
        {
            return "p_banking_details_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerBankingDetails";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_banking_details";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Banking Details";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_banking_details_key_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnBankingDetailsKey = this.Columns["p_banking_details_key_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnBankingDetailsKey};
        }
        
        /// get typed set of changes
        public PPartnerBankingDetailsTable GetChangesTyped()
        {
            return ((PPartnerBankingDetailsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerBankingDetailsRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerBankingDetailsRow ret = ((PPartnerBankingDetailsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerBankingDetailsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerBankingDetailsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnBankingDetailsKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Links p_partner table with p_banking_details table for many to many relationship
    [Serializable()]
    public class PPartnerBankingDetailsRow : System.Data.DataRow
    {
        
        private PPartnerBankingDetailsTable myTable;
        
        /// Constructor
        public PPartnerBankingDetailsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerBankingDetailsTable)(this.Table));
        }
        
        /// The partner to link with
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The banking details to link with
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey) 
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Usage type information for Banking Details.
    [Serializable()]
    public class PBankingDetailsUsageTypeTable : TTypedDataTable
    {
        
        /// This identifies the usage type.
        public DataColumn ColumnType;
        
        /// This describes the usage type.
        public DataColumn ColumnTypeDescription;
        
        /// Can this usage type be assigned?
        public DataColumn ColumnUnassignableFlag;
        
        /// This is the date where the record was set to unassignable.
        public DataColumn ColumnUnassignableDate;
        
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBankingDetailsUsageTypeTable() : 
                base("PBankingDetailsUsageType")
        {
        }
        
        /// constructor
        public PBankingDetailsUsageTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBankingDetailsUsageTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBankingDetailsUsageTypeRow this[int i]
        {
            get
            {
                return ((PBankingDetailsUsageTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDBName()
        {
            return "p_type_c";
        }
        
        /// get help text for column
        public static string GetTypeHelp()
        {
            return "Enter a usage type.";
        }
        
        /// get label of column
        public static string GetTypeLabel()
        {
            return "Usage Type";
        }
        
        /// get character length for column
        public static short GetTypeLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDescriptionDBName()
        {
            return "p_type_description_c";
        }
        
        /// get help text for column
        public static string GetTypeDescriptionHelp()
        {
            return "Enter a description for the usage type.";
        }
        
        /// get label of column
        public static string GetTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetTypeDescriptionLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pc_unassignable_flag_l";
        }
        
        /// get help text for column
        public static string GetUnassignableFlagHelp()
        {
            return "Can this usage type be assigned?";
        }
        
        /// get label of column
        public static string GetUnassignableFlagLabel()
        {
            return "Unassignable?";
        }
        
        /// get display format for column
        public static short GetUnassignableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pc_unassignable_date_d";
        }
        
        /// get help text for column
        public static string GetUnassignableDateHelp()
        {
            return "This is the date where the record was set to unassignable.";
        }
        
        /// get label of column
        public static string GetUnassignableDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetUnassignableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pc_deletable_flag_l";
        }
        
        /// get help text for column
        public static string GetDeletableFlagHelp()
        {
            return "Indicates if a record can be deleted.";
        }
        
        /// get label of column
        public static string GetDeletableFlagLabel()
        {
            return "Deletable?";
        }
        
        /// get display format for column
        public static short GetDeletableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBankingDetailsUsageType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_banking_details_usage_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Banking Details Usage Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_type_c",
                    "p_type_description_c",
                    "pc_unassignable_flag_l",
                    "pc_unassignable_date_d",
                    "pc_deletable_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnType = this.Columns["p_type_c"];
            this.ColumnTypeDescription = this.Columns["p_type_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pc_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pc_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pc_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnType};
        }
        
        /// get typed set of changes
        public PBankingDetailsUsageTypeTable GetChangesTyped()
        {
            return ((PBankingDetailsUsageTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBankingDetailsUsageTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PBankingDetailsUsageTypeRow ret = ((PBankingDetailsUsageTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBankingDetailsUsageTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBankingDetailsUsageTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pc_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pc_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pc_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnUnassignableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnUnassignableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDeletableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Usage type information for Banking Details.
    [Serializable()]
    public class PBankingDetailsUsageTypeRow : System.Data.DataRow
    {
        
        private PBankingDetailsUsageTypeTable myTable;
        
        /// Constructor
        public PBankingDetailsUsageTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBankingDetailsUsageTypeTable)(this.Table));
        }
        
        /// This identifies the usage type.
        public String Type
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnType) 
                            || (((String)(this[this.myTable.ColumnType])) != value)))
                {
                    this[this.myTable.ColumnType] = value;
                }
            }
        }
        
        /// This describes the usage type.
        public String TypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeDescription) 
                            || (((String)(this[this.myTable.ColumnTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTypeDescription] = value;
                }
            }
        }
        
        /// Can this usage type be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }
        
        /// This is the date where the record was set to unassignable.
        public System.DateTime UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime UnassignableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime UnassignableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnType);
            this.SetNull(this.myTable.ColumnTypeDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Links p_partner - p_banking_details combination to a usage type
    [Serializable()]
    public class PBankingDetailsUsageTable : TTypedDataTable
    {
        
        /// The partner to link with
        public DataColumn ColumnPartnerKey;
        
        /// The banking details to link with
        public DataColumn ColumnBankingDetailsKey;
        
        /// Reference to the usage type.
        public DataColumn ColumnType;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PBankingDetailsUsageTable() : 
                base("PBankingDetailsUsage")
        {
        }
        
        /// constructor
        public PBankingDetailsUsageTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PBankingDetailsUsageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PBankingDetailsUsageRow this[int i]
        {
            get
            {
                return ((PBankingDetailsUsageRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "The partner to link with";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "p_partner_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "p_banking_details_key_i";
        }
        
        /// get help text for column
        public static string GetBankingDetailsKeyHelp()
        {
            return "The banking details to link with";
        }
        
        /// get label of column
        public static string GetBankingDetailsKeyLabel()
        {
            return "p_banking_details_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDBName()
        {
            return "p_type_c";
        }
        
        /// get help text for column
        public static string GetTypeHelp()
        {
            return "Enter a usage type.";
        }
        
        /// get label of column
        public static string GetTypeLabel()
        {
            return "Usage Type";
        }
        
        /// get character length for column
        public static short GetTypeLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PBankingDetailsUsage";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_banking_details_usage";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Banking Details Usage";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_banking_details_key_i",
                    "p_type_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnBankingDetailsKey = this.Columns["p_banking_details_key_i"];
            this.ColumnType = this.Columns["p_type_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnBankingDetailsKey,
                    this.ColumnType};
        }
        
        /// get typed set of changes
        public PBankingDetailsUsageTable GetChangesTyped()
        {
            return ((PBankingDetailsUsageTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PBankingDetailsUsageRow NewRowTyped(bool AWithDefaultValues)
        {
            PBankingDetailsUsageRow ret = ((PBankingDetailsUsageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PBankingDetailsUsageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PBankingDetailsUsageRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnBankingDetailsKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Links p_partner - p_banking_details combination to a usage type
    [Serializable()]
    public class PBankingDetailsUsageRow : System.Data.DataRow
    {
        
        private PBankingDetailsUsageTable myTable;
        
        /// Constructor
        public PBankingDetailsUsageRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PBankingDetailsUsageTable)(this.Table));
        }
        
        /// The partner to link with
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The banking details to link with
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey) 
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }
        
        /// Reference to the usage type.
        public String Type
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnType) 
                            || (((String)(this[this.myTable.ColumnType])) != value)))
                {
                    this[this.myTable.ColumnType] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this.SetNull(this.myTable.ColumnType);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of all possible special types for a partner.
    [Serializable()]
    public class PTypeTable : TTypedDataTable
    {
        
        /// This code identifies the type
        public DataColumn ColumnTypeCode;
        
        /// This describes the method of aquisition.
        public DataColumn ColumnTypeDescription;
        
        /// This is a category, by which partner types can be grouped.
        public DataColumn ColumnCategoryCode;
        
        /// Defines if the type code is still for use
        public DataColumn ColumnValidType;
        
        /// This defines if the type code can be deleted.
        ///This can only be updated by the system manager.
        public DataColumn ColumnTypeDeletable;
        
        /// This Mot Group will be selected by default when entering gifts for Partners with this Special Type
        public DataColumn ColumnTypeMotivationGroup;
        
        /// This Mot Detail will be selected by default when entering gifts for Partners with this Special Type
        public DataColumn ColumnTypeMotivationDetail;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PTypeTable() : 
                base("PType")
        {
        }
        
        /// constructor
        public PTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PTypeRow this[int i]
        {
            get
            {
                return ((PTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeCodeDBName()
        {
            return "p_type_code_c";
        }
        
        /// get help text for column
        public static string GetTypeCodeHelp()
        {
            return "Enter a type code";
        }
        
        /// get label of column
        public static string GetTypeCodeLabel()
        {
            return "Type Code";
        }
        
        /// get character length for column
        public static short GetTypeCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDescriptionDBName()
        {
            return "p_type_description_c";
        }
        
        /// get help text for column
        public static string GetTypeDescriptionHelp()
        {
            return "Enter a full description";
        }
        
        /// get label of column
        public static string GetTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetTypeDescriptionLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryCodeDBName()
        {
            return "p_category_code_c";
        }
        
        /// get help text for column
        public static string GetCategoryCodeHelp()
        {
            return "This is a category, by which partner types can be grouped.";
        }
        
        /// get label of column
        public static string GetCategoryCodeLabel()
        {
            return "Category";
        }
        
        /// get character length for column
        public static short GetCategoryCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidTypeDBName()
        {
            return "p_valid_type_l";
        }
        
        /// get help text for column
        public static string GetValidTypeHelp()
        {
            return "Select if this Type Code is selectable by users";
        }
        
        /// get label of column
        public static string GetValidTypeLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetValidTypeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeDeletableDBName()
        {
            return "p_type_deletable_l";
        }
        
        /// get help text for column
        public static string GetTypeDeletableHelp()
        {
            return "Select if deletable";
        }
        
        /// get label of column
        public static string GetTypeDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetTypeDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeMotivationGroupDBName()
        {
            return "p_type_motivation_group_c";
        }
        
        /// get help text for column
        public static string GetTypeMotivationGroupHelp()
        {
            return "Enter a default Motivation Group for gifts to Partners with this Special Type";
        }
        
        /// get label of column
        public static string GetTypeMotivationGroupLabel()
        {
            return "Motivation Group Code";
        }
        
        /// get character length for column
        public static short GetTypeMotivationGroupLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeMotivationDetailDBName()
        {
            return "p_type_motivation_detail_c";
        }
        
        /// get help text for column
        public static string GetTypeMotivationDetailHelp()
        {
            return "Enter a default Motivation Detail for gifts to Partners with this Special Type";
        }
        
        /// get label of column
        public static string GetTypeMotivationDetailLabel()
        {
            return "Motivation Detail Code";
        }
        
        /// get character length for column
        public static short GetTypeMotivationDetailLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_type_code_c",
                    "p_type_description_c",
                    "p_category_code_c",
                    "p_valid_type_l",
                    "p_type_deletable_l",
                    "p_type_motivation_group_c",
                    "p_type_motivation_detail_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnTypeCode = this.Columns["p_type_code_c"];
            this.ColumnTypeDescription = this.Columns["p_type_description_c"];
            this.ColumnCategoryCode = this.Columns["p_category_code_c"];
            this.ColumnValidType = this.Columns["p_valid_type_l"];
            this.ColumnTypeDeletable = this.Columns["p_type_deletable_l"];
            this.ColumnTypeMotivationGroup = this.Columns["p_type_motivation_group_c"];
            this.ColumnTypeMotivationDetail = this.Columns["p_type_motivation_detail_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnTypeCode};
        }
        
        /// get typed set of changes
        public PTypeTable GetChangesTyped()
        {
            return ((PTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PTypeRow ret = ((PTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_type_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_type_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_type_motivation_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_type_motivation_detail_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnCategoryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnValidType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTypeDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTypeMotivationGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTypeMotivationDetail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of all possible special types for a partner.
    [Serializable()]
    public class PTypeRow : System.Data.DataRow
    {
        
        private PTypeTable myTable;
        
        /// Constructor
        public PTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PTypeTable)(this.Table));
        }
        
        /// This code identifies the type
        public String TypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeCode) 
                            || (((String)(this[this.myTable.ColumnTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTypeCode] = value;
                }
            }
        }
        
        /// This describes the method of aquisition.
        public String TypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeDescription) 
                            || (((String)(this[this.myTable.ColumnTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTypeDescription] = value;
                }
            }
        }
        
        /// This is a category, by which partner types can be grouped.
        public String CategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategoryCode) 
                            || (((String)(this[this.myTable.ColumnCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnCategoryCode] = value;
                }
            }
        }
        
        /// Defines if the type code is still for use
        public Boolean ValidType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidType) 
                            || (((Boolean)(this[this.myTable.ColumnValidType])) != value)))
                {
                    this[this.myTable.ColumnValidType] = value;
                }
            }
        }
        
        /// This defines if the type code can be deleted.
        ///This can only be updated by the system manager.
        public Boolean TypeDeletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnTypeDeletable])) != value)))
                {
                    this[this.myTable.ColumnTypeDeletable] = value;
                }
            }
        }
        
        /// This Mot Group will be selected by default when entering gifts for Partners with this Special Type
        public String TypeMotivationGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeMotivationGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeMotivationGroup) 
                            || (((String)(this[this.myTable.ColumnTypeMotivationGroup])) != value)))
                {
                    this[this.myTable.ColumnTypeMotivationGroup] = value;
                }
            }
        }
        
        /// This Mot Detail will be selected by default when entering gifts for Partners with this Special Type
        public String TypeMotivationDetail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeMotivationDetail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeMotivationDetail) 
                            || (((String)(this[this.myTable.ColumnTypeMotivationDetail])) != value)))
                {
                    this[this.myTable.ColumnTypeMotivationDetail] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnTypeCode);
            this.SetNull(this.myTable.ColumnTypeDescription);
            this.SetNull(this.myTable.ColumnCategoryCode);
            this[this.myTable.ColumnValidType.Ordinal] = true;
            this[this.myTable.ColumnTypeDeletable.Ordinal] = true;
            this.SetNull(this.myTable.ColumnTypeMotivationGroup);
            this.SetNull(this.myTable.ColumnTypeMotivationDetail);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCategoryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCategoryCode);
        }
        
        /// assign NULL value
        public void SetCategoryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCategoryCode);
        }
        
        /// test for NULL value
        public bool IsValidTypeNull()
        {
            return this.IsNull(this.myTable.ColumnValidType);
        }
        
        /// assign NULL value
        public void SetValidTypeNull()
        {
            this.SetNull(this.myTable.ColumnValidType);
        }
        
        /// test for NULL value
        public bool IsTypeDeletableNull()
        {
            return this.IsNull(this.myTable.ColumnTypeDeletable);
        }
        
        /// assign NULL value
        public void SetTypeDeletableNull()
        {
            this.SetNull(this.myTable.ColumnTypeDeletable);
        }
        
        /// test for NULL value
        public bool IsTypeMotivationGroupNull()
        {
            return this.IsNull(this.myTable.ColumnTypeMotivationGroup);
        }
        
        /// assign NULL value
        public void SetTypeMotivationGroupNull()
        {
            this.SetNull(this.myTable.ColumnTypeMotivationGroup);
        }
        
        /// test for NULL value
        public bool IsTypeMotivationDetailNull()
        {
            return this.IsNull(this.myTable.ColumnTypeMotivationDetail);
        }
        
        /// assign NULL value
        public void SetTypeMotivationDetailNull()
        {
            this.SetNull(this.myTable.ColumnTypeMotivationDetail);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table contains the codes that indicate the categories of partner (special) types
    [Serializable()]
    public class PTypeCategoryTable : TTypedDataTable
    {
        
        /// This code indicates the category of a type.
        public DataColumn ColumnCode;
        
        /// This describes the type category.
        public DataColumn ColumnDescription;
        
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PTypeCategoryTable() : 
                base("PTypeCategory")
        {
        }
        
        /// constructor
        public PTypeCategoryTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PTypeCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PTypeCategoryRow this[int i]
        {
            get
            {
                return ((PTypeCategoryRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "This code indicates the category of a partner type.";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Type Category";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "This describes the partner type category.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "p_unassignable_flag_l";
        }
        
        /// get help text for column
        public static string GetUnassignableFlagHelp()
        {
            return "Indicates if this code can still be assigned?";
        }
        
        /// get label of column
        public static string GetUnassignableFlagLabel()
        {
            return "Unassignable";
        }
        
        /// get display format for column
        public static short GetUnassignableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "p_unassignable_date_d";
        }
        
        /// get help text for column
        public static string GetUnassignableDateHelp()
        {
            return "Date from which this code was made unassignable.";
        }
        
        /// get label of column
        public static string GetUnassignableDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetUnassignableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "p_deletable_flag_l";
        }
        
        /// get help text for column
        public static string GetDeletableFlagHelp()
        {
            return "Indicates if a record can be deleted.";
        }
        
        /// get label of column
        public static string GetDeletableFlagLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PTypeCategory";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_type_category";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Type Category";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_code_c",
                    "p_description_c",
                    "p_unassignable_flag_l",
                    "p_unassignable_date_d",
                    "p_deletable_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnUnassignableFlag = this.Columns["p_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["p_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["p_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PTypeCategoryTable GetChangesTyped()
        {
            return ((PTypeCategoryTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PTypeCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PTypeCategoryRow ret = ((PTypeCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PTypeCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PTypeCategoryRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnUnassignableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnUnassignableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDeletableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table contains the codes that indicate the categories of partner (special) types
    [Serializable()]
    public class PTypeCategoryRow : System.Data.DataRow
    {
        
        private PTypeCategoryTable myTable;
        
        /// Constructor
        public PTypeCategoryRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PTypeCategoryTable)(this.Table));
        }
        
        /// This code indicates the category of a type.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// This describes the type category.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }
        
        /// Date from which this code was made unassignable.
        public System.DateTime UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime UnassignableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime UnassignableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Types assigned to each partner.  Also known as special types.
    [Serializable()]
    public class PPartnerTypeTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// This code identifies the type
        public DataColumn ColumnTypeCode;
        
        /// The date the special type is valid from. Can be NULL if there is no relevant start date.
        public DataColumn ColumnValidFrom;
        
        /// The date the special type is valid to. Can be NULL if there is no end date.
        public DataColumn ColumnValidUntil;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerTypeTable() : 
                base("PPartnerType")
        {
        }
        
        /// constructor
        public PPartnerTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerTypeRow this[int i]
        {
            get
            {
                return ((PPartnerTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeCodeDBName()
        {
            return "p_type_code_c";
        }
        
        /// get help text for column
        public static string GetTypeCodeHelp()
        {
            return "Select a type code";
        }
        
        /// get label of column
        public static string GetTypeCodeLabel()
        {
            return "Type Code";
        }
        
        /// get character length for column
        public static short GetTypeCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidFromDBName()
        {
            return "p_valid_from_d";
        }
        
        /// get help text for column
        public static string GetValidFromHelp()
        {
            return "The date the special type is valid from. Can be NULL if there is no relevant star" +
                "t date.";
        }
        
        /// get label of column
        public static string GetValidFromLabel()
        {
            return "Valid from";
        }
        
        /// get display format for column
        public static short GetValidFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidUntilDBName()
        {
            return "p_valid_until_d";
        }
        
        /// get help text for column
        public static string GetValidUntilHelp()
        {
            return "The date the special type is valid to. Can be NULL if there is no end date.";
        }
        
        /// get label of column
        public static string GetValidUntilLabel()
        {
            return "Valid until";
        }
        
        /// get display format for column
        public static short GetValidUntilLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_type_code_c",
                    "p_valid_from_d",
                    "p_valid_until_d",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnTypeCode = this.Columns["p_type_code_c"];
            this.ColumnValidFrom = this.Columns["p_valid_from_d"];
            this.ColumnValidUntil = this.Columns["p_valid_until_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnTypeCode};
        }
        
        /// get typed set of changes
        public PPartnerTypeTable GetChangesTyped()
        {
            return ((PPartnerTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerTypeRow ret = ((PPartnerTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_until_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnValidFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnValidUntil))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Types assigned to each partner.  Also known as special types.
    [Serializable()]
    public class PPartnerTypeRow : System.Data.DataRow
    {
        
        private PPartnerTypeTable myTable;
        
        /// Constructor
        public PPartnerTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerTypeTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This code identifies the type
        public String TypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeCode) 
                            || (((String)(this[this.myTable.ColumnTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTypeCode] = value;
                }
            }
        }
        
        /// The date the special type is valid from. Can be NULL if there is no relevant start date.
        public System.DateTime ValidFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidFrom])) != value)))
                {
                    this[this.myTable.ColumnValidFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the special type is valid to. Can be NULL if there is no end date.
        public System.DateTime ValidUntil
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidUntil.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidUntil) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidUntil])) != value)))
                {
                    this[this.myTable.ColumnValidUntil] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidUntilLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidUntil], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidUntilHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidUntil.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTypeCode);
            this.SetNull(this.myTable.ColumnValidFrom);
            this.SetNull(this.myTable.ColumnValidUntil);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsValidFromNull()
        {
            return this.IsNull(this.myTable.ColumnValidFrom);
        }
        
        /// assign NULL value
        public void SetValidFromNull()
        {
            this.SetNull(this.myTable.ColumnValidFrom);
        }
        
        /// test for NULL value
        public bool IsValidUntilNull()
        {
            return this.IsNull(this.myTable.ColumnValidUntil);
        }
        
        /// assign NULL value
        public void SetValidUntilNull()
        {
            this.SetNull(this.myTable.ColumnValidUntil);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table contains the codes that indicate the categories of relations (grouping). 
    [Serializable()]
    public class PRelationCategoryTable : TTypedDataTable
    {
        
        /// This code indicates the category of a relation.
        public DataColumn ColumnCode;
        
        /// This describes the relation category.
        public DataColumn ColumnDescription;
        
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PRelationCategoryTable() : 
                base("PRelationCategory")
        {
        }
        
        /// constructor
        public PRelationCategoryTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PRelationCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PRelationCategoryRow this[int i]
        {
            get
            {
                return ((PRelationCategoryRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "This code indicates the category of a relation.";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Relation Category";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "This describes the relation category.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "p_unassignable_flag_l";
        }
        
        /// get help text for column
        public static string GetUnassignableFlagHelp()
        {
            return "Indicates if this code can still be assigned?";
        }
        
        /// get label of column
        public static string GetUnassignableFlagLabel()
        {
            return "Unassignable";
        }
        
        /// get display format for column
        public static short GetUnassignableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "p_unassignable_date_d";
        }
        
        /// get help text for column
        public static string GetUnassignableDateHelp()
        {
            return "Date from which this code was made unassignable.";
        }
        
        /// get label of column
        public static string GetUnassignableDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetUnassignableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "p_deletable_flag_l";
        }
        
        /// get help text for column
        public static string GetDeletableFlagHelp()
        {
            return "Indicates if a record can be deleted.";
        }
        
        /// get label of column
        public static string GetDeletableFlagLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PRelationCategory";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_relation_category";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Relation Category";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_code_c",
                    "p_description_c",
                    "p_unassignable_flag_l",
                    "p_unassignable_date_d",
                    "p_deletable_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnUnassignableFlag = this.Columns["p_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["p_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["p_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PRelationCategoryTable GetChangesTyped()
        {
            return ((PRelationCategoryTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PRelationCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PRelationCategoryRow ret = ((PRelationCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PRelationCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PRelationCategoryRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnUnassignableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnUnassignableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDeletableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table contains the codes that indicate the categories of relations (grouping). 
    [Serializable()]
    public class PRelationCategoryRow : System.Data.DataRow
    {
        
        private PRelationCategoryTable myTable;
        
        /// Constructor
        public PRelationCategoryRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PRelationCategoryTable)(this.Table));
        }
        
        /// This code indicates the category of a relation.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// This describes the relation category.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }
        
        /// Date from which this code was made unassignable.
        public System.DateTime UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime UnassignableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime UnassignableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of relationships between partners.  Relations occur in one direction only.   The relation code is used in the p_partner_relationship record. 
    [Serializable()]
    public class PRelationTable : TTypedDataTable
    {
        
        /// This code identifies the relation
        public DataColumn ColumnRelationName;
        
        /// This describes the relation.
        public DataColumn ColumnRelationDescription;
        
        /// This is a category, by which relations can be grouped.
        public DataColumn ColumnRelationCategory;
        
        /// This defines if the relation name can be deleted.
        ///This can only be updated by the system manager.
        ///It default to Yes.
        public DataColumn ColumnDeletable;
        
        /// This describes the relation in the reverse direction, eg Husband and Wife.
        public DataColumn ColumnReciprocalDescription;
        
        /// Determines whether the record is still assignable 
        public DataColumn ColumnValidRelation;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PRelationTable() : 
                base("PRelation")
        {
        }
        
        /// constructor
        public PRelationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PRelationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PRelationRow this[int i]
        {
            get
            {
                return ((PRelationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetRelationNameDBName()
        {
            return "p_relation_name_c";
        }
        
        /// get help text for column
        public static string GetRelationNameHelp()
        {
            return "Enter a relation code";
        }
        
        /// get label of column
        public static string GetRelationNameLabel()
        {
            return "Relation Name";
        }
        
        /// get character length for column
        public static short GetRelationNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRelationDescriptionDBName()
        {
            return "p_relation_description_c";
        }
        
        /// get help text for column
        public static string GetRelationDescriptionHelp()
        {
            return "Enter a full description of the relation";
        }
        
        /// get label of column
        public static string GetRelationDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetRelationDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRelationCategoryDBName()
        {
            return "p_relation_category_c";
        }
        
        /// get help text for column
        public static string GetRelationCategoryHelp()
        {
            return "This is a category, by which relations can be grouped.";
        }
        
        /// get label of column
        public static string GetRelationCategoryLabel()
        {
            return "Category";
        }
        
        /// get character length for column
        public static short GetRelationCategoryLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "Select if deletable";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReciprocalDescriptionDBName()
        {
            return "p_reciprocal_description_c";
        }
        
        /// get help text for column
        public static string GetReciprocalDescriptionHelp()
        {
            return "Enter the full reciprocal description of the relation";
        }
        
        /// get label of column
        public static string GetReciprocalDescriptionLabel()
        {
            return "Reciprocal Description";
        }
        
        /// get character length for column
        public static short GetReciprocalDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidRelationDBName()
        {
            return "p_valid_relation_l";
        }
        
        /// get help text for column
        public static string GetValidRelationHelp()
        {
            return "Select if this is available for to users";
        }
        
        /// get label of column
        public static string GetValidRelationLabel()
        {
            return "Assignable";
        }
        
        /// get display format for column
        public static short GetValidRelationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PRelation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_relation";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Relation";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_relation_name_c",
                    "p_relation_description_c",
                    "p_relation_category_c",
                    "p_deletable_l",
                    "p_reciprocal_description_c",
                    "p_valid_relation_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnRelationName = this.Columns["p_relation_name_c"];
            this.ColumnRelationDescription = this.Columns["p_relation_description_c"];
            this.ColumnRelationCategory = this.Columns["p_relation_category_c"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnReciprocalDescription = this.Columns["p_reciprocal_description_c"];
            this.ColumnValidRelation = this.Columns["p_valid_relation_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnRelationName};
        }
        
        /// get typed set of changes
        public PRelationTable GetChangesTyped()
        {
            return ((PRelationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PRelationRow NewRowTyped(bool AWithDefaultValues)
        {
            PRelationRow ret = ((PRelationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PRelationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PRelationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_relation_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_relation_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_relation_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_reciprocal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_relation_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnRelationName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnRelationDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnRelationCategory))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReciprocalDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnValidRelation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of relationships between partners.  Relations occur in one direction only.   The relation code is used in the p_partner_relationship record. 
    [Serializable()]
    public class PRelationRow : System.Data.DataRow
    {
        
        private PRelationTable myTable;
        
        /// Constructor
        public PRelationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PRelationTable)(this.Table));
        }
        
        /// This code identifies the relation
        public String RelationName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRelationName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRelationName) 
                            || (((String)(this[this.myTable.ColumnRelationName])) != value)))
                {
                    this[this.myTable.ColumnRelationName] = value;
                }
            }
        }
        
        /// This describes the relation.
        public String RelationDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRelationDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRelationDescription) 
                            || (((String)(this[this.myTable.ColumnRelationDescription])) != value)))
                {
                    this[this.myTable.ColumnRelationDescription] = value;
                }
            }
        }
        
        /// This is a category, by which relations can be grouped.
        public String RelationCategory
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRelationCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRelationCategory) 
                            || (((String)(this[this.myTable.ColumnRelationCategory])) != value)))
                {
                    this[this.myTable.ColumnRelationCategory] = value;
                }
            }
        }
        
        /// This defines if the relation name can be deleted.
        ///This can only be updated by the system manager.
        ///It default to Yes.
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// This describes the relation in the reverse direction, eg Husband and Wife.
        public String ReciprocalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReciprocalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReciprocalDescription) 
                            || (((String)(this[this.myTable.ColumnReciprocalDescription])) != value)))
                {
                    this[this.myTable.ColumnReciprocalDescription] = value;
                }
            }
        }
        
        /// Determines whether the record is still assignable 
        public Boolean ValidRelation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidRelation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidRelation) 
                            || (((Boolean)(this[this.myTable.ColumnValidRelation])) != value)))
                {
                    this[this.myTable.ColumnValidRelation] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnRelationName);
            this.SetNull(this.myTable.ColumnRelationDescription);
            this.SetNull(this.myTable.ColumnRelationCategory);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this.SetNull(this.myTable.ColumnReciprocalDescription);
            this[this.myTable.ColumnValidRelation.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsRelationCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnRelationCategory);
        }
        
        /// assign NULL value
        public void SetRelationCategoryNull()
        {
            this.SetNull(this.myTable.ColumnRelationCategory);
        }
        
        /// test for NULL value
        public bool IsValidRelationNull()
        {
            return this.IsNull(this.myTable.ColumnValidRelation);
        }
        
        /// assign NULL value
        public void SetValidRelationNull()
        {
            this.SetNull(this.myTable.ColumnValidRelation);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Relationships between pairs of partners.  Among other relationships, this also relates the FAMILY class partners to the PERSON class partners to indicate members of a family.
    [Serializable()]
    public class PPartnerRelationshipTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// This code identifies the relation
        public DataColumn ColumnRelationName;
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnRelationKey;
        
        /// 
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerRelationshipTable() : 
                base("PPartnerRelationship")
        {
        }
        
        /// constructor
        public PPartnerRelationshipTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerRelationshipTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerRelationshipRow this[int i]
        {
            get
            {
                return ((PPartnerRelationshipRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRelationNameDBName()
        {
            return "p_relation_name_c";
        }
        
        /// get help text for column
        public static string GetRelationNameHelp()
        {
            return "Select the Relation Name/type";
        }
        
        /// get label of column
        public static string GetRelationNameLabel()
        {
            return "Relation Name";
        }
        
        /// get character length for column
        public static short GetRelationNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRelationKeyDBName()
        {
            return "p_relation_key_n";
        }
        
        /// get help text for column
        public static string GetRelationKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetRelationKeyLabel()
        {
            return "Relation Key";
        }
        
        /// get display format for column
        public static short GetRelationKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Enter any additional specific relationship comments";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comments";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 1000;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerRelationship";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_relationship";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Relationship";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_relation_name_c",
                    "p_relation_key_n",
                    "p_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnRelationName = this.Columns["p_relation_name_c"];
            this.ColumnRelationKey = this.Columns["p_relation_key_n"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnRelationName,
                    this.ColumnRelationKey};
        }
        
        /// get typed set of changes
        public PPartnerRelationshipTable GetChangesTyped()
        {
            return ((PPartnerRelationshipTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerRelationshipRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerRelationshipRow ret = ((PPartnerRelationshipRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerRelationshipRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerRelationshipRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_relation_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_relation_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnRelationName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnRelationKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 2000);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Relationships between pairs of partners.  Among other relationships, this also relates the FAMILY class partners to the PERSON class partners to indicate members of a family.
    [Serializable()]
    public class PPartnerRelationshipRow : System.Data.DataRow
    {
        
        private PPartnerRelationshipTable myTable;
        
        /// Constructor
        public PPartnerRelationshipRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerRelationshipTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This code identifies the relation
        public String RelationName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRelationName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRelationName) 
                            || (((String)(this[this.myTable.ColumnRelationName])) != value)))
                {
                    this[this.myTable.ColumnRelationName] = value;
                }
            }
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 RelationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRelationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRelationKey) 
                            || (((Int64)(this[this.myTable.ColumnRelationKey])) != value)))
                {
                    this[this.myTable.ColumnRelationKey] = value;
                }
            }
        }
        
        /// 
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnRelationName);
            this[this.myTable.ColumnRelationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// For Development.  Associates Progress program files with their Petra Partner report names.
    [Serializable()]
    public class PReportsTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnReportName;
        
        /// 
        public DataColumn ColumnReportDescription;
        
        /// 
        public DataColumn ColumnReportProgram;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PReportsTable() : 
                base("PReports")
        {
        }
        
        /// constructor
        public PReportsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PReportsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PReportsRow this[int i]
        {
            get
            {
                return ((PReportsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportNameDBName()
        {
            return "p_report_name_c";
        }
        
        /// get help text for column
        public static string GetReportNameHelp()
        {
            return "Enter a Report Name";
        }
        
        /// get label of column
        public static string GetReportNameLabel()
        {
            return "Report Name";
        }
        
        /// get character length for column
        public static short GetReportNameLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportDescriptionDBName()
        {
            return "p_report_description_c";
        }
        
        /// get help text for column
        public static string GetReportDescriptionHelp()
        {
            return "Enter a full Report Description";
        }
        
        /// get label of column
        public static string GetReportDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetReportDescriptionLength()
        {
            return 255;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportProgramDBName()
        {
            return "p_report_program_c";
        }
        
        /// get help text for column
        public static string GetReportProgramHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetReportProgramLabel()
        {
            return "Report Program";
        }
        
        /// get character length for column
        public static short GetReportProgramLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PReports";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_reports";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Reports";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_report_name_c",
                    "p_report_description_c",
                    "p_report_program_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnReportName = this.Columns["p_report_name_c"];
            this.ColumnReportDescription = this.Columns["p_report_description_c"];
            this.ColumnReportProgram = this.Columns["p_report_program_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnReportName};
        }
        
        /// get typed set of changes
        public PReportsTable GetChangesTyped()
        {
            return ((PReportsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PReportsRow NewRowTyped(bool AWithDefaultValues)
        {
            PReportsRow ret = ((PReportsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PReportsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PReportsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_report_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_report_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_report_program_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnReportName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnReportDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 510);
            }
            if ((ACol == ColumnReportProgram))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// For Development.  Associates Progress program files with their Petra Partner report names.
    [Serializable()]
    public class PReportsRow : System.Data.DataRow
    {
        
        private PReportsTable myTable;
        
        /// Constructor
        public PReportsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PReportsTable)(this.Table));
        }
        
        /// 
        public String ReportName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportName) 
                            || (((String)(this[this.myTable.ColumnReportName])) != value)))
                {
                    this[this.myTable.ColumnReportName] = value;
                }
            }
        }
        
        /// 
        public String ReportDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportDescription) 
                            || (((String)(this[this.myTable.ColumnReportDescription])) != value)))
                {
                    this[this.myTable.ColumnReportDescription] = value;
                }
            }
        }
        
        /// 
        public String ReportProgram
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportProgram.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportProgram) 
                            || (((String)(this[this.myTable.ColumnReportProgram])) != value)))
                {
                    this[this.myTable.ColumnReportProgram] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnReportName);
            this.SetNull(this.myTable.ColumnReportDescription);
            this.SetNull(this.myTable.ColumnReportProgram);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReportDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnReportDescription);
        }
        
        /// assign NULL value
        public void SetReportDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnReportDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Used to keep track of partner keys
    [Serializable()]
    public class PPartnerLedgerTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnLastPartnerId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerLedgerTable() : 
                base("PPartnerLedger")
        {
        }
        
        /// constructor
        public PPartnerLedgerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerLedgerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerLedgerRow this[int i]
        {
            get
            {
                return ((PPartnerLedgerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastPartnerIdDBName()
        {
            return "p_last_partner_id_i";
        }
        
        /// get help text for column
        public static string GetLastPartnerIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastPartnerIdLabel()
        {
            return "Last Partner ID";
        }
        
        /// get display format for column
        public static short GetLastPartnerIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerLedger";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_ledger";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Ledger";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_last_partner_id_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnLastPartnerId = this.Columns["p_last_partner_id_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PPartnerLedgerTable GetChangesTyped()
        {
            return ((PPartnerLedgerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerLedgerRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerLedgerRow ret = ((PPartnerLedgerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerLedgerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerLedgerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_last_partner_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLastPartnerId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Used to keep track of partner keys
    [Serializable()]
    public class PPartnerLedgerRow : System.Data.DataRow
    {
        
        private PPartnerLedgerTable myTable;
        
        /// Constructor
        public PPartnerLedgerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerLedgerTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Int32 LastPartnerId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPartnerId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPartnerId) 
                            || (((Int32)(this[this.myTable.ColumnLastPartnerId])) != value)))
                {
                    this[this.myTable.ColumnLastPartnerId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnLastPartnerId.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table is used to define data labels for individual use in each office.
    [Serializable()]
    public class PDataLabelTable : TTypedDataTable
    {
        
        /// A sequence key for data labels.
        public DataColumn ColumnKey;
        
        /// Label Text
        public DataColumn ColumnText;
        
        /// Data Label Group
        public DataColumn ColumnGroup;
        
        /// Description (Help Text) for the label that the user will see
        public DataColumn ColumnDescription;
        
        /// Data Type (char | integer | float | currency | boolean | date | time | partnerkey | lookup)
        public DataColumn ColumnDataType;
        
        /// Maximum length of data string if data type is set to character.
        public DataColumn ColumnCharLength;
        
        /// Number of decimal places if data type is set to numeric.
        public DataColumn ColumnNumDecimalPlaces;
        
        /// This defines which currency is being used (if data type is currency)
        public DataColumn ColumnCurrencyCode;
        
        /// If a lookup category is selected then the values can be chosen from a drop down box
        public DataColumn ColumnLookupCategoryCode;
        
        /// If TRUE then a value for this label has to be set
        public DataColumn ColumnEntryMandatory;
        
        /// If TRUE then this data label will be displayed. Gives a chance to hide but keep labels for historical reasons.
        public DataColumn ColumnDisplayed;
        
        /// Data label will not be displayed any longer from this date on.
        public DataColumn ColumnNotDisplayedFrom;
        
        /// if FALSE then the values will be displayed but are not editable.
        public DataColumn ColumnEditable;
        
        /// Data label values will not be editable any longer from this date on.
        public DataColumn ColumnNotEditableFrom;
        
        /// Indicates whether or not the data label has restricted access. If it does then the access will be controlled by s_group_data_label
        public DataColumn ColumnRestricted;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDataLabelTable() : 
                base("PDataLabel")
        {
        }
        
        /// constructor
        public PDataLabelTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDataLabelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDataLabelRow this[int i]
        {
            get
            {
                return ((PDataLabelRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "p_key_i";
        }
        
        /// get help text for column
        public static string GetKeyHelp()
        {
            return "A sequence key for data labels.";
        }
        
        /// get label of column
        public static string GetKeyLabel()
        {
            return "p_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetTextDBName()
        {
            return "p_text_c";
        }
        
        /// get help text for column
        public static string GetTextHelp()
        {
            return "Which text will be displayed for the data label.";
        }
        
        /// get label of column
        public static string GetTextLabel()
        {
            return "Label Text";
        }
        
        /// get character length for column
        public static short GetTextLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupDBName()
        {
            return "p_group_c";
        }
        
        /// get help text for column
        public static string GetGroupHelp()
        {
            return "Determines the group the label will appear in.";
        }
        
        /// get label of column
        public static string GetGroupLabel()
        {
            return "Label Group";
        }
        
        /// get character length for column
        public static short GetGroupLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Enter the description that the user will see for the label.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataTypeDBName()
        {
            return "p_data_type_c";
        }
        
        /// get help text for column
        public static string GetDataTypeHelp()
        {
            return "Choose the data type to be used for the label.";
        }
        
        /// get label of column
        public static string GetDataTypeLabel()
        {
            return "Data Type";
        }
        
        /// get character length for column
        public static short GetDataTypeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCharLengthDBName()
        {
            return "p_char_length_i";
        }
        
        /// get help text for column
        public static string GetCharLengthHelp()
        {
            return "Set the maximum length for data labels of type character.";
        }
        
        /// get label of column
        public static string GetCharLengthLabel()
        {
            return "Length";
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumDecimalPlacesDBName()
        {
            return "p_num_decimal_places_i";
        }
        
        /// get help text for column
        public static string GetNumDecimalPlacesHelp()
        {
            return "Set the number of decimal places for numeric data labels.";
        }
        
        /// get label of column
        public static string GetNumDecimalPlacesLabel()
        {
            return "Decimal Places";
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "p_currency_code_c";
        }
        
        /// get help text for column
        public static string GetCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetCurrencyCodeLabel()
        {
            return "Currency Code";
        }
        
        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLookupCategoryCodeDBName()
        {
            return "p_lookup_category_code_c";
        }
        
        /// get help text for column
        public static string GetLookupCategoryCodeHelp()
        {
            return "Enter a category to pick values of this data label from a list.";
        }
        
        /// get label of column
        public static string GetLookupCategoryCodeLabel()
        {
            return "Lookup Category";
        }
        
        /// get character length for column
        public static short GetLookupCategoryCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEntryMandatoryDBName()
        {
            return "p_entry_mandatory_l";
        }
        
        /// get help text for column
        public static string GetEntryMandatoryHelp()
        {
            return "Is it mandatory to set a value for this data label?";
        }
        
        /// get label of column
        public static string GetEntryMandatoryLabel()
        {
            return "Mandatory?";
        }
        
        /// get display format for column
        public static short GetEntryMandatoryLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDisplayedDBName()
        {
            return "p_displayed_l";
        }
        
        /// get help text for column
        public static string GetDisplayedHelp()
        {
            return "Do you want this data label to be displayed?";
        }
        
        /// get label of column
        public static string GetDisplayedLabel()
        {
            return "Displayed?";
        }
        
        /// get display format for column
        public static short GetDisplayedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNotDisplayedFromDBName()
        {
            return "p_not_displayed_from_d";
        }
        
        /// get help text for column
        public static string GetNotDisplayedFromHelp()
        {
            return "Date from which on this label will not be displayed any more";
        }
        
        /// get label of column
        public static string GetNotDisplayedFromLabel()
        {
            return "End Date for Display";
        }
        
        /// get display format for column
        public static short GetNotDisplayedFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEditableDBName()
        {
            return "p_editable_l";
        }
        
        /// get help text for column
        public static string GetEditableHelp()
        {
            return "Do you want to be able to edit the values of this data label?";
        }
        
        /// get label of column
        public static string GetEditableLabel()
        {
            return "Editable?";
        }
        
        /// get display format for column
        public static short GetEditableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNotEditableFromDBName()
        {
            return "p_not_editable_from_d";
        }
        
        /// get help text for column
        public static string GetNotEditableFromHelp()
        {
            return "Values of the label cannot be changed anymore after this date.";
        }
        
        /// get label of column
        public static string GetNotEditableFromLabel()
        {
            return "End Date for Editing";
        }
        
        /// get display format for column
        public static short GetNotEditableFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_l";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Should access to this data label be restricted to some people?";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "Data Label Restricted";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDataLabel";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_data_label";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Label";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_key_i",
                    "p_text_c",
                    "p_group_c",
                    "p_description_c",
                    "p_data_type_c",
                    "p_char_length_i",
                    "p_num_decimal_places_i",
                    "p_currency_code_c",
                    "p_lookup_category_code_c",
                    "p_entry_mandatory_l",
                    "p_displayed_l",
                    "p_not_displayed_from_d",
                    "p_editable_l",
                    "p_not_editable_from_d",
                    "p_restricted_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKey = this.Columns["p_key_i"];
            this.ColumnText = this.Columns["p_text_c"];
            this.ColumnGroup = this.Columns["p_group_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnDataType = this.Columns["p_data_type_c"];
            this.ColumnCharLength = this.Columns["p_char_length_i"];
            this.ColumnNumDecimalPlaces = this.Columns["p_num_decimal_places_i"];
            this.ColumnCurrencyCode = this.Columns["p_currency_code_c"];
            this.ColumnLookupCategoryCode = this.Columns["p_lookup_category_code_c"];
            this.ColumnEntryMandatory = this.Columns["p_entry_mandatory_l"];
            this.ColumnDisplayed = this.Columns["p_displayed_l"];
            this.ColumnNotDisplayedFrom = this.Columns["p_not_displayed_from_d"];
            this.ColumnEditable = this.Columns["p_editable_l"];
            this.ColumnNotEditableFrom = this.Columns["p_not_editable_from_d"];
            this.ColumnRestricted = this.Columns["p_restricted_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnKey};
        }
        
        /// get typed set of changes
        public PDataLabelTable GetChangesTyped()
        {
            return ((PDataLabelTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDataLabelRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelRow ret = ((PDataLabelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDataLabelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_data_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_char_length_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_num_decimal_places_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_lookup_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_entry_mandatory_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_displayed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_not_displayed_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_editable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_not_editable_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnText))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDataType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnCharLength))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnNumDecimalPlaces))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLookupCategoryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnEntryMandatory))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDisplayed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNotDisplayedFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnEditable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNotEditableFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table is used to define data labels for individual use in each office.
    [Serializable()]
    public class PDataLabelRow : System.Data.DataRow
    {
        
        private PDataLabelTable myTable;
        
        /// Constructor
        public PDataLabelRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDataLabelTable)(this.Table));
        }
        
        /// A sequence key for data labels.
        public Int32 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey) 
                            || (((Int32)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }
        
        /// Label Text
        public String Text
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnText) 
                            || (((String)(this[this.myTable.ColumnText])) != value)))
                {
                    this[this.myTable.ColumnText] = value;
                }
            }
        }
        
        /// Data Label Group
        public String Group
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroup) 
                            || (((String)(this[this.myTable.ColumnGroup])) != value)))
                {
                    this[this.myTable.ColumnGroup] = value;
                }
            }
        }
        
        /// Description (Help Text) for the label that the user will see
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Data Type (char | integer | float | currency | boolean | date | time | partnerkey | lookup)
        public String DataType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDataType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDataType) 
                            || (((String)(this[this.myTable.ColumnDataType])) != value)))
                {
                    this[this.myTable.ColumnDataType] = value;
                }
            }
        }
        
        /// Maximum length of data string if data type is set to character.
        public Int32 CharLength
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCharLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCharLength) 
                            || (((Int32)(this[this.myTable.ColumnCharLength])) != value)))
                {
                    this[this.myTable.ColumnCharLength] = value;
                }
            }
        }
        
        /// Number of decimal places if data type is set to numeric.
        public Int32 NumDecimalPlaces
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumDecimalPlaces.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumDecimalPlaces) 
                            || (((Int32)(this[this.myTable.ColumnNumDecimalPlaces])) != value)))
                {
                    this[this.myTable.ColumnNumDecimalPlaces] = value;
                }
            }
        }
        
        /// This defines which currency is being used (if data type is currency)
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }
        
        /// If a lookup category is selected then the values can be chosen from a drop down box
        public String LookupCategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLookupCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLookupCategoryCode) 
                            || (((String)(this[this.myTable.ColumnLookupCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnLookupCategoryCode] = value;
                }
            }
        }
        
        /// If TRUE then a value for this label has to be set
        public Boolean EntryMandatory
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEntryMandatory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEntryMandatory) 
                            || (((Boolean)(this[this.myTable.ColumnEntryMandatory])) != value)))
                {
                    this[this.myTable.ColumnEntryMandatory] = value;
                }
            }
        }
        
        /// If TRUE then this data label will be displayed. Gives a chance to hide but keep labels for historical reasons.
        public Boolean Displayed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDisplayed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDisplayed) 
                            || (((Boolean)(this[this.myTable.ColumnDisplayed])) != value)))
                {
                    this[this.myTable.ColumnDisplayed] = value;
                }
            }
        }
        
        /// Data label will not be displayed any longer from this date on.
        public System.DateTime NotDisplayedFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNotDisplayedFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNotDisplayedFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnNotDisplayedFrom])) != value)))
                {
                    this[this.myTable.ColumnNotDisplayedFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime NotDisplayedFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNotDisplayedFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime NotDisplayedFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNotDisplayedFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// if FALSE then the values will be displayed but are not editable.
        public Boolean Editable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEditable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEditable) 
                            || (((Boolean)(this[this.myTable.ColumnEditable])) != value)))
                {
                    this[this.myTable.ColumnEditable] = value;
                }
            }
        }
        
        /// Data label values will not be editable any longer from this date on.
        public System.DateTime NotEditableFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNotEditableFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNotEditableFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnNotEditableFrom])) != value)))
                {
                    this[this.myTable.ColumnNotEditableFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime NotEditableFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNotEditableFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime NotEditableFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNotEditableFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates whether or not the data label has restricted access. If it does then the access will be controlled by s_group_data_label
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKey);
            this.SetNull(this.myTable.ColumnText);
            this.SetNull(this.myTable.ColumnGroup);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnDataType);
            this.SetNull(this.myTable.ColumnCharLength);
            this.SetNull(this.myTable.ColumnNumDecimalPlaces);
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this.SetNull(this.myTable.ColumnLookupCategoryCode);
            this[this.myTable.ColumnEntryMandatory.Ordinal] = false;
            this[this.myTable.ColumnDisplayed.Ordinal] = true;
            this.SetNull(this.myTable.ColumnNotDisplayedFrom);
            this[this.myTable.ColumnEditable.Ordinal] = true;
            this.SetNull(this.myTable.ColumnNotEditableFrom);
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTextNull()
        {
            return this.IsNull(this.myTable.ColumnText);
        }
        
        /// assign NULL value
        public void SetTextNull()
        {
            this.SetNull(this.myTable.ColumnText);
        }
        
        /// test for NULL value
        public bool IsGroupNull()
        {
            return this.IsNull(this.myTable.ColumnGroup);
        }
        
        /// assign NULL value
        public void SetGroupNull()
        {
            this.SetNull(this.myTable.ColumnGroup);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsCharLengthNull()
        {
            return this.IsNull(this.myTable.ColumnCharLength);
        }
        
        /// assign NULL value
        public void SetCharLengthNull()
        {
            this.SetNull(this.myTable.ColumnCharLength);
        }
        
        /// test for NULL value
        public bool IsNumDecimalPlacesNull()
        {
            return this.IsNull(this.myTable.ColumnNumDecimalPlaces);
        }
        
        /// assign NULL value
        public void SetNumDecimalPlacesNull()
        {
            this.SetNull(this.myTable.ColumnNumDecimalPlaces);
        }
        
        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }
        
        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }
        
        /// test for NULL value
        public bool IsLookupCategoryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLookupCategoryCode);
        }
        
        /// assign NULL value
        public void SetLookupCategoryCodeNull()
        {
            this.SetNull(this.myTable.ColumnLookupCategoryCode);
        }
        
        /// test for NULL value
        public bool IsEntryMandatoryNull()
        {
            return this.IsNull(this.myTable.ColumnEntryMandatory);
        }
        
        /// assign NULL value
        public void SetEntryMandatoryNull()
        {
            this.SetNull(this.myTable.ColumnEntryMandatory);
        }
        
        /// test for NULL value
        public bool IsDisplayedNull()
        {
            return this.IsNull(this.myTable.ColumnDisplayed);
        }
        
        /// assign NULL value
        public void SetDisplayedNull()
        {
            this.SetNull(this.myTable.ColumnDisplayed);
        }
        
        /// test for NULL value
        public bool IsNotDisplayedFromNull()
        {
            return this.IsNull(this.myTable.ColumnNotDisplayedFrom);
        }
        
        /// assign NULL value
        public void SetNotDisplayedFromNull()
        {
            this.SetNull(this.myTable.ColumnNotDisplayedFrom);
        }
        
        /// test for NULL value
        public bool IsEditableNull()
        {
            return this.IsNull(this.myTable.ColumnEditable);
        }
        
        /// assign NULL value
        public void SetEditableNull()
        {
            this.SetNull(this.myTable.ColumnEditable);
        }
        
        /// test for NULL value
        public bool IsNotEditableFromNull()
        {
            return this.IsNull(this.myTable.ColumnNotEditableFrom);
        }
        
        /// assign NULL value
        public void SetNotEditableFromNull()
        {
            this.SetNull(this.myTable.ColumnNotEditableFrom);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table defines where a data label is used and the order the labels appear in.
    [Serializable()]
    public class PDataLabelUseTable : TTypedDataTable
    {
        
        /// A sequence key for data labels.
        public DataColumn ColumnDataLabelKey;
        
        /// Use of Data Label ( Person | Family | Church | Organisation | Bank | Unit | Venue | Personnel | LongTermApp | ShortTermApp )
        public DataColumn ColumnUse;
        
        /// Label Index (for sorting of labels).
        public DataColumn ColumnIdx1;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDataLabelUseTable() : 
                base("PDataLabelUse")
        {
        }
        
        /// constructor
        public PDataLabelUseTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDataLabelUseTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDataLabelUseRow this[int i]
        {
            get
            {
                return ((PDataLabelUseRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataLabelKeyDBName()
        {
            return "p_data_label_key_i";
        }
        
        /// get help text for column
        public static string GetDataLabelKeyHelp()
        {
            return "A sequence key for data labels.";
        }
        
        /// get label of column
        public static string GetDataLabelKeyLabel()
        {
            return "p_data_label_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetUseDBName()
        {
            return "p_use_c";
        }
        
        /// get help text for column
        public static string GetUseHelp()
        {
            return "Where will this data label be displayed.";
        }
        
        /// get label of column
        public static string GetUseLabel()
        {
            return "Label Use";
        }
        
        /// get character length for column
        public static short GetUseLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIdx1DBName()
        {
            return "p_idx1_i";
        }
        
        /// get help text for column
        public static string GetIdx1Help()
        {
            return "Determines the order the labels will appear in.";
        }
        
        /// get label of column
        public static string GetIdx1Label()
        {
            return "Index";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDataLabelUse";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_data_label_use";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Label Use";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_data_label_key_i",
                    "p_use_c",
                    "p_idx1_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnDataLabelKey = this.Columns["p_data_label_key_i"];
            this.ColumnUse = this.Columns["p_use_c"];
            this.ColumnIdx1 = this.Columns["p_idx1_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnDataLabelKey,
                    this.ColumnUse};
        }
        
        /// get typed set of changes
        public PDataLabelUseTable GetChangesTyped()
        {
            return ((PDataLabelUseTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDataLabelUseRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelUseRow ret = ((PDataLabelUseRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDataLabelUseRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelUseRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_data_label_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_use_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_idx1_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnDataLabelKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnUse))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnIdx1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table defines where a data label is used and the order the labels appear in.
    [Serializable()]
    public class PDataLabelUseRow : System.Data.DataRow
    {
        
        private PDataLabelUseTable myTable;
        
        /// Constructor
        public PDataLabelUseRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDataLabelUseTable)(this.Table));
        }
        
        /// A sequence key for data labels.
        public Int32 DataLabelKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDataLabelKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDataLabelKey) 
                            || (((Int32)(this[this.myTable.ColumnDataLabelKey])) != value)))
                {
                    this[this.myTable.ColumnDataLabelKey] = value;
                }
            }
        }
        
        /// Use of Data Label ( Person | Family | Church | Organisation | Bank | Unit | Venue | Personnel | LongTermApp | ShortTermApp )
        public String Use
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUse.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUse) 
                            || (((String)(this[this.myTable.ColumnUse])) != value)))
                {
                    this[this.myTable.ColumnUse] = value;
                }
            }
        }
        
        /// Label Index (for sorting of labels).
        public Int32 Idx1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIdx1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIdx1) 
                            || (((Int32)(this[this.myTable.ColumnIdx1])) != value)))
                {
                    this[this.myTable.ColumnIdx1] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnDataLabelKey);
            this.SetNull(this.myTable.ColumnUse);
            this.SetNull(this.myTable.ColumnIdx1);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table holds the label values for partner related data.
    [Serializable()]
    public class PDataLabelValuePartnerTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// A sequence key for data labels.
        public DataColumn ColumnDataLabelKey;
        
        /// Label value for type Character.
        public DataColumn ColumnValueChar;
        
        /// Label value for type Numeric.
        public DataColumn ColumnValueNum;
        
        /// Label value for type Currency.
        public DataColumn ColumnValueCurrency;
        
        /// Label value for type Integer.
        public DataColumn ColumnValueInt;
        
        /// Label value for type Boolean.
        public DataColumn ColumnValueBool;
        
        /// Label value for type Date.
        public DataColumn ColumnValueDate;
        
        /// Label value for type Time.
        public DataColumn ColumnValueTime;
        
        /// Label value for type Partner Key.
        public DataColumn ColumnValuePartnerKey;
        
        /// Label value for type Lookup Value.
        public DataColumn ColumnValueLookup;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDataLabelValuePartnerTable() : 
                base("PDataLabelValuePartner")
        {
        }
        
        /// constructor
        public PDataLabelValuePartnerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDataLabelValuePartnerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDataLabelValuePartnerRow this[int i]
        {
            get
            {
                return ((PDataLabelValuePartnerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataLabelKeyDBName()
        {
            return "p_data_label_key_i";
        }
        
        /// get help text for column
        public static string GetDataLabelKeyHelp()
        {
            return "A sequence key for data labels.";
        }
        
        /// get label of column
        public static string GetDataLabelKeyLabel()
        {
            return "p_data_label_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueCharDBName()
        {
            return "p_value_char_c";
        }
        
        /// get help text for column
        public static string GetValueCharHelp()
        {
            return "Label value for type Character.";
        }
        
        /// get label of column
        public static string GetValueCharLabel()
        {
            return "Value";
        }
        
        /// get character length for column
        public static short GetValueCharLength()
        {
            return 4096;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueNumDBName()
        {
            return "p_value_num_n";
        }
        
        /// get help text for column
        public static string GetValueNumHelp()
        {
            return "Label value for type Numeric.";
        }
        
        /// get label of column
        public static string GetValueNumLabel()
        {
            return "Value";
        }
        
        /// get display format for column
        public static short GetValueNumLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueCurrencyDBName()
        {
            return "p_value_currency_n";
        }
        
        /// get help text for column
        public static string GetValueCurrencyHelp()
        {
            return "Label value for type Currency.";
        }
        
        /// get label of column
        public static string GetValueCurrencyLabel()
        {
            return "Value";
        }
        
        /// get display format for column
        public static short GetValueCurrencyLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueIntDBName()
        {
            return "p_value_int_i";
        }
        
        /// get help text for column
        public static string GetValueIntHelp()
        {
            return "Label value for type Integer.";
        }
        
        /// get label of column
        public static string GetValueIntLabel()
        {
            return "Value";
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueBoolDBName()
        {
            return "p_value_bool_l";
        }
        
        /// get help text for column
        public static string GetValueBoolHelp()
        {
            return "Label value for type Boolean.";
        }
        
        /// get label of column
        public static string GetValueBoolLabel()
        {
            return "Value";
        }
        
        /// get display format for column
        public static short GetValueBoolLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueDateDBName()
        {
            return "p_value_date_d";
        }
        
        /// get help text for column
        public static string GetValueDateHelp()
        {
            return "Label value for type Date.";
        }
        
        /// get label of column
        public static string GetValueDateLabel()
        {
            return "Value";
        }
        
        /// get display format for column
        public static short GetValueDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueTimeDBName()
        {
            return "p_value_time_i";
        }
        
        /// get help text for column
        public static string GetValueTimeHelp()
        {
            return "Label value for type Time.";
        }
        
        /// get label of column
        public static string GetValueTimeLabel()
        {
            return "Value";
        }
        
        /// get the name of the field in the database for this column
        public static string GetValuePartnerKeyDBName()
        {
            return "p_value_partner_key_n";
        }
        
        /// get help text for column
        public static string GetValuePartnerKeyHelp()
        {
            return "Label value for type Partner Key.";
        }
        
        /// get label of column
        public static string GetValuePartnerKeyLabel()
        {
            return "Value";
        }
        
        /// get display format for column
        public static short GetValuePartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueLookupDBName()
        {
            return "p_value_lookup_c";
        }
        
        /// get help text for column
        public static string GetValueLookupHelp()
        {
            return "Label value for type Lookup Value.";
        }
        
        /// get label of column
        public static string GetValueLookupLabel()
        {
            return "Value";
        }
        
        /// get character length for column
        public static short GetValueLookupLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDataLabelValuePartner";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_data_label_value_partner";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Label Values Partner";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_data_label_key_i",
                    "p_value_char_c",
                    "p_value_num_n",
                    "p_value_currency_n",
                    "p_value_int_i",
                    "p_value_bool_l",
                    "p_value_date_d",
                    "p_value_time_i",
                    "p_value_partner_key_n",
                    "p_value_lookup_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDataLabelKey = this.Columns["p_data_label_key_i"];
            this.ColumnValueChar = this.Columns["p_value_char_c"];
            this.ColumnValueNum = this.Columns["p_value_num_n"];
            this.ColumnValueCurrency = this.Columns["p_value_currency_n"];
            this.ColumnValueInt = this.Columns["p_value_int_i"];
            this.ColumnValueBool = this.Columns["p_value_bool_l"];
            this.ColumnValueDate = this.Columns["p_value_date_d"];
            this.ColumnValueTime = this.Columns["p_value_time_i"];
            this.ColumnValuePartnerKey = this.Columns["p_value_partner_key_n"];
            this.ColumnValueLookup = this.Columns["p_value_lookup_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnDataLabelKey};
        }
        
        /// get typed set of changes
        public PDataLabelValuePartnerTable GetChangesTyped()
        {
            return ((PDataLabelValuePartnerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDataLabelValuePartnerRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelValuePartnerRow ret = ((PDataLabelValuePartnerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDataLabelValuePartnerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelValuePartnerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_data_label_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_char_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_value_num_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("p_value_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("p_value_int_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_bool_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_value_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_value_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_value_lookup_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDataLabelKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnValueChar))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 8192);
            }
            if ((ACol == ColumnValueNum))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnValueCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnValueInt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnValueBool))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnValueDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnValueTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnValuePartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnValueLookup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table holds the label values for partner related data.
    [Serializable()]
    public class PDataLabelValuePartnerRow : System.Data.DataRow
    {
        
        private PDataLabelValuePartnerTable myTable;
        
        /// Constructor
        public PDataLabelValuePartnerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDataLabelValuePartnerTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// A sequence key for data labels.
        public Int32 DataLabelKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDataLabelKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDataLabelKey) 
                            || (((Int32)(this[this.myTable.ColumnDataLabelKey])) != value)))
                {
                    this[this.myTable.ColumnDataLabelKey] = value;
                }
            }
        }
        
        /// Label value for type Character.
        public String ValueChar
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueChar.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueChar) 
                            || (((String)(this[this.myTable.ColumnValueChar])) != value)))
                {
                    this[this.myTable.ColumnValueChar] = value;
                }
            }
        }
        
        /// Label value for type Numeric.
        public Double ValueNum
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueNum.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueNum) 
                            || (((Double)(this[this.myTable.ColumnValueNum])) != value)))
                {
                    this[this.myTable.ColumnValueNum] = value;
                }
            }
        }
        
        /// Label value for type Currency.
        public Double ValueCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueCurrency) 
                            || (((Double)(this[this.myTable.ColumnValueCurrency])) != value)))
                {
                    this[this.myTable.ColumnValueCurrency] = value;
                }
            }
        }
        
        /// Label value for type Integer.
        public Int32 ValueInt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueInt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueInt) 
                            || (((Int32)(this[this.myTable.ColumnValueInt])) != value)))
                {
                    this[this.myTable.ColumnValueInt] = value;
                }
            }
        }
        
        /// Label value for type Boolean.
        public Boolean ValueBool
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueBool.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueBool) 
                            || (((Boolean)(this[this.myTable.ColumnValueBool])) != value)))
                {
                    this[this.myTable.ColumnValueBool] = value;
                }
            }
        }
        
        /// Label value for type Date.
        public System.DateTime ValueDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnValueDate])) != value)))
                {
                    this[this.myTable.ColumnValueDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValueDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValueDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValueDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValueDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Label value for type Time.
        public Int32 ValueTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueTime) 
                            || (((Int32)(this[this.myTable.ColumnValueTime])) != value)))
                {
                    this[this.myTable.ColumnValueTime] = value;
                }
            }
        }
        
        /// Label value for type Partner Key.
        public Int64 ValuePartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValuePartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValuePartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnValuePartnerKey])) != value)))
                {
                    this[this.myTable.ColumnValuePartnerKey] = value;
                }
            }
        }
        
        /// Label value for type Lookup Value.
        public String ValueLookup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueLookup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueLookup) 
                            || (((String)(this[this.myTable.ColumnValueLookup])) != value)))
                {
                    this[this.myTable.ColumnValueLookup] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDataLabelKey);
            this.SetNull(this.myTable.ColumnValueChar);
            this[this.myTable.ColumnValueNum.Ordinal] = 0;
            this[this.myTable.ColumnValueCurrency.Ordinal] = 0;
            this[this.myTable.ColumnValueInt.Ordinal] = 0;
            this[this.myTable.ColumnValueBool.Ordinal] = false;
            this.SetNull(this.myTable.ColumnValueDate);
            this[this.myTable.ColumnValueTime.Ordinal] = 0;
            this[this.myTable.ColumnValuePartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnValueLookup);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsValueCharNull()
        {
            return this.IsNull(this.myTable.ColumnValueChar);
        }
        
        /// assign NULL value
        public void SetValueCharNull()
        {
            this.SetNull(this.myTable.ColumnValueChar);
        }
        
        /// test for NULL value
        public bool IsValueNumNull()
        {
            return this.IsNull(this.myTable.ColumnValueNum);
        }
        
        /// assign NULL value
        public void SetValueNumNull()
        {
            this.SetNull(this.myTable.ColumnValueNum);
        }
        
        /// test for NULL value
        public bool IsValueCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnValueCurrency);
        }
        
        /// assign NULL value
        public void SetValueCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnValueCurrency);
        }
        
        /// test for NULL value
        public bool IsValueIntNull()
        {
            return this.IsNull(this.myTable.ColumnValueInt);
        }
        
        /// assign NULL value
        public void SetValueIntNull()
        {
            this.SetNull(this.myTable.ColumnValueInt);
        }
        
        /// test for NULL value
        public bool IsValueBoolNull()
        {
            return this.IsNull(this.myTable.ColumnValueBool);
        }
        
        /// assign NULL value
        public void SetValueBoolNull()
        {
            this.SetNull(this.myTable.ColumnValueBool);
        }
        
        /// test for NULL value
        public bool IsValueDateNull()
        {
            return this.IsNull(this.myTable.ColumnValueDate);
        }
        
        /// assign NULL value
        public void SetValueDateNull()
        {
            this.SetNull(this.myTable.ColumnValueDate);
        }
        
        /// test for NULL value
        public bool IsValueTimeNull()
        {
            return this.IsNull(this.myTable.ColumnValueTime);
        }
        
        /// assign NULL value
        public void SetValueTimeNull()
        {
            this.SetNull(this.myTable.ColumnValueTime);
        }
        
        /// test for NULL value
        public bool IsValuePartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnValuePartnerKey);
        }
        
        /// assign NULL value
        public void SetValuePartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnValuePartnerKey);
        }
        
        /// test for NULL value
        public bool IsValueLookupNull()
        {
            return this.IsNull(this.myTable.ColumnValueLookup);
        }
        
        /// assign NULL value
        public void SetValueLookupNull()
        {
            this.SetNull(this.myTable.ColumnValueLookup);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table holds the categories that can be used for data label values.
    [Serializable()]
    public class PDataLabelLookupCategoryTable : TTypedDataTable
    {
        
        /// Code for Lookup Category
        public DataColumn ColumnCategoryCode;
        
        /// Description for Lookup Category
        public DataColumn ColumnCategoryDesc;
        
        /// Indicates if values for this category can be added on the fly
        public DataColumn ColumnExtendable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDataLabelLookupCategoryTable() : 
                base("PDataLabelLookupCategory")
        {
        }
        
        /// constructor
        public PDataLabelLookupCategoryTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDataLabelLookupCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDataLabelLookupCategoryRow this[int i]
        {
            get
            {
                return ((PDataLabelLookupCategoryRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryCodeDBName()
        {
            return "p_category_code_c";
        }
        
        /// get help text for column
        public static string GetCategoryCodeHelp()
        {
            return "Enter the code for the Lookup Category";
        }
        
        /// get label of column
        public static string GetCategoryCodeLabel()
        {
            return "Category Code";
        }
        
        /// get character length for column
        public static short GetCategoryCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryDescDBName()
        {
            return "p_category_desc_c";
        }
        
        /// get help text for column
        public static string GetCategoryDescHelp()
        {
            return "Enter a description for the Lookup Category";
        }
        
        /// get label of column
        public static string GetCategoryDescLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetCategoryDescLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExtendableDBName()
        {
            return "p_extendable_l";
        }
        
        /// get help text for column
        public static string GetExtendableHelp()
        {
            return "Can values for this category be added on the fly";
        }
        
        /// get label of column
        public static string GetExtendableLabel()
        {
            return "Extendable";
        }
        
        /// get display format for column
        public static short GetExtendableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDataLabelLookupCategory";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_data_label_lookup_category";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Categories for Data Label Lookup Fields";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_category_code_c",
                    "p_category_desc_c",
                    "p_extendable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCategoryCode = this.Columns["p_category_code_c"];
            this.ColumnCategoryDesc = this.Columns["p_category_desc_c"];
            this.ColumnExtendable = this.Columns["p_extendable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCategoryCode};
        }
        
        /// get typed set of changes
        public PDataLabelLookupCategoryTable GetChangesTyped()
        {
            return ((PDataLabelLookupCategoryTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDataLabelLookupCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelLookupCategoryRow ret = ((PDataLabelLookupCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDataLabelLookupCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelLookupCategoryRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_category_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_extendable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCategoryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnCategoryDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnExtendable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table holds the categories that can be used for data label values.
    [Serializable()]
    public class PDataLabelLookupCategoryRow : System.Data.DataRow
    {
        
        private PDataLabelLookupCategoryTable myTable;
        
        /// Constructor
        public PDataLabelLookupCategoryRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDataLabelLookupCategoryTable)(this.Table));
        }
        
        /// Code for Lookup Category
        public String CategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategoryCode) 
                            || (((String)(this[this.myTable.ColumnCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnCategoryCode] = value;
                }
            }
        }
        
        /// Description for Lookup Category
        public String CategoryDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategoryDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategoryDesc) 
                            || (((String)(this[this.myTable.ColumnCategoryDesc])) != value)))
                {
                    this[this.myTable.ColumnCategoryDesc] = value;
                }
            }
        }
        
        /// Indicates if values for this category can be added on the fly
        public Boolean Extendable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtendable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtendable) 
                            || (((Boolean)(this[this.myTable.ColumnExtendable])) != value)))
                {
                    this[this.myTable.ColumnExtendable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCategoryCode);
            this.SetNull(this.myTable.ColumnCategoryDesc);
            this[this.myTable.ColumnExtendable.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCategoryDescNull()
        {
            return this.IsNull(this.myTable.ColumnCategoryDesc);
        }
        
        /// assign NULL value
        public void SetCategoryDescNull()
        {
            this.SetNull(this.myTable.ColumnCategoryDesc);
        }
        
        /// test for NULL value
        public bool IsExtendableNull()
        {
            return this.IsNull(this.myTable.ColumnExtendable);
        }
        
        /// assign NULL value
        public void SetExtendableNull()
        {
            this.SetNull(this.myTable.ColumnExtendable);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table holds all lookup values that can be used for data label values.
    [Serializable()]
    public class PDataLabelLookupTable : TTypedDataTable
    {
        
        /// Code for Lookup Category
        public DataColumn ColumnCategoryCode;
        
        /// Code for Lookup Value
        public DataColumn ColumnValueCode;
        
        /// Description for Lookup Value
        public DataColumn ColumnValueDesc;
        
        /// Indicates if this value is active (i.e. can be used)
        public DataColumn ColumnActive;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PDataLabelLookupTable() : 
                base("PDataLabelLookup")
        {
        }
        
        /// constructor
        public PDataLabelLookupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PDataLabelLookupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PDataLabelLookupRow this[int i]
        {
            get
            {
                return ((PDataLabelLookupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryCodeDBName()
        {
            return "p_category_code_c";
        }
        
        /// get help text for column
        public static string GetCategoryCodeHelp()
        {
            return "Choose the code of the Lookup Category";
        }
        
        /// get label of column
        public static string GetCategoryCodeLabel()
        {
            return "Category Code";
        }
        
        /// get character length for column
        public static short GetCategoryCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueCodeDBName()
        {
            return "p_value_code_c";
        }
        
        /// get help text for column
        public static string GetValueCodeHelp()
        {
            return "Enter a code for the Lookup Value";
        }
        
        /// get label of column
        public static string GetValueCodeLabel()
        {
            return "Value Code";
        }
        
        /// get character length for column
        public static short GetValueCodeLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValueDescDBName()
        {
            return "p_value_desc_c";
        }
        
        /// get help text for column
        public static string GetValueDescHelp()
        {
            return "Enter a description for the Lookup Value";
        }
        
        /// get label of column
        public static string GetValueDescLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetValueDescLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "p_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Can this value be used?";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "Active";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PDataLabelLookup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_data_label_lookup";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Categories for Data Label Lookup Fields";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_category_code_c",
                    "p_value_code_c",
                    "p_value_desc_c",
                    "p_active_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCategoryCode = this.Columns["p_category_code_c"];
            this.ColumnValueCode = this.Columns["p_value_code_c"];
            this.ColumnValueDesc = this.Columns["p_value_desc_c"];
            this.ColumnActive = this.Columns["p_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCategoryCode,
                    this.ColumnValueCode};
        }
        
        /// get typed set of changes
        public PDataLabelLookupTable GetChangesTyped()
        {
            return ((PDataLabelLookupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PDataLabelLookupRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelLookupRow ret = ((PDataLabelLookupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PDataLabelLookupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelLookupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_value_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_value_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCategoryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnValueCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnValueDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table holds all lookup values that can be used for data label values.
    [Serializable()]
    public class PDataLabelLookupRow : System.Data.DataRow
    {
        
        private PDataLabelLookupTable myTable;
        
        /// Constructor
        public PDataLabelLookupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PDataLabelLookupTable)(this.Table));
        }
        
        /// Code for Lookup Category
        public String CategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategoryCode) 
                            || (((String)(this[this.myTable.ColumnCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnCategoryCode] = value;
                }
            }
        }
        
        /// Code for Lookup Value
        public String ValueCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueCode) 
                            || (((String)(this[this.myTable.ColumnValueCode])) != value)))
                {
                    this[this.myTable.ColumnValueCode] = value;
                }
            }
        }
        
        /// Description for Lookup Value
        public String ValueDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueDesc) 
                            || (((String)(this[this.myTable.ColumnValueDesc])) != value)))
                {
                    this[this.myTable.ColumnValueDesc] = value;
                }
            }
        }
        
        /// Indicates if this value is active (i.e. can be used)
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCategoryCode);
            this.SetNull(this.myTable.ColumnValueCode);
            this.SetNull(this.myTable.ColumnValueDesc);
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsValueDescNull()
        {
            return this.IsNull(this.myTable.ColumnValueDesc);
        }
        
        /// assign NULL value
        public void SetValueDescNull()
        {
            this.SetNull(this.myTable.ColumnValueDesc);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Tax reference numbers
    [Serializable()]
    public class PTaxTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// Tax or VAT
        public DataColumn ColumnTaxType;
        
        /// Tax Reference
        public DataColumn ColumnTaxRef;
        
        /// 
        public DataColumn ColumnValidFrom;
        
        /// 
        public DataColumn ColumnValidUntil;
        
        /// 
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PTaxTable() : 
                base("PTax")
        {
        }
        
        /// constructor
        public PTaxTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PTaxTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PTaxRow this[int i]
        {
            get
            {
                return ((PTaxRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key (SiteID + Number)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxTypeDBName()
        {
            return "p_tax_type_c";
        }
        
        /// get help text for column
        public static string GetTaxTypeHelp()
        {
            return "Enter the type: Tax or VAT";
        }
        
        /// get label of column
        public static string GetTaxTypeLabel()
        {
            return "Tax Type";
        }
        
        /// get character length for column
        public static short GetTaxTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxRefDBName()
        {
            return "p_tax_ref_c";
        }
        
        /// get help text for column
        public static string GetTaxRefHelp()
        {
            return "Enter the tax reference";
        }
        
        /// get label of column
        public static string GetTaxRefLabel()
        {
            return "Tax Ref";
        }
        
        /// get character length for column
        public static short GetTaxRefLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidFromDBName()
        {
            return "p_valid_from_d";
        }
        
        /// get help text for column
        public static string GetValidFromHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetValidFromLabel()
        {
            return "Valid From";
        }
        
        /// get display format for column
        public static short GetValidFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidUntilDBName()
        {
            return "p_valid_until_d";
        }
        
        /// get help text for column
        public static string GetValidUntilHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetValidUntilLabel()
        {
            return "Valid Until";
        }
        
        /// get display format for column
        public static short GetValidUntilLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "p_comment_c";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PTax";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_tax";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Tax Number";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_tax_type_c",
                    "p_tax_ref_c",
                    "p_valid_from_d",
                    "p_valid_until_d",
                    "p_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnTaxType = this.Columns["p_tax_type_c"];
            this.ColumnTaxRef = this.Columns["p_tax_ref_c"];
            this.ColumnValidFrom = this.Columns["p_valid_from_d"];
            this.ColumnValidUntil = this.Columns["p_valid_until_d"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnTaxType,
                    this.ColumnTaxRef};
        }
        
        /// get typed set of changes
        public PTaxTable GetChangesTyped()
        {
            return ((PTaxTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PTaxRow NewRowTyped(bool AWithDefaultValues)
        {
            PTaxRow ret = ((PTaxRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PTaxRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PTaxRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_tax_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_tax_ref_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_until_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnTaxType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTaxRef))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnValidFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnValidUntil))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Tax reference numbers
    [Serializable()]
    public class PTaxRow : System.Data.DataRow
    {
        
        private PTaxTable myTable;
        
        /// Constructor
        public PTaxRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PTaxTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Tax or VAT
        public String TaxType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxType) 
                            || (((String)(this[this.myTable.ColumnTaxType])) != value)))
                {
                    this[this.myTable.ColumnTaxType] = value;
                }
            }
        }
        
        /// Tax Reference
        public String TaxRef
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxRef.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxRef) 
                            || (((String)(this[this.myTable.ColumnTaxRef])) != value)))
                {
                    this[this.myTable.ColumnTaxRef] = value;
                }
            }
        }
        
        /// 
        public System.DateTime ValidFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidFrom])) != value)))
                {
                    this[this.myTable.ColumnValidFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public System.DateTime ValidUntil
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidUntil.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidUntil) 
                            || (((System.DateTime)(this[this.myTable.ColumnValidUntil])) != value)))
                {
                    this[this.myTable.ColumnValidUntil] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ValidUntilLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidUntil], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ValidUntilHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnValidUntil.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTaxType);
            this.SetNull(this.myTable.ColumnTaxRef);
            this[this.myTable.ColumnValidFrom.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnValidUntil);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTaxTypeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxType);
        }
        
        /// assign NULL value
        public void SetTaxTypeNull()
        {
            this.SetNull(this.myTable.ColumnTaxType);
        }
        
        /// test for NULL value
        public bool IsTaxRefNull()
        {
            return this.IsNull(this.myTable.ColumnTaxRef);
        }
        
        /// assign NULL value
        public void SetTaxRefNull()
        {
            this.SetNull(this.myTable.ColumnTaxRef);
        }
        
        /// test for NULL value
        public bool IsValidFromNull()
        {
            return this.IsNull(this.myTable.ColumnValidFrom);
        }
        
        /// assign NULL value
        public void SetValidFromNull()
        {
            this.SetNull(this.myTable.ColumnValidFrom);
        }
        
        /// test for NULL value
        public bool IsValidUntilNull()
        {
            return this.IsNull(this.myTable.ColumnValidUntil);
        }
        
        /// assign NULL value
        public void SetValidUntilNull()
        {
            this.SetNull(this.myTable.ColumnValidUntil);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Categories for Area of Interest
    [Serializable()]
    public class PInterestCategoryTable : TTypedDataTable
    {
        
        /// Unique key for the table
        public DataColumn ColumnCategory;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// Description of all the interest intensity levels.  Leave empty if levels not needed.
        public DataColumn ColumnLevelDescriptions;
        
        /// 
        public DataColumn ColumnLevelRangeLow;
        
        /// 
        public DataColumn ColumnLevelRangeHigh;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PInterestCategoryTable() : 
                base("PInterestCategory")
        {
        }
        
        /// constructor
        public PInterestCategoryTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PInterestCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PInterestCategoryRow this[int i]
        {
            get
            {
                return ((PInterestCategoryRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryDBName()
        {
            return "p_category_c";
        }
        
        /// get help text for column
        public static string GetCategoryHelp()
        {
            return "Unique key for the table";
        }
        
        /// get label of column
        public static string GetCategoryLabel()
        {
            return "Category";
        }
        
        /// get character length for column
        public static short GetCategoryLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLevelDescriptionsDBName()
        {
            return "p_level_descriptions_c";
        }
        
        /// get help text for column
        public static string GetLevelDescriptionsHelp()
        {
            return "Description of all the interest intensity levels.  Leave empty if levels not need" +
                "ed.";
        }
        
        /// get label of column
        public static string GetLevelDescriptionsLabel()
        {
            return "Level Descriptions";
        }
        
        /// get character length for column
        public static short GetLevelDescriptionsLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLevelRangeLowDBName()
        {
            return "p_level_range_low_i";
        }
        
        /// get help text for column
        public static string GetLevelRangeLowHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLevelRangeLowLabel()
        {
            return "p_level_range_low_i";
        }
        
        /// get display format for column
        public static short GetLevelRangeLowLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLevelRangeHighDBName()
        {
            return "p_level_range_high_i";
        }
        
        /// get help text for column
        public static string GetLevelRangeHighHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLevelRangeHighLabel()
        {
            return "p_level_range_high_i";
        }
        
        /// get display format for column
        public static short GetLevelRangeHighLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PInterestCategory";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_interest_category";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Category";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_category_c",
                    "p_description_c",
                    "p_level_descriptions_c",
                    "p_level_range_low_i",
                    "p_level_range_high_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCategory = this.Columns["p_category_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnLevelDescriptions = this.Columns["p_level_descriptions_c"];
            this.ColumnLevelRangeLow = this.Columns["p_level_range_low_i"];
            this.ColumnLevelRangeHigh = this.Columns["p_level_range_high_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCategory};
        }
        
        /// get typed set of changes
        public PInterestCategoryTable GetChangesTyped()
        {
            return ((PInterestCategoryTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PInterestCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PInterestCategoryRow ret = ((PInterestCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PInterestCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PInterestCategoryRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_level_descriptions_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_level_range_low_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_level_range_high_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCategory))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnLevelDescriptions))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnLevelRangeLow))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLevelRangeHigh))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Categories for Area of Interest
    [Serializable()]
    public class PInterestCategoryRow : System.Data.DataRow
    {
        
        private PInterestCategoryTable myTable;
        
        /// Constructor
        public PInterestCategoryRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PInterestCategoryTable)(this.Table));
        }
        
        /// Unique key for the table
        public String Category
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategory) 
                            || (((String)(this[this.myTable.ColumnCategory])) != value)))
                {
                    this[this.myTable.ColumnCategory] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Description of all the interest intensity levels.  Leave empty if levels not needed.
        public String LevelDescriptions
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLevelDescriptions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLevelDescriptions) 
                            || (((String)(this[this.myTable.ColumnLevelDescriptions])) != value)))
                {
                    this[this.myTable.ColumnLevelDescriptions] = value;
                }
            }
        }
        
        /// 
        public Int32 LevelRangeLow
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLevelRangeLow.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLevelRangeLow) 
                            || (((Int32)(this[this.myTable.ColumnLevelRangeLow])) != value)))
                {
                    this[this.myTable.ColumnLevelRangeLow] = value;
                }
            }
        }
        
        /// 
        public Int32 LevelRangeHigh
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLevelRangeHigh.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLevelRangeHigh) 
                            || (((Int32)(this[this.myTable.ColumnLevelRangeHigh])) != value)))
                {
                    this[this.myTable.ColumnLevelRangeHigh] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCategory);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnLevelDescriptions);
            this.SetNull(this.myTable.ColumnLevelRangeLow);
            this.SetNull(this.myTable.ColumnLevelRangeHigh);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnCategory);
        }
        
        /// assign NULL value
        public void SetCategoryNull()
        {
            this.SetNull(this.myTable.ColumnCategory);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsLevelDescriptionsNull()
        {
            return this.IsNull(this.myTable.ColumnLevelDescriptions);
        }
        
        /// assign NULL value
        public void SetLevelDescriptionsNull()
        {
            this.SetNull(this.myTable.ColumnLevelDescriptions);
        }
        
        /// test for NULL value
        public bool IsLevelRangeLowNull()
        {
            return this.IsNull(this.myTable.ColumnLevelRangeLow);
        }
        
        /// assign NULL value
        public void SetLevelRangeLowNull()
        {
            this.SetNull(this.myTable.ColumnLevelRangeLow);
        }
        
        /// test for NULL value
        public bool IsLevelRangeHighNull()
        {
            return this.IsNull(this.myTable.ColumnLevelRangeHigh);
        }
        
        /// assign NULL value
        public void SetLevelRangeHighNull()
        {
            this.SetNull(this.myTable.ColumnLevelRangeHigh);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Area of Interest
    [Serializable()]
    public class PInterestTable : TTypedDataTable
    {
        
        /// Unique key for the table
        public DataColumn ColumnInterest;
        
        /// Interest category
        public DataColumn ColumnCategory;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PInterestTable() : 
                base("PInterest")
        {
        }
        
        /// constructor
        public PInterestTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PInterestTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PInterestRow this[int i]
        {
            get
            {
                return ((PInterestRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetInterestDBName()
        {
            return "p_interest_c";
        }
        
        /// get help text for column
        public static string GetInterestHelp()
        {
            return "Unique key for the table";
        }
        
        /// get label of column
        public static string GetInterestLabel()
        {
            return "Interest";
        }
        
        /// get character length for column
        public static short GetInterestLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryDBName()
        {
            return "p_category_c";
        }
        
        /// get help text for column
        public static string GetCategoryHelp()
        {
            return "Interest category";
        }
        
        /// get label of column
        public static string GetCategoryLabel()
        {
            return "Category";
        }
        
        /// get character length for column
        public static short GetCategoryLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PInterest";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_interest";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Interest";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_interest_c",
                    "p_category_c",
                    "p_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnInterest = this.Columns["p_interest_c"];
            this.ColumnCategory = this.Columns["p_category_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnInterest};
        }
        
        /// get typed set of changes
        public PInterestTable GetChangesTyped()
        {
            return ((PInterestTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PInterestRow NewRowTyped(bool AWithDefaultValues)
        {
            PInterestRow ret = ((PInterestRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PInterestRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PInterestRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_interest_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnInterest))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnCategory))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Area of Interest
    [Serializable()]
    public class PInterestRow : System.Data.DataRow
    {
        
        private PInterestTable myTable;
        
        /// Constructor
        public PInterestRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PInterestTable)(this.Table));
        }
        
        /// Unique key for the table
        public String Interest
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterest.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterest) 
                            || (((String)(this[this.myTable.ColumnInterest])) != value)))
                {
                    this[this.myTable.ColumnInterest] = value;
                }
            }
        }
        
        /// Interest category
        public String Category
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategory) 
                            || (((String)(this[this.myTable.ColumnCategory])) != value)))
                {
                    this[this.myTable.ColumnCategory] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnInterest);
            this.SetNull(this.myTable.ColumnCategory);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsInterestNull()
        {
            return this.IsNull(this.myTable.ColumnInterest);
        }
        
        /// assign NULL value
        public void SetInterestNull()
        {
            this.SetNull(this.myTable.ColumnInterest);
        }
        
        /// test for NULL value
        public bool IsCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnCategory);
        }
        
        /// assign NULL value
        public void SetCategoryNull()
        {
            this.SetNull(this.myTable.ColumnCategory);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Partner Area of Interest
    [Serializable()]
    public class PPartnerInterestTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnPartnerKey;
        
        /// Sequence number per Partner (required to make PK)
        public DataColumn ColumnInterestNumber;
        
        /// The Field the Partner is interested in
        public DataColumn ColumnFieldKey;
        
        /// The Country the Partner is interested in
        public DataColumn ColumnCountry;
        
        /// The Interest the Partner is interested in
        public DataColumn ColumnInterest;
        
        /// The level of interest
        public DataColumn ColumnLevel;
        
        /// 
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerInterestTable() : 
                base("PPartnerInterest")
        {
        }
        
        /// constructor
        public PPartnerInterestTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerInterestTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerInterestRow this[int i]
        {
            get
            {
                return ((PPartnerInterestRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetInterestNumberDBName()
        {
            return "p_interest_number_i";
        }
        
        /// get help text for column
        public static string GetInterestNumberHelp()
        {
            return "Sequence number per Partner (required to make PK)";
        }
        
        /// get label of column
        public static string GetInterestNumberLabel()
        {
            return "Interest Number";
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldKeyDBName()
        {
            return "p_field_key_n";
        }
        
        /// get help text for column
        public static string GetFieldKeyHelp()
        {
            return "The Field the Partner is interested in";
        }
        
        /// get label of column
        public static string GetFieldKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetFieldKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCountryDBName()
        {
            return "p_country_c";
        }
        
        /// get help text for column
        public static string GetCountryHelp()
        {
            return "The Country the Partner is interested in";
        }
        
        /// get label of column
        public static string GetCountryLabel()
        {
            return "Country";
        }
        
        /// get character length for column
        public static short GetCountryLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetInterestDBName()
        {
            return "p_interest_c";
        }
        
        /// get help text for column
        public static string GetInterestHelp()
        {
            return "The Interest the Partner is interested in";
        }
        
        /// get label of column
        public static string GetInterestLabel()
        {
            return "Interest";
        }
        
        /// get character length for column
        public static short GetInterestLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLevelDBName()
        {
            return "p_level_i";
        }
        
        /// get help text for column
        public static string GetLevelHelp()
        {
            return "The level of interest";
        }
        
        /// get label of column
        public static string GetLevelLabel()
        {
            return "Level";
        }
        
        /// get display format for column
        public static short GetLevelLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerInterest";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_interest";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Interest";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_interest_number_i",
                    "p_field_key_n",
                    "p_country_c",
                    "p_interest_c",
                    "p_level_i",
                    "p_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnInterestNumber = this.Columns["p_interest_number_i"];
            this.ColumnFieldKey = this.Columns["p_field_key_n"];
            this.ColumnCountry = this.Columns["p_country_c"];
            this.ColumnInterest = this.Columns["p_interest_c"];
            this.ColumnLevel = this.Columns["p_level_i"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnInterestNumber};
        }
        
        /// get typed set of changes
        public PPartnerInterestTable GetChangesTyped()
        {
            return ((PPartnerInterestTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerInterestRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerInterestRow ret = ((PPartnerInterestRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerInterestRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerInterestRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_interest_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_field_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_country_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_interest_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnInterestNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFieldKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnCountry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 8);
            }
            if ((ACol == ColumnInterest))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnLevel))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Partner Area of Interest
    [Serializable()]
    public class PPartnerInterestRow : System.Data.DataRow
    {
        
        private PPartnerInterestTable myTable;
        
        /// Constructor
        public PPartnerInterestRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerInterestTable)(this.Table));
        }
        
        /// 
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Sequence number per Partner (required to make PK)
        public Int32 InterestNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterestNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterestNumber) 
                            || (((Int32)(this[this.myTable.ColumnInterestNumber])) != value)))
                {
                    this[this.myTable.ColumnInterestNumber] = value;
                }
            }
        }
        
        /// The Field the Partner is interested in
        public Int64 FieldKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldKey])) != value)))
                {
                    this[this.myTable.ColumnFieldKey] = value;
                }
            }
        }
        
        /// The Country the Partner is interested in
        public String Country
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountry) 
                            || (((String)(this[this.myTable.ColumnCountry])) != value)))
                {
                    this[this.myTable.ColumnCountry] = value;
                }
            }
        }
        
        /// The Interest the Partner is interested in
        public String Interest
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterest.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterest) 
                            || (((String)(this[this.myTable.ColumnInterest])) != value)))
                {
                    this[this.myTable.ColumnInterest] = value;
                }
            }
        }
        
        /// The level of interest
        public Int32 Level
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLevel) 
                            || (((Int32)(this[this.myTable.ColumnLevel])) != value)))
                {
                    this[this.myTable.ColumnLevel] = value;
                }
            }
        }
        
        /// 
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnInterestNumber);
            this.SetNull(this.myTable.ColumnFieldKey);
            this.SetNull(this.myTable.ColumnCountry);
            this.SetNull(this.myTable.ColumnInterest);
            this.SetNull(this.myTable.ColumnLevel);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }
        
        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }
        
        /// test for NULL value
        public bool IsInterestNumberNull()
        {
            return this.IsNull(this.myTable.ColumnInterestNumber);
        }
        
        /// assign NULL value
        public void SetInterestNumberNull()
        {
            this.SetNull(this.myTable.ColumnInterestNumber);
        }
        
        /// test for NULL value
        public bool IsFieldKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFieldKey);
        }
        
        /// assign NULL value
        public void SetFieldKeyNull()
        {
            this.SetNull(this.myTable.ColumnFieldKey);
        }
        
        /// test for NULL value
        public bool IsCountryNull()
        {
            return this.IsNull(this.myTable.ColumnCountry);
        }
        
        /// assign NULL value
        public void SetCountryNull()
        {
            this.SetNull(this.myTable.ColumnCountry);
        }
        
        /// test for NULL value
        public bool IsInterestNull()
        {
            return this.IsNull(this.myTable.ColumnInterest);
        }
        
        /// assign NULL value
        public void SetInterestNull()
        {
            this.SetNull(this.myTable.ColumnInterest);
        }
        
        /// test for NULL value
        public bool IsLevelNull()
        {
            return this.IsNull(this.myTable.ColumnLevel);
        }
        
        /// assign NULL value
        public void SetLevelNull()
        {
            this.SetNull(this.myTable.ColumnLevel);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Partner merge history
    [Serializable()]
    public class PPartnerMergeTable : TTypedDataTable
    {
        
        /// The partner that was merged.
        public DataColumn ColumnMergeFrom;
        
        /// The partner they were merged into.
        public DataColumn ColumnMergeTo;
        
        /// The user who did the merge.
        public DataColumn ColumnMergedBy;
        
        /// Date of merge.
        public DataColumn ColumnMergeDate;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerMergeTable() : 
                base("PPartnerMerge")
        {
        }
        
        /// constructor
        public PPartnerMergeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerMergeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerMergeRow this[int i]
        {
            get
            {
                return ((PPartnerMergeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetMergeFromDBName()
        {
            return "p_merge_from_n";
        }
        
        /// get help text for column
        public static string GetMergeFromHelp()
        {
            return "The partner that was merged.";
        }
        
        /// get label of column
        public static string GetMergeFromLabel()
        {
            return "Merged From";
        }
        
        /// get display format for column
        public static short GetMergeFromLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMergeToDBName()
        {
            return "p_merge_to_n";
        }
        
        /// get help text for column
        public static string GetMergeToHelp()
        {
            return "The partner they were merged into.";
        }
        
        /// get label of column
        public static string GetMergeToLabel()
        {
            return "Merged To";
        }
        
        /// get display format for column
        public static short GetMergeToLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMergedByDBName()
        {
            return "s_merged_by_c";
        }
        
        /// get help text for column
        public static string GetMergedByHelp()
        {
            return "The user who did the merge.";
        }
        
        /// get label of column
        public static string GetMergedByLabel()
        {
            return "Merged By";
        }
        
        /// get character length for column
        public static short GetMergedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMergeDateDBName()
        {
            return "s_merge_date_d";
        }
        
        /// get help text for column
        public static string GetMergeDateHelp()
        {
            return "Date of merge.";
        }
        
        /// get label of column
        public static string GetMergeDateLabel()
        {
            return "Merge Date";
        }
        
        /// get display format for column
        public static short GetMergeDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerMerge";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_merge";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Merge History";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_merge_from_n",
                    "p_merge_to_n",
                    "s_merged_by_c",
                    "s_merge_date_d",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnMergeFrom = this.Columns["p_merge_from_n"];
            this.ColumnMergeTo = this.Columns["p_merge_to_n"];
            this.ColumnMergedBy = this.Columns["s_merged_by_c"];
            this.ColumnMergeDate = this.Columns["s_merge_date_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnMergeFrom};
        }
        
        /// get typed set of changes
        public PPartnerMergeTable GetChangesTyped()
        {
            return ((PPartnerMergeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerMergeRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerMergeRow ret = ((PPartnerMergeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerMergeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerMergeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_merge_from_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_merge_to_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_merged_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_merge_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnMergeFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnMergeTo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnMergedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnMergeDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Partner merge history
    [Serializable()]
    public class PPartnerMergeRow : System.Data.DataRow
    {
        
        private PPartnerMergeTable myTable;
        
        /// Constructor
        public PPartnerMergeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerMergeTable)(this.Table));
        }
        
        /// The partner that was merged.
        public Int64 MergeFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMergeFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMergeFrom) 
                            || (((Int64)(this[this.myTable.ColumnMergeFrom])) != value)))
                {
                    this[this.myTable.ColumnMergeFrom] = value;
                }
            }
        }
        
        /// The partner they were merged into.
        public Int64 MergeTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMergeTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMergeTo) 
                            || (((Int64)(this[this.myTable.ColumnMergeTo])) != value)))
                {
                    this[this.myTable.ColumnMergeTo] = value;
                }
            }
        }
        
        /// The user who did the merge.
        public String MergedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMergedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMergedBy) 
                            || (((String)(this[this.myTable.ColumnMergedBy])) != value)))
                {
                    this[this.myTable.ColumnMergedBy] = value;
                }
            }
        }
        
        /// Date of merge.
        public System.DateTime MergeDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMergeDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMergeDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnMergeDate])) != value)))
                {
                    this[this.myTable.ColumnMergeDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime MergeDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMergeDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime MergeDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnMergeDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnMergeFrom);
            this.SetNull(this.myTable.ColumnMergeTo);
            this.SetNull(this.myTable.ColumnMergedBy);
            this.SetNull(this.myTable.ColumnMergeDate);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsMergeFromNull()
        {
            return this.IsNull(this.myTable.ColumnMergeFrom);
        }
        
        /// assign NULL value
        public void SetMergeFromNull()
        {
            this.SetNull(this.myTable.ColumnMergeFrom);
        }
        
        /// test for NULL value
        public bool IsMergeToNull()
        {
            return this.IsNull(this.myTable.ColumnMergeTo);
        }
        
        /// assign NULL value
        public void SetMergeToNull()
        {
            this.SetNull(this.myTable.ColumnMergeTo);
        }
        
        /// test for NULL value
        public bool IsMergedByNull()
        {
            return this.IsNull(this.myTable.ColumnMergedBy);
        }
        
        /// assign NULL value
        public void SetMergedByNull()
        {
            this.SetNull(this.myTable.ColumnMergedBy);
        }
        
        /// test for NULL value
        public bool IsMergeDateNull()
        {
            return this.IsNull(this.myTable.ColumnMergeDate);
        }
        
        /// assign NULL value
        public void SetMergeDateNull()
        {
            this.SetNull(this.myTable.ColumnMergeDate);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This table contains the codes that indicate the categories of reminders
    [Serializable()]
    public class PReminderCategoryTable : TTypedDataTable
    {
        
        /// This code indicates the category of a reminder
        public DataColumn ColumnCode;
        
        /// This describes the reminder category.
        public DataColumn ColumnDescription;
        
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PReminderCategoryTable() : 
                base("PReminderCategory")
        {
        }
        
        /// constructor
        public PReminderCategoryTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PReminderCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PReminderCategoryRow this[int i]
        {
            get
            {
                return ((PReminderCategoryRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "p_code_c";
        }
        
        /// get help text for column
        public static string GetCodeHelp()
        {
            return "This code indicates the category of a reminder";
        }
        
        /// get label of column
        public static string GetCodeLabel()
        {
            return "Reminder Category";
        }
        
        /// get character length for column
        public static short GetCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "This describes the reminder category.";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "p_unassignable_flag_l";
        }
        
        /// get help text for column
        public static string GetUnassignableFlagHelp()
        {
            return "Indicates if this code can still be assigned?";
        }
        
        /// get label of column
        public static string GetUnassignableFlagLabel()
        {
            return "Unassignable";
        }
        
        /// get display format for column
        public static short GetUnassignableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "p_unassignable_date_d";
        }
        
        /// get help text for column
        public static string GetUnassignableDateHelp()
        {
            return "Date from which this code was made unassignable.";
        }
        
        /// get label of column
        public static string GetUnassignableDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetUnassignableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "p_deletable_flag_l";
        }
        
        /// get help text for column
        public static string GetDeletableFlagHelp()
        {
            return "Indicates if a record can be deleted.";
        }
        
        /// get label of column
        public static string GetDeletableFlagLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PReminderCategory";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_reminder_category";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Reminder Category";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_code_c",
                    "p_description_c",
                    "p_unassignable_flag_l",
                    "p_unassignable_date_d",
                    "p_deletable_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["p_code_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnUnassignableFlag = this.Columns["p_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["p_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["p_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCode};
        }
        
        /// get typed set of changes
        public PReminderCategoryTable GetChangesTyped()
        {
            return ((PReminderCategoryTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PReminderCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PReminderCategoryRow ret = ((PReminderCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PReminderCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PReminderCategoryRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnUnassignableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnUnassignableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDeletableFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This table contains the codes that indicate the categories of reminders
    [Serializable()]
    public class PReminderCategoryRow : System.Data.DataRow
    {
        
        private PReminderCategoryTable myTable;
        
        /// Constructor
        public PReminderCategoryRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PReminderCategoryTable)(this.Table));
        }
        
        /// This code indicates the category of a reminder
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode) 
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }
        
        /// This describes the reminder category.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }
        
        /// Date from which this code was made unassignable.
        public System.DateTime UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime UnassignableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime UnassignableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnUnassignableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }
        
        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }
        
        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A reminder that can be linked to a Partner or Partner contact
    [Serializable()]
    public class PPartnerReminderTable : TTypedDataTable
    {
        
        /// Partner key of Partner to which the reminder is related
        public DataColumn ColumnPartnerKey;
        
        /// ID of Contact to which reminder relates. Null means that reminder relates just to a Partner
        public DataColumn ColumnContactId;
        
        /// ID of this reminder (only unique per Partner/Contact)
        public DataColumn ColumnReminderId;
        
        /// The user that requires this reminder
        public DataColumn ColumnUserId;
        
        /// This is a category, by which reminders can be grouped.
        public DataColumn ColumnCategoryCode;
        
        /// Type of action to take on getting the reminder (eg. Email etc)
        public DataColumn ColumnActionType;
        
        /// Reason for the reminder (eg. birthday, etc.)
        public DataColumn ColumnReminderReason;
        
        /// Additional Comments
        public DataColumn ColumnComment;
        
        /// Date of event that reminder is about (if the reminder relates to a specific event like a birthday).
        public DataColumn ColumnEventDate;
        
        /// Date on which to send/display first reminder.
        public DataColumn ColumnFirstReminderDate;
        
        /// Frequency (in days) with which re-reminders should be sent.
        public DataColumn ColumnReminderFrequency;
        
        /// Date on which the last reminder was sent
        public DataColumn ColumnLastReminderSent;
        
        /// Date on which the next reminder will be sent
        public DataColumn ColumnNextReminderDate;
        
        /// Is this reminder still active?
        public DataColumn ColumnReminderActive;
        
        /// Email address to which reminder should be sent
        public DataColumn ColumnEmailAddress;
        
        /// Indicates whether or not the contact has restricted access. If it does then the access will be controlled by s_group_partner_reminder
        public DataColumn ColumnRestricted;
        
        /// Identifies a module. A module is any part of aprogram which is related to each menu entry or to the sub-system. Eg, partner administration, AP, AR etc.
        public DataColumn ColumnModuleId;
        
        /// If set, this contact is restricted to one user.
        public DataColumn ColumnUserRestriction;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerReminderTable() : 
                base("PPartnerReminder")
        {
        }
        
        /// constructor
        public PPartnerReminderTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerReminderTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerReminderRow this[int i]
        {
            get
            {
                return ((PPartnerReminderRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which the reminder is related";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactIdDBName()
        {
            return "p_contact_id_i";
        }
        
        /// get help text for column
        public static string GetContactIdHelp()
        {
            return "ID of Contact to which reminder relates. Null means that reminder relates just to" +
                " a Partner";
        }
        
        /// get label of column
        public static string GetContactIdLabel()
        {
            return "Contact ID";
        }
        
        /// get display format for column
        public static short GetContactIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderIdDBName()
        {
            return "p_reminder_id_i";
        }
        
        /// get help text for column
        public static string GetReminderIdHelp()
        {
            return "ID of this reminder (only unique per Partner/Contact)";
        }
        
        /// get label of column
        public static string GetReminderIdLabel()
        {
            return "Reminder ID";
        }
        
        /// get display format for column
        public static short GetReminderIdLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the User ID for the person who requires the reminder.";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCategoryCodeDBName()
        {
            return "p_category_code_c";
        }
        
        /// get help text for column
        public static string GetCategoryCodeHelp()
        {
            return "This is a category, by which reminders can be grouped.";
        }
        
        /// get label of column
        public static string GetCategoryCodeLabel()
        {
            return "Category";
        }
        
        /// get character length for column
        public static short GetCategoryCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionTypeDBName()
        {
            return "p_action_type_c";
        }
        
        /// get help text for column
        public static string GetActionTypeHelp()
        {
            return "Enter the action to take on getting this reminder.";
        }
        
        /// get label of column
        public static string GetActionTypeLabel()
        {
            return "Action Type";
        }
        
        /// get character length for column
        public static short GetActionTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderReasonDBName()
        {
            return "p_reminder_reason_c";
        }
        
        /// get help text for column
        public static string GetReminderReasonHelp()
        {
            return "Enter the reason for this reminder (eg. birthday, etc.)";
        }
        
        /// get label of column
        public static string GetReminderReasonLabel()
        {
            return "Reason for reminder";
        }
        
        /// get character length for column
        public static short GetReminderReasonLength()
        {
            return 300;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Enter any additional comments.";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comments";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 300;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEventDateDBName()
        {
            return "p_event_date_d";
        }
        
        /// get help text for column
        public static string GetEventDateHelp()
        {
            return "Enter the date of the event which the reminder relates to.";
        }
        
        /// get label of column
        public static string GetEventDateLabel()
        {
            return "Date of Event";
        }
        
        /// get display format for column
        public static short GetEventDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstReminderDateDBName()
        {
            return "p_first_reminder_date_d";
        }
        
        /// get help text for column
        public static string GetFirstReminderDateHelp()
        {
            return "Enter date on which first reminder should be sent";
        }
        
        /// get label of column
        public static string GetFirstReminderDateLabel()
        {
            return "Date of First Reminder";
        }
        
        /// get display format for column
        public static short GetFirstReminderDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderFrequencyDBName()
        {
            return "p_reminder_frequency_i";
        }
        
        /// get help text for column
        public static string GetReminderFrequencyHelp()
        {
            return "Enter the frequency (in days) for the resending of reminders.";
        }
        
        /// get label of column
        public static string GetReminderFrequencyLabel()
        {
            return "Reminder Frequency";
        }
        
        /// get display format for column
        public static short GetReminderFrequencyLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastReminderSentDBName()
        {
            return "p_last_reminder_sent_d";
        }
        
        /// get help text for column
        public static string GetLastReminderSentHelp()
        {
            return "Date on which the last reminder was sent";
        }
        
        /// get label of column
        public static string GetLastReminderSentLabel()
        {
            return "Date last reminder sent";
        }
        
        /// get display format for column
        public static short GetLastReminderSentLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNextReminderDateDBName()
        {
            return "p_next_reminder_date_d";
        }
        
        /// get help text for column
        public static string GetNextReminderDateHelp()
        {
            return "Date on which the next reminder will be sent";
        }
        
        /// get label of column
        public static string GetNextReminderDateLabel()
        {
            return "Date of next reminder";
        }
        
        /// get display format for column
        public static short GetNextReminderDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderActiveDBName()
        {
            return "p_reminder_active_l";
        }
        
        /// get help text for column
        public static string GetReminderActiveHelp()
        {
            return "Enable or Disable Reminder";
        }
        
        /// get label of column
        public static string GetReminderActiveLabel()
        {
            return "Reminder Active?";
        }
        
        /// get display format for column
        public static short GetReminderActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }
        
        /// get help text for column
        public static string GetEmailAddressHelp()
        {
            return "Enter the Email address to which reminder should be sent";
        }
        
        /// get label of column
        public static string GetEmailAddressLabel()
        {
            return "Email address";
        }
        
        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_l";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Should access to this reminder be restricted to some people?";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "Reminder Restricted";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "Identifies a module. A module is any part of aprogram which is related to each me" +
                "nu entry or to the sub-system. Eg, partner administration, AP, AR etc.";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserRestrictionDBName()
        {
            return "s_user_restriction_c";
        }
        
        /// get help text for column
        public static string GetUserRestrictionHelp()
        {
            return "If set, this contact is restricted to one user.";
        }
        
        /// get label of column
        public static string GetUserRestrictionLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetUserRestrictionLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerReminder";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_reminder";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Reminder";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_contact_id_i",
                    "p_reminder_id_i",
                    "s_user_id_c",
                    "p_category_code_c",
                    "p_action_type_c",
                    "p_reminder_reason_c",
                    "p_comment_c",
                    "p_event_date_d",
                    "p_first_reminder_date_d",
                    "p_reminder_frequency_i",
                    "p_last_reminder_sent_d",
                    "p_next_reminder_date_d",
                    "p_reminder_active_l",
                    "p_email_address_c",
                    "p_restricted_l",
                    "s_module_id_c",
                    "s_user_restriction_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnContactId = this.Columns["p_contact_id_i"];
            this.ColumnReminderId = this.Columns["p_reminder_id_i"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnCategoryCode = this.Columns["p_category_code_c"];
            this.ColumnActionType = this.Columns["p_action_type_c"];
            this.ColumnReminderReason = this.Columns["p_reminder_reason_c"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnEventDate = this.Columns["p_event_date_d"];
            this.ColumnFirstReminderDate = this.Columns["p_first_reminder_date_d"];
            this.ColumnReminderFrequency = this.Columns["p_reminder_frequency_i"];
            this.ColumnLastReminderSent = this.Columns["p_last_reminder_sent_d"];
            this.ColumnNextReminderDate = this.Columns["p_next_reminder_date_d"];
            this.ColumnReminderActive = this.Columns["p_reminder_active_l"];
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnRestricted = this.Columns["p_restricted_l"];
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnUserRestriction = this.Columns["s_user_restriction_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnContactId,
                    this.ColumnReminderId};
        }
        
        /// get typed set of changes
        public PPartnerReminderTable GetChangesTyped()
        {
            return ((PPartnerReminderTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerReminderRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerReminderRow ret = ((PPartnerReminderRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerReminderRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerReminderRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_action_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_event_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_first_reminder_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_frequency_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_last_reminder_sent_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_next_reminder_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_user_restriction_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnContactId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReminderId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnCategoryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnActionType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReminderReason))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 600);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 600);
            }
            if ((ACol == ColumnEventDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnFirstReminderDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnReminderFrequency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastReminderSent))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnNextReminderDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnReminderActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnEmailAddress))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUserRestriction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A reminder that can be linked to a Partner or Partner contact
    [Serializable()]
    public class PPartnerReminderRow : System.Data.DataRow
    {
        
        private PPartnerReminderTable myTable;
        
        /// Constructor
        public PPartnerReminderRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerReminderTable)(this.Table));
        }
        
        /// Partner key of Partner to which the reminder is related
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// ID of Contact to which reminder relates. Null means that reminder relates just to a Partner
        public Int32 ContactId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactId) 
                            || (((Int32)(this[this.myTable.ColumnContactId])) != value)))
                {
                    this[this.myTable.ColumnContactId] = value;
                }
            }
        }
        
        /// ID of this reminder (only unique per Partner/Contact)
        public Int32 ReminderId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderId) 
                            || (((Int32)(this[this.myTable.ColumnReminderId])) != value)))
                {
                    this[this.myTable.ColumnReminderId] = value;
                }
            }
        }
        
        /// The user that requires this reminder
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// This is a category, by which reminders can be grouped.
        public String CategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategoryCode) 
                            || (((String)(this[this.myTable.ColumnCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnCategoryCode] = value;
                }
            }
        }
        
        /// Type of action to take on getting the reminder (eg. Email etc)
        public String ActionType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionType) 
                            || (((String)(this[this.myTable.ColumnActionType])) != value)))
                {
                    this[this.myTable.ColumnActionType] = value;
                }
            }
        }
        
        /// Reason for the reminder (eg. birthday, etc.)
        public String ReminderReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderReason) 
                            || (((String)(this[this.myTable.ColumnReminderReason])) != value)))
                {
                    this[this.myTable.ColumnReminderReason] = value;
                }
            }
        }
        
        /// Additional Comments
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// Date of event that reminder is about (if the reminder relates to a specific event like a birthday).
        public System.DateTime EventDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEventDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEventDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnEventDate])) != value)))
                {
                    this[this.myTable.ColumnEventDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime EventDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnEventDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime EventDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnEventDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date on which to send/display first reminder.
        public System.DateTime FirstReminderDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstReminderDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstReminderDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnFirstReminderDate])) != value)))
                {
                    this[this.myTable.ColumnFirstReminderDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime FirstReminderDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnFirstReminderDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime FirstReminderDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnFirstReminderDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Frequency (in days) with which re-reminders should be sent.
        public Int32 ReminderFrequency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderFrequency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderFrequency) 
                            || (((Int32)(this[this.myTable.ColumnReminderFrequency])) != value)))
                {
                    this[this.myTable.ColumnReminderFrequency] = value;
                }
            }
        }
        
        /// Date on which the last reminder was sent
        public System.DateTime LastReminderSent
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastReminderSent.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastReminderSent) 
                            || (((System.DateTime)(this[this.myTable.ColumnLastReminderSent])) != value)))
                {
                    this[this.myTable.ColumnLastReminderSent] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime LastReminderSentLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLastReminderSent], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime LastReminderSentHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLastReminderSent.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date on which the next reminder will be sent
        public System.DateTime NextReminderDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNextReminderDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNextReminderDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnNextReminderDate])) != value)))
                {
                    this[this.myTable.ColumnNextReminderDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime NextReminderDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNextReminderDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime NextReminderDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnNextReminderDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Is this reminder still active?
        public Boolean ReminderActive
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderActive) 
                            || (((Boolean)(this[this.myTable.ColumnReminderActive])) != value)))
                {
                    this[this.myTable.ColumnReminderActive] = value;
                }
            }
        }
        
        /// Email address to which reminder should be sent
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress) 
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }
        
        /// Indicates whether or not the contact has restricted access. If it does then the access will be controlled by s_group_partner_reminder
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// Identifies a module. A module is any part of aprogram which is related to each menu entry or to the sub-system. Eg, partner administration, AP, AR etc.
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// If set, this contact is restricted to one user.
        public String UserRestriction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserRestriction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserRestriction) 
                            || (((String)(this[this.myTable.ColumnUserRestriction])) != value)))
                {
                    this[this.myTable.ColumnUserRestriction] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnContactId);
            this[this.myTable.ColumnReminderId.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnCategoryCode);
            this.SetNull(this.myTable.ColumnActionType);
            this.SetNull(this.myTable.ColumnReminderReason);
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnEventDate);
            this.SetNull(this.myTable.ColumnFirstReminderDate);
            this[this.myTable.ColumnReminderFrequency.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLastReminderSent);
            this.SetNull(this.myTable.ColumnNextReminderDate);
            this[this.myTable.ColumnReminderActive.Ordinal] = true;
            this.SetNull(this.myTable.ColumnEmailAddress);
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnUserRestriction);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsContactIdNull()
        {
            return this.IsNull(this.myTable.ColumnContactId);
        }
        
        /// assign NULL value
        public void SetContactIdNull()
        {
            this.SetNull(this.myTable.ColumnContactId);
        }
        
        /// test for NULL value
        public bool IsReminderIdNull()
        {
            return this.IsNull(this.myTable.ColumnReminderId);
        }
        
        /// assign NULL value
        public void SetReminderIdNull()
        {
            this.SetNull(this.myTable.ColumnReminderId);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsCategoryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCategoryCode);
        }
        
        /// assign NULL value
        public void SetCategoryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCategoryCode);
        }
        
        /// test for NULL value
        public bool IsActionTypeNull()
        {
            return this.IsNull(this.myTable.ColumnActionType);
        }
        
        /// assign NULL value
        public void SetActionTypeNull()
        {
            this.SetNull(this.myTable.ColumnActionType);
        }
        
        /// test for NULL value
        public bool IsReminderReasonNull()
        {
            return this.IsNull(this.myTable.ColumnReminderReason);
        }
        
        /// assign NULL value
        public void SetReminderReasonNull()
        {
            this.SetNull(this.myTable.ColumnReminderReason);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsEventDateNull()
        {
            return this.IsNull(this.myTable.ColumnEventDate);
        }
        
        /// assign NULL value
        public void SetEventDateNull()
        {
            this.SetNull(this.myTable.ColumnEventDate);
        }
        
        /// test for NULL value
        public bool IsReminderFrequencyNull()
        {
            return this.IsNull(this.myTable.ColumnReminderFrequency);
        }
        
        /// assign NULL value
        public void SetReminderFrequencyNull()
        {
            this.SetNull(this.myTable.ColumnReminderFrequency);
        }
        
        /// test for NULL value
        public bool IsLastReminderSentNull()
        {
            return this.IsNull(this.myTable.ColumnLastReminderSent);
        }
        
        /// assign NULL value
        public void SetLastReminderSentNull()
        {
            this.SetNull(this.myTable.ColumnLastReminderSent);
        }
        
        /// test for NULL value
        public bool IsNextReminderDateNull()
        {
            return this.IsNull(this.myTable.ColumnNextReminderDate);
        }
        
        /// assign NULL value
        public void SetNextReminderDateNull()
        {
            this.SetNull(this.myTable.ColumnNextReminderDate);
        }
        
        /// test for NULL value
        public bool IsEmailAddressNull()
        {
            return this.IsNull(this.myTable.ColumnEmailAddress);
        }
        
        /// assign NULL value
        public void SetEmailAddressNull()
        {
            this.SetNull(this.myTable.ColumnEmailAddress);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsModuleIdNull()
        {
            return this.IsNull(this.myTable.ColumnModuleId);
        }
        
        /// assign NULL value
        public void SetModuleIdNull()
        {
            this.SetNull(this.myTable.ColumnModuleId);
        }
        
        /// test for NULL value
        public bool IsUserRestrictionNull()
        {
            return this.IsNull(this.myTable.ColumnUserRestriction);
        }
        
        /// assign NULL value
        public void SetUserRestrictionNull()
        {
            this.SetNull(this.myTable.ColumnUserRestriction);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Tracks the current field of service for the Partner and maintains a history
    [Serializable()]
    public class PPartnerFieldOfServiceTable : TTypedDataTable
    {
        
        /// Surrogate Primary Key
        public DataColumn ColumnKey;
        
        /// Partner key of Partner to which the field is assigned
        public DataColumn ColumnPartnerKey;
        
        /// Field to which Partner is assigned
        public DataColumn ColumnFieldKey;
        
        /// Date from which field assignment is valid
        public DataColumn ColumnDateEffective;
        
        /// Date on which field assignment expires
        public DataColumn ColumnDateExpires;
        
        /// Is the field assignment currently valid
        public DataColumn ColumnActive;
        
        /// Is this field the default gift destination?
        public DataColumn ColumnDefaultGiftDestination;
        
        /// Is this the field for a person or a family?
        public DataColumn ColumnPartnerClass;
        
        /// Needed if this field assignment relates to a specific commitment
        public DataColumn ColumnCommitmentSiteKey;
        
        /// Needed if this field assignment relates to a specific commitment
        public DataColumn ColumnCommitmentKey;
        
        /// Any comments relating to this field assignment
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerFieldOfServiceTable() : 
                base("PPartnerFieldOfService")
        {
        }
        
        /// constructor
        public PPartnerFieldOfServiceTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerFieldOfServiceTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerFieldOfServiceRow this[int i]
        {
            get
            {
                return ((PPartnerFieldOfServiceRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "p_key_i";
        }
        
        /// get help text for column
        public static string GetKeyHelp()
        {
            return "Surrogate Primary Key";
        }
        
        /// get label of column
        public static string GetKeyLabel()
        {
            return "p_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which the field is assigned";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldKeyDBName()
        {
            return "p_field_key_n";
        }
        
        /// get help text for column
        public static string GetFieldKeyHelp()
        {
            return "Field to which Partner is assigned";
        }
        
        /// get label of column
        public static string GetFieldKeyLabel()
        {
            return "Field Key";
        }
        
        /// get display format for column
        public static short GetFieldKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "p_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Date from which field assignment is valid";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Date Effective From";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateExpiresDBName()
        {
            return "p_date_expires_d";
        }
        
        /// get help text for column
        public static string GetDateExpiresHelp()
        {
            return "Date on which field assignment expires";
        }
        
        /// get label of column
        public static string GetDateExpiresLabel()
        {
            return "Date of Expiry";
        }
        
        /// get display format for column
        public static short GetDateExpiresLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "p_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Is this field assignment currently active?";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "Active?";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultGiftDestinationDBName()
        {
            return "p_default_gift_destination_l";
        }
        
        /// get help text for column
        public static string GetDefaultGiftDestinationHelp()
        {
            return "Is this field the destination for gifts for this person";
        }
        
        /// get label of column
        public static string GetDefaultGiftDestinationLabel()
        {
            return "Default Gift Destination?";
        }
        
        /// get display format for column
        public static short GetDefaultGiftDestinationLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerClassDBName()
        {
            return "p_partner_class_c";
        }
        
        /// get help text for column
        public static string GetPartnerClassHelp()
        {
            return "Is this the field for a person or a family?";
        }
        
        /// get label of column
        public static string GetPartnerClassLabel()
        {
            return "Partner Class";
        }
        
        /// get character length for column
        public static short GetPartnerClassLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommitmentSiteKeyDBName()
        {
            return "p_commitment_site_key_n";
        }
        
        /// get help text for column
        public static string GetCommitmentSiteKeyHelp()
        {
            return "Needed if this field assignment relates to a specific commitment";
        }
        
        /// get label of column
        public static string GetCommitmentSiteKeyLabel()
        {
            return "p_commitment_site_key_n";
        }
        
        /// get display format for column
        public static short GetCommitmentSiteKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommitmentKeyDBName()
        {
            return "p_commitment_key_n";
        }
        
        /// get help text for column
        public static string GetCommitmentKeyHelp()
        {
            return "Needed if this field assignment relates to a specific commitment";
        }
        
        /// get label of column
        public static string GetCommitmentKeyLabel()
        {
            return "p_commitment_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Enter any additional comments";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comments";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerFieldOfService";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_field_of_service";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Field of Service";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_key_i",
                    "p_partner_key_n",
                    "p_field_key_n",
                    "p_date_effective_d",
                    "p_date_expires_d",
                    "p_active_l",
                    "p_default_gift_destination_l",
                    "p_partner_class_c",
                    "p_commitment_site_key_n",
                    "p_commitment_key_n",
                    "p_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKey = this.Columns["p_key_i"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnFieldKey = this.Columns["p_field_key_n"];
            this.ColumnDateEffective = this.Columns["p_date_effective_d"];
            this.ColumnDateExpires = this.Columns["p_date_expires_d"];
            this.ColumnActive = this.Columns["p_active_l"];
            this.ColumnDefaultGiftDestination = this.Columns["p_default_gift_destination_l"];
            this.ColumnPartnerClass = this.Columns["p_partner_class_c"];
            this.ColumnCommitmentSiteKey = this.Columns["p_commitment_site_key_n"];
            this.ColumnCommitmentKey = this.Columns["p_commitment_key_n"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnKey};
        }
        
        /// get typed set of changes
        public PPartnerFieldOfServiceTable GetChangesTyped()
        {
            return ((PPartnerFieldOfServiceTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerFieldOfServiceRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerFieldOfServiceRow ret = ((PPartnerFieldOfServiceRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerFieldOfServiceRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerFieldOfServiceRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_field_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_date_expires_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_default_gift_destination_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_class_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_commitment_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_commitment_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFieldKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateExpires))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDefaultGiftDestination))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnPartnerClass))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnCommitmentSiteKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnCommitmentKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Tracks the current field of service for the Partner and maintains a history
    [Serializable()]
    public class PPartnerFieldOfServiceRow : System.Data.DataRow
    {
        
        private PPartnerFieldOfServiceTable myTable;
        
        /// Constructor
        public PPartnerFieldOfServiceRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerFieldOfServiceTable)(this.Table));
        }
        
        /// Surrogate Primary Key
        public Int32 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey) 
                            || (((Int32)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }
        
        /// Partner key of Partner to which the field is assigned
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Field to which Partner is assigned
        public Int64 FieldKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldKey])) != value)))
                {
                    this[this.myTable.ColumnFieldKey] = value;
                }
            }
        }
        
        /// Date from which field assignment is valid
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date on which field assignment expires
        public System.DateTime DateExpires
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateExpires.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateExpires) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateExpires])) != value)))
                {
                    this[this.myTable.ColumnDateExpires] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateExpiresLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateExpires], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateExpiresHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateExpires.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Is the field assignment currently valid
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// Is this field the default gift destination?
        public Boolean DefaultGiftDestination
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultGiftDestination.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultGiftDestination) 
                            || (((Boolean)(this[this.myTable.ColumnDefaultGiftDestination])) != value)))
                {
                    this[this.myTable.ColumnDefaultGiftDestination] = value;
                }
            }
        }
        
        /// Is this the field for a person or a family?
        public String PartnerClass
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerClass.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerClass) 
                            || (((String)(this[this.myTable.ColumnPartnerClass])) != value)))
                {
                    this[this.myTable.ColumnPartnerClass] = value;
                }
            }
        }
        
        /// Needed if this field assignment relates to a specific commitment
        public Int64 CommitmentSiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommitmentSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommitmentSiteKey) 
                            || (((Int64)(this[this.myTable.ColumnCommitmentSiteKey])) != value)))
                {
                    this[this.myTable.ColumnCommitmentSiteKey] = value;
                }
            }
        }
        
        /// Needed if this field assignment relates to a specific commitment
        public Int64 CommitmentKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommitmentKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommitmentKey) 
                            || (((Int64)(this[this.myTable.ColumnCommitmentKey])) != value)))
                {
                    this[this.myTable.ColumnCommitmentKey] = value;
                }
            }
        }
        
        /// Any comments relating to this field assignment
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnFieldKey);
            this.SetNull(this.myTable.ColumnDateEffective);
            this.SetNull(this.myTable.ColumnDateExpires);
            this.SetNull(this.myTable.ColumnActive);
            this.SetNull(this.myTable.ColumnDefaultGiftDestination);
            this.SetNull(this.myTable.ColumnPartnerClass);
            this.SetNull(this.myTable.ColumnCommitmentSiteKey);
            this.SetNull(this.myTable.ColumnCommitmentKey);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }
        
        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }
        
        /// test for NULL value
        public bool IsDateExpiresNull()
        {
            return this.IsNull(this.myTable.ColumnDateExpires);
        }
        
        /// assign NULL value
        public void SetDateExpiresNull()
        {
            this.SetNull(this.myTable.ColumnDateExpires);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDefaultGiftDestinationNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultGiftDestination);
        }
        
        /// assign NULL value
        public void SetDefaultGiftDestinationNull()
        {
            this.SetNull(this.myTable.ColumnDefaultGiftDestination);
        }
        
        /// test for NULL value
        public bool IsCommitmentSiteKeyNull()
        {
            return this.IsNull(this.myTable.ColumnCommitmentSiteKey);
        }
        
        /// assign NULL value
        public void SetCommitmentSiteKeyNull()
        {
            this.SetNull(this.myTable.ColumnCommitmentSiteKey);
        }
        
        /// test for NULL value
        public bool IsCommitmentKeyNull()
        {
            return this.IsNull(this.myTable.ColumnCommitmentKey);
        }
        
        /// assign NULL value
        public void SetCommitmentKeyNull()
        {
            this.SetNull(this.myTable.ColumnCommitmentKey);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores one or more short codes for a Partner (eg. a donor or recipient code for online giving system)
    [Serializable()]
    public class PPartnerShortCodeTable : TTypedDataTable
    {
        
        /// Partner key of Partner to which short code applies
        public DataColumn ColumnPartnerKey;
        
        /// The short code which applies to the Partner
        public DataColumn ColumnPartnerShortCode;
        
        /// Field to which Partner is assigned
        public DataColumn ColumnFieldKey;
        
        /// Is this a short code to identify a recipient?
        public DataColumn ColumnRecipientFlag;
        
        /// Is this a short code to identify a donor?
        public DataColumn ColumnDonorFlag;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerShortCodeTable() : 
                base("PPartnerShortCode")
        {
        }
        
        /// constructor
        public PPartnerShortCodeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerShortCodeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerShortCodeRow this[int i]
        {
            get
            {
                return ((PPartnerShortCodeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which short code applies";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerShortCodeDBName()
        {
            return "p_partner_short_code_c";
        }
        
        /// get help text for column
        public static string GetPartnerShortCodeHelp()
        {
            return "The short code which applies to the Partner";
        }
        
        /// get label of column
        public static string GetPartnerShortCodeLabel()
        {
            return "Partner Short Code";
        }
        
        /// get character length for column
        public static short GetPartnerShortCodeLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldKeyDBName()
        {
            return "p_field_key_n";
        }
        
        /// get help text for column
        public static string GetFieldKeyHelp()
        {
            return "Field to which Partner is assigned";
        }
        
        /// get label of column
        public static string GetFieldKeyLabel()
        {
            return "Field Key";
        }
        
        /// get display format for column
        public static short GetFieldKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecipientFlagDBName()
        {
            return "p_recipient_flag_l";
        }
        
        /// get help text for column
        public static string GetRecipientFlagHelp()
        {
            return "Is this a short code to identify a recipient?";
        }
        
        /// get label of column
        public static string GetRecipientFlagLabel()
        {
            return "Recipient?";
        }
        
        /// get display format for column
        public static short GetRecipientFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDonorFlagDBName()
        {
            return "p_donor_flag_l";
        }
        
        /// get help text for column
        public static string GetDonorFlagHelp()
        {
            return "Is this a short code to identify a donor?";
        }
        
        /// get label of column
        public static string GetDonorFlagLabel()
        {
            return "Donor?";
        }
        
        /// get display format for column
        public static short GetDonorFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerShortCode";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_short_code";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Short Code";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_partner_short_code_c",
                    "p_field_key_n",
                    "p_recipient_flag_l",
                    "p_donor_flag_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnPartnerShortCode = this.Columns["p_partner_short_code_c"];
            this.ColumnFieldKey = this.Columns["p_field_key_n"];
            this.ColumnRecipientFlag = this.Columns["p_recipient_flag_l"];
            this.ColumnDonorFlag = this.Columns["p_donor_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnPartnerShortCode};
        }
        
        /// get typed set of changes
        public PPartnerShortCodeTable GetChangesTyped()
        {
            return ((PPartnerShortCodeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerShortCodeRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerShortCodeRow ret = ((PPartnerShortCodeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerShortCodeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerShortCodeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_short_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_field_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_recipient_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_donor_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerShortCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnFieldKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnRecipientFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDonorFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores one or more short codes for a Partner (eg. a donor or recipient code for online giving system)
    [Serializable()]
    public class PPartnerShortCodeRow : System.Data.DataRow
    {
        
        private PPartnerShortCodeTable myTable;
        
        /// Constructor
        public PPartnerShortCodeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerShortCodeTable)(this.Table));
        }
        
        /// Partner key of Partner to which short code applies
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The short code which applies to the Partner
        public String PartnerShortCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerShortCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerShortCode) 
                            || (((String)(this[this.myTable.ColumnPartnerShortCode])) != value)))
                {
                    this[this.myTable.ColumnPartnerShortCode] = value;
                }
            }
        }
        
        /// Field to which Partner is assigned
        public Int64 FieldKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldKey])) != value)))
                {
                    this[this.myTable.ColumnFieldKey] = value;
                }
            }
        }
        
        /// Is this a short code to identify a recipient?
        public Boolean RecipientFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientFlag) 
                            || (((Boolean)(this[this.myTable.ColumnRecipientFlag])) != value)))
                {
                    this[this.myTable.ColumnRecipientFlag] = value;
                }
            }
        }
        
        /// Is this a short code to identify a donor?
        public Boolean DonorFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDonorFlag])) != value)))
                {
                    this[this.myTable.ColumnDonorFlag] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnPartnerShortCode);
            this.SetNull(this.myTable.ColumnFieldKey);
            this.SetNull(this.myTable.ColumnRecipientFlag);
            this.SetNull(this.myTable.ColumnDonorFlag);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsRecipientFlagNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientFlag);
        }
        
        /// assign NULL value
        public void SetRecipientFlagNull()
        {
            this.SetNull(this.myTable.ColumnRecipientFlag);
        }
        
        /// test for NULL value
        public bool IsDonorFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDonorFlag);
        }
        
        /// assign NULL value
        public void SetDonorFlagNull()
        {
            this.SetNull(this.myTable.ColumnDonorFlag);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Refers to a process through which a Partner may go (eg. application, different status of donor - small-&gt;medium-&gt;big, etc)
    [Serializable()]
    public class PProcessTable : TTypedDataTable
    {
        
        /// Code for the process
        public DataColumn ColumnProcessCode;
        
        /// Description of the process
        public DataColumn ColumnProcessDescr;
        
        /// Comma separated list of Partner Classes for which this process is valid. Null implies all Classes
        public DataColumn ColumnProcessPartnerClasses;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PProcessTable() : 
                base("PProcess")
        {
        }
        
        /// constructor
        public PProcessTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PProcessTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PProcessRow this[int i]
        {
            get
            {
                return ((PProcessRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessCodeDBName()
        {
            return "p_process_code_c";
        }
        
        /// get help text for column
        public static string GetProcessCodeHelp()
        {
            return "Code for the process";
        }
        
        /// get label of column
        public static string GetProcessCodeLabel()
        {
            return "Process Code";
        }
        
        /// get character length for column
        public static short GetProcessCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessDescrDBName()
        {
            return "p_process_descr_c";
        }
        
        /// get help text for column
        public static string GetProcessDescrHelp()
        {
            return "Description of the process";
        }
        
        /// get label of column
        public static string GetProcessDescrLabel()
        {
            return "Process Description";
        }
        
        /// get character length for column
        public static short GetProcessDescrLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessPartnerClassesDBName()
        {
            return "p_process_partner_classes_c";
        }
        
        /// get help text for column
        public static string GetProcessPartnerClassesHelp()
        {
            return "Comma separated list of Partner Classes for which this process is valid. Null imp" +
                "lies all Classes";
        }
        
        /// get label of column
        public static string GetProcessPartnerClassesLabel()
        {
            return "p_process_partner_classes_c";
        }
        
        /// get character length for column
        public static short GetProcessPartnerClassesLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PProcess";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_process";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Process";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_process_code_c",
                    "p_process_descr_c",
                    "p_process_partner_classes_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnProcessCode = this.Columns["p_process_code_c"];
            this.ColumnProcessDescr = this.Columns["p_process_descr_c"];
            this.ColumnProcessPartnerClasses = this.Columns["p_process_partner_classes_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnProcessCode};
        }
        
        /// get typed set of changes
        public PProcessTable GetChangesTyped()
        {
            return ((PProcessTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PProcessRow NewRowTyped(bool AWithDefaultValues)
        {
            PProcessRow ret = ((PProcessRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PProcessRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PProcessRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_process_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_process_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_process_partner_classes_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnProcessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnProcessDescr))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnProcessPartnerClasses))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Refers to a process through which a Partner may go (eg. application, different status of donor - small-&gt;medium-&gt;big, etc)
    [Serializable()]
    public class PProcessRow : System.Data.DataRow
    {
        
        private PProcessTable myTable;
        
        /// Constructor
        public PProcessRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PProcessTable)(this.Table));
        }
        
        /// Code for the process
        public String ProcessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessCode) 
                            || (((String)(this[this.myTable.ColumnProcessCode])) != value)))
                {
                    this[this.myTable.ColumnProcessCode] = value;
                }
            }
        }
        
        /// Description of the process
        public String ProcessDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessDescr) 
                            || (((String)(this[this.myTable.ColumnProcessDescr])) != value)))
                {
                    this[this.myTable.ColumnProcessDescr] = value;
                }
            }
        }
        
        /// Comma separated list of Partner Classes for which this process is valid. Null implies all Classes
        public String ProcessPartnerClasses
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessPartnerClasses.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessPartnerClasses) 
                            || (((String)(this[this.myTable.ColumnProcessPartnerClasses])) != value)))
                {
                    this[this.myTable.ColumnProcessPartnerClasses] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnProcessCode);
            this.SetNull(this.myTable.ColumnProcessDescr);
            this.SetNull(this.myTable.ColumnProcessPartnerClasses);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProcessDescrNull()
        {
            return this.IsNull(this.myTable.ColumnProcessDescr);
        }
        
        /// assign NULL value
        public void SetProcessDescrNull()
        {
            this.SetNull(this.myTable.ColumnProcessDescr);
        }
        
        /// test for NULL value
        public bool IsProcessPartnerClassesNull()
        {
            return this.IsNull(this.myTable.ColumnProcessPartnerClasses);
        }
        
        /// assign NULL value
        public void SetProcessPartnerClassesNull()
        {
            this.SetNull(this.myTable.ColumnProcessPartnerClasses);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A particular state within a process which can apply to a Partner. Each state will probably need to have an Idle state to indicate when no state applies.
    [Serializable()]
    public class PStateTable : TTypedDataTable
    {
        
        /// Process that this state belongs to
        public DataColumn ColumnProcessCode;
        
        /// Code for the state
        public DataColumn ColumnStateCode;
        
        /// Description of the state
        public DataColumn ColumnStateDescr;
        
        /// Is this a currently active state?
        public DataColumn ColumnActive;
        
        /// Is this a system defined state (as opposed to a user defined one)?
        public DataColumn ColumnSystemState;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PStateTable() : 
                base("PState")
        {
        }
        
        /// constructor
        public PStateTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PStateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PStateRow this[int i]
        {
            get
            {
                return ((PStateRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessCodeDBName()
        {
            return "p_process_code_c";
        }
        
        /// get help text for column
        public static string GetProcessCodeHelp()
        {
            return "Process that this state belongs to";
        }
        
        /// get label of column
        public static string GetProcessCodeLabel()
        {
            return "Process Code";
        }
        
        /// get character length for column
        public static short GetProcessCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateCodeDBName()
        {
            return "p_state_code_c";
        }
        
        /// get help text for column
        public static string GetStateCodeHelp()
        {
            return "Code for the state";
        }
        
        /// get label of column
        public static string GetStateCodeLabel()
        {
            return "State Code";
        }
        
        /// get character length for column
        public static short GetStateCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateDescrDBName()
        {
            return "p_state_descr_c";
        }
        
        /// get help text for column
        public static string GetStateDescrHelp()
        {
            return "Description of the state";
        }
        
        /// get label of column
        public static string GetStateDescrLabel()
        {
            return "State Description";
        }
        
        /// get character length for column
        public static short GetStateDescrLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "p_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Is this a currently active state?";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "p_active_l";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemStateDBName()
        {
            return "p_system_state_l";
        }
        
        /// get help text for column
        public static string GetSystemStateHelp()
        {
            return "Is this a system defined state (as opposed to a user defined one)?";
        }
        
        /// get label of column
        public static string GetSystemStateLabel()
        {
            return "p_system_state_l";
        }
        
        /// get display format for column
        public static short GetSystemStateLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PState";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_state";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "State";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_process_code_c",
                    "p_state_code_c",
                    "p_state_descr_c",
                    "p_active_l",
                    "p_system_state_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnProcessCode = this.Columns["p_process_code_c"];
            this.ColumnStateCode = this.Columns["p_state_code_c"];
            this.ColumnStateDescr = this.Columns["p_state_descr_c"];
            this.ColumnActive = this.Columns["p_active_l"];
            this.ColumnSystemState = this.Columns["p_system_state_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnProcessCode,
                    this.ColumnStateCode};
        }
        
        /// get typed set of changes
        public PStateTable GetChangesTyped()
        {
            return ((PStateTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PStateRow NewRowTyped(bool AWithDefaultValues)
        {
            PStateRow ret = ((PStateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PStateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PStateRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_process_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_state_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_state_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_system_state_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnProcessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnStateCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnStateDescr))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSystemState))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A particular state within a process which can apply to a Partner. Each state will probably need to have an Idle state to indicate when no state applies.
    [Serializable()]
    public class PStateRow : System.Data.DataRow
    {
        
        private PStateTable myTable;
        
        /// Constructor
        public PStateRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PStateTable)(this.Table));
        }
        
        /// Process that this state belongs to
        public String ProcessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessCode) 
                            || (((String)(this[this.myTable.ColumnProcessCode])) != value)))
                {
                    this[this.myTable.ColumnProcessCode] = value;
                }
            }
        }
        
        /// Code for the state
        public String StateCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateCode) 
                            || (((String)(this[this.myTable.ColumnStateCode])) != value)))
                {
                    this[this.myTable.ColumnStateCode] = value;
                }
            }
        }
        
        /// Description of the state
        public String StateDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateDescr) 
                            || (((String)(this[this.myTable.ColumnStateDescr])) != value)))
                {
                    this[this.myTable.ColumnStateDescr] = value;
                }
            }
        }
        
        /// Is this a currently active state?
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// Is this a system defined state (as opposed to a user defined one)?
        public Boolean SystemState
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemState.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemState) 
                            || (((Boolean)(this[this.myTable.ColumnSystemState])) != value)))
                {
                    this[this.myTable.ColumnSystemState] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnProcessCode);
            this.SetNull(this.myTable.ColumnStateCode);
            this.SetNull(this.myTable.ColumnStateDescr);
            this.SetNull(this.myTable.ColumnActive);
            this.SetNull(this.myTable.ColumnSystemState);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsStateDescrNull()
        {
            return this.IsNull(this.myTable.ColumnStateDescr);
        }
        
        /// assign NULL value
        public void SetStateDescrNull()
        {
            this.SetNull(this.myTable.ColumnStateDescr);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsSystemStateNull()
        {
            return this.IsNull(this.myTable.ColumnSystemState);
        }
        
        /// assign NULL value
        public void SetSystemStateNull()
        {
            this.SetNull(this.myTable.ColumnSystemState);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A particular action within a process which can be performed on a Partner
    [Serializable()]
    public class PActionTable : TTypedDataTable
    {
        
        /// Process that this action is part of
        public DataColumn ColumnProcessCode;
        
        /// Code for the action
        public DataColumn ColumnActionCode;
        
        /// Description of the action
        public DataColumn ColumnActionDescr;
        
        /// Is this action currently in progress?
        public DataColumn ColumnActive;
        
        /// Is this a system defined action (as opposed to a user defined one)?
        public DataColumn ColumnSystemAction;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PActionTable() : 
                base("PAction")
        {
        }
        
        /// constructor
        public PActionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PActionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PActionRow this[int i]
        {
            get
            {
                return ((PActionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessCodeDBName()
        {
            return "p_process_code_c";
        }
        
        /// get help text for column
        public static string GetProcessCodeHelp()
        {
            return "Process that this action is part of";
        }
        
        /// get label of column
        public static string GetProcessCodeLabel()
        {
            return "Process Code";
        }
        
        /// get character length for column
        public static short GetProcessCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionCodeDBName()
        {
            return "p_action_code_c";
        }
        
        /// get help text for column
        public static string GetActionCodeHelp()
        {
            return "Code for the action";
        }
        
        /// get label of column
        public static string GetActionCodeLabel()
        {
            return "Action Code";
        }
        
        /// get character length for column
        public static short GetActionCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionDescrDBName()
        {
            return "p_action_descr_c";
        }
        
        /// get help text for column
        public static string GetActionDescrHelp()
        {
            return "Description of the action";
        }
        
        /// get label of column
        public static string GetActionDescrLabel()
        {
            return "Action Description";
        }
        
        /// get character length for column
        public static short GetActionDescrLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "p_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Is this action currently in progress?";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "p_active_l";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemActionDBName()
        {
            return "p_system_action_l";
        }
        
        /// get help text for column
        public static string GetSystemActionHelp()
        {
            return "Is this a system defined action (as opposed to a user defined one)?";
        }
        
        /// get label of column
        public static string GetSystemActionLabel()
        {
            return "p_system_action_l";
        }
        
        /// get display format for column
        public static short GetSystemActionLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PAction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_action";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Action";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_process_code_c",
                    "p_action_code_c",
                    "p_action_descr_c",
                    "p_active_l",
                    "p_system_action_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnProcessCode = this.Columns["p_process_code_c"];
            this.ColumnActionCode = this.Columns["p_action_code_c"];
            this.ColumnActionDescr = this.Columns["p_action_descr_c"];
            this.ColumnActive = this.Columns["p_active_l"];
            this.ColumnSystemAction = this.Columns["p_system_action_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnProcessCode,
                    this.ColumnActionCode};
        }
        
        /// get typed set of changes
        public PActionTable GetChangesTyped()
        {
            return ((PActionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PActionRow NewRowTyped(bool AWithDefaultValues)
        {
            PActionRow ret = ((PActionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PActionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PActionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_process_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_action_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_action_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_system_action_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnProcessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnActionCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnActionDescr))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSystemAction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A particular action within a process which can be performed on a Partner
    [Serializable()]
    public class PActionRow : System.Data.DataRow
    {
        
        private PActionTable myTable;
        
        /// Constructor
        public PActionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PActionTable)(this.Table));
        }
        
        /// Process that this action is part of
        public String ProcessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessCode) 
                            || (((String)(this[this.myTable.ColumnProcessCode])) != value)))
                {
                    this[this.myTable.ColumnProcessCode] = value;
                }
            }
        }
        
        /// Code for the action
        public String ActionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionCode) 
                            || (((String)(this[this.myTable.ColumnActionCode])) != value)))
                {
                    this[this.myTable.ColumnActionCode] = value;
                }
            }
        }
        
        /// Description of the action
        public String ActionDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionDescr) 
                            || (((String)(this[this.myTable.ColumnActionDescr])) != value)))
                {
                    this[this.myTable.ColumnActionDescr] = value;
                }
            }
        }
        
        /// Is this action currently in progress?
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// Is this a system defined action (as opposed to a user defined one)?
        public Boolean SystemAction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAction) 
                            || (((Boolean)(this[this.myTable.ColumnSystemAction])) != value)))
                {
                    this[this.myTable.ColumnSystemAction] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnProcessCode);
            this.SetNull(this.myTable.ColumnActionCode);
            this.SetNull(this.myTable.ColumnActionDescr);
            this.SetNull(this.myTable.ColumnActive);
            this.SetNull(this.myTable.ColumnSystemAction);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsActionDescrNull()
        {
            return this.IsNull(this.myTable.ColumnActionDescr);
        }
        
        /// assign NULL value
        public void SetActionDescrNull()
        {
            this.SetNull(this.myTable.ColumnActionDescr);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsSystemActionNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAction);
        }
        
        /// assign NULL value
        public void SetSystemActionNull()
        {
            this.SetNull(this.myTable.ColumnSystemAction);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A particular state in which the Partner is or has been. The Partner may be in more than one state at one time if there are two different processes relating to them.
    [Serializable()]
    public class PPartnerStateTable : TTypedDataTable
    {
        
        /// Partner key of Partner to which state applies
        public DataColumn ColumnPartnerKey;
        
        /// Unique identifier of this state for this partner
        public DataColumn ColumnStateIndex;
        
        /// Process that the state applies to
        public DataColumn ColumnProcessCode;
        
        /// State of the Partner within the process
        public DataColumn ColumnStateCode;
        
        /// State of the Partner (freetext)
        public DataColumn ColumnStateFreeform;
        
        /// When did the Partner enter this state?
        public DataColumn ColumnStateStartDate;
        
        /// When will/did the Partner exit this state?
        public DataColumn ColumnStateEndDate;
        
        /// Has the Partner left this state?
        public DataColumn ColumnStateComplete;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerStateTable() : 
                base("PPartnerState")
        {
        }
        
        /// constructor
        public PPartnerStateTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerStateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerStateRow this[int i]
        {
            get
            {
                return ((PPartnerStateRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which state applies";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateIndexDBName()
        {
            return "p_state_index_i";
        }
        
        /// get help text for column
        public static string GetStateIndexHelp()
        {
            return "Unique identifier of this state for this partner";
        }
        
        /// get label of column
        public static string GetStateIndexLabel()
        {
            return "p_state_index_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessCodeDBName()
        {
            return "p_process_code_c";
        }
        
        /// get help text for column
        public static string GetProcessCodeHelp()
        {
            return "Process that the state applies to";
        }
        
        /// get label of column
        public static string GetProcessCodeLabel()
        {
            return "Process Code";
        }
        
        /// get character length for column
        public static short GetProcessCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateCodeDBName()
        {
            return "p_state_code_c";
        }
        
        /// get help text for column
        public static string GetStateCodeHelp()
        {
            return "State of the Partner within the process";
        }
        
        /// get label of column
        public static string GetStateCodeLabel()
        {
            return "State Code";
        }
        
        /// get character length for column
        public static short GetStateCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateFreeformDBName()
        {
            return "p_state_freeform_c";
        }
        
        /// get help text for column
        public static string GetStateFreeformHelp()
        {
            return "State of the Partner (freetext)";
        }
        
        /// get label of column
        public static string GetStateFreeformLabel()
        {
            return "p_state_freeform_c";
        }
        
        /// get character length for column
        public static short GetStateFreeformLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateStartDateDBName()
        {
            return "p_state_start_date_d";
        }
        
        /// get help text for column
        public static string GetStateStartDateHelp()
        {
            return "When did the Partner enter this state?";
        }
        
        /// get label of column
        public static string GetStateStartDateLabel()
        {
            return "p_state_start_date_d";
        }
        
        /// get display format for column
        public static short GetStateStartDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateEndDateDBName()
        {
            return "p_state_end_date_d";
        }
        
        /// get help text for column
        public static string GetStateEndDateHelp()
        {
            return "When will/did the Partner exit this state?";
        }
        
        /// get label of column
        public static string GetStateEndDateLabel()
        {
            return "p_state_end_date_d";
        }
        
        /// get display format for column
        public static short GetStateEndDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStateCompleteDBName()
        {
            return "p_state_complete_l";
        }
        
        /// get help text for column
        public static string GetStateCompleteHelp()
        {
            return "Has the Partner left this state?";
        }
        
        /// get label of column
        public static string GetStateCompleteLabel()
        {
            return "p_state_complete_l";
        }
        
        /// get display format for column
        public static short GetStateCompleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerState";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_state";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner State";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_state_index_i",
                    "p_process_code_c",
                    "p_state_code_c",
                    "p_state_freeform_c",
                    "p_state_start_date_d",
                    "p_state_end_date_d",
                    "p_state_complete_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnStateIndex = this.Columns["p_state_index_i"];
            this.ColumnProcessCode = this.Columns["p_process_code_c"];
            this.ColumnStateCode = this.Columns["p_state_code_c"];
            this.ColumnStateFreeform = this.Columns["p_state_freeform_c"];
            this.ColumnStateStartDate = this.Columns["p_state_start_date_d"];
            this.ColumnStateEndDate = this.Columns["p_state_end_date_d"];
            this.ColumnStateComplete = this.Columns["p_state_complete_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnStateIndex};
        }
        
        /// get typed set of changes
        public PPartnerStateTable GetChangesTyped()
        {
            return ((PPartnerStateTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerStateRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerStateRow ret = ((PPartnerStateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerStateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerStateRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_state_index_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_process_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_state_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_state_freeform_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_state_start_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_state_end_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_state_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnStateIndex))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProcessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnStateCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnStateFreeform))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnStateStartDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnStateEndDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnStateComplete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A particular state in which the Partner is or has been. The Partner may be in more than one state at one time if there are two different processes relating to them.
    [Serializable()]
    public class PPartnerStateRow : System.Data.DataRow
    {
        
        private PPartnerStateTable myTable;
        
        /// Constructor
        public PPartnerStateRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerStateTable)(this.Table));
        }
        
        /// Partner key of Partner to which state applies
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Unique identifier of this state for this partner
        public Int32 StateIndex
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateIndex.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateIndex) 
                            || (((Int32)(this[this.myTable.ColumnStateIndex])) != value)))
                {
                    this[this.myTable.ColumnStateIndex] = value;
                }
            }
        }
        
        /// Process that the state applies to
        public String ProcessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessCode) 
                            || (((String)(this[this.myTable.ColumnProcessCode])) != value)))
                {
                    this[this.myTable.ColumnProcessCode] = value;
                }
            }
        }
        
        /// State of the Partner within the process
        public String StateCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateCode) 
                            || (((String)(this[this.myTable.ColumnStateCode])) != value)))
                {
                    this[this.myTable.ColumnStateCode] = value;
                }
            }
        }
        
        /// State of the Partner (freetext)
        public String StateFreeform
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateFreeform.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateFreeform) 
                            || (((String)(this[this.myTable.ColumnStateFreeform])) != value)))
                {
                    this[this.myTable.ColumnStateFreeform] = value;
                }
            }
        }
        
        /// When did the Partner enter this state?
        public System.DateTime StateStartDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateStartDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateStartDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnStateStartDate])) != value)))
                {
                    this[this.myTable.ColumnStateStartDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime StateStartDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStateStartDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime StateStartDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStateStartDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// When will/did the Partner exit this state?
        public System.DateTime StateEndDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateEndDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateEndDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnStateEndDate])) != value)))
                {
                    this[this.myTable.ColumnStateEndDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime StateEndDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStateEndDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime StateEndDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnStateEndDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Has the Partner left this state?
        public Boolean StateComplete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStateComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStateComplete) 
                            || (((Boolean)(this[this.myTable.ColumnStateComplete])) != value)))
                {
                    this[this.myTable.ColumnStateComplete] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnStateIndex);
            this.SetNull(this.myTable.ColumnProcessCode);
            this.SetNull(this.myTable.ColumnStateCode);
            this.SetNull(this.myTable.ColumnStateFreeform);
            this.SetNull(this.myTable.ColumnStateStartDate);
            this.SetNull(this.myTable.ColumnStateEndDate);
            this.SetNull(this.myTable.ColumnStateComplete);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProcessCodeNull()
        {
            return this.IsNull(this.myTable.ColumnProcessCode);
        }
        
        /// assign NULL value
        public void SetProcessCodeNull()
        {
            this.SetNull(this.myTable.ColumnProcessCode);
        }
        
        /// test for NULL value
        public bool IsStateCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStateCode);
        }
        
        /// assign NULL value
        public void SetStateCodeNull()
        {
            this.SetNull(this.myTable.ColumnStateCode);
        }
        
        /// test for NULL value
        public bool IsStateFreeformNull()
        {
            return this.IsNull(this.myTable.ColumnStateFreeform);
        }
        
        /// assign NULL value
        public void SetStateFreeformNull()
        {
            this.SetNull(this.myTable.ColumnStateFreeform);
        }
        
        /// test for NULL value
        public bool IsStateStartDateNull()
        {
            return this.IsNull(this.myTable.ColumnStateStartDate);
        }
        
        /// assign NULL value
        public void SetStateStartDateNull()
        {
            this.SetNull(this.myTable.ColumnStateStartDate);
        }
        
        /// test for NULL value
        public bool IsStateEndDateNull()
        {
            return this.IsNull(this.myTable.ColumnStateEndDate);
        }
        
        /// assign NULL value
        public void SetStateEndDateNull()
        {
            this.SetNull(this.myTable.ColumnStateEndDate);
        }
        
        /// test for NULL value
        public bool IsStateCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnStateComplete);
        }
        
        /// assign NULL value
        public void SetStateCompleteNull()
        {
            this.SetNull(this.myTable.ColumnStateComplete);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A particular action which has been or needs to be applied to a Partner
    [Serializable()]
    public class PPartnerActionTable : TTypedDataTable
    {
        
        /// Partner key of Partner to which action applies
        public DataColumn ColumnPartnerKey;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Sequential identifier for this action for this partner
        public DataColumn ColumnActionNumber;
        
        /// Process that the action is part of
        public DataColumn ColumnProcessCode;
        
        /// Action to be applied to Partner
        public DataColumn ColumnActionCode;
        
        /// Action to be applied to Partner (freetext)
        public DataColumn ColumnActionFreeform;
        
        /// Date by which action should be performed. Reminders could be set up based on this
        public DataColumn ColumnPerformByDate;
        
        /// Has the action already been completed?
        public DataColumn ColumnActionComplete;
        
        /// When was the action completed?
        public DataColumn ColumnActionCompleteDate;
        
        /// Who should perform this action?
        public DataColumn ColumnUserToPerformAction;
        
        /// Which group should perform this action?
        public DataColumn ColumnGroupToPerformAction;
        
        /// Who actually performed this action?
        public DataColumn ColumnUserThatPerformedAction;
        
        /// Part of FK link to p_partner_reminder so can link this action to a reminder
        public DataColumn ColumnContactId;
        
        /// Part of FK link to p_partner_reminder so can link this action to a reminder
        public DataColumn ColumnReminderId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerActionTable() : 
                base("PPartnerAction")
        {
        }
        
        /// constructor
        public PPartnerActionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerActionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerActionRow this[int i]
        {
            get
            {
                return ((PPartnerActionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which action applies";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionNumberDBName()
        {
            return "p_action_number_i";
        }
        
        /// get help text for column
        public static string GetActionNumberHelp()
        {
            return "Sequential identifier for this action for this partner";
        }
        
        /// get label of column
        public static string GetActionNumberLabel()
        {
            return "p_action_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessCodeDBName()
        {
            return "p_process_code_c";
        }
        
        /// get help text for column
        public static string GetProcessCodeHelp()
        {
            return "Process that the action is part of";
        }
        
        /// get label of column
        public static string GetProcessCodeLabel()
        {
            return "Process Code";
        }
        
        /// get character length for column
        public static short GetProcessCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionCodeDBName()
        {
            return "p_action_code_c";
        }
        
        /// get help text for column
        public static string GetActionCodeHelp()
        {
            return "Action to be applied to Partner";
        }
        
        /// get label of column
        public static string GetActionCodeLabel()
        {
            return "Action Code";
        }
        
        /// get character length for column
        public static short GetActionCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionFreeformDBName()
        {
            return "p_action_freeform_c";
        }
        
        /// get help text for column
        public static string GetActionFreeformHelp()
        {
            return "Action to be applied to Partner (freetext)";
        }
        
        /// get label of column
        public static string GetActionFreeformLabel()
        {
            return "p_action_freeform_c";
        }
        
        /// get character length for column
        public static short GetActionFreeformLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPerformByDateDBName()
        {
            return "p_perform_by_date_d";
        }
        
        /// get help text for column
        public static string GetPerformByDateHelp()
        {
            return "Date by which action should be performed. Reminders could be set up based on this" +
                "";
        }
        
        /// get label of column
        public static string GetPerformByDateLabel()
        {
            return "p_perform_by_date_d";
        }
        
        /// get display format for column
        public static short GetPerformByDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionCompleteDBName()
        {
            return "p_action_complete_l";
        }
        
        /// get help text for column
        public static string GetActionCompleteHelp()
        {
            return "Has the action already been completed?";
        }
        
        /// get label of column
        public static string GetActionCompleteLabel()
        {
            return "p_action_complete_l";
        }
        
        /// get display format for column
        public static short GetActionCompleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionCompleteDateDBName()
        {
            return "p_action_complete_date_d";
        }
        
        /// get help text for column
        public static string GetActionCompleteDateHelp()
        {
            return "When was the action completed?";
        }
        
        /// get label of column
        public static string GetActionCompleteDateLabel()
        {
            return "p_action_complete_date_d";
        }
        
        /// get display format for column
        public static short GetActionCompleteDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserToPerformActionDBName()
        {
            return "p_user_to_perform_action_c";
        }
        
        /// get help text for column
        public static string GetUserToPerformActionHelp()
        {
            return "Who should perform this action?";
        }
        
        /// get label of column
        public static string GetUserToPerformActionLabel()
        {
            return "p_user_to_perform_action_c";
        }
        
        /// get character length for column
        public static short GetUserToPerformActionLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupToPerformActionDBName()
        {
            return "p_group_to_perform_action_c";
        }
        
        /// get help text for column
        public static string GetGroupToPerformActionHelp()
        {
            return "Which group should perform this action?";
        }
        
        /// get label of column
        public static string GetGroupToPerformActionLabel()
        {
            return "p_group_to_perform_action_c";
        }
        
        /// get character length for column
        public static short GetGroupToPerformActionLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserThatPerformedActionDBName()
        {
            return "p_user_that_performed_action_c";
        }
        
        /// get help text for column
        public static string GetUserThatPerformedActionHelp()
        {
            return "Who actually performed this action?";
        }
        
        /// get label of column
        public static string GetUserThatPerformedActionLabel()
        {
            return "p_user_that_performed_action_c";
        }
        
        /// get character length for column
        public static short GetUserThatPerformedActionLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactIdDBName()
        {
            return "p_contact_id_i";
        }
        
        /// get help text for column
        public static string GetContactIdHelp()
        {
            return "Part of FK link to p_partner_reminder so can link this action to a reminder";
        }
        
        /// get label of column
        public static string GetContactIdLabel()
        {
            return "p_contact_id_i";
        }
        
        /// get display format for column
        public static short GetContactIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderIdDBName()
        {
            return "p_reminder_id_i";
        }
        
        /// get help text for column
        public static string GetReminderIdHelp()
        {
            return "Part of FK link to p_partner_reminder so can link this action to a reminder";
        }
        
        /// get label of column
        public static string GetReminderIdLabel()
        {
            return "p_reminder_id_i";
        }
        
        /// get display format for column
        public static short GetReminderIdLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerAction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_action";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Action";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "s_group_unit_key_n",
                    "p_action_number_i",
                    "p_process_code_c",
                    "p_action_code_c",
                    "p_action_freeform_c",
                    "p_perform_by_date_d",
                    "p_action_complete_l",
                    "p_action_complete_date_d",
                    "p_user_to_perform_action_c",
                    "p_group_to_perform_action_c",
                    "p_user_that_performed_action_c",
                    "p_contact_id_i",
                    "p_reminder_id_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnActionNumber = this.Columns["p_action_number_i"];
            this.ColumnProcessCode = this.Columns["p_process_code_c"];
            this.ColumnActionCode = this.Columns["p_action_code_c"];
            this.ColumnActionFreeform = this.Columns["p_action_freeform_c"];
            this.ColumnPerformByDate = this.Columns["p_perform_by_date_d"];
            this.ColumnActionComplete = this.Columns["p_action_complete_l"];
            this.ColumnActionCompleteDate = this.Columns["p_action_complete_date_d"];
            this.ColumnUserToPerformAction = this.Columns["p_user_to_perform_action_c"];
            this.ColumnGroupToPerformAction = this.Columns["p_group_to_perform_action_c"];
            this.ColumnUserThatPerformedAction = this.Columns["p_user_that_performed_action_c"];
            this.ColumnContactId = this.Columns["p_contact_id_i"];
            this.ColumnReminderId = this.Columns["p_reminder_id_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnActionNumber};
        }
        
        /// get typed set of changes
        public PPartnerActionTable GetChangesTyped()
        {
            return ((PPartnerActionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerActionRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerActionRow ret = ((PPartnerActionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerActionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerActionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_action_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_process_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_action_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_action_freeform_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_perform_by_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_action_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_action_complete_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_user_to_perform_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_group_to_perform_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_user_that_performed_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnActionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProcessCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnActionCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnActionFreeform))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnPerformByDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnActionComplete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnActionCompleteDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnUserToPerformAction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupToPerformAction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUserThatPerformedAction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnContactId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReminderId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A particular action which has been or needs to be applied to a Partner
    [Serializable()]
    public class PPartnerActionRow : System.Data.DataRow
    {
        
        private PPartnerActionTable myTable;
        
        /// Constructor
        public PPartnerActionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerActionTable)(this.Table));
        }
        
        /// Partner key of Partner to which action applies
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Sequential identifier for this action for this partner
        public Int32 ActionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionNumber) 
                            || (((Int32)(this[this.myTable.ColumnActionNumber])) != value)))
                {
                    this[this.myTable.ColumnActionNumber] = value;
                }
            }
        }
        
        /// Process that the action is part of
        public String ProcessCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessCode) 
                            || (((String)(this[this.myTable.ColumnProcessCode])) != value)))
                {
                    this[this.myTable.ColumnProcessCode] = value;
                }
            }
        }
        
        /// Action to be applied to Partner
        public String ActionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionCode) 
                            || (((String)(this[this.myTable.ColumnActionCode])) != value)))
                {
                    this[this.myTable.ColumnActionCode] = value;
                }
            }
        }
        
        /// Action to be applied to Partner (freetext)
        public String ActionFreeform
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionFreeform.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionFreeform) 
                            || (((String)(this[this.myTable.ColumnActionFreeform])) != value)))
                {
                    this[this.myTable.ColumnActionFreeform] = value;
                }
            }
        }
        
        /// Date by which action should be performed. Reminders could be set up based on this
        public System.DateTime PerformByDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPerformByDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPerformByDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnPerformByDate])) != value)))
                {
                    this[this.myTable.ColumnPerformByDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime PerformByDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPerformByDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime PerformByDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPerformByDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Has the action already been completed?
        public Boolean ActionComplete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionComplete) 
                            || (((Boolean)(this[this.myTable.ColumnActionComplete])) != value)))
                {
                    this[this.myTable.ColumnActionComplete] = value;
                }
            }
        }
        
        /// When was the action completed?
        public System.DateTime ActionCompleteDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActionCompleteDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActionCompleteDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnActionCompleteDate])) != value)))
                {
                    this[this.myTable.ColumnActionCompleteDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ActionCompleteDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnActionCompleteDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ActionCompleteDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnActionCompleteDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Who should perform this action?
        public String UserToPerformAction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserToPerformAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserToPerformAction) 
                            || (((String)(this[this.myTable.ColumnUserToPerformAction])) != value)))
                {
                    this[this.myTable.ColumnUserToPerformAction] = value;
                }
            }
        }
        
        /// Which group should perform this action?
        public String GroupToPerformAction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupToPerformAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupToPerformAction) 
                            || (((String)(this[this.myTable.ColumnGroupToPerformAction])) != value)))
                {
                    this[this.myTable.ColumnGroupToPerformAction] = value;
                }
            }
        }
        
        /// Who actually performed this action?
        public String UserThatPerformedAction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserThatPerformedAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserThatPerformedAction) 
                            || (((String)(this[this.myTable.ColumnUserThatPerformedAction])) != value)))
                {
                    this[this.myTable.ColumnUserThatPerformedAction] = value;
                }
            }
        }
        
        /// Part of FK link to p_partner_reminder so can link this action to a reminder
        public Int32 ContactId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactId) 
                            || (((Int32)(this[this.myTable.ColumnContactId])) != value)))
                {
                    this[this.myTable.ColumnContactId] = value;
                }
            }
        }
        
        /// Part of FK link to p_partner_reminder so can link this action to a reminder
        public Int32 ReminderId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderId) 
                            || (((Int32)(this[this.myTable.ColumnReminderId])) != value)))
                {
                    this[this.myTable.ColumnReminderId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnActionNumber);
            this.SetNull(this.myTable.ColumnProcessCode);
            this.SetNull(this.myTable.ColumnActionCode);
            this.SetNull(this.myTable.ColumnActionFreeform);
            this.SetNull(this.myTable.ColumnPerformByDate);
            this.SetNull(this.myTable.ColumnActionComplete);
            this.SetNull(this.myTable.ColumnActionCompleteDate);
            this.SetNull(this.myTable.ColumnUserToPerformAction);
            this.SetNull(this.myTable.ColumnGroupToPerformAction);
            this.SetNull(this.myTable.ColumnUserThatPerformedAction);
            this.SetNull(this.myTable.ColumnContactId);
            this.SetNull(this.myTable.ColumnReminderId);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProcessCodeNull()
        {
            return this.IsNull(this.myTable.ColumnProcessCode);
        }
        
        /// assign NULL value
        public void SetProcessCodeNull()
        {
            this.SetNull(this.myTable.ColumnProcessCode);
        }
        
        /// test for NULL value
        public bool IsActionCodeNull()
        {
            return this.IsNull(this.myTable.ColumnActionCode);
        }
        
        /// assign NULL value
        public void SetActionCodeNull()
        {
            this.SetNull(this.myTable.ColumnActionCode);
        }
        
        /// test for NULL value
        public bool IsActionFreeformNull()
        {
            return this.IsNull(this.myTable.ColumnActionFreeform);
        }
        
        /// assign NULL value
        public void SetActionFreeformNull()
        {
            this.SetNull(this.myTable.ColumnActionFreeform);
        }
        
        /// test for NULL value
        public bool IsPerformByDateNull()
        {
            return this.IsNull(this.myTable.ColumnPerformByDate);
        }
        
        /// assign NULL value
        public void SetPerformByDateNull()
        {
            this.SetNull(this.myTable.ColumnPerformByDate);
        }
        
        /// test for NULL value
        public bool IsActionCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnActionComplete);
        }
        
        /// assign NULL value
        public void SetActionCompleteNull()
        {
            this.SetNull(this.myTable.ColumnActionComplete);
        }
        
        /// test for NULL value
        public bool IsActionCompleteDateNull()
        {
            return this.IsNull(this.myTable.ColumnActionCompleteDate);
        }
        
        /// assign NULL value
        public void SetActionCompleteDateNull()
        {
            this.SetNull(this.myTable.ColumnActionCompleteDate);
        }
        
        /// test for NULL value
        public bool IsUserToPerformActionNull()
        {
            return this.IsNull(this.myTable.ColumnUserToPerformAction);
        }
        
        /// assign NULL value
        public void SetUserToPerformActionNull()
        {
            this.SetNull(this.myTable.ColumnUserToPerformAction);
        }
        
        /// test for NULL value
        public bool IsGroupToPerformActionNull()
        {
            return this.IsNull(this.myTable.ColumnGroupToPerformAction);
        }
        
        /// assign NULL value
        public void SetGroupToPerformActionNull()
        {
            this.SetNull(this.myTable.ColumnGroupToPerformAction);
        }
        
        /// test for NULL value
        public bool IsUserThatPerformedActionNull()
        {
            return this.IsNull(this.myTable.ColumnUserThatPerformedAction);
        }
        
        /// assign NULL value
        public void SetUserThatPerformedActionNull()
        {
            this.SetNull(this.myTable.ColumnUserThatPerformedAction);
        }
        
        /// test for NULL value
        public bool IsContactIdNull()
        {
            return this.IsNull(this.myTable.ColumnContactId);
        }
        
        /// assign NULL value
        public void SetContactIdNull()
        {
            this.SetNull(this.myTable.ColumnContactId);
        }
        
        /// test for NULL value
        public bool IsReminderIdNull()
        {
            return this.IsNull(this.myTable.ColumnReminderId);
        }
        
        /// assign NULL value
        public void SetReminderIdNull()
        {
            this.SetNull(this.myTable.ColumnReminderId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Lookup table for First Contact Codes (ie. how did person first hear about us)
    [Serializable()]
    public class PFirstContactTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFirstContactCode;
        
        /// 
        public DataColumn ColumnFirstContactDescr;
        
        /// Is this contact code still active (ie. should it be shown on picklists)?
        public DataColumn ColumnActive;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFirstContactTable() : 
                base("PFirstContact")
        {
        }
        
        /// constructor
        public PFirstContactTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFirstContactTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFirstContactRow this[int i]
        {
            get
            {
                return ((PFirstContactRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstContactCodeDBName()
        {
            return "p_first_contact_code_c";
        }
        
        /// get help text for column
        public static string GetFirstContactCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFirstContactCodeLabel()
        {
            return "First Contact Code";
        }
        
        /// get character length for column
        public static short GetFirstContactCodeLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstContactDescrDBName()
        {
            return "p_first_contact_descr_c";
        }
        
        /// get help text for column
        public static string GetFirstContactDescrHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFirstContactDescrLabel()
        {
            return "First Contact Description";
        }
        
        /// get character length for column
        public static short GetFirstContactDescrLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "p_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Is this contact code still active (ie. should it be shown on picklists)?";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "p_active_l";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFirstContact";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_first_contact";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "First Contact";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_first_contact_code_c",
                    "p_first_contact_descr_c",
                    "p_active_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFirstContactCode = this.Columns["p_first_contact_code_c"];
            this.ColumnFirstContactDescr = this.Columns["p_first_contact_descr_c"];
            this.ColumnActive = this.Columns["p_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFirstContactCode};
        }
        
        /// get typed set of changes
        public PFirstContactTable GetChangesTyped()
        {
            return ((PFirstContactTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFirstContactRow NewRowTyped(bool AWithDefaultValues)
        {
            PFirstContactRow ret = ((PFirstContactRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFirstContactRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFirstContactRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_first_contact_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_first_contact_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFirstContactCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnFirstContactDescr))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Lookup table for First Contact Codes (ie. how did person first hear about us)
    [Serializable()]
    public class PFirstContactRow : System.Data.DataRow
    {
        
        private PFirstContactTable myTable;
        
        /// Constructor
        public PFirstContactRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFirstContactTable)(this.Table));
        }
        
        /// 
        public String FirstContactCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstContactCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstContactCode) 
                            || (((String)(this[this.myTable.ColumnFirstContactCode])) != value)))
                {
                    this[this.myTable.ColumnFirstContactCode] = value;
                }
            }
        }
        
        /// 
        public String FirstContactDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstContactDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstContactDescr) 
                            || (((String)(this[this.myTable.ColumnFirstContactDescr])) != value)))
                {
                    this[this.myTable.ColumnFirstContactDescr] = value;
                }
            }
        }
        
        /// Is this contact code still active (ie. should it be shown on picklists)?
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFirstContactCode);
            this.SetNull(this.myTable.ColumnFirstContactDescr);
            this.SetNull(this.myTable.ColumnActive);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFirstContactDescrNull()
        {
            return this.IsNull(this.myTable.ColumnFirstContactDescr);
        }
        
        /// assign NULL value
        public void SetFirstContactDescrNull()
        {
            this.SetNull(this.myTable.ColumnFirstContactDescr);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Defines a Partner set
    [Serializable()]
    public class PPartnerSetTable : TTypedDataTable
    {
        
        /// Identifier for the Partner Set
        public DataColumn ColumnPartnerSetId;
        
        /// Field that the Partner Set relates to
        public DataColumn ColumnUnitKey;
        
        /// Name of the Partner set
        public DataColumn ColumnPartnerSetName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerSetTable() : 
                base("PPartnerSet")
        {
        }
        
        /// constructor
        public PPartnerSetTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerSetTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerSetRow this[int i]
        {
            get
            {
                return ((PPartnerSetRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetIdDBName()
        {
            return "p_partner_set_id_c";
        }
        
        /// get help text for column
        public static string GetPartnerSetIdHelp()
        {
            return "Identifier for the Partner Set";
        }
        
        /// get label of column
        public static string GetPartnerSetIdLabel()
        {
            return "Partner Set ID";
        }
        
        /// get character length for column
        public static short GetPartnerSetIdLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "p_unit_key_n";
        }
        
        /// get help text for column
        public static string GetUnitKeyHelp()
        {
            return "Field that the Partner Set relates to";
        }
        
        /// get label of column
        public static string GetUnitKeyLabel()
        {
            return "Field of Partner Set";
        }
        
        /// get display format for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetNameDBName()
        {
            return "p_partner_set_name_c";
        }
        
        /// get help text for column
        public static string GetPartnerSetNameHelp()
        {
            return "Enter the name of the Partner Set";
        }
        
        /// get label of column
        public static string GetPartnerSetNameLabel()
        {
            return "Partner Set Name";
        }
        
        /// get character length for column
        public static short GetPartnerSetNameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerSet";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_set";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Set";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_set_id_c",
                    "p_unit_key_n",
                    "p_partner_set_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerSetId = this.Columns["p_partner_set_id_c"];
            this.ColumnUnitKey = this.Columns["p_unit_key_n"];
            this.ColumnPartnerSetName = this.Columns["p_partner_set_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerSetId,
                    this.ColumnUnitKey};
        }
        
        /// get typed set of changes
        public PPartnerSetTable GetChangesTyped()
        {
            return ((PPartnerSetTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerSetRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerSetRow ret = ((PPartnerSetRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerSetRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerSetRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerSetId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerSetName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Defines a Partner set
    [Serializable()]
    public class PPartnerSetRow : System.Data.DataRow
    {
        
        private PPartnerSetTable myTable;
        
        /// Constructor
        public PPartnerSetRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerSetTable)(this.Table));
        }
        
        /// Identifier for the Partner Set
        public String PartnerSetId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetId) 
                            || (((String)(this[this.myTable.ColumnPartnerSetId])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetId] = value;
                }
            }
        }
        
        /// Field that the Partner Set relates to
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }
        
        /// Name of the Partner set
        public String PartnerSetName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetName) 
                            || (((String)(this[this.myTable.ColumnPartnerSetName])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerSetId);
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerSetName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPartnerSetNameNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerSetName);
        }
        
        /// assign NULL value
        public void SetPartnerSetNameNull()
        {
            this.SetNull(this.myTable.ColumnPartnerSetName);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Places Partners in a Partner set
    [Serializable()]
    public class PPartnerSetPartnerTable : TTypedDataTable
    {
        
        /// Identifier for the Partner Set
        public DataColumn ColumnPartnerSetId;
        
        /// Field that the Partner Set relates to
        public DataColumn ColumnPartnerSetUnitKey;
        
        /// Partner Key
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerSetPartnerTable() : 
                base("PPartnerSetPartner")
        {
        }
        
        /// constructor
        public PPartnerSetPartnerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerSetPartnerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerSetPartnerRow this[int i]
        {
            get
            {
                return ((PPartnerSetPartnerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetIdDBName()
        {
            return "p_partner_set_id_c";
        }
        
        /// get help text for column
        public static string GetPartnerSetIdHelp()
        {
            return "Identifier for the Partner Set";
        }
        
        /// get label of column
        public static string GetPartnerSetIdLabel()
        {
            return "Partner Set ID";
        }
        
        /// get character length for column
        public static short GetPartnerSetIdLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetUnitKeyDBName()
        {
            return "p_partner_set_unit_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerSetUnitKeyHelp()
        {
            return "Field that the Partner Set relates to";
        }
        
        /// get label of column
        public static string GetPartnerSetUnitKeyLabel()
        {
            return "Field of Partner Set";
        }
        
        /// get display format for column
        public static short GetPartnerSetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the Partner Key";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerSetPartner";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_set_partner";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Set Contents";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_set_id_c",
                    "p_partner_set_unit_key_n",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerSetId = this.Columns["p_partner_set_id_c"];
            this.ColumnPartnerSetUnitKey = this.Columns["p_partner_set_unit_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerSetId,
                    this.ColumnPartnerSetUnitKey,
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PPartnerSetPartnerTable GetChangesTyped()
        {
            return ((PPartnerSetPartnerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerSetPartnerRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerSetPartnerRow ret = ((PPartnerSetPartnerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerSetPartnerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerSetPartnerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerSetId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnPartnerSetUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Places Partners in a Partner set
    [Serializable()]
    public class PPartnerSetPartnerRow : System.Data.DataRow
    {
        
        private PPartnerSetPartnerTable myTable;
        
        /// Constructor
        public PPartnerSetPartnerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerSetPartnerTable)(this.Table));
        }
        
        /// Identifier for the Partner Set
        public String PartnerSetId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetId) 
                            || (((String)(this[this.myTable.ColumnPartnerSetId])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetId] = value;
                }
            }
        }
        
        /// Field that the Partner Set relates to
        public Int64 PartnerSetUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerSetUnitKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetUnitKey] = value;
                }
            }
        }
        
        /// Partner Key
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerSetId);
            this[this.myTable.ColumnPartnerSetUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Allows multiple as well as arbitrary-length partner comments.
    [Serializable()]
    public class PPartnerCommentTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnPartnerKey;
        
        /// Record Index that enables multiple comments per Partner
        public DataColumn ColumnIndex;
        
        /// Sequence number (is necessary to concatenate records to one comment)
        public DataColumn ColumnSequence;
        
        /// Comment
        public DataColumn ColumnComment;
        
        /// Comment Type
        public DataColumn ColumnCommentType;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerCommentTable() : 
                base("PPartnerComment")
        {
        }
        
        /// constructor
        public PPartnerCommentTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerCommentTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerCommentRow this[int i]
        {
            get
            {
                return ((PPartnerCommentRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIndexDBName()
        {
            return "p_index_i";
        }
        
        /// get help text for column
        public static string GetIndexHelp()
        {
            return "Record Index that enables multiple comments per Partner";
        }
        
        /// get label of column
        public static string GetIndexLabel()
        {
            return "Index";
        }
        
        /// get display format for column
        public static short GetIndexLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSequenceDBName()
        {
            return "p_sequence_i";
        }
        
        /// get help text for column
        public static string GetSequenceHelp()
        {
            return "Sequence number (is necessary to concatenate records to one comment)";
        }
        
        /// get label of column
        public static string GetSequenceLabel()
        {
            return "Sequence";
        }
        
        /// get display format for column
        public static short GetSequenceLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Comment";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 5000;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentTypeDBName()
        {
            return "p_comment_type_c";
        }
        
        /// get help text for column
        public static string GetCommentTypeHelp()
        {
            return "Comment Type";
        }
        
        /// get label of column
        public static string GetCommentTypeLabel()
        {
            return "Type";
        }
        
        /// get character length for column
        public static short GetCommentTypeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerComment";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_comment";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Comment";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_index_i",
                    "p_sequence_i",
                    "p_comment_c",
                    "p_comment_type_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnIndex = this.Columns["p_index_i"];
            this.ColumnSequence = this.Columns["p_sequence_i"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnCommentType = this.Columns["p_comment_type_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey,
                    this.ColumnIndex,
                    this.ColumnSequence};
        }
        
        /// get typed set of changes
        public PPartnerCommentTable GetChangesTyped()
        {
            return ((PPartnerCommentTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerCommentRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerCommentRow ret = ((PPartnerCommentRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerCommentRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerCommentRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_index_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnIndex))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 10000);
            }
            if ((ACol == ColumnCommentType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Allows multiple as well as arbitrary-length partner comments.
    [Serializable()]
    public class PPartnerCommentRow : System.Data.DataRow
    {
        
        private PPartnerCommentTable myTable;
        
        /// Constructor
        public PPartnerCommentRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerCommentTable)(this.Table));
        }
        
        /// 
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Record Index that enables multiple comments per Partner
        public Int32 Index
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIndex.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIndex) 
                            || (((Int32)(this[this.myTable.ColumnIndex])) != value)))
                {
                    this[this.myTable.ColumnIndex] = value;
                }
            }
        }
        
        /// Sequence number (is necessary to concatenate records to one comment)
        public Int32 Sequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSequence) 
                            || (((Int32)(this[this.myTable.ColumnSequence])) != value)))
                {
                    this[this.myTable.ColumnSequence] = value;
                }
            }
        }
        
        /// Comment
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// Comment Type
        public String CommentType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentType) 
                            || (((String)(this[this.myTable.ColumnCommentType])) != value)))
                {
                    this[this.myTable.ColumnCommentType] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnIndex);
            this.SetNull(this.myTable.ColumnSequence);
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnCommentType);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsIndexNull()
        {
            return this.IsNull(this.myTable.ColumnIndex);
        }
        
        /// assign NULL value
        public void SetIndexNull()
        {
            this.SetNull(this.myTable.ColumnIndex);
        }
        
        /// test for NULL value
        public bool IsSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnSequence);
        }
        
        /// assign NULL value
        public void SetSequenceNull()
        {
            this.SetNull(this.myTable.ColumnSequence);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsCommentTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentType);
        }
        
        /// assign NULL value
        public void SetCommentTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentType);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Submission type for foundation proposals e.g. EMAIL, LETTER.
    [Serializable()]
    public class PProposalSubmissionTypeTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnSubmissionTypeCode;
        
        /// 
        public DataColumn ColumnSubmissionTypeDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PProposalSubmissionTypeTable() : 
                base("PProposalSubmissionType")
        {
        }
        
        /// constructor
        public PProposalSubmissionTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PProposalSubmissionTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PProposalSubmissionTypeRow this[int i]
        {
            get
            {
                return ((PProposalSubmissionTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubmissionTypeCodeDBName()
        {
            return "p_submission_type_code_c";
        }
        
        /// get help text for column
        public static string GetSubmissionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubmissionTypeCodeLabel()
        {
            return "Type Code";
        }
        
        /// get character length for column
        public static short GetSubmissionTypeCodeLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubmissionTypeDescriptionDBName()
        {
            return "p_submission_type_description_c";
        }
        
        /// get help text for column
        public static string GetSubmissionTypeDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubmissionTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetSubmissionTypeDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PProposalSubmissionType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_proposal_submission_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Proposal Submission";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_submission_type_code_c",
                    "p_submission_type_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSubmissionTypeCode = this.Columns["p_submission_type_code_c"];
            this.ColumnSubmissionTypeDescription = this.Columns["p_submission_type_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnSubmissionTypeCode};
        }
        
        /// get typed set of changes
        public PProposalSubmissionTypeTable GetChangesTyped()
        {
            return ((PProposalSubmissionTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PProposalSubmissionTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PProposalSubmissionTypeRow ret = ((PProposalSubmissionTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PProposalSubmissionTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PProposalSubmissionTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_submission_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_submission_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnSubmissionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnSubmissionTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Submission type for foundation proposals e.g. EMAIL, LETTER.
    [Serializable()]
    public class PProposalSubmissionTypeRow : System.Data.DataRow
    {
        
        private PProposalSubmissionTypeTable myTable;
        
        /// Constructor
        public PProposalSubmissionTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PProposalSubmissionTypeTable)(this.Table));
        }
        
        /// 
        public String SubmissionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubmissionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubmissionTypeCode) 
                            || (((String)(this[this.myTable.ColumnSubmissionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnSubmissionTypeCode] = value;
                }
            }
        }
        
        /// 
        public String SubmissionTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubmissionTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubmissionTypeDescription) 
                            || (((String)(this[this.myTable.ColumnSubmissionTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnSubmissionTypeDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnSubmissionTypeCode);
            this.SetNull(this.myTable.ColumnSubmissionTypeDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSubmissionTypeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnSubmissionTypeDescription);
        }
        
        /// assign NULL value
        public void SetSubmissionTypeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnSubmissionTypeDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Foundations - a type of ORGANISATION for fundraising proposals.
    [Serializable()]
    public class PFoundationTable : TTypedDataTable
    {
        
        /// ORGANISATION key of the foundation.
        public DataColumn ColumnPartnerKey;
        
        /// The Financial Development person who handles appeals to this foundation. Anyone else must get permission from the owner to contact the foundation.
        public DataColumn ColumnOwner1Key;
        
        /// A second F.D. person who may do business with the foundation.
        public DataColumn ColumnOwner2Key;
        
        /// Name of the contact for this Foundation
        public DataColumn ColumnKeyContactName;
        
        /// The contact person's title.
        public DataColumn ColumnKeyContactTitle;
        
        /// Contact email address
        public DataColumn ColumnKeyContactEmail;
        
        /// Contact's phone number
        public DataColumn ColumnKeyContactPhone;
        
        /// Not part of original specification - provided in case contact does ever need to be a full Partner.
        public DataColumn ColumnContactPartner;
        
        /// 
        public DataColumn ColumnSpecialRequirements;
        
        /// 
        public DataColumn ColumnProposalFormatting;
        
        /// A lookup table would go with this. e.g. EMAIL, LETTER.
        public DataColumn ColumnProposalSubmissionType;
        
        /// 
        public DataColumn ColumnSpecialInstructions;
        
        /// (Monthly | Quarterly | Annually)  These are the only ones we use now.
        public DataColumn ColumnReviewFrequency;
        
        /// (Annually | Bi-Annually | No Restrictions)  This is a static list.
        public DataColumn ColumnSubmitFrequency;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFoundationTable() : 
                base("PFoundation")
        {
        }
        
        /// constructor
        public PFoundationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFoundationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFoundationRow this[int i]
        {
            get
            {
                return ((PFoundationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "ORGANISATION key of the foundation.";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Foundation Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOwner1KeyDBName()
        {
            return "p_owner_1_key_n";
        }
        
        /// get help text for column
        public static string GetOwner1KeyHelp()
        {
            return "The Financial Development person who handles appeals to this foundation. Anyone e" +
                "lse must get permission from the owner to contact the foundation.";
        }
        
        /// get label of column
        public static string GetOwner1KeyLabel()
        {
            return "Owner";
        }
        
        /// get display format for column
        public static short GetOwner1KeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOwner2KeyDBName()
        {
            return "p_owner_2_key_n";
        }
        
        /// get help text for column
        public static string GetOwner2KeyHelp()
        {
            return "A second F.D. person who may do business with the foundation.";
        }
        
        /// get label of column
        public static string GetOwner2KeyLabel()
        {
            return "Owner 2";
        }
        
        /// get display format for column
        public static short GetOwner2KeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyContactNameDBName()
        {
            return "p_key_contact_name_c";
        }
        
        /// get help text for column
        public static string GetKeyContactNameHelp()
        {
            return "Name of the contact for this Foundation";
        }
        
        /// get label of column
        public static string GetKeyContactNameLabel()
        {
            return "Contact";
        }
        
        /// get character length for column
        public static short GetKeyContactNameLength()
        {
            return 35;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyContactTitleDBName()
        {
            return "p_key_contact_title_c";
        }
        
        /// get help text for column
        public static string GetKeyContactTitleHelp()
        {
            return "The contact person\'s title.";
        }
        
        /// get label of column
        public static string GetKeyContactTitleLabel()
        {
            return "Contact Title";
        }
        
        /// get character length for column
        public static short GetKeyContactTitleLength()
        {
            return 35;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyContactEmailDBName()
        {
            return "p_key_contact_email_c";
        }
        
        /// get help text for column
        public static string GetKeyContactEmailHelp()
        {
            return "Contact email address";
        }
        
        /// get label of column
        public static string GetKeyContactEmailLabel()
        {
            return "Email";
        }
        
        /// get character length for column
        public static short GetKeyContactEmailLength()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyContactPhoneDBName()
        {
            return "p_key_contact_phone_c";
        }
        
        /// get help text for column
        public static string GetKeyContactPhoneHelp()
        {
            return "Contact\'s phone number";
        }
        
        /// get label of column
        public static string GetKeyContactPhoneLabel()
        {
            return "Phone";
        }
        
        /// get character length for column
        public static short GetKeyContactPhoneLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactPartnerDBName()
        {
            return "p_contact_partner_n";
        }
        
        /// get help text for column
        public static string GetContactPartnerHelp()
        {
            return "Not part of original specification - provided in case contact does ever need to b" +
                "e a full Partner.";
        }
        
        /// get label of column
        public static string GetContactPartnerLabel()
        {
            return "Contact";
        }
        
        /// get display format for column
        public static short GetContactPartnerLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecialRequirementsDBName()
        {
            return "p_special_requirements_c";
        }
        
        /// get help text for column
        public static string GetSpecialRequirementsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSpecialRequirementsLabel()
        {
            return "Special Requirements";
        }
        
        /// get character length for column
        public static short GetSpecialRequirementsLength()
        {
            return 350;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProposalFormattingDBName()
        {
            return "p_proposal_formatting_c";
        }
        
        /// get help text for column
        public static string GetProposalFormattingHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProposalFormattingLabel()
        {
            return "Proposal formatting";
        }
        
        /// get character length for column
        public static short GetProposalFormattingLength()
        {
            return 350;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProposalSubmissionTypeDBName()
        {
            return "p_proposal_submission_type_c";
        }
        
        /// get help text for column
        public static string GetProposalSubmissionTypeHelp()
        {
            return "A lookup table would go with this. e.g. EMAIL, LETTER.";
        }
        
        /// get label of column
        public static string GetProposalSubmissionTypeLabel()
        {
            return "Submission Type";
        }
        
        /// get character length for column
        public static short GetProposalSubmissionTypeLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecialInstructionsDBName()
        {
            return "p_special_instructions_c";
        }
        
        /// get help text for column
        public static string GetSpecialInstructionsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSpecialInstructionsLabel()
        {
            return "Special Instructions";
        }
        
        /// get character length for column
        public static short GetSpecialInstructionsLength()
        {
            return 350;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReviewFrequencyDBName()
        {
            return "p_review_frequency_c";
        }
        
        /// get help text for column
        public static string GetReviewFrequencyHelp()
        {
            return "(Monthly | Quarterly | Annually)  These are the only ones we use now.";
        }
        
        /// get label of column
        public static string GetReviewFrequencyLabel()
        {
            return "Review Frequency";
        }
        
        /// get character length for column
        public static short GetReviewFrequencyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubmitFrequencyDBName()
        {
            return "p_submit_frequency_c";
        }
        
        /// get help text for column
        public static string GetSubmitFrequencyHelp()
        {
            return "(Annually | Bi-Annually | No Restrictions)  This is a static list.";
        }
        
        /// get label of column
        public static string GetSubmitFrequencyLabel()
        {
            return "Submit Frequency";
        }
        
        /// get character length for column
        public static short GetSubmitFrequencyLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFoundation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_foundation";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Foundation";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "p_owner_1_key_n",
                    "p_owner_2_key_n",
                    "p_key_contact_name_c",
                    "p_key_contact_title_c",
                    "p_key_contact_email_c",
                    "p_key_contact_phone_c",
                    "p_contact_partner_n",
                    "p_special_requirements_c",
                    "p_proposal_formatting_c",
                    "p_proposal_submission_type_c",
                    "p_special_instructions_c",
                    "p_review_frequency_c",
                    "p_submit_frequency_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnOwner1Key = this.Columns["p_owner_1_key_n"];
            this.ColumnOwner2Key = this.Columns["p_owner_2_key_n"];
            this.ColumnKeyContactName = this.Columns["p_key_contact_name_c"];
            this.ColumnKeyContactTitle = this.Columns["p_key_contact_title_c"];
            this.ColumnKeyContactEmail = this.Columns["p_key_contact_email_c"];
            this.ColumnKeyContactPhone = this.Columns["p_key_contact_phone_c"];
            this.ColumnContactPartner = this.Columns["p_contact_partner_n"];
            this.ColumnSpecialRequirements = this.Columns["p_special_requirements_c"];
            this.ColumnProposalFormatting = this.Columns["p_proposal_formatting_c"];
            this.ColumnProposalSubmissionType = this.Columns["p_proposal_submission_type_c"];
            this.ColumnSpecialInstructions = this.Columns["p_special_instructions_c"];
            this.ColumnReviewFrequency = this.Columns["p_review_frequency_c"];
            this.ColumnSubmitFrequency = this.Columns["p_submit_frequency_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public PFoundationTable GetChangesTyped()
        {
            return ((PFoundationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFoundationRow NewRowTyped(bool AWithDefaultValues)
        {
            PFoundationRow ret = ((PFoundationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFoundationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFoundationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_owner_1_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_owner_2_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_key_contact_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_key_contact_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_key_contact_email_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_key_contact_phone_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_partner_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_special_requirements_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_proposal_formatting_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_proposal_submission_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_special_instructions_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_review_frequency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_submit_frequency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnOwner1Key))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnOwner2Key))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnKeyContactName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 70);
            }
            if ((ACol == ColumnKeyContactTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 70);
            }
            if ((ACol == ColumnKeyContactEmail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnKeyContactPhone))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnContactPartner))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnSpecialRequirements))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 700);
            }
            if ((ACol == ColumnProposalFormatting))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 700);
            }
            if ((ACol == ColumnProposalSubmissionType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnSpecialInstructions))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 700);
            }
            if ((ACol == ColumnReviewFrequency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnSubmitFrequency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Foundations - a type of ORGANISATION for fundraising proposals.
    [Serializable()]
    public class PFoundationRow : System.Data.DataRow
    {
        
        private PFoundationTable myTable;
        
        /// Constructor
        public PFoundationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFoundationTable)(this.Table));
        }
        
        /// ORGANISATION key of the foundation.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The Financial Development person who handles appeals to this foundation. Anyone else must get permission from the owner to contact the foundation.
        public Int64 Owner1Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOwner1Key.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOwner1Key) 
                            || (((Int64)(this[this.myTable.ColumnOwner1Key])) != value)))
                {
                    this[this.myTable.ColumnOwner1Key] = value;
                }
            }
        }
        
        /// A second F.D. person who may do business with the foundation.
        public Int64 Owner2Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOwner2Key.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOwner2Key) 
                            || (((Int64)(this[this.myTable.ColumnOwner2Key])) != value)))
                {
                    this[this.myTable.ColumnOwner2Key] = value;
                }
            }
        }
        
        /// Name of the contact for this Foundation
        public String KeyContactName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyContactName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyContactName) 
                            || (((String)(this[this.myTable.ColumnKeyContactName])) != value)))
                {
                    this[this.myTable.ColumnKeyContactName] = value;
                }
            }
        }
        
        /// The contact person's title.
        public String KeyContactTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyContactTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyContactTitle) 
                            || (((String)(this[this.myTable.ColumnKeyContactTitle])) != value)))
                {
                    this[this.myTable.ColumnKeyContactTitle] = value;
                }
            }
        }
        
        /// Contact email address
        public String KeyContactEmail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyContactEmail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyContactEmail) 
                            || (((String)(this[this.myTable.ColumnKeyContactEmail])) != value)))
                {
                    this[this.myTable.ColumnKeyContactEmail] = value;
                }
            }
        }
        
        /// Contact's phone number
        public String KeyContactPhone
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyContactPhone.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyContactPhone) 
                            || (((String)(this[this.myTable.ColumnKeyContactPhone])) != value)))
                {
                    this[this.myTable.ColumnKeyContactPhone] = value;
                }
            }
        }
        
        /// Not part of original specification - provided in case contact does ever need to be a full Partner.
        public Int64 ContactPartner
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartner.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartner) 
                            || (((Int64)(this[this.myTable.ColumnContactPartner])) != value)))
                {
                    this[this.myTable.ColumnContactPartner] = value;
                }
            }
        }
        
        /// 
        public String SpecialRequirements
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialRequirements.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialRequirements) 
                            || (((String)(this[this.myTable.ColumnSpecialRequirements])) != value)))
                {
                    this[this.myTable.ColumnSpecialRequirements] = value;
                }
            }
        }
        
        /// 
        public String ProposalFormatting
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProposalFormatting.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProposalFormatting) 
                            || (((String)(this[this.myTable.ColumnProposalFormatting])) != value)))
                {
                    this[this.myTable.ColumnProposalFormatting] = value;
                }
            }
        }
        
        /// A lookup table would go with this. e.g. EMAIL, LETTER.
        public String ProposalSubmissionType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProposalSubmissionType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProposalSubmissionType) 
                            || (((String)(this[this.myTable.ColumnProposalSubmissionType])) != value)))
                {
                    this[this.myTable.ColumnProposalSubmissionType] = value;
                }
            }
        }
        
        /// 
        public String SpecialInstructions
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialInstructions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialInstructions) 
                            || (((String)(this[this.myTable.ColumnSpecialInstructions])) != value)))
                {
                    this[this.myTable.ColumnSpecialInstructions] = value;
                }
            }
        }
        
        /// (Monthly | Quarterly | Annually)  These are the only ones we use now.
        public String ReviewFrequency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReviewFrequency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReviewFrequency) 
                            || (((String)(this[this.myTable.ColumnReviewFrequency])) != value)))
                {
                    this[this.myTable.ColumnReviewFrequency] = value;
                }
            }
        }
        
        /// (Annually | Bi-Annually | No Restrictions)  This is a static list.
        public String SubmitFrequency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubmitFrequency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubmitFrequency) 
                            || (((String)(this[this.myTable.ColumnSubmitFrequency])) != value)))
                {
                    this[this.myTable.ColumnSubmitFrequency] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnOwner1Key);
            this.SetNull(this.myTable.ColumnOwner2Key);
            this.SetNull(this.myTable.ColumnKeyContactName);
            this.SetNull(this.myTable.ColumnKeyContactTitle);
            this.SetNull(this.myTable.ColumnKeyContactEmail);
            this.SetNull(this.myTable.ColumnKeyContactPhone);
            this.SetNull(this.myTable.ColumnContactPartner);
            this.SetNull(this.myTable.ColumnSpecialRequirements);
            this.SetNull(this.myTable.ColumnProposalFormatting);
            this.SetNull(this.myTable.ColumnProposalSubmissionType);
            this.SetNull(this.myTable.ColumnSpecialInstructions);
            this.SetNull(this.myTable.ColumnReviewFrequency);
            this.SetNull(this.myTable.ColumnSubmitFrequency);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsOwner1KeyNull()
        {
            return this.IsNull(this.myTable.ColumnOwner1Key);
        }
        
        /// assign NULL value
        public void SetOwner1KeyNull()
        {
            this.SetNull(this.myTable.ColumnOwner1Key);
        }
        
        /// test for NULL value
        public bool IsOwner2KeyNull()
        {
            return this.IsNull(this.myTable.ColumnOwner2Key);
        }
        
        /// assign NULL value
        public void SetOwner2KeyNull()
        {
            this.SetNull(this.myTable.ColumnOwner2Key);
        }
        
        /// test for NULL value
        public bool IsKeyContactNameNull()
        {
            return this.IsNull(this.myTable.ColumnKeyContactName);
        }
        
        /// assign NULL value
        public void SetKeyContactNameNull()
        {
            this.SetNull(this.myTable.ColumnKeyContactName);
        }
        
        /// test for NULL value
        public bool IsKeyContactTitleNull()
        {
            return this.IsNull(this.myTable.ColumnKeyContactTitle);
        }
        
        /// assign NULL value
        public void SetKeyContactTitleNull()
        {
            this.SetNull(this.myTable.ColumnKeyContactTitle);
        }
        
        /// test for NULL value
        public bool IsKeyContactEmailNull()
        {
            return this.IsNull(this.myTable.ColumnKeyContactEmail);
        }
        
        /// assign NULL value
        public void SetKeyContactEmailNull()
        {
            this.SetNull(this.myTable.ColumnKeyContactEmail);
        }
        
        /// test for NULL value
        public bool IsKeyContactPhoneNull()
        {
            return this.IsNull(this.myTable.ColumnKeyContactPhone);
        }
        
        /// assign NULL value
        public void SetKeyContactPhoneNull()
        {
            this.SetNull(this.myTable.ColumnKeyContactPhone);
        }
        
        /// test for NULL value
        public bool IsContactPartnerNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartner);
        }
        
        /// assign NULL value
        public void SetContactPartnerNull()
        {
            this.SetNull(this.myTable.ColumnContactPartner);
        }
        
        /// test for NULL value
        public bool IsSpecialRequirementsNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialRequirements);
        }
        
        /// assign NULL value
        public void SetSpecialRequirementsNull()
        {
            this.SetNull(this.myTable.ColumnSpecialRequirements);
        }
        
        /// test for NULL value
        public bool IsProposalFormattingNull()
        {
            return this.IsNull(this.myTable.ColumnProposalFormatting);
        }
        
        /// assign NULL value
        public void SetProposalFormattingNull()
        {
            this.SetNull(this.myTable.ColumnProposalFormatting);
        }
        
        /// test for NULL value
        public bool IsProposalSubmissionTypeNull()
        {
            return this.IsNull(this.myTable.ColumnProposalSubmissionType);
        }
        
        /// assign NULL value
        public void SetProposalSubmissionTypeNull()
        {
            this.SetNull(this.myTable.ColumnProposalSubmissionType);
        }
        
        /// test for NULL value
        public bool IsSpecialInstructionsNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialInstructions);
        }
        
        /// assign NULL value
        public void SetSpecialInstructionsNull()
        {
            this.SetNull(this.myTable.ColumnSpecialInstructions);
        }
        
        /// test for NULL value
        public bool IsReviewFrequencyNull()
        {
            return this.IsNull(this.myTable.ColumnReviewFrequency);
        }
        
        /// assign NULL value
        public void SetReviewFrequencyNull()
        {
            this.SetNull(this.myTable.ColumnReviewFrequency);
        }
        
        /// test for NULL value
        public bool IsSubmitFrequencyNull()
        {
            return this.IsNull(this.myTable.ColumnSubmitFrequency);
        }
        
        /// assign NULL value
        public void SetSubmitFrequencyNull()
        {
            this.SetNull(this.myTable.ColumnSubmitFrequency);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Foundation proposal status codes and descriptions
    [Serializable()]
    public class PFoundationProposalStatusTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnStatusCode;
        
        /// 
        public DataColumn ColumnStatusDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFoundationProposalStatusTable() : 
                base("PFoundationProposalStatus")
        {
        }
        
        /// constructor
        public PFoundationProposalStatusTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFoundationProposalStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFoundationProposalStatusRow this[int i]
        {
            get
            {
                return ((PFoundationProposalStatusRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "p_status_code_c";
        }
        
        /// get help text for column
        public static string GetStatusCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStatusCodeLabel()
        {
            return "Status Code";
        }
        
        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatusDescriptionDBName()
        {
            return "p_status_description_c";
        }
        
        /// get help text for column
        public static string GetStatusDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStatusDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetStatusDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFoundationProposalStatus";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_foundation_proposal_status";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Proposal Status";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_status_code_c",
                    "p_status_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatusCode = this.Columns["p_status_code_c"];
            this.ColumnStatusDescription = this.Columns["p_status_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnStatusCode};
        }
        
        /// get typed set of changes
        public PFoundationProposalStatusTable GetChangesTyped()
        {
            return ((PFoundationProposalStatusTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFoundationProposalStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PFoundationProposalStatusRow ret = ((PFoundationProposalStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFoundationProposalStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFoundationProposalStatusRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_status_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnStatusCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnStatusDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Foundation proposal status codes and descriptions
    [Serializable()]
    public class PFoundationProposalStatusRow : System.Data.DataRow
    {
        
        private PFoundationProposalStatusTable myTable;
        
        /// Constructor
        public PFoundationProposalStatusRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFoundationProposalStatusTable)(this.Table));
        }
        
        /// 
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode) 
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }
        
        /// 
        public String StatusDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusDescription) 
                            || (((String)(this[this.myTable.ColumnStatusDescription])) != value)))
                {
                    this[this.myTable.ColumnStatusDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
            this.SetNull(this.myTable.ColumnStatusDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsStatusDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnStatusDescription);
        }
        
        /// assign NULL value
        public void SetStatusDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnStatusDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Proposals submitted to a Foundation
    [Serializable()]
    public class PFoundationProposalTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFoundationPartnerKey;
        
        /// 
        public DataColumn ColumnFoundationProposalKey;
        
        /// 
        public DataColumn ColumnProposalStatus;
        
        /// 
        public DataColumn ColumnProposalNotes;
        
        /// 
        public DataColumn ColumnSubmittedDate;
        
        /// 
        public DataColumn ColumnAmountRequested;
        
        /// 
        public DataColumn ColumnAmountApproved;
        
        /// 
        public DataColumn ColumnAmountGranted;
        
        /// 
        public DataColumn ColumnDateGranted;
        
        /// The F.D. person who sent the proposal
        public DataColumn ColumnPartnerSubmittedBy;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFoundationProposalTable() : 
                base("PFoundationProposal")
        {
        }
        
        /// constructor
        public PFoundationProposalTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFoundationProposalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFoundationProposalRow this[int i]
        {
            get
            {
                return ((PFoundationProposalRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationPartnerKeyDBName()
        {
            return "p_foundation_partner_key_n";
        }
        
        /// get help text for column
        public static string GetFoundationPartnerKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationPartnerKeyLabel()
        {
            return "Foundation Key";
        }
        
        /// get display format for column
        public static short GetFoundationPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationProposalKeyDBName()
        {
            return "p_foundation_proposal_key_i";
        }
        
        /// get help text for column
        public static string GetFoundationProposalKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationProposalKeyLabel()
        {
            return "Proposal Key";
        }
        
        /// get display format for column
        public static short GetFoundationProposalKeyLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProposalStatusDBName()
        {
            return "p_proposal_status_c";
        }
        
        /// get help text for column
        public static string GetProposalStatusHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProposalStatusLabel()
        {
            return "Status";
        }
        
        /// get character length for column
        public static short GetProposalStatusLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProposalNotesDBName()
        {
            return "p_proposal_notes_c";
        }
        
        /// get help text for column
        public static string GetProposalNotesHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProposalNotesLabel()
        {
            return "Notes";
        }
        
        /// get character length for column
        public static short GetProposalNotesLength()
        {
            return 350;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubmittedDateDBName()
        {
            return "p_submitted_date_d";
        }
        
        /// get help text for column
        public static string GetSubmittedDateHelp()
        {
            return "The date the proposal was submitted.";
        }
        
        /// get label of column
        public static string GetSubmittedDateLabel()
        {
            return "Submitted";
        }
        
        /// get display format for column
        public static short GetSubmittedDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountRequestedDBName()
        {
            return "p_amount_requested_n";
        }
        
        /// get help text for column
        public static string GetAmountRequestedHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAmountRequestedLabel()
        {
            return "Amount Requested";
        }
        
        /// get display format for column
        public static short GetAmountRequestedLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountApprovedDBName()
        {
            return "p_amount_approved_n";
        }
        
        /// get help text for column
        public static string GetAmountApprovedHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAmountApprovedLabel()
        {
            return "Amount Approved";
        }
        
        /// get display format for column
        public static short GetAmountApprovedLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountGrantedDBName()
        {
            return "p_amount_granted_n";
        }
        
        /// get help text for column
        public static string GetAmountGrantedHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAmountGrantedLabel()
        {
            return "Amount Granted";
        }
        
        /// get display format for column
        public static short GetAmountGrantedLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateGrantedDBName()
        {
            return "p_date_granted_d";
        }
        
        /// get help text for column
        public static string GetDateGrantedHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateGrantedLabel()
        {
            return "Date Granted";
        }
        
        /// get display format for column
        public static short GetDateGrantedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSubmittedByDBName()
        {
            return "p_partner_submitted_by_n";
        }
        
        /// get help text for column
        public static string GetPartnerSubmittedByHelp()
        {
            return "The F.D. person who sent the proposal";
        }
        
        /// get label of column
        public static string GetPartnerSubmittedByLabel()
        {
            return "Submitted By";
        }
        
        /// get display format for column
        public static short GetPartnerSubmittedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFoundationProposal";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_foundation_proposal";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Foundation Proposal";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_foundation_partner_key_n",
                    "p_foundation_proposal_key_i",
                    "p_proposal_status_c",
                    "p_proposal_notes_c",
                    "p_submitted_date_d",
                    "p_amount_requested_n",
                    "p_amount_approved_n",
                    "p_amount_granted_n",
                    "p_date_granted_d",
                    "p_partner_submitted_by_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFoundationPartnerKey = this.Columns["p_foundation_partner_key_n"];
            this.ColumnFoundationProposalKey = this.Columns["p_foundation_proposal_key_i"];
            this.ColumnProposalStatus = this.Columns["p_proposal_status_c"];
            this.ColumnProposalNotes = this.Columns["p_proposal_notes_c"];
            this.ColumnSubmittedDate = this.Columns["p_submitted_date_d"];
            this.ColumnAmountRequested = this.Columns["p_amount_requested_n"];
            this.ColumnAmountApproved = this.Columns["p_amount_approved_n"];
            this.ColumnAmountGranted = this.Columns["p_amount_granted_n"];
            this.ColumnDateGranted = this.Columns["p_date_granted_d"];
            this.ColumnPartnerSubmittedBy = this.Columns["p_partner_submitted_by_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFoundationPartnerKey,
                    this.ColumnFoundationProposalKey};
        }
        
        /// get typed set of changes
        public PFoundationProposalTable GetChangesTyped()
        {
            return ((PFoundationProposalTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFoundationProposalRow NewRowTyped(bool AWithDefaultValues)
        {
            PFoundationProposalRow ret = ((PFoundationProposalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFoundationProposalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFoundationProposalRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_foundation_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_foundation_proposal_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_proposal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_proposal_notes_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_submitted_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_amount_requested_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_amount_approved_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_amount_granted_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_date_granted_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_submitted_by_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFoundationPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFoundationProposalKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProposalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnProposalNotes))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 700);
            }
            if ((ACol == ColumnSubmittedDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnAmountRequested))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 19);
            }
            if ((ACol == ColumnAmountApproved))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 19);
            }
            if ((ACol == ColumnAmountGranted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 19);
            }
            if ((ACol == ColumnDateGranted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnPartnerSubmittedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Proposals submitted to a Foundation
    [Serializable()]
    public class PFoundationProposalRow : System.Data.DataRow
    {
        
        private PFoundationProposalTable myTable;
        
        /// Constructor
        public PFoundationProposalRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFoundationProposalTable)(this.Table));
        }
        
        /// 
        public Int64 FoundationPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnFoundationPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Int32 FoundationProposalKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationProposalKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationProposalKey) 
                            || (((Int32)(this[this.myTable.ColumnFoundationProposalKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationProposalKey] = value;
                }
            }
        }
        
        /// 
        public String ProposalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProposalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProposalStatus) 
                            || (((String)(this[this.myTable.ColumnProposalStatus])) != value)))
                {
                    this[this.myTable.ColumnProposalStatus] = value;
                }
            }
        }
        
        /// 
        public String ProposalNotes
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProposalNotes.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProposalNotes) 
                            || (((String)(this[this.myTable.ColumnProposalNotes])) != value)))
                {
                    this[this.myTable.ColumnProposalNotes] = value;
                }
            }
        }
        
        /// 
        public System.DateTime SubmittedDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubmittedDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubmittedDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnSubmittedDate])) != value)))
                {
                    this[this.myTable.ColumnSubmittedDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime SubmittedDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSubmittedDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime SubmittedDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSubmittedDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Decimal AmountRequested
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountRequested.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountRequested) 
                            || (((Decimal)(this[this.myTable.ColumnAmountRequested])) != value)))
                {
                    this[this.myTable.ColumnAmountRequested] = value;
                }
            }
        }
        
        /// 
        public Decimal AmountApproved
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountApproved.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountApproved) 
                            || (((Decimal)(this[this.myTable.ColumnAmountApproved])) != value)))
                {
                    this[this.myTable.ColumnAmountApproved] = value;
                }
            }
        }
        
        /// 
        public Decimal AmountGranted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountGranted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountGranted) 
                            || (((Decimal)(this[this.myTable.ColumnAmountGranted])) != value)))
                {
                    this[this.myTable.ColumnAmountGranted] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateGranted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateGranted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateGranted) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateGranted])) != value)))
                {
                    this[this.myTable.ColumnDateGranted] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateGrantedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateGranted], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateGrantedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateGranted.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The F.D. person who sent the proposal
        public Int64 PartnerSubmittedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSubmittedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSubmittedBy) 
                            || (((Int64)(this[this.myTable.ColumnPartnerSubmittedBy])) != value)))
                {
                    this[this.myTable.ColumnPartnerSubmittedBy] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFoundationPartnerKey);
            this.SetNull(this.myTable.ColumnFoundationProposalKey);
            this.SetNull(this.myTable.ColumnProposalStatus);
            this.SetNull(this.myTable.ColumnProposalNotes);
            this.SetNull(this.myTable.ColumnSubmittedDate);
            this.SetNull(this.myTable.ColumnAmountRequested);
            this.SetNull(this.myTable.ColumnAmountApproved);
            this.SetNull(this.myTable.ColumnAmountGranted);
            this.SetNull(this.myTable.ColumnDateGranted);
            this.SetNull(this.myTable.ColumnPartnerSubmittedBy);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProposalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnProposalStatus);
        }
        
        /// assign NULL value
        public void SetProposalStatusNull()
        {
            this.SetNull(this.myTable.ColumnProposalStatus);
        }
        
        /// test for NULL value
        public bool IsProposalNotesNull()
        {
            return this.IsNull(this.myTable.ColumnProposalNotes);
        }
        
        /// assign NULL value
        public void SetProposalNotesNull()
        {
            this.SetNull(this.myTable.ColumnProposalNotes);
        }
        
        /// test for NULL value
        public bool IsSubmittedDateNull()
        {
            return this.IsNull(this.myTable.ColumnSubmittedDate);
        }
        
        /// assign NULL value
        public void SetSubmittedDateNull()
        {
            this.SetNull(this.myTable.ColumnSubmittedDate);
        }
        
        /// test for NULL value
        public bool IsAmountRequestedNull()
        {
            return this.IsNull(this.myTable.ColumnAmountRequested);
        }
        
        /// assign NULL value
        public void SetAmountRequestedNull()
        {
            this.SetNull(this.myTable.ColumnAmountRequested);
        }
        
        /// test for NULL value
        public bool IsAmountApprovedNull()
        {
            return this.IsNull(this.myTable.ColumnAmountApproved);
        }
        
        /// assign NULL value
        public void SetAmountApprovedNull()
        {
            this.SetNull(this.myTable.ColumnAmountApproved);
        }
        
        /// test for NULL value
        public bool IsAmountGrantedNull()
        {
            return this.IsNull(this.myTable.ColumnAmountGranted);
        }
        
        /// assign NULL value
        public void SetAmountGrantedNull()
        {
            this.SetNull(this.myTable.ColumnAmountGranted);
        }
        
        /// test for NULL value
        public bool IsDateGrantedNull()
        {
            return this.IsNull(this.myTable.ColumnDateGranted);
        }
        
        /// assign NULL value
        public void SetDateGrantedNull()
        {
            this.SetNull(this.myTable.ColumnDateGranted);
        }
        
        /// test for NULL value
        public bool IsPartnerSubmittedByNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerSubmittedBy);
        }
        
        /// assign NULL value
        public void SetPartnerSubmittedByNull()
        {
            this.SetNull(this.myTable.ColumnPartnerSubmittedBy);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A proposal may be for more than one project or key ministry.
    [Serializable()]
    public class PFoundationProposalDetailTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFoundationPartnerKey;
        
        /// 
        public DataColumn ColumnFoundationProposalKey;
        
        /// 
        public DataColumn ColumnProposalDetailId;
        
        /// Used when the proposal is for a key ministry
        public DataColumn ColumnKeyMinistryKey;
        
        /// Ledger is part of the primary key for motivations.
        public DataColumn ColumnProjectLedgerNumber;
        
        /// Used when the proposal is for a project
        public DataColumn ColumnProjectMotivationGroup;
        
        /// Used when the proposal is for a project
        public DataColumn ColumnProjectMotivationDetail;
        
        /// The area that the project or key ministry is for
        public DataColumn ColumnAreaPartnerKey;
        
        /// The field that the project or key ministry is for if it applies
        public DataColumn ColumnFieldPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFoundationProposalDetailTable() : 
                base("PFoundationProposalDetail")
        {
        }
        
        /// constructor
        public PFoundationProposalDetailTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFoundationProposalDetailTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFoundationProposalDetailRow this[int i]
        {
            get
            {
                return ((PFoundationProposalDetailRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationPartnerKeyDBName()
        {
            return "p_foundation_partner_key_n";
        }
        
        /// get help text for column
        public static string GetFoundationPartnerKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationPartnerKeyLabel()
        {
            return "Foundation";
        }
        
        /// get display format for column
        public static short GetFoundationPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationProposalKeyDBName()
        {
            return "p_foundation_proposal_key_i";
        }
        
        /// get help text for column
        public static string GetFoundationProposalKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationProposalKeyLabel()
        {
            return "Proposal";
        }
        
        /// get display format for column
        public static short GetFoundationProposalKeyLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProposalDetailIdDBName()
        {
            return "p_proposal_detail_id_i";
        }
        
        /// get help text for column
        public static string GetProposalDetailIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProposalDetailIdLabel()
        {
            return "Proposal Detail";
        }
        
        /// get display format for column
        public static short GetProposalDetailIdLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyMinistryKeyDBName()
        {
            return "p_key_ministry_key_n";
        }
        
        /// get help text for column
        public static string GetKeyMinistryKeyHelp()
        {
            return "Used when the proposal is for a key ministry";
        }
        
        /// get label of column
        public static string GetKeyMinistryKeyLabel()
        {
            return "Key Ministry";
        }
        
        /// get display format for column
        public static short GetKeyMinistryKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectLedgerNumberDBName()
        {
            return "p_project_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetProjectLedgerNumberHelp()
        {
            return "Ledger is part of the primary key for motivations.";
        }
        
        /// get label of column
        public static string GetProjectLedgerNumberLabel()
        {
            return "Project Ledger";
        }
        
        /// get display format for column
        public static short GetProjectLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectMotivationGroupDBName()
        {
            return "p_project_motivation_group_c";
        }
        
        /// get help text for column
        public static string GetProjectMotivationGroupHelp()
        {
            return "Used when the proposal is for a project";
        }
        
        /// get label of column
        public static string GetProjectMotivationGroupLabel()
        {
            return "Motivation Group";
        }
        
        /// get character length for column
        public static short GetProjectMotivationGroupLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectMotivationDetailDBName()
        {
            return "p_project_motivation_detail_c";
        }
        
        /// get help text for column
        public static string GetProjectMotivationDetailHelp()
        {
            return "Used when the proposal is for a project";
        }
        
        /// get label of column
        public static string GetProjectMotivationDetailLabel()
        {
            return "Motivation Detail";
        }
        
        /// get character length for column
        public static short GetProjectMotivationDetailLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAreaPartnerKeyDBName()
        {
            return "p_area_partner_key_n";
        }
        
        /// get help text for column
        public static string GetAreaPartnerKeyHelp()
        {
            return "The area that the project or key ministry is for";
        }
        
        /// get label of column
        public static string GetAreaPartnerKeyLabel()
        {
            return "Area";
        }
        
        /// get display format for column
        public static short GetAreaPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFieldPartnerKeyDBName()
        {
            return "p_field_partner_key_n";
        }
        
        /// get help text for column
        public static string GetFieldPartnerKeyHelp()
        {
            return "The field that the project or key ministry is for if it applies";
        }
        
        /// get label of column
        public static string GetFieldPartnerKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetFieldPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFoundationProposalDetail";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_foundation_proposal_detail";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Foundation Proposal Detail";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_foundation_partner_key_n",
                    "p_foundation_proposal_key_i",
                    "p_proposal_detail_id_i",
                    "p_key_ministry_key_n",
                    "p_project_ledger_number_i",
                    "p_project_motivation_group_c",
                    "p_project_motivation_detail_c",
                    "p_area_partner_key_n",
                    "p_field_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFoundationPartnerKey = this.Columns["p_foundation_partner_key_n"];
            this.ColumnFoundationProposalKey = this.Columns["p_foundation_proposal_key_i"];
            this.ColumnProposalDetailId = this.Columns["p_proposal_detail_id_i"];
            this.ColumnKeyMinistryKey = this.Columns["p_key_ministry_key_n"];
            this.ColumnProjectLedgerNumber = this.Columns["p_project_ledger_number_i"];
            this.ColumnProjectMotivationGroup = this.Columns["p_project_motivation_group_c"];
            this.ColumnProjectMotivationDetail = this.Columns["p_project_motivation_detail_c"];
            this.ColumnAreaPartnerKey = this.Columns["p_area_partner_key_n"];
            this.ColumnFieldPartnerKey = this.Columns["p_field_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFoundationPartnerKey,
                    this.ColumnFoundationProposalKey,
                    this.ColumnProposalDetailId};
        }
        
        /// get typed set of changes
        public PFoundationProposalDetailTable GetChangesTyped()
        {
            return ((PFoundationProposalDetailTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFoundationProposalDetailRow NewRowTyped(bool AWithDefaultValues)
        {
            PFoundationProposalDetailRow ret = ((PFoundationProposalDetailRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFoundationProposalDetailRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFoundationProposalDetailRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_foundation_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_foundation_proposal_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_proposal_detail_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_key_ministry_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_project_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_project_motivation_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_project_motivation_detail_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_area_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_field_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFoundationPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFoundationProposalKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProposalDetailId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnKeyMinistryKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnProjectLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProjectMotivationGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnProjectMotivationDetail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAreaPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFieldPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A proposal may be for more than one project or key ministry.
    [Serializable()]
    public class PFoundationProposalDetailRow : System.Data.DataRow
    {
        
        private PFoundationProposalDetailTable myTable;
        
        /// Constructor
        public PFoundationProposalDetailRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFoundationProposalDetailTable)(this.Table));
        }
        
        /// 
        public Int64 FoundationPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnFoundationPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Int32 FoundationProposalKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationProposalKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationProposalKey) 
                            || (((Int32)(this[this.myTable.ColumnFoundationProposalKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationProposalKey] = value;
                }
            }
        }
        
        /// 
        public Int32 ProposalDetailId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProposalDetailId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProposalDetailId) 
                            || (((Int32)(this[this.myTable.ColumnProposalDetailId])) != value)))
                {
                    this[this.myTable.ColumnProposalDetailId] = value;
                }
            }
        }
        
        /// Used when the proposal is for a key ministry
        public Int64 KeyMinistryKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyMinistryKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyMinistryKey) 
                            || (((Int64)(this[this.myTable.ColumnKeyMinistryKey])) != value)))
                {
                    this[this.myTable.ColumnKeyMinistryKey] = value;
                }
            }
        }
        
        /// Ledger is part of the primary key for motivations.
        public Int32 ProjectLedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnProjectLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnProjectLedgerNumber] = value;
                }
            }
        }
        
        /// Used when the proposal is for a project
        public String ProjectMotivationGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectMotivationGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectMotivationGroup) 
                            || (((String)(this[this.myTable.ColumnProjectMotivationGroup])) != value)))
                {
                    this[this.myTable.ColumnProjectMotivationGroup] = value;
                }
            }
        }
        
        /// Used when the proposal is for a project
        public String ProjectMotivationDetail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectMotivationDetail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectMotivationDetail) 
                            || (((String)(this[this.myTable.ColumnProjectMotivationDetail])) != value)))
                {
                    this[this.myTable.ColumnProjectMotivationDetail] = value;
                }
            }
        }
        
        /// The area that the project or key ministry is for
        public Int64 AreaPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAreaPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAreaPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnAreaPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnAreaPartnerKey] = value;
                }
            }
        }
        
        /// The field that the project or key ministry is for if it applies
        public Int64 FieldPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFieldPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFieldPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnFieldPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnFieldPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFoundationPartnerKey);
            this.SetNull(this.myTable.ColumnFoundationProposalKey);
            this.SetNull(this.myTable.ColumnProposalDetailId);
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
            this.SetNull(this.myTable.ColumnProjectLedgerNumber);
            this.SetNull(this.myTable.ColumnProjectMotivationGroup);
            this.SetNull(this.myTable.ColumnProjectMotivationDetail);
            this.SetNull(this.myTable.ColumnAreaPartnerKey);
            this.SetNull(this.myTable.ColumnFieldPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsKeyMinistryKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKeyMinistryKey);
        }
        
        /// assign NULL value
        public void SetKeyMinistryKeyNull()
        {
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
        }
        
        /// test for NULL value
        public bool IsProjectLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnProjectLedgerNumber);
        }
        
        /// assign NULL value
        public void SetProjectLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnProjectLedgerNumber);
        }
        
        /// test for NULL value
        public bool IsProjectMotivationGroupNull()
        {
            return this.IsNull(this.myTable.ColumnProjectMotivationGroup);
        }
        
        /// assign NULL value
        public void SetProjectMotivationGroupNull()
        {
            this.SetNull(this.myTable.ColumnProjectMotivationGroup);
        }
        
        /// test for NULL value
        public bool IsProjectMotivationDetailNull()
        {
            return this.IsNull(this.myTable.ColumnProjectMotivationDetail);
        }
        
        /// assign NULL value
        public void SetProjectMotivationDetailNull()
        {
            this.SetNull(this.myTable.ColumnProjectMotivationDetail);
        }
        
        /// test for NULL value
        public bool IsAreaPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnAreaPartnerKey);
        }
        
        /// assign NULL value
        public void SetAreaPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnAreaPartnerKey);
        }
        
        /// test for NULL value
        public bool IsFieldPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFieldPartnerKey);
        }
        
        /// assign NULL value
        public void SetFieldPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnFieldPartnerKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The month and day of reviews so that proposals can be sent in time
    [Serializable()]
    public class PFoundationDeadlineTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFoundationPartnerKey;
        
        /// 
        public DataColumn ColumnFoundationDeadlineKey;
        
        /// The month number
        public DataColumn ColumnDeadlineMonth;
        
        /// The day number
        public DataColumn ColumnDeadlineDay;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFoundationDeadlineTable() : 
                base("PFoundationDeadline")
        {
        }
        
        /// constructor
        public PFoundationDeadlineTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFoundationDeadlineTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFoundationDeadlineRow this[int i]
        {
            get
            {
                return ((PFoundationDeadlineRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationPartnerKeyDBName()
        {
            return "p_foundation_partner_key_n";
        }
        
        /// get help text for column
        public static string GetFoundationPartnerKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationPartnerKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFoundationPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFoundationDeadlineKeyDBName()
        {
            return "p_foundation_deadline_key_i";
        }
        
        /// get help text for column
        public static string GetFoundationDeadlineKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFoundationDeadlineKeyLabel()
        {
            return "Deadline Key";
        }
        
        /// get display format for column
        public static short GetFoundationDeadlineKeyLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeadlineMonthDBName()
        {
            return "p_deadline_month_i";
        }
        
        /// get help text for column
        public static string GetDeadlineMonthHelp()
        {
            return "The month number";
        }
        
        /// get label of column
        public static string GetDeadlineMonthLabel()
        {
            return "Month";
        }
        
        /// get display format for column
        public static short GetDeadlineMonthLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeadlineDayDBName()
        {
            return "p_deadline_day_i";
        }
        
        /// get help text for column
        public static string GetDeadlineDayHelp()
        {
            return "The day number";
        }
        
        /// get label of column
        public static string GetDeadlineDayLabel()
        {
            return "Day";
        }
        
        /// get display format for column
        public static short GetDeadlineDayLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFoundationDeadline";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_foundation_deadline";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Proposal Deadline";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_foundation_partner_key_n",
                    "p_foundation_deadline_key_i",
                    "p_deadline_month_i",
                    "p_deadline_day_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFoundationPartnerKey = this.Columns["p_foundation_partner_key_n"];
            this.ColumnFoundationDeadlineKey = this.Columns["p_foundation_deadline_key_i"];
            this.ColumnDeadlineMonth = this.Columns["p_deadline_month_i"];
            this.ColumnDeadlineDay = this.Columns["p_deadline_day_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFoundationPartnerKey,
                    this.ColumnFoundationDeadlineKey};
        }
        
        /// get typed set of changes
        public PFoundationDeadlineTable GetChangesTyped()
        {
            return ((PFoundationDeadlineTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFoundationDeadlineRow NewRowTyped(bool AWithDefaultValues)
        {
            PFoundationDeadlineRow ret = ((PFoundationDeadlineRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFoundationDeadlineRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFoundationDeadlineRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_foundation_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_foundation_deadline_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_deadline_month_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_deadline_day_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFoundationPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFoundationDeadlineKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDeadlineMonth))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDeadlineDay))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The month and day of reviews so that proposals can be sent in time
    [Serializable()]
    public class PFoundationDeadlineRow : System.Data.DataRow
    {
        
        private PFoundationDeadlineTable myTable;
        
        /// Constructor
        public PFoundationDeadlineRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFoundationDeadlineTable)(this.Table));
        }
        
        /// 
        public Int64 FoundationPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnFoundationPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Int32 FoundationDeadlineKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFoundationDeadlineKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFoundationDeadlineKey) 
                            || (((Int32)(this[this.myTable.ColumnFoundationDeadlineKey])) != value)))
                {
                    this[this.myTable.ColumnFoundationDeadlineKey] = value;
                }
            }
        }
        
        /// The month number
        public Int32 DeadlineMonth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeadlineMonth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeadlineMonth) 
                            || (((Int32)(this[this.myTable.ColumnDeadlineMonth])) != value)))
                {
                    this[this.myTable.ColumnDeadlineMonth] = value;
                }
            }
        }
        
        /// The day number
        public Int32 DeadlineDay
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeadlineDay.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeadlineDay) 
                            || (((Int32)(this[this.myTable.ColumnDeadlineDay])) != value)))
                {
                    this[this.myTable.ColumnDeadlineDay] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFoundationPartnerKey);
            this.SetNull(this.myTable.ColumnFoundationDeadlineKey);
            this.SetNull(this.myTable.ColumnDeadlineMonth);
            this.SetNull(this.myTable.ColumnDeadlineDay);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDeadlineMonthNull()
        {
            return this.IsNull(this.myTable.ColumnDeadlineMonth);
        }
        
        /// assign NULL value
        public void SetDeadlineMonthNull()
        {
            this.SetNull(this.myTable.ColumnDeadlineMonth);
        }
        
        /// test for NULL value
        public bool IsDeadlineDayNull()
        {
            return this.IsNull(this.myTable.ColumnDeadlineDay);
        }
        
        /// assign NULL value
        public void SetDeadlineDayNull()
        {
            this.SetNull(this.myTable.ColumnDeadlineDay);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Store information about the physical location of a file linked into Petra
    [Serializable()]
    public class PFileInfoTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnKey;
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public DataColumn ColumnPartnerKey;
        
        /// Volume this file can be found in (use either volume or path)
        public DataColumn ColumnVolumeName;
        
        /// Path this file can be found in (use either volume or path)
        public DataColumn ColumnPath;
        
        /// File name this file can be found under in given volume or path
        public DataColumn ColumnFileName;
        
        /// Internal name of the file, different from actual file name
        public DataColumn ColumnName;
        
        /// Information about the file type
        public DataColumn ColumnFileType;
        
        /// Comment for the user
        public DataColumn ColumnComment;
        
        /// Indicates whether or not the file info has restricted access. If it does then the access will be controlled by s_group_file_info.
        public DataColumn ColumnRestricted;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PFileInfoTable() : 
                base("PFileInfo")
        {
        }
        
        /// constructor
        public PFileInfoTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PFileInfoTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PFileInfoRow this[int i]
        {
            get
            {
                return ((PFileInfoRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "p_key_n";
        }
        
        /// get help text for column
        public static string GetKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key that the file is linked with (needed for performance reasons)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetVolumeNameDBName()
        {
            return "s_volume_name_c";
        }
        
        /// get help text for column
        public static string GetVolumeNameHelp()
        {
            return "Volume this file can be found in (use either volume or path)";
        }
        
        /// get label of column
        public static string GetVolumeNameLabel()
        {
            return "Volume";
        }
        
        /// get character length for column
        public static short GetVolumeNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPathDBName()
        {
            return "p_path_c";
        }
        
        /// get help text for column
        public static string GetPathHelp()
        {
            return "Path this file can be found in (use either volume or path)";
        }
        
        /// get label of column
        public static string GetPathLabel()
        {
            return "Path";
        }
        
        /// get character length for column
        public static short GetPathLength()
        {
            return 2048;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileNameDBName()
        {
            return "p_file_name_c";
        }
        
        /// get help text for column
        public static string GetFileNameHelp()
        {
            return "File name this file can be found under in given volume or path";
        }
        
        /// get label of column
        public static string GetFileNameLabel()
        {
            return "File Name";
        }
        
        /// get character length for column
        public static short GetFileNameLength()
        {
            return 512;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNameDBName()
        {
            return "p_name_c";
        }
        
        /// get help text for column
        public static string GetNameHelp()
        {
            return "Internal name of the file, different from actual file name";
        }
        
        /// get label of column
        public static string GetNameLabel()
        {
            return "Internal Name";
        }
        
        /// get character length for column
        public static short GetNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileTypeDBName()
        {
            return "p_file_type_c";
        }
        
        /// get help text for column
        public static string GetFileTypeHelp()
        {
            return "Information about the file type";
        }
        
        /// get label of column
        public static string GetFileTypeLabel()
        {
            return "File Type";
        }
        
        /// get character length for column
        public static short GetFileTypeLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "p_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Comment for the user";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "p_restricted_l";
        }
        
        /// get help text for column
        public static string GetRestrictedHelp()
        {
            return "Should access to this file information be restricted to some people?";
        }
        
        /// get label of column
        public static string GetRestrictedLabel()
        {
            return "File Restricted";
        }
        
        /// get display format for column
        public static short GetRestrictedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PFileInfo";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_file_info";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "File Information";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_key_n",
                    "p_partner_key_n",
                    "s_volume_name_c",
                    "p_path_c",
                    "p_file_name_c",
                    "p_name_c",
                    "p_file_type_c",
                    "p_comment_c",
                    "p_restricted_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKey = this.Columns["p_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnVolumeName = this.Columns["s_volume_name_c"];
            this.ColumnPath = this.Columns["p_path_c"];
            this.ColumnFileName = this.Columns["p_file_name_c"];
            this.ColumnName = this.Columns["p_name_c"];
            this.ColumnFileType = this.Columns["p_file_type_c"];
            this.ColumnComment = this.Columns["p_comment_c"];
            this.ColumnRestricted = this.Columns["p_restricted_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnKey};
        }
        
        /// get typed set of changes
        public PFileInfoTable GetChangesTyped()
        {
            return ((PFileInfoTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PFileInfoRow NewRowTyped(bool AWithDefaultValues)
        {
            PFileInfoRow ret = ((PFileInfoRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PFileInfoRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PFileInfoRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_volume_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_file_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnVolumeName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnPath))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 4096);
            }
            if ((ACol == ColumnFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1024);
            }
            if ((ACol == ColumnName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnFileType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnRestricted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Store information about the physical location of a file linked into Petra
    [Serializable()]
    public class PFileInfoRow : System.Data.DataRow
    {
        
        private PFileInfoTable myTable;
        
        /// Constructor
        public PFileInfoRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PFileInfoTable)(this.Table));
        }
        
        /// 
        public Int64 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey) 
                            || (((Int64)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// Volume this file can be found in (use either volume or path)
        public String VolumeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVolumeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVolumeName) 
                            || (((String)(this[this.myTable.ColumnVolumeName])) != value)))
                {
                    this[this.myTable.ColumnVolumeName] = value;
                }
            }
        }
        
        /// Path this file can be found in (use either volume or path)
        public String Path
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPath) 
                            || (((String)(this[this.myTable.ColumnPath])) != value)))
                {
                    this[this.myTable.ColumnPath] = value;
                }
            }
        }
        
        /// File name this file can be found under in given volume or path
        public String FileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileName) 
                            || (((String)(this[this.myTable.ColumnFileName])) != value)))
                {
                    this[this.myTable.ColumnFileName] = value;
                }
            }
        }
        
        /// Internal name of the file, different from actual file name
        public String Name
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnName) 
                            || (((String)(this[this.myTable.ColumnName])) != value)))
                {
                    this[this.myTable.ColumnName] = value;
                }
            }
        }
        
        /// Information about the file type
        public String FileType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileType) 
                            || (((String)(this[this.myTable.ColumnFileType])) != value)))
                {
                    this[this.myTable.ColumnFileType] = value;
                }
            }
        }
        
        /// Comment for the user
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// Indicates whether or not the file info has restricted access. If it does then the access will be controlled by s_group_file_info.
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted) 
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnVolumeName);
            this.SetNull(this.myTable.ColumnPath);
            this.SetNull(this.myTable.ColumnFileName);
            this.SetNull(this.myTable.ColumnName);
            this.SetNull(this.myTable.ColumnFileType);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsVolumeNameNull()
        {
            return this.IsNull(this.myTable.ColumnVolumeName);
        }
        
        /// assign NULL value
        public void SetVolumeNameNull()
        {
            this.SetNull(this.myTable.ColumnVolumeName);
        }
        
        /// test for NULL value
        public bool IsPathNull()
        {
            return this.IsNull(this.myTable.ColumnPath);
        }
        
        /// assign NULL value
        public void SetPathNull()
        {
            this.SetNull(this.myTable.ColumnPath);
        }
        
        /// test for NULL value
        public bool IsFileNameNull()
        {
            return this.IsNull(this.myTable.ColumnFileName);
        }
        
        /// assign NULL value
        public void SetFileNameNull()
        {
            this.SetNull(this.myTable.ColumnFileName);
        }
        
        /// test for NULL value
        public bool IsNameNull()
        {
            return this.IsNull(this.myTable.ColumnName);
        }
        
        /// assign NULL value
        public void SetNameNull()
        {
            this.SetNull(this.myTable.ColumnName);
        }
        
        /// test for NULL value
        public bool IsFileTypeNull()
        {
            return this.IsNull(this.myTable.ColumnFileType);
        }
        
        /// assign NULL value
        public void SetFileTypeNull()
        {
            this.SetNull(this.myTable.ColumnFileType);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }
        
        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Link file with a partner
    [Serializable()]
    public class PPartnerFileTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFileInfoKey;
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerFileTable() : 
                base("PPartnerFile")
        {
        }
        
        /// constructor
        public PPartnerFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerFileRow this[int i]
        {
            get
            {
                return ((PPartnerFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }
        
        /// get help text for column
        public static string GetFileInfoKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileInfoKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key that the file is linked with (needed for performance reasons)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_file_info_key_n",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileInfoKey};
        }
        
        /// get typed set of changes
        public PPartnerFileTable GetChangesTyped()
        {
            return ((PPartnerFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerFileRow ret = ((PPartnerFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileInfoKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Link file with a partner
    [Serializable()]
    public class PPartnerFileRow : System.Data.DataRow
    {
        
        private PPartnerFileTable myTable;
        
        /// Constructor
        public PPartnerFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerFileTable)(this.Table));
        }
        
        /// 
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey) 
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Link file with a person
    [Serializable()]
    public class PmPersonFileTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFileInfoKey;
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PmPersonFileTable() : 
                base("PmPersonFile")
        {
        }
        
        /// constructor
        public PmPersonFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PmPersonFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PmPersonFileRow this[int i]
        {
            get
            {
                return ((PmPersonFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }
        
        /// get help text for column
        public static string GetFileInfoKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileInfoKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key that the file is linked with (needed for performance reasons)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PmPersonFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "pm_person_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Person File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_file_info_key_n",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileInfoKey};
        }
        
        /// get typed set of changes
        public PmPersonFileTable GetChangesTyped()
        {
            return ((PmPersonFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PmPersonFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonFileRow ret = ((PmPersonFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PmPersonFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileInfoKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Link file with a person
    [Serializable()]
    public class PmPersonFileRow : System.Data.DataRow
    {
        
        private PmPersonFileTable myTable;
        
        /// Constructor
        public PmPersonFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PmPersonFileTable)(this.Table));
        }
        
        /// 
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey) 
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Link file with a partner contact
    [Serializable()]
    public class PPartnerContactFileTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnFileInfoKey;
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public DataColumn ColumnPartnerKey;
        
        /// identifying key for Partner Contact
        public DataColumn ColumnContactId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PPartnerContactFileTable() : 
                base("PPartnerContactFile")
        {
        }
        
        /// constructor
        public PPartnerContactFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PPartnerContactFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PPartnerContactFileRow this[int i]
        {
            get
            {
                return ((PPartnerContactFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }
        
        /// get help text for column
        public static string GetFileInfoKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileInfoKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key that the file is linked with (needed for performance reasons)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactIdDBName()
        {
            return "p_contact_id_i";
        }
        
        /// get help text for column
        public static string GetContactIdHelp()
        {
            return "identifying key for Partner Contact";
        }
        
        /// get label of column
        public static string GetContactIdLabel()
        {
            return "Contact ID";
        }
        
        /// get display format for column
        public static short GetContactIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PPartnerContactFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_partner_contact_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Partner Contact File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_file_info_key_n",
                    "p_partner_key_n",
                    "p_contact_id_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnContactId = this.Columns["p_contact_id_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileInfoKey};
        }
        
        /// get typed set of changes
        public PPartnerContactFileTable GetChangesTyped()
        {
            return ((PPartnerContactFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PPartnerContactFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PPartnerContactFileRow ret = ((PPartnerContactFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PPartnerContactFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PPartnerContactFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileInfoKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnContactId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Link file with a partner contact
    [Serializable()]
    public class PPartnerContactFileRow : System.Data.DataRow
    {
        
        private PPartnerContactFileTable myTable;
        
        /// Constructor
        public PPartnerContactFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PPartnerContactFileTable)(this.Table));
        }
        
        /// 
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey) 
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }
        
        /// Partner key that the file is linked with (needed for performance reasons)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// identifying key for Partner Contact
        public Int32 ContactId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactId) 
                            || (((Int32)(this[this.myTable.ColumnContactId])) != value)))
                {
                    this[this.myTable.ColumnContactId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnContactId);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
}
