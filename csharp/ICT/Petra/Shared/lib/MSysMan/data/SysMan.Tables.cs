/* Auto generated with nant generateORM
 * Do not modify this file manually!
 */
namespace Ict.Petra.Shared.MSysMan.Data
{
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Odbc;
    using System.Runtime.Serialization;
    using System.Xml;
    using Ict.Common;
    using Ict.Common.Data;
    
    
    /// List of users
    [Serializable()]
    public class SUserTable : TTypedDataTable
    {
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnFirstName;
        
        /// 
        public DataColumn ColumnLastName;
        
        /// The .NET hash value of the user's salted password
        public DataColumn ColumnPasswordHash;
        
        /// The salt value used to hide the password even more (cannot recognise 2 same passwords)
        public DataColumn ColumnPasswordSalt;
        
        /// Forces change of password at next login. Set by either Petra 2.2 installation or if the SYSADMIN changes a password for a user (not yet implemented)
        public DataColumn ColumnPasswordNeedsChange;
        
        /// 
        public DataColumn ColumnFailedLogins;
        
        /// 
        public DataColumn ColumnRetired;
        
        /// 
        public DataColumn ColumnLastLoginTime;
        
        /// The date the user last logged in.
        public DataColumn ColumnLastLoginDate;
        
        /// This is the code used to identify a language.
        public DataColumn ColumnLanguageCode;
        
        /// This defines if the code can be modified
        public DataColumn ColumnCanModify;
        
        /// 
        public DataColumn ColumnRecordDelete;
        
        /// This code identifies the method of aquisition.
        public DataColumn ColumnAcquisitionCode;
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnDefaultLedgerNumber;
        
        /// The last time a user failed to log in
        public DataColumn ColumnFailedLoginTime;
        
        /// The last date a user failed to log in.
        public DataColumn ColumnFailedLoginDate;
        
        /// If the user has a Partner record this is the key to it
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SUserTable() : 
                base("SUser")
        {
        }
        
        /// constructor
        public SUserTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SUserTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SUserRow this[int i]
        {
            get
            {
                return ((SUserRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the User ID";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "s_first_name_c";
        }
        
        /// get help text for column
        public static string GetFirstNameHelp()
        {
            return "Enter the Personal Name";
        }
        
        /// get label of column
        public static string GetFirstNameLabel()
        {
            return "Personal Name";
        }
        
        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastNameDBName()
        {
            return "s_last_name_c";
        }
        
        /// get help text for column
        public static string GetLastNameHelp()
        {
            return "Enter the Family Name";
        }
        
        /// get label of column
        public static string GetLastNameLabel()
        {
            return "Family Name";
        }
        
        /// get character length for column
        public static short GetLastNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPasswordHashDBName()
        {
            return "s_password_hash_c";
        }
        
        /// get help text for column
        public static string GetPasswordHashHelp()
        {
            return "The .NET hash value of the user\'s salted password";
        }
        
        /// get label of column
        public static string GetPasswordHashLabel()
        {
            return "s_password_hash_c";
        }
        
        /// get character length for column
        public static short GetPasswordHashLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPasswordSaltDBName()
        {
            return "s_password_salt_c";
        }
        
        /// get help text for column
        public static string GetPasswordSaltHelp()
        {
            return "The salt value used to hide the password even more (cannot recognise 2 same passw" +
                "ords)";
        }
        
        /// get label of column
        public static string GetPasswordSaltLabel()
        {
            return "s_password_salt_c";
        }
        
        /// get character length for column
        public static short GetPasswordSaltLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPasswordNeedsChangeDBName()
        {
            return "s_password_needs_change_l";
        }
        
        /// get help text for column
        public static string GetPasswordNeedsChangeHelp()
        {
            return "Forces change of password at next login";
        }
        
        /// get label of column
        public static string GetPasswordNeedsChangeLabel()
        {
            return "Password needs change";
        }
        
        /// get display format for column
        public static short GetPasswordNeedsChangeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFailedLoginsDBName()
        {
            return "s_failed_logins_i";
        }
        
        /// get help text for column
        public static string GetFailedLoginsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFailedLoginsLabel()
        {
            return "Failed Logins";
        }
        
        /// get display format for column
        public static short GetFailedLoginsLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRetiredDBName()
        {
            return "s_retired_l";
        }
        
        /// get help text for column
        public static string GetRetiredHelp()
        {
            return "User Retired?";
        }
        
        /// get label of column
        public static string GetRetiredLabel()
        {
            return "Retired";
        }
        
        /// get display format for column
        public static short GetRetiredLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastLoginTimeDBName()
        {
            return "s_last_login_time_i";
        }
        
        /// get help text for column
        public static string GetLastLoginTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastLoginTimeLabel()
        {
            return "Last Login Time";
        }
        
        /// get display format for column
        public static short GetLastLoginTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastLoginDateDBName()
        {
            return "s_last_login_date_d";
        }
        
        /// get help text for column
        public static string GetLastLoginDateHelp()
        {
            return "The date the user last logged in.";
        }
        
        /// get label of column
        public static string GetLastLoginDateLabel()
        {
            return "Last Login Date";
        }
        
        /// get display format for column
        public static short GetLastLoginDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "s_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "Enter the language code";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language Code";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanModifyDBName()
        {
            return "s_can_modify_l";
        }
        
        /// get help text for column
        public static string GetCanModifyHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetCanModifyLabel()
        {
            return "Can Modify";
        }
        
        /// get display format for column
        public static short GetCanModifyLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecordDeleteDBName()
        {
            return "s_record_delete_l";
        }
        
        /// get help text for column
        public static string GetRecordDeleteHelp()
        {
            return "Delete system records?";
        }
        
        /// get label of column
        public static string GetRecordDeleteLabel()
        {
            return "Delete System Records";
        }
        
        /// get display format for column
        public static short GetRecordDeleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAcquisitionCodeDBName()
        {
            return "s_acquisition_code_c";
        }
        
        /// get help text for column
        public static string GetAcquisitionCodeHelp()
        {
            return "Enter the Acquisition Code default";
        }
        
        /// get label of column
        public static string GetAcquisitionCodeLabel()
        {
            return "Acquisition Code";
        }
        
        /// get character length for column
        public static short GetAcquisitionCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultLedgerNumberDBName()
        {
            return "a_default_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetDefaultLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetDefaultLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetDefaultLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFailedLoginTimeDBName()
        {
            return "s_failed_login_time_i";
        }
        
        /// get help text for column
        public static string GetFailedLoginTimeHelp()
        {
            return "The last time a user failed to log in";
        }
        
        /// get label of column
        public static string GetFailedLoginTimeLabel()
        {
            return "Last Failed Login Time";
        }
        
        /// get display format for column
        public static short GetFailedLoginTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFailedLoginDateDBName()
        {
            return "s_failed_login_date_d";
        }
        
        /// get help text for column
        public static string GetFailedLoginDateHelp()
        {
            return "The last date a user failed to log in.";
        }
        
        /// get label of column
        public static string GetFailedLoginDateLabel()
        {
            return "Last Failed Login Date";
        }
        
        /// get display format for column
        public static short GetFailedLoginDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key of the user if they have a Partner record";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SUser";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_user";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "User";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_first_name_c",
                    "s_last_name_c",
                    "s_password_hash_c",
                    "s_password_salt_c",
                    "s_password_needs_change_l",
                    "s_failed_logins_i",
                    "s_retired_l",
                    "s_last_login_time_i",
                    "s_last_login_date_d",
                    "s_language_code_c",
                    "s_can_modify_l",
                    "s_record_delete_l",
                    "s_acquisition_code_c",
                    "a_default_ledger_number_i",
                    "s_failed_login_time_i",
                    "s_failed_login_date_d",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnFirstName = this.Columns["s_first_name_c"];
            this.ColumnLastName = this.Columns["s_last_name_c"];
            this.ColumnPasswordHash = this.Columns["s_password_hash_c"];
            this.ColumnPasswordSalt = this.Columns["s_password_salt_c"];
            this.ColumnPasswordNeedsChange = this.Columns["s_password_needs_change_l"];
            this.ColumnFailedLogins = this.Columns["s_failed_logins_i"];
            this.ColumnRetired = this.Columns["s_retired_l"];
            this.ColumnLastLoginTime = this.Columns["s_last_login_time_i"];
            this.ColumnLastLoginDate = this.Columns["s_last_login_date_d"];
            this.ColumnLanguageCode = this.Columns["s_language_code_c"];
            this.ColumnCanModify = this.Columns["s_can_modify_l"];
            this.ColumnRecordDelete = this.Columns["s_record_delete_l"];
            this.ColumnAcquisitionCode = this.Columns["s_acquisition_code_c"];
            this.ColumnDefaultLedgerNumber = this.Columns["a_default_ledger_number_i"];
            this.ColumnFailedLoginTime = this.Columns["s_failed_login_time_i"];
            this.ColumnFailedLoginDate = this.Columns["s_failed_login_date_d"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId};
        }
        
        /// get typed set of changes
        public SUserTable GetChangesTyped()
        {
            return ((SUserTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SUserRow NewRowTyped(bool AWithDefaultValues)
        {
            SUserRow ret = ((SUserRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SUserRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SUserRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_last_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_password_hash_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_password_salt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_password_needs_change_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_failed_logins_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_retired_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_last_login_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_last_login_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_modify_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_record_delete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_acquisition_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_default_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_failed_login_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_failed_login_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFirstName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnLastName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPasswordHash))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPasswordSalt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPasswordNeedsChange))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnFailedLogins))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRetired))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLastLoginTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastLoginDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnCanModify))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRecordDelete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAcquisitionCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDefaultLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFailedLoginTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFailedLoginDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of users
    [Serializable()]
    public class SUserRow : System.Data.DataRow
    {
        
        private SUserTable myTable;
        
        /// Constructor
        public SUserRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SUserTable)(this.Table));
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName) 
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }
        
        /// 
        public String LastName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastName) 
                            || (((String)(this[this.myTable.ColumnLastName])) != value)))
                {
                    this[this.myTable.ColumnLastName] = value;
                }
            }
        }
        
        /// The .NET hash value of the user's salted password
        public String PasswordHash
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPasswordHash.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPasswordHash) 
                            || (((String)(this[this.myTable.ColumnPasswordHash])) != value)))
                {
                    this[this.myTable.ColumnPasswordHash] = value;
                }
            }
        }
        
        /// The salt value used to hide the password even more (cannot recognise 2 same passwords)
        public String PasswordSalt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPasswordSalt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPasswordSalt) 
                            || (((String)(this[this.myTable.ColumnPasswordSalt])) != value)))
                {
                    this[this.myTable.ColumnPasswordSalt] = value;
                }
            }
        }
        
        /// Forces change of password at next login. Set by either Petra 2.2 installation or if the SYSADMIN changes a password for a user (not yet implemented)
        public Boolean PasswordNeedsChange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPasswordNeedsChange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPasswordNeedsChange) 
                            || (((Boolean)(this[this.myTable.ColumnPasswordNeedsChange])) != value)))
                {
                    this[this.myTable.ColumnPasswordNeedsChange] = value;
                }
            }
        }
        
        /// 
        public Int32 FailedLogins
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFailedLogins.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFailedLogins) 
                            || (((Int32)(this[this.myTable.ColumnFailedLogins])) != value)))
                {
                    this[this.myTable.ColumnFailedLogins] = value;
                }
            }
        }
        
        /// 
        public Boolean Retired
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRetired.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRetired) 
                            || (((Boolean)(this[this.myTable.ColumnRetired])) != value)))
                {
                    this[this.myTable.ColumnRetired] = value;
                }
            }
        }
        
        /// 
        public Int32 LastLoginTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastLoginTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastLoginTime) 
                            || (((Int32)(this[this.myTable.ColumnLastLoginTime])) != value)))
                {
                    this[this.myTable.ColumnLastLoginTime] = value;
                }
            }
        }
        
        /// The date the user last logged in.
        public System.DateTime LastLoginDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastLoginDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastLoginDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnLastLoginDate])) != value)))
                {
                    this[this.myTable.ColumnLastLoginDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime LastLoginDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLastLoginDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime LastLoginDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLastLoginDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is the code used to identify a language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// This defines if the code can be modified
        public Boolean CanModify
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanModify.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanModify) 
                            || (((Boolean)(this[this.myTable.ColumnCanModify])) != value)))
                {
                    this[this.myTable.ColumnCanModify] = value;
                }
            }
        }
        
        /// 
        public Boolean RecordDelete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecordDelete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecordDelete) 
                            || (((Boolean)(this[this.myTable.ColumnRecordDelete])) != value)))
                {
                    this[this.myTable.ColumnRecordDelete] = value;
                }
            }
        }
        
        /// This code identifies the method of aquisition.
        public String AcquisitionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAcquisitionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAcquisitionCode) 
                            || (((String)(this[this.myTable.ColumnAcquisitionCode])) != value)))
                {
                    this[this.myTable.ColumnAcquisitionCode] = value;
                }
            }
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 DefaultLedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnDefaultLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnDefaultLedgerNumber] = value;
                }
            }
        }
        
        /// The last time a user failed to log in
        public Int32 FailedLoginTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFailedLoginTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFailedLoginTime) 
                            || (((Int32)(this[this.myTable.ColumnFailedLoginTime])) != value)))
                {
                    this[this.myTable.ColumnFailedLoginTime] = value;
                }
            }
        }
        
        /// The last date a user failed to log in.
        public System.DateTime FailedLoginDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFailedLoginDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFailedLoginDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnFailedLoginDate])) != value)))
                {
                    this[this.myTable.ColumnFailedLoginDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime FailedLoginDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnFailedLoginDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime FailedLoginDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnFailedLoginDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// If the user has a Partner record this is the key to it
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnLastName);
            this.SetNull(this.myTable.ColumnPasswordHash);
            this.SetNull(this.myTable.ColumnPasswordSalt);
            this[this.myTable.ColumnPasswordNeedsChange.Ordinal] = false;
            this[this.myTable.ColumnFailedLogins.Ordinal] = 0;
            this[this.myTable.ColumnRetired.Ordinal] = false;
            this[this.myTable.ColumnLastLoginTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLastLoginDate);
            this[this.myTable.ColumnLanguageCode.Ordinal] = "99";
            this[this.myTable.ColumnCanModify.Ordinal] = true;
            this[this.myTable.ColumnRecordDelete.Ordinal] = false;
            this.SetNull(this.myTable.ColumnAcquisitionCode);
            this[this.myTable.ColumnDefaultLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnFailedLoginTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFailedLoginDate);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }
        
        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }
        
        /// test for NULL value
        public bool IsLastNameNull()
        {
            return this.IsNull(this.myTable.ColumnLastName);
        }
        
        /// assign NULL value
        public void SetLastNameNull()
        {
            this.SetNull(this.myTable.ColumnLastName);
        }
        
        /// test for NULL value
        public bool IsPasswordHashNull()
        {
            return this.IsNull(this.myTable.ColumnPasswordHash);
        }
        
        /// assign NULL value
        public void SetPasswordHashNull()
        {
            this.SetNull(this.myTable.ColumnPasswordHash);
        }
        
        /// test for NULL value
        public bool IsPasswordSaltNull()
        {
            return this.IsNull(this.myTable.ColumnPasswordSalt);
        }
        
        /// assign NULL value
        public void SetPasswordSaltNull()
        {
            this.SetNull(this.myTable.ColumnPasswordSalt);
        }
        
        /// test for NULL value
        public bool IsPasswordNeedsChangeNull()
        {
            return this.IsNull(this.myTable.ColumnPasswordNeedsChange);
        }
        
        /// assign NULL value
        public void SetPasswordNeedsChangeNull()
        {
            this.SetNull(this.myTable.ColumnPasswordNeedsChange);
        }
        
        /// test for NULL value
        public bool IsFailedLoginsNull()
        {
            return this.IsNull(this.myTable.ColumnFailedLogins);
        }
        
        /// assign NULL value
        public void SetFailedLoginsNull()
        {
            this.SetNull(this.myTable.ColumnFailedLogins);
        }
        
        /// test for NULL value
        public bool IsRetiredNull()
        {
            return this.IsNull(this.myTable.ColumnRetired);
        }
        
        /// assign NULL value
        public void SetRetiredNull()
        {
            this.SetNull(this.myTable.ColumnRetired);
        }
        
        /// test for NULL value
        public bool IsLastLoginTimeNull()
        {
            return this.IsNull(this.myTable.ColumnLastLoginTime);
        }
        
        /// assign NULL value
        public void SetLastLoginTimeNull()
        {
            this.SetNull(this.myTable.ColumnLastLoginTime);
        }
        
        /// test for NULL value
        public bool IsLastLoginDateNull()
        {
            return this.IsNull(this.myTable.ColumnLastLoginDate);
        }
        
        /// assign NULL value
        public void SetLastLoginDateNull()
        {
            this.SetNull(this.myTable.ColumnLastLoginDate);
        }
        
        /// test for NULL value
        public bool IsLanguageCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageCode);
        }
        
        /// assign NULL value
        public void SetLanguageCodeNull()
        {
            this.SetNull(this.myTable.ColumnLanguageCode);
        }
        
        /// test for NULL value
        public bool IsCanModifyNull()
        {
            return this.IsNull(this.myTable.ColumnCanModify);
        }
        
        /// assign NULL value
        public void SetCanModifyNull()
        {
            this.SetNull(this.myTable.ColumnCanModify);
        }
        
        /// test for NULL value
        public bool IsRecordDeleteNull()
        {
            return this.IsNull(this.myTable.ColumnRecordDelete);
        }
        
        /// assign NULL value
        public void SetRecordDeleteNull()
        {
            this.SetNull(this.myTable.ColumnRecordDelete);
        }
        
        /// test for NULL value
        public bool IsAcquisitionCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAcquisitionCode);
        }
        
        /// assign NULL value
        public void SetAcquisitionCodeNull()
        {
            this.SetNull(this.myTable.ColumnAcquisitionCode);
        }
        
        /// test for NULL value
        public bool IsDefaultLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultLedgerNumber);
        }
        
        /// assign NULL value
        public void SetDefaultLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnDefaultLedgerNumber);
        }
        
        /// test for NULL value
        public bool IsFailedLoginTimeNull()
        {
            return this.IsNull(this.myTable.ColumnFailedLoginTime);
        }
        
        /// assign NULL value
        public void SetFailedLoginTimeNull()
        {
            this.SetNull(this.myTable.ColumnFailedLoginTime);
        }
        
        /// test for NULL value
        public bool IsFailedLoginDateNull()
        {
            return this.IsNull(this.myTable.ColumnFailedLoginDate);
        }
        
        /// assign NULL value
        public void SetFailedLoginDateNull()
        {
            this.SetNull(this.myTable.ColumnFailedLoginDate);
        }
        
        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }
        
        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of forms for printers
    [Serializable()]
    public class SFormTable : TTypedDataTable
    {
        
        /// This identifies the form
        public DataColumn ColumnFormName;
        
        /// This is a description of the form
        public DataColumn ColumnFormDescription;
        
        /// 
        public DataColumn ColumnDefaultFont;
        
        /// Default font size (points)
        public DataColumn ColumnDefaultFontSize;
        
        /// Number of lines per unit of measure
        public DataColumn ColumnDefaultLpi;
        
        /// Number of characters per unit of measure
        public DataColumn ColumnDefaultCpi;
        
        /// Height of the page
        public DataColumn ColumnFormLength;
        
        /// Width of the page
        public DataColumn ColumnFormWidth;
        
        /// 
        public DataColumn ColumnFormOrientation;
        
        /// Unit of measure for the form.  True if inches, false if centimeters.
        public DataColumn ColumnUnitOfMeasure;
        
        /// Top margin
        public DataColumn ColumnTopMargin;
        
        /// Bottom margin
        public DataColumn ColumnBottomMargin;
        
        /// Left margin
        public DataColumn ColumnLeftMargin;
        
        /// Right margin
        public DataColumn ColumnRightMargin;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SFormTable() : 
                base("SForm")
        {
        }
        
        /// constructor
        public SFormTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SFormTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SFormRow this[int i]
        {
            get
            {
                return ((SFormRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "s_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "Enter the form name";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormDescriptionDBName()
        {
            return "s_form_description_c";
        }
        
        /// get help text for column
        public static string GetFormDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetFormDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetFormDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultFontDBName()
        {
            return "s_default_font_c";
        }
        
        /// get help text for column
        public static string GetDefaultFontHelp()
        {
            return "Enter a font name";
        }
        
        /// get label of column
        public static string GetDefaultFontLabel()
        {
            return "Font Name";
        }
        
        /// get character length for column
        public static short GetDefaultFontLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultFontSizeDBName()
        {
            return "s_default_font_size_i";
        }
        
        /// get help text for column
        public static string GetDefaultFontSizeHelp()
        {
            return "Enter the font size";
        }
        
        /// get label of column
        public static string GetDefaultFontSizeLabel()
        {
            return "Font Size";
        }
        
        /// get display format for column
        public static short GetDefaultFontSizeLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultLpiDBName()
        {
            return "s_default_lpi_i";
        }
        
        /// get help text for column
        public static string GetDefaultLpiHelp()
        {
            return "Enter number of lines per unit measure";
        }
        
        /// get label of column
        public static string GetDefaultLpiLabel()
        {
            return "Lines per Unit";
        }
        
        /// get display format for column
        public static short GetDefaultLpiLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultCpiDBName()
        {
            return "s_default_cpi_i";
        }
        
        /// get help text for column
        public static string GetDefaultCpiHelp()
        {
            return "Enter Number of characters per unit of measure";
        }
        
        /// get label of column
        public static string GetDefaultCpiLabel()
        {
            return "Characters per Unit";
        }
        
        /// get display format for column
        public static short GetDefaultCpiLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormLengthDBName()
        {
            return "s_form_length_n";
        }
        
        /// get help text for column
        public static string GetFormLengthHelp()
        {
            return "Enter the height of the page";
        }
        
        /// get label of column
        public static string GetFormLengthLabel()
        {
            return "Paper Height";
        }
        
        /// get display format for column
        public static short GetFormLengthLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormWidthDBName()
        {
            return "s_form_width_n";
        }
        
        /// get help text for column
        public static string GetFormWidthHelp()
        {
            return "Enter the width of the page";
        }
        
        /// get label of column
        public static string GetFormWidthLabel()
        {
            return "Paper Width";
        }
        
        /// get display format for column
        public static short GetFormWidthLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormOrientationDBName()
        {
            return "s_form_orientation_c";
        }
        
        /// get help text for column
        public static string GetFormOrientationHelp()
        {
            return "Enter the form orientation";
        }
        
        /// get label of column
        public static string GetFormOrientationLabel()
        {
            return "Orientation";
        }
        
        /// get character length for column
        public static short GetFormOrientationLength()
        {
            return 1;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitOfMeasureDBName()
        {
            return "s_unit_of_measure_l";
        }
        
        /// get help text for column
        public static string GetUnitOfMeasureHelp()
        {
            return "Unit of measure for the form.  True if inches, false if centimeters.";
        }
        
        /// get label of column
        public static string GetUnitOfMeasureLabel()
        {
            return "Unit Measure";
        }
        
        /// get display format for column
        public static short GetUnitOfMeasureLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTopMarginDBName()
        {
            return "s_top_margin_n";
        }
        
        /// get help text for column
        public static string GetTopMarginHelp()
        {
            return "Enter the height of the top margin";
        }
        
        /// get label of column
        public static string GetTopMarginLabel()
        {
            return "Top margin";
        }
        
        /// get display format for column
        public static short GetTopMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBottomMarginDBName()
        {
            return "s_bottom_margin_n";
        }
        
        /// get help text for column
        public static string GetBottomMarginHelp()
        {
            return "Enter the height of the bottom margin";
        }
        
        /// get label of column
        public static string GetBottomMarginLabel()
        {
            return "Bottom margin";
        }
        
        /// get display format for column
        public static short GetBottomMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLeftMarginDBName()
        {
            return "s_left_margin_n";
        }
        
        /// get help text for column
        public static string GetLeftMarginHelp()
        {
            return "Enter the width of the left margin";
        }
        
        /// get label of column
        public static string GetLeftMarginLabel()
        {
            return "Left margin";
        }
        
        /// get display format for column
        public static short GetLeftMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRightMarginDBName()
        {
            return "s_right_margin_n";
        }
        
        /// get help text for column
        public static string GetRightMarginHelp()
        {
            return "Enter the width of the right margin";
        }
        
        /// get label of column
        public static string GetRightMarginLabel()
        {
            return "Right margin";
        }
        
        /// get display format for column
        public static short GetRightMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SForm";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_form";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Form";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_form_name_c",
                    "s_form_description_c",
                    "s_default_font_c",
                    "s_default_font_size_i",
                    "s_default_lpi_i",
                    "s_default_cpi_i",
                    "s_form_length_n",
                    "s_form_width_n",
                    "s_form_orientation_c",
                    "s_unit_of_measure_l",
                    "s_top_margin_n",
                    "s_bottom_margin_n",
                    "s_left_margin_n",
                    "s_right_margin_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormName = this.Columns["s_form_name_c"];
            this.ColumnFormDescription = this.Columns["s_form_description_c"];
            this.ColumnDefaultFont = this.Columns["s_default_font_c"];
            this.ColumnDefaultFontSize = this.Columns["s_default_font_size_i"];
            this.ColumnDefaultLpi = this.Columns["s_default_lpi_i"];
            this.ColumnDefaultCpi = this.Columns["s_default_cpi_i"];
            this.ColumnFormLength = this.Columns["s_form_length_n"];
            this.ColumnFormWidth = this.Columns["s_form_width_n"];
            this.ColumnFormOrientation = this.Columns["s_form_orientation_c"];
            this.ColumnUnitOfMeasure = this.Columns["s_unit_of_measure_l"];
            this.ColumnTopMargin = this.Columns["s_top_margin_n"];
            this.ColumnBottomMargin = this.Columns["s_bottom_margin_n"];
            this.ColumnLeftMargin = this.Columns["s_left_margin_n"];
            this.ColumnRightMargin = this.Columns["s_right_margin_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFormName};
        }
        
        /// get typed set of changes
        public SFormTable GetChangesTyped()
        {
            return ((SFormTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SFormRow NewRowTyped(bool AWithDefaultValues)
        {
            SFormRow ret = ((SFormRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SFormRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SFormRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_form_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_font_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_font_size_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_default_lpi_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_default_cpi_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_form_length_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_form_width_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_form_orientation_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_unit_of_measure_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_top_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_bottom_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_left_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_right_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDefaultFont))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDefaultFontSize))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDefaultLpi))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDefaultCpi))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFormLength))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnFormWidth))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnFormOrientation))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 2);
            }
            if ((ACol == ColumnUnitOfMeasure))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTopMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnBottomMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnLeftMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnRightMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of forms for printers
    [Serializable()]
    public class SFormRow : System.Data.DataRow
    {
        
        private SFormTable myTable;
        
        /// Constructor
        public SFormRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SFormTable)(this.Table));
        }
        
        /// This identifies the form
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// This is a description of the form
        public String FormDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormDescription) 
                            || (((String)(this[this.myTable.ColumnFormDescription])) != value)))
                {
                    this[this.myTable.ColumnFormDescription] = value;
                }
            }
        }
        
        /// 
        public String DefaultFont
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultFont.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultFont) 
                            || (((String)(this[this.myTable.ColumnDefaultFont])) != value)))
                {
                    this[this.myTable.ColumnDefaultFont] = value;
                }
            }
        }
        
        /// Default font size (points)
        public Int32 DefaultFontSize
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultFontSize.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultFontSize) 
                            || (((Int32)(this[this.myTable.ColumnDefaultFontSize])) != value)))
                {
                    this[this.myTable.ColumnDefaultFontSize] = value;
                }
            }
        }
        
        /// Number of lines per unit of measure
        public Int32 DefaultLpi
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultLpi.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultLpi) 
                            || (((Int32)(this[this.myTable.ColumnDefaultLpi])) != value)))
                {
                    this[this.myTable.ColumnDefaultLpi] = value;
                }
            }
        }
        
        /// Number of characters per unit of measure
        public Int32 DefaultCpi
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultCpi.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultCpi) 
                            || (((Int32)(this[this.myTable.ColumnDefaultCpi])) != value)))
                {
                    this[this.myTable.ColumnDefaultCpi] = value;
                }
            }
        }
        
        /// Height of the page
        public Decimal FormLength
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormLength) 
                            || (((Decimal)(this[this.myTable.ColumnFormLength])) != value)))
                {
                    this[this.myTable.ColumnFormLength] = value;
                }
            }
        }
        
        /// Width of the page
        public Decimal FormWidth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormWidth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormWidth) 
                            || (((Decimal)(this[this.myTable.ColumnFormWidth])) != value)))
                {
                    this[this.myTable.ColumnFormWidth] = value;
                }
            }
        }
        
        /// 
        public String FormOrientation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormOrientation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormOrientation) 
                            || (((String)(this[this.myTable.ColumnFormOrientation])) != value)))
                {
                    this[this.myTable.ColumnFormOrientation] = value;
                }
            }
        }
        
        /// Unit of measure for the form.  True if inches, false if centimeters.
        public Boolean UnitOfMeasure
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitOfMeasure.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitOfMeasure) 
                            || (((Boolean)(this[this.myTable.ColumnUnitOfMeasure])) != value)))
                {
                    this[this.myTable.ColumnUnitOfMeasure] = value;
                }
            }
        }
        
        /// Top margin
        public Decimal TopMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTopMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTopMargin) 
                            || (((Decimal)(this[this.myTable.ColumnTopMargin])) != value)))
                {
                    this[this.myTable.ColumnTopMargin] = value;
                }
            }
        }
        
        /// Bottom margin
        public Decimal BottomMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBottomMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBottomMargin) 
                            || (((Decimal)(this[this.myTable.ColumnBottomMargin])) != value)))
                {
                    this[this.myTable.ColumnBottomMargin] = value;
                }
            }
        }
        
        /// Left margin
        public Decimal LeftMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLeftMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLeftMargin) 
                            || (((Decimal)(this[this.myTable.ColumnLeftMargin])) != value)))
                {
                    this[this.myTable.ColumnLeftMargin] = value;
                }
            }
        }
        
        /// Right margin
        public Decimal RightMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRightMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRightMargin) 
                            || (((Decimal)(this[this.myTable.ColumnRightMargin])) != value)))
                {
                    this[this.myTable.ColumnRightMargin] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormName);
            this.SetNull(this.myTable.ColumnFormDescription);
            this.SetNull(this.myTable.ColumnDefaultFont);
            this[this.myTable.ColumnDefaultFontSize.Ordinal] = 0;
            this[this.myTable.ColumnDefaultLpi.Ordinal] = 0;
            this[this.myTable.ColumnDefaultCpi.Ordinal] = 0;
            this[this.myTable.ColumnFormLength.Ordinal] = 0;
            this[this.myTable.ColumnFormWidth.Ordinal] = 0;
            this[this.myTable.ColumnFormOrientation.Ordinal] = "P";
            this[this.myTable.ColumnUnitOfMeasure.Ordinal] = false;
            this[this.myTable.ColumnTopMargin.Ordinal] = 0;
            this[this.myTable.ColumnBottomMargin.Ordinal] = 0;
            this[this.myTable.ColumnLeftMargin.Ordinal] = 0;
            this[this.myTable.ColumnRightMargin.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDefaultFontNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultFont);
        }
        
        /// assign NULL value
        public void SetDefaultFontNull()
        {
            this.SetNull(this.myTable.ColumnDefaultFont);
        }
        
        /// test for NULL value
        public bool IsFormOrientationNull()
        {
            return this.IsNull(this.myTable.ColumnFormOrientation);
        }
        
        /// assign NULL value
        public void SetFormOrientationNull()
        {
            this.SetNull(this.myTable.ColumnFormOrientation);
        }
        
        /// test for NULL value
        public bool IsUnitOfMeasureNull()
        {
            return this.IsNull(this.myTable.ColumnUnitOfMeasure);
        }
        
        /// assign NULL value
        public void SetUnitOfMeasureNull()
        {
            this.SetNull(this.myTable.ColumnUnitOfMeasure);
        }
        
        /// test for NULL value
        public bool IsTopMarginNull()
        {
            return this.IsNull(this.myTable.ColumnTopMargin);
        }
        
        /// assign NULL value
        public void SetTopMarginNull()
        {
            this.SetNull(this.myTable.ColumnTopMargin);
        }
        
        /// test for NULL value
        public bool IsBottomMarginNull()
        {
            return this.IsNull(this.myTable.ColumnBottomMargin);
        }
        
        /// assign NULL value
        public void SetBottomMarginNull()
        {
            this.SetNull(this.myTable.ColumnBottomMargin);
        }
        
        /// test for NULL value
        public bool IsLeftMarginNull()
        {
            return this.IsNull(this.myTable.ColumnLeftMargin);
        }
        
        /// assign NULL value
        public void SetLeftMarginNull()
        {
            this.SetNull(this.myTable.ColumnLeftMargin);
        }
        
        /// test for NULL value
        public bool IsRightMarginNull()
        {
            return this.IsNull(this.myTable.ColumnRightMargin);
        }
        
        /// assign NULL value
        public void SetRightMarginNull()
        {
            this.SetNull(this.myTable.ColumnRightMargin);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of Petra source code files
    [Serializable()]
    public class SFileTable : TTypedDataTable
    {
        
        /// This is the name of the file
        public DataColumn ColumnFileName;
        
        /// A description of the file
        public DataColumn ColumnFileDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SFileTable() : 
                base("SFile")
        {
        }
        
        /// constructor
        public SFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SFileRow this[int i]
        {
            get
            {
                return ((SFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileNameDBName()
        {
            return "s_file_name_c";
        }
        
        /// get help text for column
        public static string GetFileNameHelp()
        {
            return "Enter the filename";
        }
        
        /// get label of column
        public static string GetFileNameLabel()
        {
            return "File Name";
        }
        
        /// get character length for column
        public static short GetFileNameLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileDescriptionDBName()
        {
            return "s_file_description_c";
        }
        
        /// get help text for column
        public static string GetFileDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetFileDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetFileDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_file_name_c",
                    "s_file_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileName = this.Columns["s_file_name_c"];
            this.ColumnFileDescription = this.Columns["s_file_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileName};
        }
        
        /// get typed set of changes
        public SFileTable GetChangesTyped()
        {
            return ((SFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SFileRow NewRowTyped(bool AWithDefaultValues)
        {
            SFileRow ret = ((SFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_file_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnFileDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of Petra source code files
    [Serializable()]
    public class SFileRow : System.Data.DataRow
    {
        
        private SFileTable myTable;
        
        /// Constructor
        public SFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SFileTable)(this.Table));
        }
        
        /// This is the name of the file
        public String FileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileName) 
                            || (((String)(this[this.myTable.ColumnFileName])) != value)))
                {
                    this[this.myTable.ColumnFileName] = value;
                }
            }
        }
        
        /// A description of the file
        public String FileDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileDescription) 
                            || (((String)(this[this.myTable.ColumnFileDescription])) != value)))
                {
                    this[this.myTable.ColumnFileDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileName);
            this.SetNull(this.myTable.ColumnFileDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFileDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFileDescription);
        }
        
        /// assign NULL value
        public void SetFileDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFileDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of groups to which users can belong
    [Serializable()]
    public class SGroupTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnUnitKey;
        
        /// Describes a group
        public DataColumn ColumnGroupName;
        
        /// This defines if the code can be modified
        public DataColumn ColumnCanModify;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupTable() : 
                base("SGroup")
        {
        }
        
        /// constructor
        public SGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupRow this[int i]
        {
            get
            {
                return ((SGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "s_unit_key_n";
        }
        
        /// get help text for column
        public static string GetUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetUnitKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupNameDBName()
        {
            return "s_group_name_c";
        }
        
        /// get help text for column
        public static string GetGroupNameHelp()
        {
            return "Enter the group name";
        }
        
        /// get label of column
        public static string GetGroupNameLabel()
        {
            return "Group Name";
        }
        
        /// get character length for column
        public static short GetGroupNameLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanModifyDBName()
        {
            return "s_can_modify_l";
        }
        
        /// get help text for column
        public static string GetCanModifyHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetCanModifyLabel()
        {
            return "Can Modify";
        }
        
        /// get display format for column
        public static short GetCanModifyLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_unit_key_n",
                    "s_group_name_c",
                    "s_can_modify_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnUnitKey = this.Columns["s_unit_key_n"];
            this.ColumnGroupName = this.Columns["s_group_name_c"];
            this.ColumnCanModify = this.Columns["s_can_modify_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnUnitKey};
        }
        
        /// get typed set of changes
        public SGroupTable GetChangesTyped()
        {
            return ((SGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupRow ret = ((SGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_group_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_modify_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnGroupName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnCanModify))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of groups to which users can belong
    [Serializable()]
    public class SGroupRow : System.Data.DataRow
    {
        
        private SGroupTable myTable;
        
        /// Constructor
        public SGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }
        
        /// Describes a group
        public String GroupName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupName) 
                            || (((String)(this[this.myTable.ColumnGroupName])) != value)))
                {
                    this[this.myTable.ColumnGroupName] = value;
                }
            }
        }
        
        /// This defines if the code can be modified
        public Boolean CanModify
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanModify.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanModify) 
                            || (((Boolean)(this[this.myTable.ColumnCanModify])) != value)))
                {
                    this[this.myTable.ColumnCanModify] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnGroupName);
            this[this.myTable.ColumnCanModify.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsGroupNameNull()
        {
            return this.IsNull(this.myTable.ColumnGroupName);
        }
        
        /// assign NULL value
        public void SetGroupNameNull()
        {
            this.SetNull(this.myTable.ColumnGroupName);
        }
        
        /// test for NULL value
        public bool IsCanModifyNull()
        {
            return this.IsNull(this.myTable.ColumnCanModify);
        }
        
        /// assign NULL value
        public void SetCanModifyNull()
        {
            this.SetNull(this.myTable.ColumnCanModify);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Security mappings of users to groups
    [Serializable()]
    public class SUserGroupTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnUnitKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SUserGroupTable() : 
                base("SUserGroup")
        {
        }
        
        /// constructor
        public SUserGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SUserGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SUserGroupRow this[int i]
        {
            get
            {
                return ((SUserGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "s_unit_key_n";
        }
        
        /// get help text for column
        public static string GetUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetUnitKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SUserGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_user_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "User Group";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_group_id_c",
                    "s_unit_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnUnitKey = this.Columns["s_unit_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnGroupId,
                    this.ColumnUnitKey};
        }
        
        /// get typed set of changes
        public SUserGroupTable GetChangesTyped()
        {
            return ((SUserGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SUserGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            SUserGroupRow ret = ((SUserGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SUserGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SUserGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Security mappings of users to groups
    [Serializable()]
    public class SUserGroupRow : System.Data.DataRow
    {
        
        private SUserGroupTable myTable;
        
        /// Constructor
        public SUserGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SUserGroupTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of Petra software modules
    [Serializable()]
    public class SModuleTable : TTypedDataTable
    {
        
        /// Identifies a module. A module is any part of aprogram which is related to each menu entry or to the sub-system. Eg, partner administration, AP, AR etc.
        public DataColumn ColumnModuleId;
        
        /// This is the name of the module
        public DataColumn ColumnModuleName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SModuleTable() : 
                base("SModule")
        {
        }
        
        /// constructor
        public SModuleTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SModuleTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SModuleRow this[int i]
        {
            get
            {
                return ((SModuleRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "Identifies a module. A module is any part of aprogram which is related to each me" +
                "nu entry or to the sub-system. Eg, partner administration, AP, AR etc.";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleNameDBName()
        {
            return "s_module_name_c";
        }
        
        /// get help text for column
        public static string GetModuleNameHelp()
        {
            return "Enter a name";
        }
        
        /// get label of column
        public static string GetModuleNameLabel()
        {
            return "Module Name";
        }
        
        /// get character length for column
        public static short GetModuleNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SModule";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_module";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Module";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_module_id_c",
                    "s_module_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnModuleName = this.Columns["s_module_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnModuleId};
        }
        
        /// get typed set of changes
        public SModuleTable GetChangesTyped()
        {
            return ((SModuleTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SModuleRow NewRowTyped(bool AWithDefaultValues)
        {
            SModuleRow ret = ((SModuleRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SModuleRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SModuleRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModuleName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of Petra software modules
    [Serializable()]
    public class SModuleRow : System.Data.DataRow
    {
        
        private SModuleTable myTable;
        
        /// Constructor
        public SModuleRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SModuleTable)(this.Table));
        }
        
        /// Identifies a module. A module is any part of aprogram which is related to each menu entry or to the sub-system. Eg, partner administration, AP, AR etc.
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// This is the name of the module
        public String ModuleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleName) 
                            || (((String)(this[this.myTable.ColumnModuleName])) != value)))
                {
                    this[this.myTable.ColumnModuleName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnModuleName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsModuleNameNull()
        {
            return this.IsNull(this.myTable.ColumnModuleName);
        }
        
        /// assign NULL value
        public void SetModuleNameNull()
        {
            this.SetNull(this.myTable.ColumnModuleName);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Lists printer forms that are valid for each Petra module.
    [Serializable()]
    public class SValidOutputFormTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnModuleId;
        
        /// 
        public DataColumn ColumnFormName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SValidOutputFormTable() : 
                base("SValidOutputForm")
        {
        }
        
        /// constructor
        public SValidOutputFormTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SValidOutputFormTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SValidOutputFormRow this[int i]
        {
            get
            {
                return ((SValidOutputFormRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "s_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SValidOutputForm";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_valid_output_form";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Valid Output Form";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_module_id_c",
                    "s_form_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnFormName = this.Columns["s_form_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnModuleId,
                    this.ColumnFormName};
        }
        
        /// get typed set of changes
        public SValidOutputFormTable GetChangesTyped()
        {
            return ((SValidOutputFormTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SValidOutputFormRow NewRowTyped(bool AWithDefaultValues)
        {
            SValidOutputFormRow ret = ((SValidOutputFormRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SValidOutputFormRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SValidOutputFormRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Lists printer forms that are valid for each Petra module.
    [Serializable()]
    public class SValidOutputFormRow : System.Data.DataRow
    {
        
        private SValidOutputFormTable myTable;
        
        /// Constructor
        public SValidOutputFormRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SValidOutputFormTable)(this.Table));
        }
        
        /// 
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// 
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Holds the relationships between Modules and Files
    [Serializable()]
    public class SModuleFileTable : TTypedDataTable
    {
        
        /// Identifies a module
        public DataColumn ColumnModuleId;
        
        /// This is the name of the file
        public DataColumn ColumnFileName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SModuleFileTable() : 
                base("SModuleFile")
        {
        }
        
        /// constructor
        public SModuleFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SModuleFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SModuleFileRow this[int i]
        {
            get
            {
                return ((SModuleFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "Identifies a module";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileNameDBName()
        {
            return "s_file_name_c";
        }
        
        /// get help text for column
        public static string GetFileNameHelp()
        {
            return "Enter the filename";
        }
        
        /// get label of column
        public static string GetFileNameLabel()
        {
            return "File Name";
        }
        
        /// get character length for column
        public static short GetFileNameLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SModuleFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_module_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Module File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_module_id_c",
                    "s_file_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnFileName = this.Columns["s_file_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnModuleId,
                    this.ColumnFileName};
        }
        
        /// get typed set of changes
        public SModuleFileTable GetChangesTyped()
        {
            return ((SModuleFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SModuleFileRow NewRowTyped(bool AWithDefaultValues)
        {
            SModuleFileRow ret = ((SModuleFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SModuleFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SModuleFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Holds the relationships between Modules and Files
    [Serializable()]
    public class SModuleFileRow : System.Data.DataRow
    {
        
        private SModuleFileTable myTable;
        
        /// Constructor
        public SModuleFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SModuleFileTable)(this.Table));
        }
        
        /// Identifies a module
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// This is the name of the file
        public String FileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileName) 
                            || (((String)(this[this.myTable.ColumnFileName])) != value)))
                {
                    this[this.myTable.ColumnFileName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnFileName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Security mappings from groups to Petra modules
    [Serializable()]
    public class SGroupModuleAccessPermissionTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// 
        public DataColumn ColumnModuleId;
        
        /// Permission to access this module
        public DataColumn ColumnCanAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupModuleAccessPermissionTable() : 
                base("SGroupModuleAccessPermission")
        {
        }
        
        /// constructor
        public SGroupModuleAccessPermissionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupModuleAccessPermissionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupModuleAccessPermissionRow this[int i]
        {
            get
            {
                return ((SGroupModuleAccessPermissionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "Enter the module id";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanAccessDBName()
        {
            return "s_can_access_l";
        }
        
        /// get help text for column
        public static string GetCanAccessHelp()
        {
            return "Permission to access this module";
        }
        
        /// get label of column
        public static string GetCanAccessLabel()
        {
            return "Can Access";
        }
        
        /// get display format for column
        public static short GetCanAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupModuleAccessPermission";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_module_access_permission";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Module Access Permission";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "s_module_id_c",
                    "s_can_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnCanAccess = this.Columns["s_can_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnModuleId};
        }
        
        /// get typed set of changes
        public SGroupModuleAccessPermissionTable GetChangesTyped()
        {
            return ((SGroupModuleAccessPermissionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupModuleAccessPermissionRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupModuleAccessPermissionRow ret = ((SGroupModuleAccessPermissionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupModuleAccessPermissionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupModuleAccessPermissionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnCanAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Security mappings from groups to Petra modules
    [Serializable()]
    public class SGroupModuleAccessPermissionRow : System.Data.DataRow
    {
        
        private SGroupModuleAccessPermissionTable myTable;
        
        /// Constructor
        public SGroupModuleAccessPermissionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupModuleAccessPermissionTable)(this.Table));
        }
        
        /// 
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// 
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// Permission to access this module
        public Boolean CanAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanAccess) 
                            || (((Boolean)(this[this.myTable.ColumnCanAccess])) != value)))
                {
                    this[this.myTable.ColumnCanAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnModuleId);
            this[this.myTable.ColumnCanAccess.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCanAccessNull()
        {
            return this.IsNull(this.myTable.ColumnCanAccess);
        }
        
        /// assign NULL value
        public void SetCanAccessNull()
        {
            this.SetNull(this.myTable.ColumnCanAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Security mappings from groups to Petra database
    [Serializable()]
    public class SGroupTableAccessPermissionTable : TTypedDataTable
    {
        
        /// This identifies the system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// 
        public DataColumn ColumnTableName;
        
        /// Permission to allow creation.
        public DataColumn ColumnCanCreate;
        
        /// Permission to allow modification.
        public DataColumn ColumnCanModify;
        
        /// Permission to allow deletion.
        public DataColumn ColumnCanDelete;
        
        /// Permission to allow inquiry.
        public DataColumn ColumnCanInquire;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupTableAccessPermissionTable() : 
                base("SGroupTableAccessPermission")
        {
        }
        
        /// constructor
        public SGroupTableAccessPermissionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupTableAccessPermissionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupTableAccessPermissionRow this[int i]
        {
            get
            {
                return ((SGroupTableAccessPermissionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTableNameDBName()
        {
            return "s_table_name_c";
        }
        
        /// get help text for column
        public static string GetTableNameHelp()
        {
            return "The name of the Table";
        }
        
        /// get label of column
        public static string GetTableNameLabel()
        {
            return "Table Name";
        }
        
        /// get character length for column
        public static short GetTableNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanCreateDBName()
        {
            return "s_can_create_l";
        }
        
        /// get help text for column
        public static string GetCanCreateHelp()
        {
            return "Permission to allow creation.";
        }
        
        /// get label of column
        public static string GetCanCreateLabel()
        {
            return "Can create";
        }
        
        /// get display format for column
        public static short GetCanCreateLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanModifyDBName()
        {
            return "s_can_modify_l";
        }
        
        /// get help text for column
        public static string GetCanModifyHelp()
        {
            return "Permission to allow modification.";
        }
        
        /// get label of column
        public static string GetCanModifyLabel()
        {
            return "Can modify";
        }
        
        /// get display format for column
        public static short GetCanModifyLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanDeleteDBName()
        {
            return "s_can_delete_l";
        }
        
        /// get help text for column
        public static string GetCanDeleteHelp()
        {
            return "Permission to allow deletion.";
        }
        
        /// get label of column
        public static string GetCanDeleteLabel()
        {
            return "Can delete";
        }
        
        /// get display format for column
        public static short GetCanDeleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanInquireDBName()
        {
            return "s_can_inquire_l";
        }
        
        /// get help text for column
        public static string GetCanInquireHelp()
        {
            return "Permission to allow inquiry.";
        }
        
        /// get label of column
        public static string GetCanInquireLabel()
        {
            return "Can inquire";
        }
        
        /// get display format for column
        public static short GetCanInquireLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupTableAccessPermission";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_table_access_permission";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Table Access Permission";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "s_table_name_c",
                    "s_can_create_l",
                    "s_can_modify_l",
                    "s_can_delete_l",
                    "s_can_inquire_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnTableName = this.Columns["s_table_name_c"];
            this.ColumnCanCreate = this.Columns["s_can_create_l"];
            this.ColumnCanModify = this.Columns["s_can_modify_l"];
            this.ColumnCanDelete = this.Columns["s_can_delete_l"];
            this.ColumnCanInquire = this.Columns["s_can_inquire_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnTableName};
        }
        
        /// get typed set of changes
        public SGroupTableAccessPermissionTable GetChangesTyped()
        {
            return ((SGroupTableAccessPermissionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupTableAccessPermissionRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupTableAccessPermissionRow ret = ((SGroupTableAccessPermissionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupTableAccessPermissionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupTableAccessPermissionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_table_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_create_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_modify_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_delete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_inquire_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnTableName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnCanCreate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanModify))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanDelete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanInquire))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Security mappings from groups to Petra database
    [Serializable()]
    public class SGroupTableAccessPermissionRow : System.Data.DataRow
    {
        
        private SGroupTableAccessPermissionTable myTable;
        
        /// Constructor
        public SGroupTableAccessPermissionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupTableAccessPermissionTable)(this.Table));
        }
        
        /// This identifies the system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// 
        public String TableName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTableName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTableName) 
                            || (((String)(this[this.myTable.ColumnTableName])) != value)))
                {
                    this[this.myTable.ColumnTableName] = value;
                }
            }
        }
        
        /// Permission to allow creation.
        public Boolean CanCreate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanCreate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanCreate) 
                            || (((Boolean)(this[this.myTable.ColumnCanCreate])) != value)))
                {
                    this[this.myTable.ColumnCanCreate] = value;
                }
            }
        }
        
        /// Permission to allow modification.
        public Boolean CanModify
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanModify.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanModify) 
                            || (((Boolean)(this[this.myTable.ColumnCanModify])) != value)))
                {
                    this[this.myTable.ColumnCanModify] = value;
                }
            }
        }
        
        /// Permission to allow deletion.
        public Boolean CanDelete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanDelete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanDelete) 
                            || (((Boolean)(this[this.myTable.ColumnCanDelete])) != value)))
                {
                    this[this.myTable.ColumnCanDelete] = value;
                }
            }
        }
        
        /// Permission to allow inquiry.
        public Boolean CanInquire
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanInquire.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanInquire) 
                            || (((Boolean)(this[this.myTable.ColumnCanInquire])) != value)))
                {
                    this[this.myTable.ColumnCanInquire] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTableName);
            this[this.myTable.ColumnCanCreate.Ordinal] = true;
            this[this.myTable.ColumnCanModify.Ordinal] = true;
            this[this.myTable.ColumnCanDelete.Ordinal] = true;
            this[this.myTable.ColumnCanInquire.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCanCreateNull()
        {
            return this.IsNull(this.myTable.ColumnCanCreate);
        }
        
        /// assign NULL value
        public void SetCanCreateNull()
        {
            this.SetNull(this.myTable.ColumnCanCreate);
        }
        
        /// test for NULL value
        public bool IsCanModifyNull()
        {
            return this.IsNull(this.myTable.ColumnCanModify);
        }
        
        /// assign NULL value
        public void SetCanModifyNull()
        {
            this.SetNull(this.myTable.ColumnCanModify);
        }
        
        /// test for NULL value
        public bool IsCanDeleteNull()
        {
            return this.IsNull(this.myTable.ColumnCanDelete);
        }
        
        /// assign NULL value
        public void SetCanDeleteNull()
        {
            this.SetNull(this.myTable.ColumnCanDelete);
        }
        
        /// test for NULL value
        public bool IsCanInquireNull()
        {
            return this.IsNull(this.myTable.ColumnCanInquire);
        }
        
        /// assign NULL value
        public void SetCanInquireNull()
        {
            this.SetNull(this.myTable.ColumnCanInquire);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Security mappings of users to Petra modules
    [Serializable()]
    public class SUserModuleAccessPermissionTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnModuleId;
        
        /// Permission to access this module
        public DataColumn ColumnCanAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SUserModuleAccessPermissionTable() : 
                base("SUserModuleAccessPermission")
        {
        }
        
        /// constructor
        public SUserModuleAccessPermissionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SUserModuleAccessPermissionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SUserModuleAccessPermissionRow this[int i]
        {
            get
            {
                return ((SUserModuleAccessPermissionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanAccessDBName()
        {
            return "s_can_access_l";
        }
        
        /// get help text for column
        public static string GetCanAccessHelp()
        {
            return "Permission to access this module";
        }
        
        /// get label of column
        public static string GetCanAccessLabel()
        {
            return "Can Access";
        }
        
        /// get display format for column
        public static short GetCanAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SUserModuleAccessPermission";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_user_module_access_permission";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "User Module Access Permission";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_module_id_c",
                    "s_can_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnCanAccess = this.Columns["s_can_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnModuleId};
        }
        
        /// get typed set of changes
        public SUserModuleAccessPermissionTable GetChangesTyped()
        {
            return ((SUserModuleAccessPermissionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SUserModuleAccessPermissionRow NewRowTyped(bool AWithDefaultValues)
        {
            SUserModuleAccessPermissionRow ret = ((SUserModuleAccessPermissionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SUserModuleAccessPermissionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SUserModuleAccessPermissionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnCanAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Security mappings of users to Petra modules
    [Serializable()]
    public class SUserModuleAccessPermissionRow : System.Data.DataRow
    {
        
        private SUserModuleAccessPermissionTable myTable;
        
        /// Constructor
        public SUserModuleAccessPermissionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SUserModuleAccessPermissionTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// Permission to access this module
        public Boolean CanAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanAccess) 
                            || (((Boolean)(this[this.myTable.ColumnCanAccess])) != value)))
                {
                    this[this.myTable.ColumnCanAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnModuleId);
            this[this.myTable.ColumnCanAccess.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCanAccessNull()
        {
            return this.IsNull(this.myTable.ColumnCanAccess);
        }
        
        /// assign NULL value
        public void SetCanAccessNull()
        {
            this.SetNull(this.myTable.ColumnCanAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Security mappings of users to Petra database
    [Serializable()]
    public class SUserTableAccessPermissionTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnTableName;
        
        /// Permission to allow creation.
        public DataColumn ColumnCanCreate;
        
        /// Permission to allow modification.
        public DataColumn ColumnCanModify;
        
        /// Permission to allow deletion.
        public DataColumn ColumnCanDelete;
        
        /// Permission to allow inquiry.
        public DataColumn ColumnCanInquire;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SUserTableAccessPermissionTable() : 
                base("SUserTableAccessPermission")
        {
        }
        
        /// constructor
        public SUserTableAccessPermissionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SUserTableAccessPermissionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SUserTableAccessPermissionRow this[int i]
        {
            get
            {
                return ((SUserTableAccessPermissionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTableNameDBName()
        {
            return "s_table_name_c";
        }
        
        /// get help text for column
        public static string GetTableNameHelp()
        {
            return "The name of the Table";
        }
        
        /// get label of column
        public static string GetTableNameLabel()
        {
            return "Table Name";
        }
        
        /// get character length for column
        public static short GetTableNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanCreateDBName()
        {
            return "s_can_create_l";
        }
        
        /// get help text for column
        public static string GetCanCreateHelp()
        {
            return "Permission to allow creation.";
        }
        
        /// get label of column
        public static string GetCanCreateLabel()
        {
            return "Can create";
        }
        
        /// get display format for column
        public static short GetCanCreateLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanModifyDBName()
        {
            return "s_can_modify_l";
        }
        
        /// get help text for column
        public static string GetCanModifyHelp()
        {
            return "Permission to allow modification.";
        }
        
        /// get label of column
        public static string GetCanModifyLabel()
        {
            return "Can modify";
        }
        
        /// get display format for column
        public static short GetCanModifyLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanDeleteDBName()
        {
            return "s_can_delete_l";
        }
        
        /// get help text for column
        public static string GetCanDeleteHelp()
        {
            return "Permission to allow deletion.";
        }
        
        /// get label of column
        public static string GetCanDeleteLabel()
        {
            return "Can delete";
        }
        
        /// get display format for column
        public static short GetCanDeleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanInquireDBName()
        {
            return "s_can_inquire_l";
        }
        
        /// get help text for column
        public static string GetCanInquireHelp()
        {
            return "Permission to allow inquiry.";
        }
        
        /// get label of column
        public static string GetCanInquireLabel()
        {
            return "Can inquire";
        }
        
        /// get display format for column
        public static short GetCanInquireLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SUserTableAccessPermission";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_user_table_access_permission";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "User Table Access Permission";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_table_name_c",
                    "s_can_create_l",
                    "s_can_modify_l",
                    "s_can_delete_l",
                    "s_can_inquire_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnTableName = this.Columns["s_table_name_c"];
            this.ColumnCanCreate = this.Columns["s_can_create_l"];
            this.ColumnCanModify = this.Columns["s_can_modify_l"];
            this.ColumnCanDelete = this.Columns["s_can_delete_l"];
            this.ColumnCanInquire = this.Columns["s_can_inquire_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnTableName};
        }
        
        /// get typed set of changes
        public SUserTableAccessPermissionTable GetChangesTyped()
        {
            return ((SUserTableAccessPermissionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SUserTableAccessPermissionRow NewRowTyped(bool AWithDefaultValues)
        {
            SUserTableAccessPermissionRow ret = ((SUserTableAccessPermissionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SUserTableAccessPermissionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SUserTableAccessPermissionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_table_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_create_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_modify_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_delete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_can_inquire_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnTableName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnCanCreate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanModify))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanDelete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCanInquire))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Security mappings of users to Petra database
    [Serializable()]
    public class SUserTableAccessPermissionRow : System.Data.DataRow
    {
        
        private SUserTableAccessPermissionTable myTable;
        
        /// Constructor
        public SUserTableAccessPermissionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SUserTableAccessPermissionTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String TableName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTableName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTableName) 
                            || (((String)(this[this.myTable.ColumnTableName])) != value)))
                {
                    this[this.myTable.ColumnTableName] = value;
                }
            }
        }
        
        /// Permission to allow creation.
        public Boolean CanCreate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanCreate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanCreate) 
                            || (((Boolean)(this[this.myTable.ColumnCanCreate])) != value)))
                {
                    this[this.myTable.ColumnCanCreate] = value;
                }
            }
        }
        
        /// Permission to allow modification.
        public Boolean CanModify
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanModify.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanModify) 
                            || (((Boolean)(this[this.myTable.ColumnCanModify])) != value)))
                {
                    this[this.myTable.ColumnCanModify] = value;
                }
            }
        }
        
        /// Permission to allow deletion.
        public Boolean CanDelete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanDelete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanDelete) 
                            || (((Boolean)(this[this.myTable.ColumnCanDelete])) != value)))
                {
                    this[this.myTable.ColumnCanDelete] = value;
                }
            }
        }
        
        /// Permission to allow inquiry.
        public Boolean CanInquire
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanInquire.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanInquire) 
                            || (((Boolean)(this[this.myTable.ColumnCanInquire])) != value)))
                {
                    this[this.myTable.ColumnCanInquire] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnTableName);
            this[this.myTable.ColumnCanCreate.Ordinal] = true;
            this[this.myTable.ColumnCanModify.Ordinal] = true;
            this[this.myTable.ColumnCanDelete.Ordinal] = true;
            this[this.myTable.ColumnCanInquire.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCanCreateNull()
        {
            return this.IsNull(this.myTable.ColumnCanCreate);
        }
        
        /// assign NULL value
        public void SetCanCreateNull()
        {
            this.SetNull(this.myTable.ColumnCanCreate);
        }
        
        /// test for NULL value
        public bool IsCanModifyNull()
        {
            return this.IsNull(this.myTable.ColumnCanModify);
        }
        
        /// assign NULL value
        public void SetCanModifyNull()
        {
            this.SetNull(this.myTable.ColumnCanModify);
        }
        
        /// test for NULL value
        public bool IsCanDeleteNull()
        {
            return this.IsNull(this.myTable.ColumnCanDelete);
        }
        
        /// assign NULL value
        public void SetCanDeleteNull()
        {
            this.SetNull(this.myTable.ColumnCanDelete);
        }
        
        /// test for NULL value
        public bool IsCanInquireNull()
        {
            return this.IsNull(this.myTable.ColumnCanInquire);
        }
        
        /// assign NULL value
        public void SetCanInquireNull()
        {
            this.SetNull(this.myTable.ColumnCanInquire);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Definitions of fields that are language specific.
    [Serializable()]
    public class SLanguageSpecificTable : TTypedDataTable
    {
        
        /// This is the code used to identify a language.
        public DataColumn ColumnLanguageCode;
        
        /// The language specific month name 1.
        public DataColumn ColumnMonthName1;
        
        /// The language specific month name 2.
        public DataColumn ColumnMonthName2;
        
        /// The language specific month name 3.
        public DataColumn ColumnMonthName3;
        
        /// The language specific month name 4.
        public DataColumn ColumnMonthName4;
        
        /// The language specific month name 5.
        public DataColumn ColumnMonthName5;
        
        /// The language specific month name 6.
        public DataColumn ColumnMonthName6;
        
        /// The language specific month name 7.
        public DataColumn ColumnMonthName7;
        
        /// The language specific month name 8.
        public DataColumn ColumnMonthName8;
        
        /// The language specific month name 9.
        public DataColumn ColumnMonthName9;
        
        /// The language specific month name 10.
        public DataColumn ColumnMonthName10;
        
        /// The language specific month name 11.
        public DataColumn ColumnMonthName11;
        
        /// The language specific month name 12.
        public DataColumn ColumnMonthName12;
        
        /// The language specific short month name 1.
        public DataColumn ColumnMonthNameShort1;
        
        /// The language specific short month name 2.
        public DataColumn ColumnMonthNameShort2;
        
        /// The language specific short month name 3.
        public DataColumn ColumnMonthNameShort3;
        
        /// The language specific short month name 4.
        public DataColumn ColumnMonthNameShort4;
        
        /// The language specific short month name 5.
        public DataColumn ColumnMonthNameShort5;
        
        /// The language specific short month name 6.
        public DataColumn ColumnMonthNameShort6;
        
        /// The language specific short month name 7.
        public DataColumn ColumnMonthNameShort7;
        
        /// The language specific short month name 8.
        public DataColumn ColumnMonthNameShort8;
        
        /// The language specific short month name 9.
        public DataColumn ColumnMonthNameShort9;
        
        /// The language specific short month name 10.
        public DataColumn ColumnMonthNameShort10;
        
        /// The language specific short month name 11.
        public DataColumn ColumnMonthNameShort11;
        
        /// The language specific short month name 12.
        public DataColumn ColumnMonthNameShort12;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SLanguageSpecificTable() : 
                base("SLanguageSpecific")
        {
        }
        
        /// constructor
        public SLanguageSpecificTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SLanguageSpecificTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SLanguageSpecificRow this[int i]
        {
            get
            {
                return ((SLanguageSpecificRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "s_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "Enter the language code";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language Code";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName1DBName()
        {
            return "s_month_name_c_1";
        }
        
        /// get help text for column
        public static string GetMonthName1Help()
        {
            return "Enter the name of the month for this language.";
        }
        
        /// get label of column
        public static string GetMonthName1Label()
        {
            return "Month Name";
        }
        
        /// get character length for column
        public static short GetMonthName1Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName2DBName()
        {
            return "s_month_name_c_2";
        }
        
        /// get help text for column
        public static string GetMonthName2Help()
        {
            return "The language specific month name 2.";
        }
        
        /// get label of column
        public static string GetMonthName2Label()
        {
            return "s_month_name_c_2";
        }
        
        /// get character length for column
        public static short GetMonthName2Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName3DBName()
        {
            return "s_month_name_c_3";
        }
        
        /// get help text for column
        public static string GetMonthName3Help()
        {
            return "The language specific month name 3.";
        }
        
        /// get label of column
        public static string GetMonthName3Label()
        {
            return "s_month_name_c_3";
        }
        
        /// get character length for column
        public static short GetMonthName3Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName4DBName()
        {
            return "s_month_name_c_4";
        }
        
        /// get help text for column
        public static string GetMonthName4Help()
        {
            return "The language specific month name 4.";
        }
        
        /// get label of column
        public static string GetMonthName4Label()
        {
            return "s_month_name_c_4";
        }
        
        /// get character length for column
        public static short GetMonthName4Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName5DBName()
        {
            return "s_month_name_c_5";
        }
        
        /// get help text for column
        public static string GetMonthName5Help()
        {
            return "The language specific month name 5.";
        }
        
        /// get label of column
        public static string GetMonthName5Label()
        {
            return "s_month_name_c_5";
        }
        
        /// get character length for column
        public static short GetMonthName5Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName6DBName()
        {
            return "s_month_name_c_6";
        }
        
        /// get help text for column
        public static string GetMonthName6Help()
        {
            return "The language specific month name 6.";
        }
        
        /// get label of column
        public static string GetMonthName6Label()
        {
            return "s_month_name_c_6";
        }
        
        /// get character length for column
        public static short GetMonthName6Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName7DBName()
        {
            return "s_month_name_c_7";
        }
        
        /// get help text for column
        public static string GetMonthName7Help()
        {
            return "The language specific month name 7.";
        }
        
        /// get label of column
        public static string GetMonthName7Label()
        {
            return "s_month_name_c_7";
        }
        
        /// get character length for column
        public static short GetMonthName7Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName8DBName()
        {
            return "s_month_name_c_8";
        }
        
        /// get help text for column
        public static string GetMonthName8Help()
        {
            return "The language specific month name 8.";
        }
        
        /// get label of column
        public static string GetMonthName8Label()
        {
            return "s_month_name_c_8";
        }
        
        /// get character length for column
        public static short GetMonthName8Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName9DBName()
        {
            return "s_month_name_c_9";
        }
        
        /// get help text for column
        public static string GetMonthName9Help()
        {
            return "The language specific month name 9.";
        }
        
        /// get label of column
        public static string GetMonthName9Label()
        {
            return "s_month_name_c_9";
        }
        
        /// get character length for column
        public static short GetMonthName9Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName10DBName()
        {
            return "s_month_name_c_10";
        }
        
        /// get help text for column
        public static string GetMonthName10Help()
        {
            return "The language specific month name 10.";
        }
        
        /// get label of column
        public static string GetMonthName10Label()
        {
            return "s_month_name_c_10";
        }
        
        /// get character length for column
        public static short GetMonthName10Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName11DBName()
        {
            return "s_month_name_c_11";
        }
        
        /// get help text for column
        public static string GetMonthName11Help()
        {
            return "The language specific month name 11.";
        }
        
        /// get label of column
        public static string GetMonthName11Label()
        {
            return "s_month_name_c_11";
        }
        
        /// get character length for column
        public static short GetMonthName11Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthName12DBName()
        {
            return "s_month_name_c_12";
        }
        
        /// get help text for column
        public static string GetMonthName12Help()
        {
            return "The language specific month name 12.";
        }
        
        /// get label of column
        public static string GetMonthName12Label()
        {
            return "s_month_name_c_12";
        }
        
        /// get character length for column
        public static short GetMonthName12Length()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort1DBName()
        {
            return "s_month_name_short_c_1";
        }
        
        /// get help text for column
        public static string GetMonthNameShort1Help()
        {
            return "Enter the short name for the month for this language.";
        }
        
        /// get label of column
        public static string GetMonthNameShort1Label()
        {
            return "s_month_name_short_c_1";
        }
        
        /// get character length for column
        public static short GetMonthNameShort1Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort2DBName()
        {
            return "s_month_name_short_c_2";
        }
        
        /// get help text for column
        public static string GetMonthNameShort2Help()
        {
            return "The language specific short month name 2.";
        }
        
        /// get label of column
        public static string GetMonthNameShort2Label()
        {
            return "s_month_name_short_c_2";
        }
        
        /// get character length for column
        public static short GetMonthNameShort2Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort3DBName()
        {
            return "s_month_name_short_c_3";
        }
        
        /// get help text for column
        public static string GetMonthNameShort3Help()
        {
            return "The language specific short month name 3.";
        }
        
        /// get label of column
        public static string GetMonthNameShort3Label()
        {
            return "s_month_name_short_c_3";
        }
        
        /// get character length for column
        public static short GetMonthNameShort3Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort4DBName()
        {
            return "s_month_name_short_c_4";
        }
        
        /// get help text for column
        public static string GetMonthNameShort4Help()
        {
            return "The language specific short month name 4.";
        }
        
        /// get label of column
        public static string GetMonthNameShort4Label()
        {
            return "s_month_name_short_c_4";
        }
        
        /// get character length for column
        public static short GetMonthNameShort4Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort5DBName()
        {
            return "s_month_name_short_c_5";
        }
        
        /// get help text for column
        public static string GetMonthNameShort5Help()
        {
            return "The language specific short month name 5.";
        }
        
        /// get label of column
        public static string GetMonthNameShort5Label()
        {
            return "s_month_name_short_c_5";
        }
        
        /// get character length for column
        public static short GetMonthNameShort5Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort6DBName()
        {
            return "s_month_name_short_c_6";
        }
        
        /// get help text for column
        public static string GetMonthNameShort6Help()
        {
            return "The language specific short month name 6.";
        }
        
        /// get label of column
        public static string GetMonthNameShort6Label()
        {
            return "s_month_name_short_c_6";
        }
        
        /// get character length for column
        public static short GetMonthNameShort6Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort7DBName()
        {
            return "s_month_name_short_c_7";
        }
        
        /// get help text for column
        public static string GetMonthNameShort7Help()
        {
            return "The language specific short month name 7.";
        }
        
        /// get label of column
        public static string GetMonthNameShort7Label()
        {
            return "s_month_name_short_c_7";
        }
        
        /// get character length for column
        public static short GetMonthNameShort7Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort8DBName()
        {
            return "s_month_name_short_c_8";
        }
        
        /// get help text for column
        public static string GetMonthNameShort8Help()
        {
            return "The language specific short month name 8.";
        }
        
        /// get label of column
        public static string GetMonthNameShort8Label()
        {
            return "s_month_name_short_c_8";
        }
        
        /// get character length for column
        public static short GetMonthNameShort8Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort9DBName()
        {
            return "s_month_name_short_c_9";
        }
        
        /// get help text for column
        public static string GetMonthNameShort9Help()
        {
            return "The language specific short month name 9.";
        }
        
        /// get label of column
        public static string GetMonthNameShort9Label()
        {
            return "s_month_name_short_c_9";
        }
        
        /// get character length for column
        public static short GetMonthNameShort9Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort10DBName()
        {
            return "s_month_name_short_c_10";
        }
        
        /// get help text for column
        public static string GetMonthNameShort10Help()
        {
            return "The language specific short month name 10.";
        }
        
        /// get label of column
        public static string GetMonthNameShort10Label()
        {
            return "s_month_name_short_c_10";
        }
        
        /// get character length for column
        public static short GetMonthNameShort10Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort11DBName()
        {
            return "s_month_name_short_c_11";
        }
        
        /// get help text for column
        public static string GetMonthNameShort11Help()
        {
            return "The language specific short month name 11.";
        }
        
        /// get label of column
        public static string GetMonthNameShort11Label()
        {
            return "s_month_name_short_c_11";
        }
        
        /// get character length for column
        public static short GetMonthNameShort11Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthNameShort12DBName()
        {
            return "s_month_name_short_c_12";
        }
        
        /// get help text for column
        public static string GetMonthNameShort12Help()
        {
            return "The language specific short month name 12.";
        }
        
        /// get label of column
        public static string GetMonthNameShort12Label()
        {
            return "s_month_name_short_c_12";
        }
        
        /// get character length for column
        public static short GetMonthNameShort12Length()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SLanguageSpecific";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_language_specific";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Language Specifics";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_language_code_c",
                    "s_month_name_c_1",
                    "s_month_name_c_2",
                    "s_month_name_c_3",
                    "s_month_name_c_4",
                    "s_month_name_c_5",
                    "s_month_name_c_6",
                    "s_month_name_c_7",
                    "s_month_name_c_8",
                    "s_month_name_c_9",
                    "s_month_name_c_10",
                    "s_month_name_c_11",
                    "s_month_name_c_12",
                    "s_month_name_short_c_1",
                    "s_month_name_short_c_2",
                    "s_month_name_short_c_3",
                    "s_month_name_short_c_4",
                    "s_month_name_short_c_5",
                    "s_month_name_short_c_6",
                    "s_month_name_short_c_7",
                    "s_month_name_short_c_8",
                    "s_month_name_short_c_9",
                    "s_month_name_short_c_10",
                    "s_month_name_short_c_11",
                    "s_month_name_short_c_12",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLanguageCode = this.Columns["s_language_code_c"];
            this.ColumnMonthName1 = this.Columns["s_month_name_c_1"];
            this.ColumnMonthName2 = this.Columns["s_month_name_c_2"];
            this.ColumnMonthName3 = this.Columns["s_month_name_c_3"];
            this.ColumnMonthName4 = this.Columns["s_month_name_c_4"];
            this.ColumnMonthName5 = this.Columns["s_month_name_c_5"];
            this.ColumnMonthName6 = this.Columns["s_month_name_c_6"];
            this.ColumnMonthName7 = this.Columns["s_month_name_c_7"];
            this.ColumnMonthName8 = this.Columns["s_month_name_c_8"];
            this.ColumnMonthName9 = this.Columns["s_month_name_c_9"];
            this.ColumnMonthName10 = this.Columns["s_month_name_c_10"];
            this.ColumnMonthName11 = this.Columns["s_month_name_c_11"];
            this.ColumnMonthName12 = this.Columns["s_month_name_c_12"];
            this.ColumnMonthNameShort1 = this.Columns["s_month_name_short_c_1"];
            this.ColumnMonthNameShort2 = this.Columns["s_month_name_short_c_2"];
            this.ColumnMonthNameShort3 = this.Columns["s_month_name_short_c_3"];
            this.ColumnMonthNameShort4 = this.Columns["s_month_name_short_c_4"];
            this.ColumnMonthNameShort5 = this.Columns["s_month_name_short_c_5"];
            this.ColumnMonthNameShort6 = this.Columns["s_month_name_short_c_6"];
            this.ColumnMonthNameShort7 = this.Columns["s_month_name_short_c_7"];
            this.ColumnMonthNameShort8 = this.Columns["s_month_name_short_c_8"];
            this.ColumnMonthNameShort9 = this.Columns["s_month_name_short_c_9"];
            this.ColumnMonthNameShort10 = this.Columns["s_month_name_short_c_10"];
            this.ColumnMonthNameShort11 = this.Columns["s_month_name_short_c_11"];
            this.ColumnMonthNameShort12 = this.Columns["s_month_name_short_c_12"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLanguageCode};
        }
        
        /// get typed set of changes
        public SLanguageSpecificTable GetChangesTyped()
        {
            return ((SLanguageSpecificTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SLanguageSpecificRow NewRowTyped(bool AWithDefaultValues)
        {
            SLanguageSpecificRow ret = ((SLanguageSpecificRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SLanguageSpecificRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SLanguageSpecificRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_1", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_2", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_3", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_4", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_5", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_6", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_7", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_8", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_9", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_10", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_11", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_c_12", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_1", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_2", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_3", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_4", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_5", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_6", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_7", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_8", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_9", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_10", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_11", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_name_short_c_12", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnMonthName1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName4))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName5))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName6))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName7))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName8))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName9))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName10))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName11))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthName12))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnMonthNameShort1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort4))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort5))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort6))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort7))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort8))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort9))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort10))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort11))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnMonthNameShort12))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 6);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Definitions of fields that are language specific.
    [Serializable()]
    public class SLanguageSpecificRow : System.Data.DataRow
    {
        
        private SLanguageSpecificTable myTable;
        
        /// Constructor
        public SLanguageSpecificRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SLanguageSpecificTable)(this.Table));
        }
        
        /// This is the code used to identify a language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// The language specific month name 1.
        public String MonthName1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName1) 
                            || (((String)(this[this.myTable.ColumnMonthName1])) != value)))
                {
                    this[this.myTable.ColumnMonthName1] = value;
                }
            }
        }
        
        /// The language specific month name 2.
        public String MonthName2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName2) 
                            || (((String)(this[this.myTable.ColumnMonthName2])) != value)))
                {
                    this[this.myTable.ColumnMonthName2] = value;
                }
            }
        }
        
        /// The language specific month name 3.
        public String MonthName3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName3) 
                            || (((String)(this[this.myTable.ColumnMonthName3])) != value)))
                {
                    this[this.myTable.ColumnMonthName3] = value;
                }
            }
        }
        
        /// The language specific month name 4.
        public String MonthName4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName4) 
                            || (((String)(this[this.myTable.ColumnMonthName4])) != value)))
                {
                    this[this.myTable.ColumnMonthName4] = value;
                }
            }
        }
        
        /// The language specific month name 5.
        public String MonthName5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName5) 
                            || (((String)(this[this.myTable.ColumnMonthName5])) != value)))
                {
                    this[this.myTable.ColumnMonthName5] = value;
                }
            }
        }
        
        /// The language specific month name 6.
        public String MonthName6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName6) 
                            || (((String)(this[this.myTable.ColumnMonthName6])) != value)))
                {
                    this[this.myTable.ColumnMonthName6] = value;
                }
            }
        }
        
        /// The language specific month name 7.
        public String MonthName7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName7) 
                            || (((String)(this[this.myTable.ColumnMonthName7])) != value)))
                {
                    this[this.myTable.ColumnMonthName7] = value;
                }
            }
        }
        
        /// The language specific month name 8.
        public String MonthName8
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName8.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName8) 
                            || (((String)(this[this.myTable.ColumnMonthName8])) != value)))
                {
                    this[this.myTable.ColumnMonthName8] = value;
                }
            }
        }
        
        /// The language specific month name 9.
        public String MonthName9
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName9.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName9) 
                            || (((String)(this[this.myTable.ColumnMonthName9])) != value)))
                {
                    this[this.myTable.ColumnMonthName9] = value;
                }
            }
        }
        
        /// The language specific month name 10.
        public String MonthName10
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName10.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName10) 
                            || (((String)(this[this.myTable.ColumnMonthName10])) != value)))
                {
                    this[this.myTable.ColumnMonthName10] = value;
                }
            }
        }
        
        /// The language specific month name 11.
        public String MonthName11
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName11.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName11) 
                            || (((String)(this[this.myTable.ColumnMonthName11])) != value)))
                {
                    this[this.myTable.ColumnMonthName11] = value;
                }
            }
        }
        
        /// The language specific month name 12.
        public String MonthName12
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthName12.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthName12) 
                            || (((String)(this[this.myTable.ColumnMonthName12])) != value)))
                {
                    this[this.myTable.ColumnMonthName12] = value;
                }
            }
        }
        
        /// The language specific short month name 1.
        public String MonthNameShort1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort1) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort1])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort1] = value;
                }
            }
        }
        
        /// The language specific short month name 2.
        public String MonthNameShort2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort2) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort2])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort2] = value;
                }
            }
        }
        
        /// The language specific short month name 3.
        public String MonthNameShort3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort3) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort3])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort3] = value;
                }
            }
        }
        
        /// The language specific short month name 4.
        public String MonthNameShort4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort4) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort4])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort4] = value;
                }
            }
        }
        
        /// The language specific short month name 5.
        public String MonthNameShort5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort5) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort5])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort5] = value;
                }
            }
        }
        
        /// The language specific short month name 6.
        public String MonthNameShort6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort6) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort6])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort6] = value;
                }
            }
        }
        
        /// The language specific short month name 7.
        public String MonthNameShort7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort7) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort7])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort7] = value;
                }
            }
        }
        
        /// The language specific short month name 8.
        public String MonthNameShort8
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort8.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort8) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort8])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort8] = value;
                }
            }
        }
        
        /// The language specific short month name 9.
        public String MonthNameShort9
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort9.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort9) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort9])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort9] = value;
                }
            }
        }
        
        /// The language specific short month name 10.
        public String MonthNameShort10
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort10.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort10) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort10])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort10] = value;
                }
            }
        }
        
        /// The language specific short month name 11.
        public String MonthNameShort11
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort11.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort11) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort11])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort11] = value;
                }
            }
        }
        
        /// The language specific short month name 12.
        public String MonthNameShort12
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthNameShort12.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthNameShort12) 
                            || (((String)(this[this.myTable.ColumnMonthNameShort12])) != value)))
                {
                    this[this.myTable.ColumnMonthNameShort12] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLanguageCode.Ordinal] = "99";
            this.SetNull(this.myTable.ColumnMonthName1);
            this.SetNull(this.myTable.ColumnMonthName2);
            this.SetNull(this.myTable.ColumnMonthName3);
            this.SetNull(this.myTable.ColumnMonthName4);
            this.SetNull(this.myTable.ColumnMonthName5);
            this.SetNull(this.myTable.ColumnMonthName6);
            this.SetNull(this.myTable.ColumnMonthName7);
            this.SetNull(this.myTable.ColumnMonthName8);
            this.SetNull(this.myTable.ColumnMonthName9);
            this.SetNull(this.myTable.ColumnMonthName10);
            this.SetNull(this.myTable.ColumnMonthName11);
            this.SetNull(this.myTable.ColumnMonthName12);
            this.SetNull(this.myTable.ColumnMonthNameShort1);
            this.SetNull(this.myTable.ColumnMonthNameShort2);
            this.SetNull(this.myTable.ColumnMonthNameShort3);
            this.SetNull(this.myTable.ColumnMonthNameShort4);
            this.SetNull(this.myTable.ColumnMonthNameShort5);
            this.SetNull(this.myTable.ColumnMonthNameShort6);
            this.SetNull(this.myTable.ColumnMonthNameShort7);
            this.SetNull(this.myTable.ColumnMonthNameShort8);
            this.SetNull(this.myTable.ColumnMonthNameShort9);
            this.SetNull(this.myTable.ColumnMonthNameShort10);
            this.SetNull(this.myTable.ColumnMonthNameShort11);
            this.SetNull(this.myTable.ColumnMonthNameShort12);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Log file of all the log in attempts to the system
    [Serializable()]
    public class SLoginTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one.
        public DataColumn ColumnUserId;
        
        /// This is the tty line on which the terminal is located on computer.
        public DataColumn ColumnLoginTtyLine;
        
        /// The time a user logged in.
        public DataColumn ColumnLoginTime;
        
        /// The date a user logged in.
        public DataColumn ColumnLoginDate;
        
        /// Description of the login attempt.
        public DataColumn ColumnLoginStatus;
        
        /// The time a user logged out.
        public DataColumn ColumnLogoutTime;
        
        /// The date a user logged out.
        public DataColumn ColumnLogoutDate;
        
        /// Petra process ID; this is a unique key
        public DataColumn ColumnLoginProcessId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SLoginTable() : 
                base("SLogin")
        {
        }
        
        /// constructor
        public SLoginTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SLoginTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SLoginRow this[int i]
        {
            get
            {
                return ((SLoginRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one.";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginTtyLineDBName()
        {
            return "s_login_tty_line_c";
        }
        
        /// get help text for column
        public static string GetLoginTtyLineHelp()
        {
            return "This is the tty line on which the terminal is located on computer.";
        }
        
        /// get label of column
        public static string GetLoginTtyLineLabel()
        {
            return "TTY Line";
        }
        
        /// get character length for column
        public static short GetLoginTtyLineLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginTimeDBName()
        {
            return "s_login_time_i";
        }
        
        /// get help text for column
        public static string GetLoginTimeHelp()
        {
            return "The time a user logged in.";
        }
        
        /// get label of column
        public static string GetLoginTimeLabel()
        {
            return "Login Time";
        }
        
        /// get display format for column
        public static short GetLoginTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginDateDBName()
        {
            return "s_login_date_d";
        }
        
        /// get help text for column
        public static string GetLoginDateHelp()
        {
            return "The date a user logged in.";
        }
        
        /// get label of column
        public static string GetLoginDateLabel()
        {
            return "Login Date";
        }
        
        /// get display format for column
        public static short GetLoginDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginStatusDBName()
        {
            return "s_login_status_c";
        }
        
        /// get help text for column
        public static string GetLoginStatusHelp()
        {
            return "Description of the login attempt.";
        }
        
        /// get label of column
        public static string GetLoginStatusLabel()
        {
            return "Login Status";
        }
        
        /// get character length for column
        public static short GetLoginStatusLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLogoutTimeDBName()
        {
            return "s_logout_time_i";
        }
        
        /// get help text for column
        public static string GetLogoutTimeHelp()
        {
            return "The time a user logged out.";
        }
        
        /// get label of column
        public static string GetLogoutTimeLabel()
        {
            return "Logout Time";
        }
        
        /// get display format for column
        public static short GetLogoutTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLogoutDateDBName()
        {
            return "s_logout_date_d";
        }
        
        /// get help text for column
        public static string GetLogoutDateHelp()
        {
            return "The date a user logged out.";
        }
        
        /// get label of column
        public static string GetLogoutDateLabel()
        {
            return "Logout Date";
        }
        
        /// get display format for column
        public static short GetLogoutDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginProcessIdDBName()
        {
            return "s_login_process_id_r";
        }
        
        /// get help text for column
        public static string GetLoginProcessIdHelp()
        {
            return "Petra process ID; this is a unique key";
        }
        
        /// get label of column
        public static string GetLoginProcessIdLabel()
        {
            return "s_login_process_id_r";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SLogin";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_login";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Login";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    3,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_login_tty_line_c",
                    "s_login_time_i",
                    "s_login_date_d",
                    "s_login_status_c",
                    "s_logout_time_i",
                    "s_logout_date_d",
                    "s_login_process_id_r",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnLoginTtyLine = this.Columns["s_login_tty_line_c"];
            this.ColumnLoginTime = this.Columns["s_login_time_i"];
            this.ColumnLoginDate = this.Columns["s_login_date_d"];
            this.ColumnLoginStatus = this.Columns["s_login_status_c"];
            this.ColumnLogoutTime = this.Columns["s_logout_time_i"];
            this.ColumnLogoutDate = this.Columns["s_logout_date_d"];
            this.ColumnLoginProcessId = this.Columns["s_login_process_id_r"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnLoginDate,
                    this.ColumnLoginTime};
        }
        
        /// get typed set of changes
        public SLoginTable GetChangesTyped()
        {
            return ((SLoginTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SLoginRow NewRowTyped(bool AWithDefaultValues)
        {
            SLoginRow ret = ((SLoginRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SLoginRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SLoginRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_login_tty_line_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_login_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_login_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_login_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_logout_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_logout_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_login_process_id_r", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnLoginTtyLine))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLoginTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLoginDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLoginStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnLogoutTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLogoutDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLoginProcessId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Log file of all the log in attempts to the system
    [Serializable()]
    public class SLoginRow : System.Data.DataRow
    {
        
        private SLoginTable myTable;
        
        /// Constructor
        public SLoginRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SLoginTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one.
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// This is the tty line on which the terminal is located on computer.
        public String LoginTtyLine
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginTtyLine.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginTtyLine) 
                            || (((String)(this[this.myTable.ColumnLoginTtyLine])) != value)))
                {
                    this[this.myTable.ColumnLoginTtyLine] = value;
                }
            }
        }
        
        /// The time a user logged in.
        public Int32 LoginTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginTime) 
                            || (((Int32)(this[this.myTable.ColumnLoginTime])) != value)))
                {
                    this[this.myTable.ColumnLoginTime] = value;
                }
            }
        }
        
        /// The date a user logged in.
        public System.DateTime LoginDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnLoginDate])) != value)))
                {
                    this[this.myTable.ColumnLoginDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime LoginDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLoginDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime LoginDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLoginDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Description of the login attempt.
        public String LoginStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginStatus) 
                            || (((String)(this[this.myTable.ColumnLoginStatus])) != value)))
                {
                    this[this.myTable.ColumnLoginStatus] = value;
                }
            }
        }
        
        /// The time a user logged out.
        public Int32 LogoutTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLogoutTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLogoutTime) 
                            || (((Int32)(this[this.myTable.ColumnLogoutTime])) != value)))
                {
                    this[this.myTable.ColumnLogoutTime] = value;
                }
            }
        }
        
        /// The date a user logged out.
        public System.DateTime LogoutDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLogoutDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLogoutDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnLogoutDate])) != value)))
                {
                    this[this.myTable.ColumnLogoutDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime LogoutDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLogoutDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime LogoutDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnLogoutDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Petra process ID; this is a unique key
        public Int32 LoginProcessId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginProcessId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginProcessId) 
                            || (((Int32)(this[this.myTable.ColumnLoginProcessId])) != value)))
                {
                    this[this.myTable.ColumnLoginProcessId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnLoginTtyLine);
            this[this.myTable.ColumnLoginTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLoginDate);
            this.SetNull(this.myTable.ColumnLoginStatus);
            this[this.myTable.ColumnLogoutTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLogoutDate);
            this.SetNull(this.myTable.ColumnLoginProcessId);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsLoginTtyLineNull()
        {
            return this.IsNull(this.myTable.ColumnLoginTtyLine);
        }
        
        /// assign NULL value
        public void SetLoginTtyLineNull()
        {
            this.SetNull(this.myTable.ColumnLoginTtyLine);
        }
        
        /// test for NULL value
        public bool IsLoginStatusNull()
        {
            return this.IsNull(this.myTable.ColumnLoginStatus);
        }
        
        /// assign NULL value
        public void SetLoginStatusNull()
        {
            this.SetNull(this.myTable.ColumnLoginStatus);
        }
        
        /// test for NULL value
        public bool IsLogoutTimeNull()
        {
            return this.IsNull(this.myTable.ColumnLogoutTime);
        }
        
        /// assign NULL value
        public void SetLogoutTimeNull()
        {
            this.SetNull(this.myTable.ColumnLogoutTime);
        }
        
        /// test for NULL value
        public bool IsLogoutDateNull()
        {
            return this.IsNull(this.myTable.ColumnLogoutDate);
        }
        
        /// assign NULL value
        public void SetLogoutDateNull()
        {
            this.SetNull(this.myTable.ColumnLogoutDate);
        }
        
        /// test for NULL value
        public bool IsLoginProcessIdNull()
        {
            return this.IsNull(this.myTable.ColumnLoginProcessId);
        }
        
        /// assign NULL value
        public void SetLoginProcessIdNull()
        {
            this.SetNull(this.myTable.ColumnLoginProcessId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of logon messages by language
    [Serializable()]
    public class SLogonMessageTable : TTypedDataTable
    {
        
        /// This is the code used to identify a language.
        public DataColumn ColumnLanguageCode;
        
        /// Message displayed when a user logs onto to the system
        public DataColumn ColumnLogonMessage;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SLogonMessageTable() : 
                base("SLogonMessage")
        {
        }
        
        /// constructor
        public SLogonMessageTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SLogonMessageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SLogonMessageRow this[int i]
        {
            get
            {
                return ((SLogonMessageRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "s_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "Enter the language code";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language Code";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLogonMessageDBName()
        {
            return "s_logon_message_c";
        }
        
        /// get help text for column
        public static string GetLogonMessageHelp()
        {
            return "Enter the Logon Message";
        }
        
        /// get label of column
        public static string GetLogonMessageLabel()
        {
            return "Logon Message";
        }
        
        /// get character length for column
        public static short GetLogonMessageLength()
        {
            return 150;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SLogonMessage";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_logon_message";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Logon Message";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_language_code_c",
                    "s_logon_message_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLanguageCode = this.Columns["s_language_code_c"];
            this.ColumnLogonMessage = this.Columns["s_logon_message_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLanguageCode};
        }
        
        /// get typed set of changes
        public SLogonMessageTable GetChangesTyped()
        {
            return ((SLogonMessageTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SLogonMessageRow NewRowTyped(bool AWithDefaultValues)
        {
            SLogonMessageRow ret = ((SLogonMessageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SLogonMessageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SLogonMessageRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_logon_message_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnLogonMessage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 300);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of logon messages by language
    [Serializable()]
    public class SLogonMessageRow : System.Data.DataRow
    {
        
        private SLogonMessageTable myTable;
        
        /// Constructor
        public SLogonMessageRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SLogonMessageTable)(this.Table));
        }
        
        /// This is the code used to identify a language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// Message displayed when a user logs onto to the system
        public String LogonMessage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLogonMessage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLogonMessage) 
                            || (((String)(this[this.myTable.ColumnLogonMessage])) != value)))
                {
                    this[this.myTable.ColumnLogonMessage] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLanguageCode.Ordinal] = "99";
            this.SetNull(this.myTable.ColumnLogonMessage);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsLogonMessageNull()
        {
            return this.IsNull(this.myTable.ColumnLogonMessage);
        }
        
        /// assign NULL value
        public void SetLogonMessageNull()
        {
            this.SetNull(this.myTable.ColumnLogonMessage);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Logs each patch procedure that is run
    [Serializable()]
    public class SPatchLogTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnPatchName;
        
        /// The user who ran the patch
        public DataColumn ColumnUserId;
        
        /// The date the patch was run.
        public DataColumn ColumnDateRun;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SPatchLogTable() : 
                base("SPatchLog")
        {
        }
        
        /// constructor
        public SPatchLogTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SPatchLogTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SPatchLogRow this[int i]
        {
            get
            {
                return ((SPatchLogRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPatchNameDBName()
        {
            return "s_patch_name_c";
        }
        
        /// get help text for column
        public static string GetPatchNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPatchNameLabel()
        {
            return "s_patch_name_c";
        }
        
        /// get character length for column
        public static short GetPatchNameLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "The user who ran the patch";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "s_user_id_c";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateRunDBName()
        {
            return "s_date_run_d";
        }
        
        /// get help text for column
        public static string GetDateRunHelp()
        {
            return "The date the patch was run.";
        }
        
        /// get label of column
        public static string GetDateRunLabel()
        {
            return "s_date_run_d";
        }
        
        /// get display format for column
        public static short GetDateRunLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SPatchLog";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_patch_log";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "s_patch_log";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_patch_name_c",
                    "s_user_id_c",
                    "s_date_run_d",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPatchName = this.Columns["s_patch_name_c"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDateRun = this.Columns["s_date_run_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPatchName};
        }
        
        /// get typed set of changes
        public SPatchLogTable GetChangesTyped()
        {
            return ((SPatchLogTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SPatchLogRow NewRowTyped(bool AWithDefaultValues)
        {
            SPatchLogRow ret = ((SPatchLogRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SPatchLogRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SPatchLogRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_patch_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_run_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPatchName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateRun))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Logs each patch procedure that is run
    [Serializable()]
    public class SPatchLogRow : System.Data.DataRow
    {
        
        private SPatchLogTable myTable;
        
        /// Constructor
        public SPatchLogRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SPatchLogTable)(this.Table));
        }
        
        /// 
        public String PatchName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPatchName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPatchName) 
                            || (((String)(this[this.myTable.ColumnPatchName])) != value)))
                {
                    this[this.myTable.ColumnPatchName] = value;
                }
            }
        }
        
        /// The user who ran the patch
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// The date the patch was run.
        public System.DateTime DateRun
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateRun.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateRun) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateRun])) != value)))
                {
                    this[this.myTable.ColumnDateRun] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateRunLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateRun], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateRunHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateRun.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPatchName);
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnDateRun);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Contains the titles of reports that should be archived, not deleted, when Purge Reports is run.
    [Serializable()]
    public class SReportsToArchiveTable : TTypedDataTable
    {
        
        /// Title of the Report
        public DataColumn ColumnReportTitle;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SReportsToArchiveTable() : 
                base("SReportsToArchive")
        {
        }
        
        /// constructor
        public SReportsToArchiveTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SReportsToArchiveTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SReportsToArchiveRow this[int i]
        {
            get
            {
                return ((SReportsToArchiveRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportTitleDBName()
        {
            return "s_report_title_c";
        }
        
        /// get help text for column
        public static string GetReportTitleHelp()
        {
            return "Title of the Report";
        }
        
        /// get label of column
        public static string GetReportTitleLabel()
        {
            return "Report Title";
        }
        
        /// get character length for column
        public static short GetReportTitleLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SReportsToArchive";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_reports_to_archive";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Reports to archive";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_report_title_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnReportTitle = this.Columns["s_report_title_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnReportTitle};
        }
        
        /// get typed set of changes
        public SReportsToArchiveTable GetChangesTyped()
        {
            return ((SReportsToArchiveTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SReportsToArchiveRow NewRowTyped(bool AWithDefaultValues)
        {
            SReportsToArchiveRow ret = ((SReportsToArchiveRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SReportsToArchiveRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SReportsToArchiveRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_report_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnReportTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Contains the titles of reports that should be archived, not deleted, when Purge Reports is run.
    [Serializable()]
    public class SReportsToArchiveRow : System.Data.DataRow
    {
        
        private SReportsToArchiveTable myTable;
        
        /// Constructor
        public SReportsToArchiveRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SReportsToArchiveTable)(this.Table));
        }
        
        /// Title of the Report
        public String ReportTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportTitle) 
                            || (((String)(this[this.myTable.ColumnReportTitle])) != value)))
                {
                    this[this.myTable.ColumnReportTitle] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnReportTitle);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Lists the reports that were generated to file and the file name.
    [Serializable()]
    public class SReportFileTable : TTypedDataTable
    {
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// Name of the report text file
        public DataColumn ColumnReportFileName;
        
        /// Name of the report generating program
        public DataColumn ColumnRpg;
        
        /// Date the report was generated
        public DataColumn ColumnReportDate;
        
        /// Time the report was generated.
        public DataColumn ColumnReportTime;
        
        /// Title of the Report
        public DataColumn ColumnReportTitle;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SReportFileTable() : 
                base("SReportFile")
        {
        }
        
        /// constructor
        public SReportFileTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SReportFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SReportFileRow this[int i]
        {
            get
            {
                return ((SReportFileRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This identifies who the current user is";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportFileNameDBName()
        {
            return "s_report_file_name_c";
        }
        
        /// get help text for column
        public static string GetReportFileNameHelp()
        {
            return "Name of the report text file";
        }
        
        /// get label of column
        public static string GetReportFileNameLabel()
        {
            return "Report File Name";
        }
        
        /// get character length for column
        public static short GetReportFileNameLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRpgDBName()
        {
            return "s_rpg_c";
        }
        
        /// get help text for column
        public static string GetRpgHelp()
        {
            return "Name of the report generating program";
        }
        
        /// get label of column
        public static string GetRpgLabel()
        {
            return "Report Program Generator";
        }
        
        /// get character length for column
        public static short GetRpgLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportDateDBName()
        {
            return "s_report_date_d";
        }
        
        /// get help text for column
        public static string GetReportDateHelp()
        {
            return "Date the report was generated";
        }
        
        /// get label of column
        public static string GetReportDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetReportDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportTimeDBName()
        {
            return "s_report_time_i";
        }
        
        /// get help text for column
        public static string GetReportTimeHelp()
        {
            return "Time the report was generated.";
        }
        
        /// get label of column
        public static string GetReportTimeLabel()
        {
            return "Report Time";
        }
        
        /// get display format for column
        public static short GetReportTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportTitleDBName()
        {
            return "s_report_title_c";
        }
        
        /// get help text for column
        public static string GetReportTitleHelp()
        {
            return "Title of the Report";
        }
        
        /// get label of column
        public static string GetReportTitleLabel()
        {
            return "Report Title";
        }
        
        /// get character length for column
        public static short GetReportTitleLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SReportFile";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_report_file";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Report File";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_report_file_name_c",
                    "s_rpg_c",
                    "s_report_date_d",
                    "s_report_time_i",
                    "s_report_title_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnReportFileName = this.Columns["s_report_file_name_c"];
            this.ColumnRpg = this.Columns["s_rpg_c"];
            this.ColumnReportDate = this.Columns["s_report_date_d"];
            this.ColumnReportTime = this.Columns["s_report_time_i"];
            this.ColumnReportTitle = this.Columns["s_report_title_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnReportFileName};
        }
        
        /// get typed set of changes
        public SReportFileTable GetChangesTyped()
        {
            return ((SReportFileTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SReportFileRow NewRowTyped(bool AWithDefaultValues)
        {
            SReportFileRow ret = ((SReportFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SReportFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SReportFileRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_report_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_rpg_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_report_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_report_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_report_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnReportFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnRpg))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnReportDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnReportTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReportTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Lists the reports that were generated to file and the file name.
    [Serializable()]
    public class SReportFileRow : System.Data.DataRow
    {
        
        private SReportFileTable myTable;
        
        /// Constructor
        public SReportFileRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SReportFileTable)(this.Table));
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// Name of the report text file
        public String ReportFileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportFileName) 
                            || (((String)(this[this.myTable.ColumnReportFileName])) != value)))
                {
                    this[this.myTable.ColumnReportFileName] = value;
                }
            }
        }
        
        /// Name of the report generating program
        public String Rpg
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRpg.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRpg) 
                            || (((String)(this[this.myTable.ColumnRpg])) != value)))
                {
                    this[this.myTable.ColumnRpg] = value;
                }
            }
        }
        
        /// Date the report was generated
        public System.DateTime ReportDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnReportDate])) != value)))
                {
                    this[this.myTable.ColumnReportDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ReportDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnReportDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ReportDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnReportDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Time the report was generated.
        public Int32 ReportTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportTime) 
                            || (((Int32)(this[this.myTable.ColumnReportTime])) != value)))
                {
                    this[this.myTable.ColumnReportTime] = value;
                }
            }
        }
        
        /// Title of the Report
        public String ReportTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportTitle) 
                            || (((String)(this[this.myTable.ColumnReportTitle])) != value)))
                {
                    this[this.myTable.ColumnReportTitle] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnReportFileName);
            this.SetNull(this.myTable.ColumnRpg);
            this.SetNull(this.myTable.ColumnReportDate);
            this[this.myTable.ColumnReportTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReportTitle);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Options for running a report.  Indicates the output destination(s), number of copies, page numbers to print, output file, etc.
    [Serializable()]
    public class SReportOptionsTable : TTypedDataTable
    {
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// identifies the module
        public DataColumn ColumnModuleId;
        
        /// Name of the report text file
        public DataColumn ColumnReportFileName;
        
        /// Title of the Report
        public DataColumn ColumnReportTitle;
        
        /// Denotes if the report is produced in batch (s_interactive_c = FALSE) or interactively (s_interactive_l = TRUE)
        public DataColumn ColumnInteractive;
        
        /// Name of the the report generating program
        public DataColumn ColumnRpg;
        
        /// Number of copies
        public DataColumn ColumnCopies;
        
        /// From page number
        public DataColumn ColumnFromPage;
        
        /// 
        public DataColumn ColumnToPage;
        
        /// 
        public DataColumn ColumnData;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SReportOptionsTable() : 
                base("SReportOptions")
        {
        }
        
        /// constructor
        public SReportOptionsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SReportOptionsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SReportOptionsRow this[int i]
        {
            get
            {
                return ((SReportOptionsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This identifies who the current user is";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "identifies the module";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportFileNameDBName()
        {
            return "s_report_file_name_c";
        }
        
        /// get help text for column
        public static string GetReportFileNameHelp()
        {
            return "Name of the report text file";
        }
        
        /// get label of column
        public static string GetReportFileNameLabel()
        {
            return "Report File Name";
        }
        
        /// get character length for column
        public static short GetReportFileNameLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportTitleDBName()
        {
            return "s_report_title_c";
        }
        
        /// get help text for column
        public static string GetReportTitleHelp()
        {
            return "Title of the Report";
        }
        
        /// get label of column
        public static string GetReportTitleLabel()
        {
            return "Report Title";
        }
        
        /// get character length for column
        public static short GetReportTitleLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetInteractiveDBName()
        {
            return "s_interactive_l";
        }
        
        /// get help text for column
        public static string GetInteractiveHelp()
        {
            return "Denotes if the report is produced in batch (s_interactive_c = FALSE) or interacti" +
                "vely (s_interactive_l = TRUE)";
        }
        
        /// get label of column
        public static string GetInteractiveLabel()
        {
            return "Interactive flag";
        }
        
        /// get display format for column
        public static short GetInteractiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRpgDBName()
        {
            return "s_rpg_c";
        }
        
        /// get help text for column
        public static string GetRpgHelp()
        {
            return "Name of the the report generating program";
        }
        
        /// get label of column
        public static string GetRpgLabel()
        {
            return "Report Program Generator";
        }
        
        /// get character length for column
        public static short GetRpgLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCopiesDBName()
        {
            return "s_copies_i";
        }
        
        /// get help text for column
        public static string GetCopiesHelp()
        {
            return "Number of copies";
        }
        
        /// get label of column
        public static string GetCopiesLabel()
        {
            return "s_copies_i";
        }
        
        /// get display format for column
        public static short GetCopiesLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFromPageDBName()
        {
            return "s_from_page_i";
        }
        
        /// get help text for column
        public static string GetFromPageHelp()
        {
            return "From page number";
        }
        
        /// get label of column
        public static string GetFromPageLabel()
        {
            return "s_from_page_i";
        }
        
        /// get display format for column
        public static short GetFromPageLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToPageDBName()
        {
            return "s_to_page_i";
        }
        
        /// get help text for column
        public static string GetToPageHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetToPageLabel()
        {
            return "s_to_page_i";
        }
        
        /// get display format for column
        public static short GetToPageLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataDBName()
        {
            return "s_data_c";
        }
        
        /// get help text for column
        public static string GetDataHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDataLabel()
        {
            return "Data";
        }
        
        /// get character length for column
        public static short GetDataLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SReportOptions";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_report_options";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "s_report_options";
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_module_id_c",
                    "s_report_file_name_c",
                    "s_report_title_c",
                    "s_interactive_l",
                    "s_rpg_c",
                    "s_copies_i",
                    "s_from_page_i",
                    "s_to_page_i",
                    "s_data_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnReportFileName = this.Columns["s_report_file_name_c"];
            this.ColumnReportTitle = this.Columns["s_report_title_c"];
            this.ColumnInteractive = this.Columns["s_interactive_l"];
            this.ColumnRpg = this.Columns["s_rpg_c"];
            this.ColumnCopies = this.Columns["s_copies_i"];
            this.ColumnFromPage = this.Columns["s_from_page_i"];
            this.ColumnToPage = this.Columns["s_to_page_i"];
            this.ColumnData = this.Columns["s_data_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
        }
        
        /// get typed set of changes
        public SReportOptionsTable GetChangesTyped()
        {
            return ((SReportOptionsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SReportOptionsRow NewRowTyped(bool AWithDefaultValues)
        {
            SReportOptionsRow ret = ((SReportOptionsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SReportOptionsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SReportOptionsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_report_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_report_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_interactive_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_rpg_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_copies_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_from_page_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_to_page_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_data_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnReportFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnReportTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnInteractive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRpg))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnCopies))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFromPage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnToPage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnData))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Options for running a report.  Indicates the output destination(s), number of copies, page numbers to print, output file, etc.
    [Serializable()]
    public class SReportOptionsRow : System.Data.DataRow
    {
        
        private SReportOptionsTable myTable;
        
        /// Constructor
        public SReportOptionsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SReportOptionsTable)(this.Table));
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// identifies the module
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// Name of the report text file
        public String ReportFileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportFileName) 
                            || (((String)(this[this.myTable.ColumnReportFileName])) != value)))
                {
                    this[this.myTable.ColumnReportFileName] = value;
                }
            }
        }
        
        /// Title of the Report
        public String ReportTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportTitle) 
                            || (((String)(this[this.myTable.ColumnReportTitle])) != value)))
                {
                    this[this.myTable.ColumnReportTitle] = value;
                }
            }
        }
        
        /// Denotes if the report is produced in batch (s_interactive_c = FALSE) or interactively (s_interactive_l = TRUE)
        public Boolean Interactive
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInteractive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInteractive) 
                            || (((Boolean)(this[this.myTable.ColumnInteractive])) != value)))
                {
                    this[this.myTable.ColumnInteractive] = value;
                }
            }
        }
        
        /// Name of the the report generating program
        public String Rpg
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRpg.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRpg) 
                            || (((String)(this[this.myTable.ColumnRpg])) != value)))
                {
                    this[this.myTable.ColumnRpg] = value;
                }
            }
        }
        
        /// Number of copies
        public Int32 Copies
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCopies.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCopies) 
                            || (((Int32)(this[this.myTable.ColumnCopies])) != value)))
                {
                    this[this.myTable.ColumnCopies] = value;
                }
            }
        }
        
        /// From page number
        public Int32 FromPage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromPage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromPage) 
                            || (((Int32)(this[this.myTable.ColumnFromPage])) != value)))
                {
                    this[this.myTable.ColumnFromPage] = value;
                }
            }
        }
        
        /// 
        public Int32 ToPage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToPage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToPage) 
                            || (((Int32)(this[this.myTable.ColumnToPage])) != value)))
                {
                    this[this.myTable.ColumnToPage] = value;
                }
            }
        }
        
        /// 
        public String Data
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnData.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnData) 
                            || (((String)(this[this.myTable.ColumnData])) != value)))
                {
                    this[this.myTable.ColumnData] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnReportFileName);
            this.SetNull(this.myTable.ColumnReportTitle);
            this[this.myTable.ColumnInteractive.Ordinal] = true;
            this.SetNull(this.myTable.ColumnRpg);
            this[this.myTable.ColumnCopies.Ordinal] = 1;
            this[this.myTable.ColumnFromPage.Ordinal] = 0;
            this[this.myTable.ColumnToPage.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnData);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReportTitleNull()
        {
            return this.IsNull(this.myTable.ColumnReportTitle);
        }
        
        /// assign NULL value
        public void SetReportTitleNull()
        {
            this.SetNull(this.myTable.ColumnReportTitle);
        }
        
        /// test for NULL value
        public bool IsInteractiveNull()
        {
            return this.IsNull(this.myTable.ColumnInteractive);
        }
        
        /// assign NULL value
        public void SetInteractiveNull()
        {
            this.SetNull(this.myTable.ColumnInteractive);
        }
        
        /// test for NULL value
        public bool IsCopiesNull()
        {
            return this.IsNull(this.myTable.ColumnCopies);
        }
        
        /// assign NULL value
        public void SetCopiesNull()
        {
            this.SetNull(this.myTable.ColumnCopies);
        }
        
        /// test for NULL value
        public bool IsFromPageNull()
        {
            return this.IsNull(this.myTable.ColumnFromPage);
        }
        
        /// assign NULL value
        public void SetFromPageNull()
        {
            this.SetNull(this.myTable.ColumnFromPage);
        }
        
        /// test for NULL value
        public bool IsToPageNull()
        {
            return this.IsNull(this.myTable.ColumnToPage);
        }
        
        /// assign NULL value
        public void SetToPageNull()
        {
            this.SetNull(this.myTable.ColumnToPage);
        }
        
        /// test for NULL value
        public bool IsDataNull()
        {
            return this.IsNull(this.myTable.ColumnData);
        }
        
        /// assign NULL value
        public void SetDataNull()
        {
            this.SetNull(this.myTable.ColumnData);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Currently selected print output destinations
    [Serializable()]
    public class SSelectedOutputDestinationTable : TTypedDataTable
    {
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// Identifies a module
        public DataColumn ColumnModuleId;
        
        /// Identifies a form.  Also used for email addresses.
        public DataColumn ColumnFormName;
        
        /// Identifies a printer
        public DataColumn ColumnPrinterName;
        
        /// Recid of the corresponding batch job.  This field is set to ? if the job is running interactive.
        public DataColumn ColumnBatchJobId;
        
        /// Petra process ID
        public DataColumn ColumnLoginProcessId;
        
        /// Printer tray number to take the form from
        public DataColumn ColumnPaperSource;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SSelectedOutputDestinationTable() : 
                base("SSelectedOutputDestination")
        {
        }
        
        /// constructor
        public SSelectedOutputDestinationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SSelectedOutputDestinationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SSelectedOutputDestinationRow this[int i]
        {
            get
            {
                return ((SSelectedOutputDestinationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter a user ID";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleIdDBName()
        {
            return "s_module_id_c";
        }
        
        /// get help text for column
        public static string GetModuleIdHelp()
        {
            return "Enter a module id";
        }
        
        /// get label of column
        public static string GetModuleIdLabel()
        {
            return "Module ID";
        }
        
        /// get character length for column
        public static short GetModuleIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "s_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "Enter a form name";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 318;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrinterNameDBName()
        {
            return "s_printer_name_c";
        }
        
        /// get help text for column
        public static string GetPrinterNameHelp()
        {
            return "Enter a printer Name";
        }
        
        /// get label of column
        public static string GetPrinterNameLabel()
        {
            return "Printer Name";
        }
        
        /// get character length for column
        public static short GetPrinterNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchJobIdDBName()
        {
            return "s_batch_job_id_r";
        }
        
        /// get help text for column
        public static string GetBatchJobIdHelp()
        {
            return "Recid of the corresponding batch job.  This field is set to ? if the job is runni" +
                "ng interactive.";
        }
        
        /// get label of column
        public static string GetBatchJobIdLabel()
        {
            return "Batch job ID";
        }
        
        /// get display format for column
        public static short GetBatchJobIdLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLoginProcessIdDBName()
        {
            return "s_login_process_id_r";
        }
        
        /// get help text for column
        public static string GetLoginProcessIdHelp()
        {
            return "Petra process ID";
        }
        
        /// get label of column
        public static string GetLoginProcessIdLabel()
        {
            return "Process ID";
        }
        
        /// get display format for column
        public static short GetLoginProcessIdLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPaperSourceDBName()
        {
            return "s_paper_source_i";
        }
        
        /// get help text for column
        public static string GetPaperSourceHelp()
        {
            return "Enter a tray number";
        }
        
        /// get label of column
        public static string GetPaperSourceLabel()
        {
            return "Paper Source";
        }
        
        /// get display format for column
        public static short GetPaperSourceLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SSelectedOutputDestination";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_selected_output_destination";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Selected Output Destination";
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_module_id_c",
                    "s_form_name_c",
                    "s_printer_name_c",
                    "s_batch_job_id_r",
                    "s_login_process_id_r",
                    "s_paper_source_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnModuleId = this.Columns["s_module_id_c"];
            this.ColumnFormName = this.Columns["s_form_name_c"];
            this.ColumnPrinterName = this.Columns["s_printer_name_c"];
            this.ColumnBatchJobId = this.Columns["s_batch_job_id_r"];
            this.ColumnLoginProcessId = this.Columns["s_login_process_id_r"];
            this.ColumnPaperSource = this.Columns["s_paper_source_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
        }
        
        /// get typed set of changes
        public SSelectedOutputDestinationTable GetChangesTyped()
        {
            return ((SSelectedOutputDestinationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SSelectedOutputDestinationRow NewRowTyped(bool AWithDefaultValues)
        {
            SSelectedOutputDestinationRow ret = ((SSelectedOutputDestinationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SSelectedOutputDestinationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SSelectedOutputDestinationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_printer_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_batch_job_id_r", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_login_process_id_r", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_paper_source_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModuleId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 636);
            }
            if ((ACol == ColumnPrinterName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnBatchJobId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLoginProcessId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPaperSource))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Currently selected print output destinations
    [Serializable()]
    public class SSelectedOutputDestinationRow : System.Data.DataRow
    {
        
        private SSelectedOutputDestinationTable myTable;
        
        /// Constructor
        public SSelectedOutputDestinationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SSelectedOutputDestinationTable)(this.Table));
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// Identifies a module
        public String ModuleId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleId) 
                            || (((String)(this[this.myTable.ColumnModuleId])) != value)))
                {
                    this[this.myTable.ColumnModuleId] = value;
                }
            }
        }
        
        /// Identifies a form.  Also used for email addresses.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// Identifies a printer
        public String PrinterName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrinterName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrinterName) 
                            || (((String)(this[this.myTable.ColumnPrinterName])) != value)))
                {
                    this[this.myTable.ColumnPrinterName] = value;
                }
            }
        }
        
        /// Recid of the corresponding batch job.  This field is set to ? if the job is running interactive.
        public Int32 BatchJobId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchJobId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchJobId) 
                            || (((Int32)(this[this.myTable.ColumnBatchJobId])) != value)))
                {
                    this[this.myTable.ColumnBatchJobId] = value;
                }
            }
        }
        
        /// Petra process ID
        public Int32 LoginProcessId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLoginProcessId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLoginProcessId) 
                            || (((Int32)(this[this.myTable.ColumnLoginProcessId])) != value)))
                {
                    this[this.myTable.ColumnLoginProcessId] = value;
                }
            }
        }
        
        /// Printer tray number to take the form from
        public Int32 PaperSource
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPaperSource.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPaperSource) 
                            || (((Int32)(this[this.myTable.ColumnPaperSource])) != value)))
                {
                    this[this.myTable.ColumnPaperSource] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnModuleId);
            this.SetNull(this.myTable.ColumnFormName);
            this.SetNull(this.myTable.ColumnPrinterName);
            this.SetNull(this.myTable.ColumnBatchJobId);
            this.SetNull(this.myTable.ColumnLoginProcessId);
            this[this.myTable.ColumnPaperSource.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }
        
        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }
        
        /// test for NULL value
        public bool IsBatchJobIdNull()
        {
            return this.IsNull(this.myTable.ColumnBatchJobId);
        }
        
        /// assign NULL value
        public void SetBatchJobIdNull()
        {
            this.SetNull(this.myTable.ColumnBatchJobId);
        }
        
        /// test for NULL value
        public bool IsLoginProcessIdNull()
        {
            return this.IsNull(this.myTable.ColumnLoginProcessId);
        }
        
        /// assign NULL value
        public void SetLoginProcessIdNull()
        {
            this.SetNull(this.myTable.ColumnLoginProcessId);
        }
        
        /// test for NULL value
        public bool IsPaperSourceNull()
        {
            return this.IsNull(this.myTable.ColumnPaperSource);
        }
        
        /// assign NULL value
        public void SetPaperSourceNull()
        {
            this.SetNull(this.myTable.ColumnPaperSource);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Records current status of system (up, maintenance etc.)
    [Serializable()]
    public class SSystemStatusTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnSystemDisabledDate;
        
        /// 
        public DataColumn ColumnSystemDisabledTime;
        
        /// 
        public DataColumn ColumnSystemDisabledReason;
        
        /// 
        public DataColumn ColumnSystemAvailableDate;
        
        /// 
        public DataColumn ColumnSystemAvailableTime;
        
        /// The log in status of the system.
        public DataColumn ColumnSystemLoginStatus;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SSystemStatusTable() : 
                base("SSystemStatus")
        {
        }
        
        /// constructor
        public SSystemStatusTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SSystemStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SSystemStatusRow this[int i]
        {
            get
            {
                return ((SSystemStatusRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledDateDBName()
        {
            return "s_system_disabled_date_d";
        }
        
        /// get help text for column
        public static string GetSystemDisabledDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemDisabledDateLabel()
        {
            return "Date Disabled";
        }
        
        /// get display format for column
        public static short GetSystemDisabledDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledTimeDBName()
        {
            return "s_system_disabled_time_i";
        }
        
        /// get help text for column
        public static string GetSystemDisabledTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemDisabledTimeLabel()
        {
            return "Time Disabled";
        }
        
        /// get display format for column
        public static short GetSystemDisabledTimeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledReasonDBName()
        {
            return "s_system_disabled_reason_c";
        }
        
        /// get help text for column
        public static string GetSystemDisabledReasonHelp()
        {
            return "Enter a reason";
        }
        
        /// get label of column
        public static string GetSystemDisabledReasonLabel()
        {
            return "Reason Disabled";
        }
        
        /// get character length for column
        public static short GetSystemDisabledReasonLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemAvailableDateDBName()
        {
            return "s_system_available_date_d";
        }
        
        /// get help text for column
        public static string GetSystemAvailableDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemAvailableDateLabel()
        {
            return "Date Available";
        }
        
        /// get display format for column
        public static short GetSystemAvailableDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemAvailableTimeDBName()
        {
            return "s_system_available_time_i";
        }
        
        /// get help text for column
        public static string GetSystemAvailableTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemAvailableTimeLabel()
        {
            return "Time Available";
        }
        
        /// get display format for column
        public static short GetSystemAvailableTimeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemLoginStatusDBName()
        {
            return "s_system_login_status_l";
        }
        
        /// get help text for column
        public static string GetSystemLoginStatusHelp()
        {
            return "Check if system is enabled.";
        }
        
        /// get label of column
        public static string GetSystemLoginStatusLabel()
        {
            return "System Enabled";
        }
        
        /// get display format for column
        public static short GetSystemLoginStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SSystemStatus";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_system_status";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "System Status";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_system_disabled_date_d",
                    "s_system_disabled_time_i",
                    "s_system_disabled_reason_c",
                    "s_system_available_date_d",
                    "s_system_available_time_i",
                    "s_system_login_status_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnSystemDisabledDate = this.Columns["s_system_disabled_date_d"];
            this.ColumnSystemDisabledTime = this.Columns["s_system_disabled_time_i"];
            this.ColumnSystemDisabledReason = this.Columns["s_system_disabled_reason_c"];
            this.ColumnSystemAvailableDate = this.Columns["s_system_available_date_d"];
            this.ColumnSystemAvailableTime = this.Columns["s_system_available_time_i"];
            this.ColumnSystemLoginStatus = this.Columns["s_system_login_status_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId};
        }
        
        /// get typed set of changes
        public SSystemStatusTable GetChangesTyped()
        {
            return ((SSystemStatusTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SSystemStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            SSystemStatusRow ret = ((SSystemStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SSystemStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SSystemStatusRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_system_available_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_system_available_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_system_login_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnSystemDisabledDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnSystemDisabledTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSystemDisabledReason))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnSystemAvailableDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnSystemAvailableTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSystemLoginStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Records current status of system (up, maintenance etc.)
    [Serializable()]
    public class SSystemStatusRow : System.Data.DataRow
    {
        
        private SSystemStatusTable myTable;
        
        /// Constructor
        public SSystemStatusRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SSystemStatusTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public System.DateTime SystemDisabledDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnSystemDisabledDate])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime SystemDisabledDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemDisabledDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime SystemDisabledDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemDisabledDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 SystemDisabledTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledTime) 
                            || (((Int32)(this[this.myTable.ColumnSystemDisabledTime])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledTime] = value;
                }
            }
        }
        
        /// 
        public String SystemDisabledReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledReason) 
                            || (((String)(this[this.myTable.ColumnSystemDisabledReason])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledReason] = value;
                }
            }
        }
        
        /// 
        public System.DateTime SystemAvailableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAvailableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAvailableDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnSystemAvailableDate])) != value)))
                {
                    this[this.myTable.ColumnSystemAvailableDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime SystemAvailableDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemAvailableDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime SystemAvailableDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemAvailableDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 SystemAvailableTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAvailableTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAvailableTime) 
                            || (((Int32)(this[this.myTable.ColumnSystemAvailableTime])) != value)))
                {
                    this[this.myTable.ColumnSystemAvailableTime] = value;
                }
            }
        }
        
        /// The log in status of the system.
        public Boolean SystemLoginStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemLoginStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemLoginStatus) 
                            || (((Boolean)(this[this.myTable.ColumnSystemLoginStatus])) != value)))
                {
                    this[this.myTable.ColumnSystemLoginStatus] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnSystemDisabledDate);
            this[this.myTable.ColumnSystemDisabledTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSystemDisabledReason);
            this.SetNull(this.myTable.ColumnSystemAvailableDate);
            this[this.myTable.ColumnSystemAvailableTime.Ordinal] = 0;
            this[this.myTable.ColumnSystemLoginStatus.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledDateNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledDate);
        }
        
        /// assign NULL value
        public void SetSystemDisabledDateNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledDate);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledTimeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledTime);
        }
        
        /// assign NULL value
        public void SetSystemDisabledTimeNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledTime);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledReasonNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledReason);
        }
        
        /// assign NULL value
        public void SetSystemDisabledReasonNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledReason);
        }
        
        /// test for NULL value
        public bool IsSystemAvailableDateNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAvailableDate);
        }
        
        /// assign NULL value
        public void SetSystemAvailableDateNull()
        {
            this.SetNull(this.myTable.ColumnSystemAvailableDate);
        }
        
        /// test for NULL value
        public bool IsSystemAvailableTimeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAvailableTime);
        }
        
        /// assign NULL value
        public void SetSystemAvailableTimeNull()
        {
            this.SetNull(this.myTable.ColumnSystemAvailableTime);
        }
        
        /// test for NULL value
        public bool IsSystemLoginStatusNull()
        {
            return this.IsNull(this.myTable.ColumnSystemLoginStatus);
        }
        
        /// assign NULL value
        public void SetSystemLoginStatusNull()
        {
            this.SetNull(this.myTable.ColumnSystemLoginStatus);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Log of changes in system status
    [Serializable()]
    public class SSystemStatusLogTable : TTypedDataTable
    {
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnSystemDisabledDate;
        
        /// 
        public DataColumn ColumnSystemDisabledTime;
        
        /// 
        public DataColumn ColumnSystemDisabledReason;
        
        /// 
        public DataColumn ColumnSystemEnabledDate;
        
        /// 
        public DataColumn ColumnSystemEnabledTime;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SSystemStatusLogTable() : 
                base("SSystemStatusLog")
        {
        }
        
        /// constructor
        public SSystemStatusLogTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SSystemStatusLogTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SSystemStatusLogRow this[int i]
        {
            get
            {
                return ((SSystemStatusLogRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "This is the system user id. Each user of the system is allocated one";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledDateDBName()
        {
            return "s_system_disabled_date_d";
        }
        
        /// get help text for column
        public static string GetSystemDisabledDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemDisabledDateLabel()
        {
            return "Date Disabled";
        }
        
        /// get display format for column
        public static short GetSystemDisabledDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledTimeDBName()
        {
            return "s_system_disabled_time_i";
        }
        
        /// get help text for column
        public static string GetSystemDisabledTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemDisabledTimeLabel()
        {
            return "Time Disabled";
        }
        
        /// get display format for column
        public static short GetSystemDisabledTimeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemDisabledReasonDBName()
        {
            return "s_system_disabled_reason_c";
        }
        
        /// get help text for column
        public static string GetSystemDisabledReasonHelp()
        {
            return "Enter a reason";
        }
        
        /// get label of column
        public static string GetSystemDisabledReasonLabel()
        {
            return "Reason Disabled";
        }
        
        /// get character length for column
        public static short GetSystemDisabledReasonLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemEnabledDateDBName()
        {
            return "s_system_enabled_date_d";
        }
        
        /// get help text for column
        public static string GetSystemEnabledDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemEnabledDateLabel()
        {
            return "Date Enabled";
        }
        
        /// get display format for column
        public static short GetSystemEnabledDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemEnabledTimeDBName()
        {
            return "s_system_enabled_time_i";
        }
        
        /// get help text for column
        public static string GetSystemEnabledTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemEnabledTimeLabel()
        {
            return "Time Enabled";
        }
        
        /// get display format for column
        public static short GetSystemEnabledTimeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SSystemStatusLog";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_system_status_log";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "System Status Log";
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_system_disabled_date_d",
                    "s_system_disabled_time_i",
                    "s_system_disabled_reason_c",
                    "s_system_enabled_date_d",
                    "s_system_enabled_time_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnSystemDisabledDate = this.Columns["s_system_disabled_date_d"];
            this.ColumnSystemDisabledTime = this.Columns["s_system_disabled_time_i"];
            this.ColumnSystemDisabledReason = this.Columns["s_system_disabled_reason_c"];
            this.ColumnSystemEnabledDate = this.Columns["s_system_enabled_date_d"];
            this.ColumnSystemEnabledTime = this.Columns["s_system_enabled_time_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
        }
        
        /// get typed set of changes
        public SSystemStatusLogTable GetChangesTyped()
        {
            return ((SSystemStatusLogTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SSystemStatusLogRow NewRowTyped(bool AWithDefaultValues)
        {
            SSystemStatusLogRow ret = ((SSystemStatusLogRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SSystemStatusLogRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SSystemStatusLogRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_system_disabled_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_system_enabled_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_system_enabled_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnSystemDisabledDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnSystemDisabledTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSystemDisabledReason))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnSystemEnabledDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnSystemEnabledTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Log of changes in system status
    [Serializable()]
    public class SSystemStatusLogRow : System.Data.DataRow
    {
        
        private SSystemStatusLogTable myTable;
        
        /// Constructor
        public SSystemStatusLogRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SSystemStatusLogTable)(this.Table));
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public System.DateTime SystemDisabledDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnSystemDisabledDate])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime SystemDisabledDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemDisabledDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime SystemDisabledDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemDisabledDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 SystemDisabledTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledTime) 
                            || (((Int32)(this[this.myTable.ColumnSystemDisabledTime])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledTime] = value;
                }
            }
        }
        
        /// 
        public String SystemDisabledReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemDisabledReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemDisabledReason) 
                            || (((String)(this[this.myTable.ColumnSystemDisabledReason])) != value)))
                {
                    this[this.myTable.ColumnSystemDisabledReason] = value;
                }
            }
        }
        
        /// 
        public System.DateTime SystemEnabledDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemEnabledDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemEnabledDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnSystemEnabledDate])) != value)))
                {
                    this[this.myTable.ColumnSystemEnabledDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime SystemEnabledDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemEnabledDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime SystemEnabledDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnSystemEnabledDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 SystemEnabledTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemEnabledTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemEnabledTime) 
                            || (((Int32)(this[this.myTable.ColumnSystemEnabledTime])) != value)))
                {
                    this[this.myTable.ColumnSystemEnabledTime] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnSystemDisabledDate);
            this[this.myTable.ColumnSystemDisabledTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSystemDisabledReason);
            this.SetNull(this.myTable.ColumnSystemEnabledDate);
            this[this.myTable.ColumnSystemEnabledTime.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledDateNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledDate);
        }
        
        /// assign NULL value
        public void SetSystemDisabledDateNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledDate);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledTimeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledTime);
        }
        
        /// assign NULL value
        public void SetSystemDisabledTimeNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledTime);
        }
        
        /// test for NULL value
        public bool IsSystemDisabledReasonNull()
        {
            return this.IsNull(this.myTable.ColumnSystemDisabledReason);
        }
        
        /// assign NULL value
        public void SetSystemDisabledReasonNull()
        {
            this.SetNull(this.myTable.ColumnSystemDisabledReason);
        }
        
        /// test for NULL value
        public bool IsSystemEnabledDateNull()
        {
            return this.IsNull(this.myTable.ColumnSystemEnabledDate);
        }
        
        /// assign NULL value
        public void SetSystemEnabledDateNull()
        {
            this.SetNull(this.myTable.ColumnSystemEnabledDate);
        }
        
        /// test for NULL value
        public bool IsSystemEnabledTimeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemEnabledTime);
        }
        
        /// assign NULL value
        public void SetSystemEnabledTimeNull()
        {
            this.SetNull(this.myTable.ColumnSystemEnabledTime);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores various default values and options for each user.
    [Serializable()]
    public class SUserDefaultsTable : TTypedDataTable
    {
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// The name of the default
        public DataColumn ColumnDefaultCode;
        
        /// The value of the default
        public DataColumn ColumnDefaultValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SUserDefaultsTable() : 
                base("SUserDefaults")
        {
        }
        
        /// constructor
        public SUserDefaultsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SUserDefaultsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SUserDefaultsRow this[int i]
        {
            get
            {
                return ((SUserDefaultsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the User ID";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultCodeDBName()
        {
            return "s_default_code_c";
        }
        
        /// get help text for column
        public static string GetDefaultCodeHelp()
        {
            return "The name of the default";
        }
        
        /// get label of column
        public static string GetDefaultCodeLabel()
        {
            return "Default Code";
        }
        
        /// get character length for column
        public static short GetDefaultCodeLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultValueDBName()
        {
            return "s_default_value_c";
        }
        
        /// get help text for column
        public static string GetDefaultValueHelp()
        {
            return "The value of the default";
        }
        
        /// get label of column
        public static string GetDefaultValueLabel()
        {
            return "Default Value";
        }
        
        /// get character length for column
        public static short GetDefaultValueLength()
        {
            return 250;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SUserDefaults";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_user_defaults";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "User Defaults";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_user_id_c",
                    "s_default_code_c",
                    "s_default_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDefaultCode = this.Columns["s_default_code_c"];
            this.ColumnDefaultValue = this.Columns["s_default_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnUserId,
                    this.ColumnDefaultCode};
        }
        
        /// get typed set of changes
        public SUserDefaultsTable GetChangesTyped()
        {
            return ((SUserDefaultsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SUserDefaultsRow NewRowTyped(bool AWithDefaultValues)
        {
            SUserDefaultsRow ret = ((SUserDefaultsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SUserDefaultsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SUserDefaultsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDefaultCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDefaultValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 500);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores various default values and options for each user.
    [Serializable()]
    public class SUserDefaultsRow : System.Data.DataRow
    {
        
        private SUserDefaultsTable myTable;
        
        /// Constructor
        public SUserDefaultsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SUserDefaultsTable)(this.Table));
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// The name of the default
        public String DefaultCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultCode) 
                            || (((String)(this[this.myTable.ColumnDefaultCode])) != value)))
                {
                    this[this.myTable.ColumnDefaultCode] = value;
                }
            }
        }
        
        /// The value of the default
        public String DefaultValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultValue) 
                            || (((String)(this[this.myTable.ColumnDefaultValue])) != value)))
                {
                    this[this.myTable.ColumnDefaultValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnDefaultCode);
            this.SetNull(this.myTable.ColumnDefaultValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDefaultValueNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultValue);
        }
        
        /// assign NULL value
        public void SetDefaultValueNull()
        {
            this.SetNull(this.myTable.ColumnDefaultValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The settings that are system wide (iso per user)
    [Serializable()]
    public class SSystemDefaultsTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnDefaultCode;
        
        /// 
        public DataColumn ColumnDefaultDescription;
        
        /// 
        public DataColumn ColumnDefaultValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SSystemDefaultsTable() : 
                base("SSystemDefaults")
        {
        }
        
        /// constructor
        public SSystemDefaultsTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SSystemDefaultsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SSystemDefaultsRow this[int i]
        {
            get
            {
                return ((SSystemDefaultsRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultCodeDBName()
        {
            return "s_default_code_c";
        }
        
        /// get help text for column
        public static string GetDefaultCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDefaultCodeLabel()
        {
            return "s_default_code_c";
        }
        
        /// get character length for column
        public static short GetDefaultCodeLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultDescriptionDBName()
        {
            return "s_default_description_c";
        }
        
        /// get help text for column
        public static string GetDefaultDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDefaultDescriptionLabel()
        {
            return "s_default_description_c";
        }
        
        /// get character length for column
        public static short GetDefaultDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultValueDBName()
        {
            return "s_default_value_c";
        }
        
        /// get help text for column
        public static string GetDefaultValueHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDefaultValueLabel()
        {
            return "s_default_value_c";
        }
        
        /// get character length for column
        public static short GetDefaultValueLength()
        {
            return 250;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SSystemDefaults";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_system_defaults";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "s_system_defaults";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_default_code_c",
                    "s_default_description_c",
                    "s_default_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnDefaultCode = this.Columns["s_default_code_c"];
            this.ColumnDefaultDescription = this.Columns["s_default_description_c"];
            this.ColumnDefaultValue = this.Columns["s_default_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnDefaultCode};
        }
        
        /// get typed set of changes
        public SSystemDefaultsTable GetChangesTyped()
        {
            return ((SSystemDefaultsTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SSystemDefaultsRow NewRowTyped(bool AWithDefaultValues)
        {
            SSystemDefaultsRow ret = ((SSystemDefaultsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SSystemDefaultsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SSystemDefaultsRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_default_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_default_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnDefaultCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDefaultDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDefaultValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 500);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The settings that are system wide (iso per user)
    [Serializable()]
    public class SSystemDefaultsRow : System.Data.DataRow
    {
        
        private SSystemDefaultsTable myTable;
        
        /// Constructor
        public SSystemDefaultsRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SSystemDefaultsTable)(this.Table));
        }
        
        /// 
        public String DefaultCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultCode) 
                            || (((String)(this[this.myTable.ColumnDefaultCode])) != value)))
                {
                    this[this.myTable.ColumnDefaultCode] = value;
                }
            }
        }
        
        /// 
        public String DefaultDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultDescription) 
                            || (((String)(this[this.myTable.ColumnDefaultDescription])) != value)))
                {
                    this[this.myTable.ColumnDefaultDescription] = value;
                }
            }
        }
        
        /// 
        public String DefaultValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultValue) 
                            || (((String)(this[this.myTable.ColumnDefaultValue])) != value)))
                {
                    this[this.myTable.ColumnDefaultValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnDefaultCode);
            this.SetNull(this.myTable.ColumnDefaultDescription);
            this.SetNull(this.myTable.ColumnDefaultValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDefaultDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultDescription);
        }
        
        /// assign NULL value
        public void SetDefaultDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDefaultDescription);
        }
        
        /// test for NULL value
        public bool IsDefaultValueNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultValue);
        }
        
        /// assign NULL value
        public void SetDefaultValueNull()
        {
            this.SetNull(this.myTable.ColumnDefaultValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Jobs queued for later execution
    [Serializable()]
    public class SBatchJobTable : TTypedDataTable
    {
        
        /// This is the name of the file
        public DataColumn ColumnFileName;
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnJobType;
        
        /// 
        public DataColumn ColumnMinutes;
        
        /// 
        public DataColumn ColumnHours;
        
        /// Pattern that stores the day of the month.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of days &quot;&quot;1,15&quot;&quot; (ie the 1st and 15th each month)
        public DataColumn ColumnDayOfMonth;
        
        /// Pattern that stores the month of the year.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of months &quot;&quot;1,4,8,12&quot;&quot; (ie quarterly).
        public DataColumn ColumnMonthOfYear;
        
        /// Pattern that stores the day of the week.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of days &quot;&quot;0,1&quot;&quot; (ie Sunday and Monday).
        public DataColumn ColumnDayOfWeek;
        
        /// Used to flag if parameters are passed to a process
        public DataColumn ColumnParametersUsed;
        
        /// Data passed to a process.
        public DataColumn ColumnData;
        
        /// Flag to remove this s_batch_job after running
        public DataColumn ColumnRemove;
        
        /// The date the batch job was submitted.
        public DataColumn ColumnDateSubmitted;
        
        /// The time the batch job was submitted.
        public DataColumn ColumnTimeSubmitted;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SBatchJobTable() : 
                base("SBatchJob")
        {
        }
        
        /// constructor
        public SBatchJobTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SBatchJobTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SBatchJobRow this[int i]
        {
            get
            {
                return ((SBatchJobRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileNameDBName()
        {
            return "s_file_name_c";
        }
        
        /// get help text for column
        public static string GetFileNameHelp()
        {
            return "Enter the filename";
        }
        
        /// get label of column
        public static string GetFileNameLabel()
        {
            return "File Name";
        }
        
        /// get character length for column
        public static short GetFileNameLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the User ID";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJobTypeDBName()
        {
            return "s_job_type_c";
        }
        
        /// get help text for column
        public static string GetJobTypeHelp()
        {
            return "Enter the job type";
        }
        
        /// get label of column
        public static string GetJobTypeLabel()
        {
            return "Job Type";
        }
        
        /// get character length for column
        public static short GetJobTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMinutesDBName()
        {
            return "s_minutes_i";
        }
        
        /// get help text for column
        public static string GetMinutesHelp()
        {
            return "Must be in the range from 0 to 59";
        }
        
        /// get label of column
        public static string GetMinutesLabel()
        {
            return "Minutes";
        }
        
        /// get display format for column
        public static short GetMinutesLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHoursDBName()
        {
            return "s_hours_i";
        }
        
        /// get help text for column
        public static string GetHoursHelp()
        {
            return "Must be in the range from 0 to 23";
        }
        
        /// get label of column
        public static string GetHoursLabel()
        {
            return "Hours";
        }
        
        /// get display format for column
        public static short GetHoursLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDayOfMonthDBName()
        {
            return "s_day_of_month_c";
        }
        
        /// get help text for column
        public static string GetDayOfMonthHelp()
        {
            return "Select the Day of the Month";
        }
        
        /// get label of column
        public static string GetDayOfMonthLabel()
        {
            return "Day of the Month";
        }
        
        /// get character length for column
        public static short GetDayOfMonthLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMonthOfYearDBName()
        {
            return "s_month_of_year_c";
        }
        
        /// get help text for column
        public static string GetMonthOfYearHelp()
        {
            return "Select the Month of the Year";
        }
        
        /// get label of column
        public static string GetMonthOfYearLabel()
        {
            return "Month of the Year";
        }
        
        /// get character length for column
        public static short GetMonthOfYearLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDayOfWeekDBName()
        {
            return "s_day_of_week_c";
        }
        
        /// get help text for column
        public static string GetDayOfWeekHelp()
        {
            return "Enter the Day of the Week";
        }
        
        /// get label of column
        public static string GetDayOfWeekLabel()
        {
            return "Day of the Week";
        }
        
        /// get character length for column
        public static short GetDayOfWeekLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetParametersUsedDBName()
        {
            return "s_parameters_used_l";
        }
        
        /// get help text for column
        public static string GetParametersUsedHelp()
        {
            return "Are parameters to be passed to this process?";
        }
        
        /// get label of column
        public static string GetParametersUsedLabel()
        {
            return "Parameters Used?";
        }
        
        /// get display format for column
        public static short GetParametersUsedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataDBName()
        {
            return "s_data_c";
        }
        
        /// get help text for column
        public static string GetDataHelp()
        {
            return "Data passed to a process.";
        }
        
        /// get label of column
        public static string GetDataLabel()
        {
            return "Data";
        }
        
        /// get character length for column
        public static short GetDataLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRemoveDBName()
        {
            return "s_remove_l";
        }
        
        /// get help text for column
        public static string GetRemoveHelp()
        {
            return "Remove this batch entry after running?";
        }
        
        /// get label of column
        public static string GetRemoveLabel()
        {
            return "Remove after run?";
        }
        
        /// get display format for column
        public static short GetRemoveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateSubmittedDBName()
        {
            return "s_date_submitted_d";
        }
        
        /// get help text for column
        public static string GetDateSubmittedHelp()
        {
            return "The date the batch job was submitted.";
        }
        
        /// get label of column
        public static string GetDateSubmittedLabel()
        {
            return "Submitted Date";
        }
        
        /// get display format for column
        public static short GetDateSubmittedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeSubmittedDBName()
        {
            return "s_time_submitted_i";
        }
        
        /// get help text for column
        public static string GetTimeSubmittedHelp()
        {
            return "The time the batch job was submitted.";
        }
        
        /// get label of column
        public static string GetTimeSubmittedLabel()
        {
            return "Submitted Time";
        }
        
        /// get display format for column
        public static short GetTimeSubmittedLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SBatchJob";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_batch_job";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Batch Job";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    11,
                    12};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_file_name_c",
                    "s_user_id_c",
                    "s_job_type_c",
                    "s_minutes_i",
                    "s_hours_i",
                    "s_day_of_month_c",
                    "s_month_of_year_c",
                    "s_day_of_week_c",
                    "s_parameters_used_l",
                    "s_data_c",
                    "s_remove_l",
                    "s_date_submitted_d",
                    "s_time_submitted_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileName = this.Columns["s_file_name_c"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnJobType = this.Columns["s_job_type_c"];
            this.ColumnMinutes = this.Columns["s_minutes_i"];
            this.ColumnHours = this.Columns["s_hours_i"];
            this.ColumnDayOfMonth = this.Columns["s_day_of_month_c"];
            this.ColumnMonthOfYear = this.Columns["s_month_of_year_c"];
            this.ColumnDayOfWeek = this.Columns["s_day_of_week_c"];
            this.ColumnParametersUsed = this.Columns["s_parameters_used_l"];
            this.ColumnData = this.Columns["s_data_c"];
            this.ColumnRemove = this.Columns["s_remove_l"];
            this.ColumnDateSubmitted = this.Columns["s_date_submitted_d"];
            this.ColumnTimeSubmitted = this.Columns["s_time_submitted_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileName,
                    this.ColumnUserId,
                    this.ColumnDateSubmitted,
                    this.ColumnTimeSubmitted};
        }
        
        /// get typed set of changes
        public SBatchJobTable GetChangesTyped()
        {
            return ((SBatchJobTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SBatchJobRow NewRowTyped(bool AWithDefaultValues)
        {
            SBatchJobRow ret = ((SBatchJobRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SBatchJobRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SBatchJobRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_job_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_minutes_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_hours_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_day_of_month_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_month_of_year_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_day_of_week_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_parameters_used_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_data_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_remove_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_submitted_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_time_submitted_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnJobType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMinutes))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnHours))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDayOfMonth))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMonthOfYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDayOfWeek))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnParametersUsed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnData))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnRemove))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateSubmitted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTimeSubmitted))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Jobs queued for later execution
    [Serializable()]
    public class SBatchJobRow : System.Data.DataRow
    {
        
        private SBatchJobTable myTable;
        
        /// Constructor
        public SBatchJobRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SBatchJobTable)(this.Table));
        }
        
        /// This is the name of the file
        public String FileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileName) 
                            || (((String)(this[this.myTable.ColumnFileName])) != value)))
                {
                    this[this.myTable.ColumnFileName] = value;
                }
            }
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String JobType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJobType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJobType) 
                            || (((String)(this[this.myTable.ColumnJobType])) != value)))
                {
                    this[this.myTable.ColumnJobType] = value;
                }
            }
        }
        
        /// 
        public Int32 Minutes
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinutes.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinutes) 
                            || (((Int32)(this[this.myTable.ColumnMinutes])) != value)))
                {
                    this[this.myTable.ColumnMinutes] = value;
                }
            }
        }
        
        /// 
        public Int32 Hours
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHours.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHours) 
                            || (((Int32)(this[this.myTable.ColumnHours])) != value)))
                {
                    this[this.myTable.ColumnHours] = value;
                }
            }
        }
        
        /// Pattern that stores the day of the month.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of days &quot;&quot;1,15&quot;&quot; (ie the 1st and 15th each month)
        public String DayOfMonth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDayOfMonth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDayOfMonth) 
                            || (((String)(this[this.myTable.ColumnDayOfMonth])) != value)))
                {
                    this[this.myTable.ColumnDayOfMonth] = value;
                }
            }
        }
        
        /// Pattern that stores the month of the year.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of months &quot;&quot;1,4,8,12&quot;&quot; (ie quarterly).
        public String MonthOfYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMonthOfYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMonthOfYear) 
                            || (((String)(this[this.myTable.ColumnMonthOfYear])) != value)))
                {
                    this[this.myTable.ColumnMonthOfYear] = value;
                }
            }
        }
        
        /// Pattern that stores the day of the week.  Pattern can be all &quot;&quot;*&quot;&quot; or a string of days &quot;&quot;0,1&quot;&quot; (ie Sunday and Monday).
        public String DayOfWeek
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDayOfWeek.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDayOfWeek) 
                            || (((String)(this[this.myTable.ColumnDayOfWeek])) != value)))
                {
                    this[this.myTable.ColumnDayOfWeek] = value;
                }
            }
        }
        
        /// Used to flag if parameters are passed to a process
        public Boolean ParametersUsed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnParametersUsed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnParametersUsed) 
                            || (((Boolean)(this[this.myTable.ColumnParametersUsed])) != value)))
                {
                    this[this.myTable.ColumnParametersUsed] = value;
                }
            }
        }
        
        /// Data passed to a process.
        public String Data
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnData.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnData) 
                            || (((String)(this[this.myTable.ColumnData])) != value)))
                {
                    this[this.myTable.ColumnData] = value;
                }
            }
        }
        
        /// Flag to remove this s_batch_job after running
        public Boolean Remove
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRemove.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRemove) 
                            || (((Boolean)(this[this.myTable.ColumnRemove])) != value)))
                {
                    this[this.myTable.ColumnRemove] = value;
                }
            }
        }
        
        /// The date the batch job was submitted.
        public System.DateTime DateSubmitted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateSubmitted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateSubmitted) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateSubmitted])) != value)))
                {
                    this[this.myTable.ColumnDateSubmitted] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateSubmittedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateSubmitted], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateSubmittedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateSubmitted.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The time the batch job was submitted.
        public Int32 TimeSubmitted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeSubmitted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeSubmitted) 
                            || (((Int32)(this[this.myTable.ColumnTimeSubmitted])) != value)))
                {
                    this[this.myTable.ColumnTimeSubmitted] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileName);
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnJobType.Ordinal] = "Process";
            this[this.myTable.ColumnMinutes.Ordinal] = 0;
            this[this.myTable.ColumnHours.Ordinal] = 0;
            this[this.myTable.ColumnDayOfMonth.Ordinal] = "*";
            this.SetNull(this.myTable.ColumnMonthOfYear);
            this.SetNull(this.myTable.ColumnDayOfWeek);
            this[this.myTable.ColumnParametersUsed.Ordinal] = false;
            this.SetNull(this.myTable.ColumnData);
            this[this.myTable.ColumnRemove.Ordinal] = false;
            this.SetNull(this.myTable.ColumnDateSubmitted);
            this[this.myTable.ColumnTimeSubmitted.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsJobTypeNull()
        {
            return this.IsNull(this.myTable.ColumnJobType);
        }
        
        /// assign NULL value
        public void SetJobTypeNull()
        {
            this.SetNull(this.myTable.ColumnJobType);
        }
        
        /// test for NULL value
        public bool IsMinutesNull()
        {
            return this.IsNull(this.myTable.ColumnMinutes);
        }
        
        /// assign NULL value
        public void SetMinutesNull()
        {
            this.SetNull(this.myTable.ColumnMinutes);
        }
        
        /// test for NULL value
        public bool IsHoursNull()
        {
            return this.IsNull(this.myTable.ColumnHours);
        }
        
        /// assign NULL value
        public void SetHoursNull()
        {
            this.SetNull(this.myTable.ColumnHours);
        }
        
        /// test for NULL value
        public bool IsDayOfMonthNull()
        {
            return this.IsNull(this.myTable.ColumnDayOfMonth);
        }
        
        /// assign NULL value
        public void SetDayOfMonthNull()
        {
            this.SetNull(this.myTable.ColumnDayOfMonth);
        }
        
        /// test for NULL value
        public bool IsMonthOfYearNull()
        {
            return this.IsNull(this.myTable.ColumnMonthOfYear);
        }
        
        /// assign NULL value
        public void SetMonthOfYearNull()
        {
            this.SetNull(this.myTable.ColumnMonthOfYear);
        }
        
        /// test for NULL value
        public bool IsDayOfWeekNull()
        {
            return this.IsNull(this.myTable.ColumnDayOfWeek);
        }
        
        /// assign NULL value
        public void SetDayOfWeekNull()
        {
            this.SetNull(this.myTable.ColumnDayOfWeek);
        }
        
        /// test for NULL value
        public bool IsParametersUsedNull()
        {
            return this.IsNull(this.myTable.ColumnParametersUsed);
        }
        
        /// assign NULL value
        public void SetParametersUsedNull()
        {
            this.SetNull(this.myTable.ColumnParametersUsed);
        }
        
        /// test for NULL value
        public bool IsDataNull()
        {
            return this.IsNull(this.myTable.ColumnData);
        }
        
        /// assign NULL value
        public void SetDataNull()
        {
            this.SetNull(this.myTable.ColumnData);
        }
        
        /// test for NULL value
        public bool IsRemoveNull()
        {
            return this.IsNull(this.myTable.ColumnRemove);
        }
        
        /// assign NULL value
        public void SetRemoveNull()
        {
            this.SetNull(this.myTable.ColumnRemove);
        }
        
        /// test for NULL value
        public bool IsDateSubmittedNull()
        {
            return this.IsNull(this.myTable.ColumnDateSubmitted);
        }
        
        /// assign NULL value
        public void SetDateSubmittedNull()
        {
            this.SetNull(this.myTable.ColumnDateSubmitted);
        }
        
        /// test for NULL value
        public bool IsTimeSubmittedNull()
        {
            return this.IsNull(this.myTable.ColumnTimeSubmitted);
        }
        
        /// assign NULL value
        public void SetTimeSubmittedNull()
        {
            this.SetNull(this.myTable.ColumnTimeSubmitted);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of error messages used by Petra s_errmsg.p program.  This allows language-specific runtime error messages to be displayed depending on the language of the logged in user.
    [Serializable()]
    public class SErrorMessageTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLanguageCode;
        
        /// 
        public DataColumn ColumnErrorCode;
        
        /// 
        public DataColumn ColumnMessageLine1;
        
        /// 
        public DataColumn ColumnMessageLine2;
        
        /// 
        public DataColumn ColumnMessageLine3;
        
        /// 
        public DataColumn ColumnResponse;
        
        /// 
        public DataColumn ColumnAlertType;
        
        /// 
        public DataColumn ColumnTitle;
        
        /// Determines whether to log the error in the s_error_log table
        public DataColumn ColumnLogError;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SErrorMessageTable() : 
                base("SErrorMessage")
        {
        }
        
        /// constructor
        public SErrorMessageTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SErrorMessageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SErrorMessageRow this[int i]
        {
            get
            {
                return ((SErrorMessageRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "s_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetErrorCodeDBName()
        {
            return "s_error_code_c";
        }
        
        /// get help text for column
        public static string GetErrorCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetErrorCodeLabel()
        {
            return "Error Number";
        }
        
        /// get character length for column
        public static short GetErrorCodeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine1DBName()
        {
            return "s_message_line_1_c";
        }
        
        /// get help text for column
        public static string GetMessageLine1Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine1Label()
        {
            return "Message Line 1";
        }
        
        /// get character length for column
        public static short GetMessageLine1Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine2DBName()
        {
            return "s_message_line_2_c";
        }
        
        /// get help text for column
        public static string GetMessageLine2Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine2Label()
        {
            return "Message Line 2";
        }
        
        /// get character length for column
        public static short GetMessageLine2Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine3DBName()
        {
            return "s_message_line_3_c";
        }
        
        /// get help text for column
        public static string GetMessageLine3Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine3Label()
        {
            return "Message Line 3";
        }
        
        /// get character length for column
        public static short GetMessageLine3Length()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetResponseDBName()
        {
            return "s_response_c";
        }
        
        /// get help text for column
        public static string GetResponseHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetResponseLabel()
        {
            return "Response";
        }
        
        /// get character length for column
        public static short GetResponseLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAlertTypeDBName()
        {
            return "s_alert_type_c";
        }
        
        /// get help text for column
        public static string GetAlertTypeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAlertTypeLabel()
        {
            return "Display Type";
        }
        
        /// get character length for column
        public static short GetAlertTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "s_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 24;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLogErrorDBName()
        {
            return "s_log_error_l";
        }
        
        /// get help text for column
        public static string GetLogErrorHelp()
        {
            return "Log the error?";
        }
        
        /// get label of column
        public static string GetLogErrorLabel()
        {
            return "Log Error?";
        }
        
        /// get display format for column
        public static short GetLogErrorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SErrorMessage";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_error_message";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Error Message";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_language_code_c",
                    "s_error_code_c",
                    "s_message_line_1_c",
                    "s_message_line_2_c",
                    "s_message_line_3_c",
                    "s_response_c",
                    "s_alert_type_c",
                    "s_title_c",
                    "s_log_error_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLanguageCode = this.Columns["s_language_code_c"];
            this.ColumnErrorCode = this.Columns["s_error_code_c"];
            this.ColumnMessageLine1 = this.Columns["s_message_line_1_c"];
            this.ColumnMessageLine2 = this.Columns["s_message_line_2_c"];
            this.ColumnMessageLine3 = this.Columns["s_message_line_3_c"];
            this.ColumnResponse = this.Columns["s_response_c"];
            this.ColumnAlertType = this.Columns["s_alert_type_c"];
            this.ColumnTitle = this.Columns["s_title_c"];
            this.ColumnLogError = this.Columns["s_log_error_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLanguageCode,
                    this.ColumnErrorCode};
        }
        
        /// get typed set of changes
        public SErrorMessageTable GetChangesTyped()
        {
            return ((SErrorMessageTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SErrorMessageRow NewRowTyped(bool AWithDefaultValues)
        {
            SErrorMessageRow ret = ((SErrorMessageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SErrorMessageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SErrorMessageRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_error_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_response_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_alert_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_log_error_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnErrorCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 12);
            }
            if ((ACol == ColumnMessageLine1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnMessageLine2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnMessageLine3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnResponse))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnAlertType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 48);
            }
            if ((ACol == ColumnLogError))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of error messages used by Petra s_errmsg.p program.  This allows language-specific runtime error messages to be displayed depending on the language of the logged in user.
    [Serializable()]
    public class SErrorMessageRow : System.Data.DataRow
    {
        
        private SErrorMessageTable myTable;
        
        /// Constructor
        public SErrorMessageRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SErrorMessageTable)(this.Table));
        }
        
        /// 
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// 
        public String ErrorCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnErrorCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnErrorCode) 
                            || (((String)(this[this.myTable.ColumnErrorCode])) != value)))
                {
                    this[this.myTable.ColumnErrorCode] = value;
                }
            }
        }
        
        /// 
        public String MessageLine1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine1) 
                            || (((String)(this[this.myTable.ColumnMessageLine1])) != value)))
                {
                    this[this.myTable.ColumnMessageLine1] = value;
                }
            }
        }
        
        /// 
        public String MessageLine2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine2) 
                            || (((String)(this[this.myTable.ColumnMessageLine2])) != value)))
                {
                    this[this.myTable.ColumnMessageLine2] = value;
                }
            }
        }
        
        /// 
        public String MessageLine3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine3) 
                            || (((String)(this[this.myTable.ColumnMessageLine3])) != value)))
                {
                    this[this.myTable.ColumnMessageLine3] = value;
                }
            }
        }
        
        /// 
        public String Response
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnResponse.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnResponse) 
                            || (((String)(this[this.myTable.ColumnResponse])) != value)))
                {
                    this[this.myTable.ColumnResponse] = value;
                }
            }
        }
        
        /// 
        public String AlertType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAlertType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAlertType) 
                            || (((String)(this[this.myTable.ColumnAlertType])) != value)))
                {
                    this[this.myTable.ColumnAlertType] = value;
                }
            }
        }
        
        /// 
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// Determines whether to log the error in the s_error_log table
        public Boolean LogError
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLogError.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLogError) 
                            || (((Boolean)(this[this.myTable.ColumnLogError])) != value)))
                {
                    this[this.myTable.ColumnLogError] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLanguageCode.Ordinal] = "99";
            this.SetNull(this.myTable.ColumnErrorCode);
            this.SetNull(this.myTable.ColumnMessageLine1);
            this.SetNull(this.myTable.ColumnMessageLine2);
            this.SetNull(this.myTable.ColumnMessageLine3);
            this.SetNull(this.myTable.ColumnResponse);
            this[this.myTable.ColumnAlertType.Ordinal] = "Warning";
            this[this.myTable.ColumnTitle.Ordinal] = "Invalid Data Entered";
            this[this.myTable.ColumnLogError.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsMessageLine2Null()
        {
            return this.IsNull(this.myTable.ColumnMessageLine2);
        }
        
        /// assign NULL value
        public void SetMessageLine2Null()
        {
            this.SetNull(this.myTable.ColumnMessageLine2);
        }
        
        /// test for NULL value
        public bool IsMessageLine3Null()
        {
            return this.IsNull(this.myTable.ColumnMessageLine3);
        }
        
        /// assign NULL value
        public void SetMessageLine3Null()
        {
            this.SetNull(this.myTable.ColumnMessageLine3);
        }
        
        /// test for NULL value
        public bool IsResponseNull()
        {
            return this.IsNull(this.myTable.ColumnResponse);
        }
        
        /// assign NULL value
        public void SetResponseNull()
        {
            this.SetNull(this.myTable.ColumnResponse);
        }
        
        /// test for NULL value
        public bool IsAlertTypeNull()
        {
            return this.IsNull(this.myTable.ColumnAlertType);
        }
        
        /// assign NULL value
        public void SetAlertTypeNull()
        {
            this.SetNull(this.myTable.ColumnAlertType);
        }
        
        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }
        
        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }
        
        /// test for NULL value
        public bool IsLogErrorNull()
        {
            return this.IsNull(this.myTable.ColumnLogError);
        }
        
        /// assign NULL value
        public void SetLogErrorNull()
        {
            this.SetNull(this.myTable.ColumnLogError);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Log of captured runtime errors
    [Serializable()]
    public class SErrorLogTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnErrorCode;
        
        /// This is the software release number
        public DataColumn ColumnReleaseNumber;
        
        /// This is the system user id. Each user of the system is allocated one
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnFileName;
        
        /// 
        public DataColumn ColumnProcessId;
        
        /// 
        public DataColumn ColumnDate;
        
        /// 
        public DataColumn ColumnTime;
        
        /// 
        public DataColumn ColumnMessageLine1;
        
        /// 
        public DataColumn ColumnMessageLine2;
        
        /// 
        public DataColumn ColumnMessageLine3;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SErrorLogTable() : 
                base("SErrorLog")
        {
        }
        
        /// constructor
        public SErrorLogTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SErrorLogTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SErrorLogRow this[int i]
        {
            get
            {
                return ((SErrorLogRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetErrorCodeDBName()
        {
            return "s_error_code_c";
        }
        
        /// get help text for column
        public static string GetErrorCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetErrorCodeLabel()
        {
            return "Error Number";
        }
        
        /// get character length for column
        public static short GetErrorCodeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReleaseNumberDBName()
        {
            return "s_release_number_c";
        }
        
        /// get help text for column
        public static string GetReleaseNumberHelp()
        {
            return "This is the software release number";
        }
        
        /// get label of column
        public static string GetReleaseNumberLabel()
        {
            return "Release Number";
        }
        
        /// get character length for column
        public static short GetReleaseNumberLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the user id";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileNameDBName()
        {
            return "s_file_name_c";
        }
        
        /// get help text for column
        public static string GetFileNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileNameLabel()
        {
            return "File Name";
        }
        
        /// get character length for column
        public static short GetFileNameLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessIdDBName()
        {
            return "s_process_id_c";
        }
        
        /// get help text for column
        public static string GetProcessIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProcessIdLabel()
        {
            return "Process ID";
        }
        
        /// get character length for column
        public static short GetProcessIdLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateDBName()
        {
            return "s_date_d";
        }
        
        /// get help text for column
        public static string GetDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeDBName()
        {
            return "s_time_i";
        }
        
        /// get help text for column
        public static string GetTimeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTimeLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetTimeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine1DBName()
        {
            return "s_message_line_1_c";
        }
        
        /// get help text for column
        public static string GetMessageLine1Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine1Label()
        {
            return "Message Line 1";
        }
        
        /// get character length for column
        public static short GetMessageLine1Length()
        {
            return 60;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine2DBName()
        {
            return "s_message_line_2_c";
        }
        
        /// get help text for column
        public static string GetMessageLine2Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine2Label()
        {
            return "Message Line 2";
        }
        
        /// get character length for column
        public static short GetMessageLine2Length()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMessageLine3DBName()
        {
            return "s_message_line_3_c";
        }
        
        /// get help text for column
        public static string GetMessageLine3Help()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMessageLine3Label()
        {
            return "Message Line 3";
        }
        
        /// get character length for column
        public static short GetMessageLine3Length()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SErrorLog";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_error_log";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Error Log";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    2,
                    5,
                    6};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_error_code_c",
                    "s_release_number_c",
                    "s_user_id_c",
                    "s_file_name_c",
                    "s_process_id_c",
                    "s_date_d",
                    "s_time_i",
                    "s_message_line_1_c",
                    "s_message_line_2_c",
                    "s_message_line_3_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnErrorCode = this.Columns["s_error_code_c"];
            this.ColumnReleaseNumber = this.Columns["s_release_number_c"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnFileName = this.Columns["s_file_name_c"];
            this.ColumnProcessId = this.Columns["s_process_id_c"];
            this.ColumnDate = this.Columns["s_date_d"];
            this.ColumnTime = this.Columns["s_time_i"];
            this.ColumnMessageLine1 = this.Columns["s_message_line_1_c"];
            this.ColumnMessageLine2 = this.Columns["s_message_line_2_c"];
            this.ColumnMessageLine3 = this.Columns["s_message_line_3_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnErrorCode,
                    this.ColumnUserId,
                    this.ColumnDate,
                    this.ColumnTime};
        }
        
        /// get typed set of changes
        public SErrorLogTable GetChangesTyped()
        {
            return ((SErrorLogTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SErrorLogRow NewRowTyped(bool AWithDefaultValues)
        {
            SErrorLogRow ret = ((SErrorLogRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SErrorLogRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SErrorLogRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_error_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_release_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_file_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_process_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_message_line_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnErrorCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 12);
            }
            if ((ACol == ColumnReleaseNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFileName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnProcessId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMessageLine1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 120);
            }
            if ((ACol == ColumnMessageLine2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnMessageLine3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Log of captured runtime errors
    [Serializable()]
    public class SErrorLogRow : System.Data.DataRow
    {
        
        private SErrorLogTable myTable;
        
        /// Constructor
        public SErrorLogRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SErrorLogTable)(this.Table));
        }
        
        /// 
        public String ErrorCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnErrorCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnErrorCode) 
                            || (((String)(this[this.myTable.ColumnErrorCode])) != value)))
                {
                    this[this.myTable.ColumnErrorCode] = value;
                }
            }
        }
        
        /// This is the software release number
        public String ReleaseNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReleaseNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReleaseNumber) 
                            || (((String)(this[this.myTable.ColumnReleaseNumber])) != value)))
                {
                    this[this.myTable.ColumnReleaseNumber] = value;
                }
            }
        }
        
        /// This is the system user id. Each user of the system is allocated one
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public String FileName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileName) 
                            || (((String)(this[this.myTable.ColumnFileName])) != value)))
                {
                    this[this.myTable.ColumnFileName] = value;
                }
            }
        }
        
        /// 
        public String ProcessId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessId) 
                            || (((String)(this[this.myTable.ColumnProcessId])) != value)))
                {
                    this[this.myTable.ColumnProcessId] = value;
                }
            }
        }
        
        /// 
        public System.DateTime Date
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnDate])) != value)))
                {
                    this[this.myTable.ColumnDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Int32 Time
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTime) 
                            || (((Int32)(this[this.myTable.ColumnTime])) != value)))
                {
                    this[this.myTable.ColumnTime] = value;
                }
            }
        }
        
        /// 
        public String MessageLine1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine1) 
                            || (((String)(this[this.myTable.ColumnMessageLine1])) != value)))
                {
                    this[this.myTable.ColumnMessageLine1] = value;
                }
            }
        }
        
        /// 
        public String MessageLine2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine2) 
                            || (((String)(this[this.myTable.ColumnMessageLine2])) != value)))
                {
                    this[this.myTable.ColumnMessageLine2] = value;
                }
            }
        }
        
        /// 
        public String MessageLine3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMessageLine3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMessageLine3) 
                            || (((String)(this[this.myTable.ColumnMessageLine3])) != value)))
                {
                    this[this.myTable.ColumnMessageLine3] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnErrorCode);
            this.SetNull(this.myTable.ColumnReleaseNumber);
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnFileName);
            this.SetNull(this.myTable.ColumnProcessId);
            this[this.myTable.ColumnDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTime.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMessageLine1);
            this.SetNull(this.myTable.ColumnMessageLine2);
            this.SetNull(this.myTable.ColumnMessageLine3);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProcessIdNull()
        {
            return this.IsNull(this.myTable.ColumnProcessId);
        }
        
        /// assign NULL value
        public void SetProcessIdNull()
        {
            this.SetNull(this.myTable.ColumnProcessId);
        }
        
        /// test for NULL value
        public bool IsMessageLine2Null()
        {
            return this.IsNull(this.myTable.ColumnMessageLine2);
        }
        
        /// assign NULL value
        public void SetMessageLine2Null()
        {
            this.SetNull(this.myTable.ColumnMessageLine2);
        }
        
        /// test for NULL value
        public bool IsMessageLine3Null()
        {
            return this.IsNull(this.myTable.ColumnMessageLine3);
        }
        
        /// assign NULL value
        public void SetMessageLine3Null()
        {
            this.SetNull(this.myTable.ColumnMessageLine3);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Gives the group access to a particular function
    [Serializable()]
    public class SGroupFunctionTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnUnitKey;
        
        /// Identifier for the particular function
        public DataColumn ColumnFunctionId;
        
        /// Does the group have access to this function?
        public DataColumn ColumnCanAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupFunctionTable() : 
                base("SGroupFunction")
        {
        }
        
        /// constructor
        public SGroupFunctionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupFunctionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupFunctionRow this[int i]
        {
            get
            {
                return ((SGroupFunctionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "s_unit_key_n";
        }
        
        /// get help text for column
        public static string GetUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetUnitKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunctionIdDBName()
        {
            return "s_function_id_c";
        }
        
        /// get help text for column
        public static string GetFunctionIdHelp()
        {
            return "Identifier for the particular function";
        }
        
        /// get label of column
        public static string GetFunctionIdLabel()
        {
            return "Function ID";
        }
        
        /// get character length for column
        public static short GetFunctionIdLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCanAccessDBName()
        {
            return "s_can_access_l";
        }
        
        /// get help text for column
        public static string GetCanAccessHelp()
        {
            return "Does this group have access to this function?";
        }
        
        /// get label of column
        public static string GetCanAccessLabel()
        {
            return "Access Granted?";
        }
        
        /// get display format for column
        public static short GetCanAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupFunction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_function";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Functions";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_unit_key_n",
                    "s_function_id_c",
                    "s_can_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnUnitKey = this.Columns["s_unit_key_n"];
            this.ColumnFunctionId = this.Columns["s_function_id_c"];
            this.ColumnCanAccess = this.Columns["s_can_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnUnitKey,
                    this.ColumnFunctionId};
        }
        
        /// get typed set of changes
        public SGroupFunctionTable GetChangesTyped()
        {
            return ((SGroupFunctionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupFunctionRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupFunctionRow ret = ((SGroupFunctionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupFunctionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupFunctionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_function_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_can_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFunctionId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnCanAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Gives the group access to a particular function
    [Serializable()]
    public class SGroupFunctionRow : System.Data.DataRow
    {
        
        private SGroupFunctionTable myTable;
        
        /// Constructor
        public SGroupFunctionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupFunctionTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }
        
        /// Identifier for the particular function
        public String FunctionId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunctionId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunctionId) 
                            || (((String)(this[this.myTable.ColumnFunctionId])) != value)))
                {
                    this[this.myTable.ColumnFunctionId] = value;
                }
            }
        }
        
        /// Does the group have access to this function?
        public Boolean CanAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCanAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCanAccess) 
                            || (((Boolean)(this[this.myTable.ColumnCanAccess])) != value)))
                {
                    this[this.myTable.ColumnCanAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFunctionId);
            this.SetNull(this.myTable.ColumnCanAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCanAccessNull()
        {
            return this.IsNull(this.myTable.ColumnCanAccess);
        }
        
        /// assign NULL value
        public void SetCanAccessNull()
        {
            this.SetNull(this.myTable.ColumnCanAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Contains all Petra functions to which access can be granted or denied
    [Serializable()]
    public class SFunctionTable : TTypedDataTable
    {
        
        /// Identifier for the particular function
        public DataColumn ColumnFunctionId;
        
        /// Petra Module which contains the function
        public DataColumn ColumnModuleName;
        
        /// Petra Sub-Module which contains the function
        public DataColumn ColumnSubModuleName;
        
        /// Function name
        public DataColumn ColumnFunctionName;
        
        /// Filename associated with the function
        public DataColumn ColumnFilename;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SFunctionTable() : 
                base("SFunction")
        {
        }
        
        /// constructor
        public SFunctionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SFunctionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SFunctionRow this[int i]
        {
            get
            {
                return ((SFunctionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunctionIdDBName()
        {
            return "s_function_id_c";
        }
        
        /// get help text for column
        public static string GetFunctionIdHelp()
        {
            return "Identifier for the particular function";
        }
        
        /// get label of column
        public static string GetFunctionIdLabel()
        {
            return "Function ID";
        }
        
        /// get character length for column
        public static short GetFunctionIdLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleNameDBName()
        {
            return "s_module_name_c";
        }
        
        /// get help text for column
        public static string GetModuleNameHelp()
        {
            return "Petra Module which contains the function";
        }
        
        /// get label of column
        public static string GetModuleNameLabel()
        {
            return "Module Name";
        }
        
        /// get character length for column
        public static short GetModuleNameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubModuleNameDBName()
        {
            return "s_sub_module_name_c";
        }
        
        /// get help text for column
        public static string GetSubModuleNameHelp()
        {
            return "Petra Sub-Module which contains the function";
        }
        
        /// get label of column
        public static string GetSubModuleNameLabel()
        {
            return "Sub-Module Name";
        }
        
        /// get character length for column
        public static short GetSubModuleNameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunctionNameDBName()
        {
            return "s_function_name_c";
        }
        
        /// get help text for column
        public static string GetFunctionNameHelp()
        {
            return "Function name";
        }
        
        /// get label of column
        public static string GetFunctionNameLabel()
        {
            return "Function Name";
        }
        
        /// get character length for column
        public static short GetFunctionNameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFilenameDBName()
        {
            return "s_filename_c";
        }
        
        /// get help text for column
        public static string GetFilenameHelp()
        {
            return "Filename associated with the function";
        }
        
        /// get label of column
        public static string GetFilenameLabel()
        {
            return "Filename";
        }
        
        /// get character length for column
        public static short GetFilenameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SFunction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_function";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Functions";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_function_id_c",
                    "s_module_name_c",
                    "s_sub_module_name_c",
                    "s_function_name_c",
                    "s_filename_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFunctionId = this.Columns["s_function_id_c"];
            this.ColumnModuleName = this.Columns["s_module_name_c"];
            this.ColumnSubModuleName = this.Columns["s_sub_module_name_c"];
            this.ColumnFunctionName = this.Columns["s_function_name_c"];
            this.ColumnFilename = this.Columns["s_filename_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFunctionId};
        }
        
        /// get typed set of changes
        public SFunctionTable GetChangesTyped()
        {
            return ((SFunctionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SFunctionRow NewRowTyped(bool AWithDefaultValues)
        {
            SFunctionRow ret = ((SFunctionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SFunctionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SFunctionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_function_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_sub_module_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_function_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_filename_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFunctionId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnModuleName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnSubModuleName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnFunctionName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnFilename))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Contains all Petra functions to which access can be granted or denied
    [Serializable()]
    public class SFunctionRow : System.Data.DataRow
    {
        
        private SFunctionTable myTable;
        
        /// Constructor
        public SFunctionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SFunctionTable)(this.Table));
        }
        
        /// Identifier for the particular function
        public String FunctionId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunctionId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunctionId) 
                            || (((String)(this[this.myTable.ColumnFunctionId])) != value)))
                {
                    this[this.myTable.ColumnFunctionId] = value;
                }
            }
        }
        
        /// Petra Module which contains the function
        public String ModuleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleName) 
                            || (((String)(this[this.myTable.ColumnModuleName])) != value)))
                {
                    this[this.myTable.ColumnModuleName] = value;
                }
            }
        }
        
        /// Petra Sub-Module which contains the function
        public String SubModuleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubModuleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubModuleName) 
                            || (((String)(this[this.myTable.ColumnSubModuleName])) != value)))
                {
                    this[this.myTable.ColumnSubModuleName] = value;
                }
            }
        }
        
        /// Function name
        public String FunctionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunctionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunctionName) 
                            || (((String)(this[this.myTable.ColumnFunctionName])) != value)))
                {
                    this[this.myTable.ColumnFunctionName] = value;
                }
            }
        }
        
        /// Filename associated with the function
        public String Filename
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFilename.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFilename) 
                            || (((String)(this[this.myTable.ColumnFilename])) != value)))
                {
                    this[this.myTable.ColumnFilename] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFunctionId);
            this.SetNull(this.myTable.ColumnModuleName);
            this.SetNull(this.myTable.ColumnSubModuleName);
            this.SetNull(this.myTable.ColumnFunctionName);
            this.SetNull(this.myTable.ColumnFilename);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSubModuleNameNull()
        {
            return this.IsNull(this.myTable.ColumnSubModuleName);
        }
        
        /// assign NULL value
        public void SetSubModuleNameNull()
        {
            this.SetNull(this.myTable.ColumnSubModuleName);
        }
        
        /// test for NULL value
        public bool IsFilenameNull()
        {
            return this.IsNull(this.myTable.ColumnFilename);
        }
        
        /// assign NULL value
        public void SetFilenameNull()
        {
            this.SetNull(this.myTable.ColumnFilename);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Associates groups with roles
    [Serializable()]
    public class SJobGroupTable : TTypedDataTable
    {
        
        /// Name of the position.
        public DataColumn ColumnPositionName;
        
        /// Scope of the position.
        public DataColumn ColumnPositionScope;
        
        /// Position record identifier
        public DataColumn ColumnJobKey;
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that this role/group assignment relates to
        public DataColumn ColumnUnitKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SJobGroupTable() : 
                base("SJobGroup")
        {
        }
        
        /// constructor
        public SJobGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SJobGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SJobGroupRow this[int i]
        {
            get
            {
                return ((SJobGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPositionNameDBName()
        {
            return "pt_position_name_c";
        }
        
        /// get help text for column
        public static string GetPositionNameHelp()
        {
            return "Name of the position.";
        }
        
        /// get label of column
        public static string GetPositionNameLabel()
        {
            return "Position";
        }
        
        /// get character length for column
        public static short GetPositionNameLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPositionScopeDBName()
        {
            return "pt_position_scope_c";
        }
        
        /// get help text for column
        public static string GetPositionScopeHelp()
        {
            return "Scope of the position.";
        }
        
        /// get label of column
        public static string GetPositionScopeLabel()
        {
            return "Position Scope";
        }
        
        /// get character length for column
        public static short GetPositionScopeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJobKeyDBName()
        {
            return "um_job_key_i";
        }
        
        /// get help text for column
        public static string GetJobKeyHelp()
        {
            return "Position record identifier";
        }
        
        /// get label of column
        public static string GetJobKeyLabel()
        {
            return "um_job_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "s_unit_key_n";
        }
        
        /// get help text for column
        public static string GetUnitKeyHelp()
        {
            return "Field that this role/group assignment relates to";
        }
        
        /// get label of column
        public static string GetUnitKeyLabel()
        {
            return "Field";
        }
        
        /// get display format for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SJobGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_job_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Job Groups";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "pt_position_name_c",
                    "pt_position_scope_c",
                    "um_job_key_i",
                    "s_group_id_c",
                    "s_unit_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPositionName = this.Columns["pt_position_name_c"];
            this.ColumnPositionScope = this.Columns["pt_position_scope_c"];
            this.ColumnJobKey = this.Columns["um_job_key_i"];
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnUnitKey = this.Columns["s_unit_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPositionName,
                    this.ColumnPositionScope,
                    this.ColumnJobKey,
                    this.ColumnGroupId,
                    this.ColumnUnitKey};
        }
        
        /// get typed set of changes
        public SJobGroupTable GetChangesTyped()
        {
            return ((SJobGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SJobGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            SJobGroupRow ret = ((SJobGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SJobGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SJobGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_position_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_position_scope_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("um_job_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPositionName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnPositionScope))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnJobKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Associates groups with roles
    [Serializable()]
    public class SJobGroupRow : System.Data.DataRow
    {
        
        private SJobGroupTable myTable;
        
        /// Constructor
        public SJobGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SJobGroupTable)(this.Table));
        }
        
        /// Name of the position.
        public String PositionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionName) 
                            || (((String)(this[this.myTable.ColumnPositionName])) != value)))
                {
                    this[this.myTable.ColumnPositionName] = value;
                }
            }
        }
        
        /// Scope of the position.
        public String PositionScope
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionScope.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionScope) 
                            || (((String)(this[this.myTable.ColumnPositionScope])) != value)))
                {
                    this[this.myTable.ColumnPositionScope] = value;
                }
            }
        }
        
        /// Position record identifier
        public Int32 JobKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJobKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJobKey) 
                            || (((Int32)(this[this.myTable.ColumnJobKey])) != value)))
                {
                    this[this.myTable.ColumnJobKey] = value;
                }
            }
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that this role/group assignment relates to
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPositionName);
            this.SetNull(this.myTable.ColumnPositionScope);
            this.SetNull(this.myTable.ColumnJobKey);
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Associates a Group with a Partner Set. This may be an inclusive or exclusive association and may be read, write, delete
    [Serializable()]
    public class SGroupPartnerSetTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Identifier for the Partner Set
        public DataColumn ColumnPartnerSetId;
        
        /// Field that the Partner Set relates to
        public DataColumn ColumnPartnerSetUnitKey;
        
        /// Is the association between the Group and Partner Set inclusive or exclusive
        public DataColumn ColumnInclusiveOrExclusive;
        
        /// If the association is inclusive this will grant read access to the Partners, otherwise it will deny read access to the Partners
        public DataColumn ColumnReadAccess;
        
        /// If the association is inclusive this will grant write access to the Partners, otherwise it will deny write access to the Partners
        public DataColumn ColumnWriteAccess;
        
        /// If the association is inclusive this will grant delete access to the Partners, otherwise it will deny delete access to the Partners
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupPartnerSetTable() : 
                base("SGroupPartnerSet")
        {
        }
        
        /// constructor
        public SGroupPartnerSetTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupPartnerSetTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupPartnerSetRow this[int i]
        {
            get
            {
                return ((SGroupPartnerSetRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetIdDBName()
        {
            return "p_partner_set_id_c";
        }
        
        /// get help text for column
        public static string GetPartnerSetIdHelp()
        {
            return "Identifier for the Partner Set";
        }
        
        /// get label of column
        public static string GetPartnerSetIdLabel()
        {
            return "Partner Set ID";
        }
        
        /// get character length for column
        public static short GetPartnerSetIdLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerSetUnitKeyDBName()
        {
            return "p_partner_set_unit_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerSetUnitKeyHelp()
        {
            return "Field that the Partner Set relates to";
        }
        
        /// get label of column
        public static string GetPartnerSetUnitKeyLabel()
        {
            return "Field of Partner Set";
        }
        
        /// get display format for column
        public static short GetPartnerSetUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetInclusiveOrExclusiveDBName()
        {
            return "s_inclusive_or_exclusive_l";
        }
        
        /// get help text for column
        public static string GetInclusiveOrExclusiveHelp()
        {
            return "Is the association between the Group and Partner Set inclusive or exclusive";
        }
        
        /// get label of column
        public static string GetInclusiveOrExclusiveLabel()
        {
            return "Include or Exclude?";
        }
        
        /// get display format for column
        public static short GetInclusiveOrExclusiveLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "If the association is inclusive this will grant read access to the Partners, othe" +
                "rwise it will deny read access to the Partners";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "If the association is inclusive this will grant write access to the Partners, oth" +
                "erwise it will deny write access to the Partners";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "If the association is inclusive this will grant delete access to the Partners, ot" +
                "herwise it will deny delete access to the Partners";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupPartnerSet";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_partner_set";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Partner Sets";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_partner_set_id_c",
                    "p_partner_set_unit_key_n",
                    "s_inclusive_or_exclusive_l",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnPartnerSetId = this.Columns["p_partner_set_id_c"];
            this.ColumnPartnerSetUnitKey = this.Columns["p_partner_set_unit_key_n"];
            this.ColumnInclusiveOrExclusive = this.Columns["s_inclusive_or_exclusive_l"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnPartnerSetId,
                    this.ColumnPartnerSetUnitKey};
        }
        
        /// get typed set of changes
        public SGroupPartnerSetTable GetChangesTyped()
        {
            return ((SGroupPartnerSetTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupPartnerSetRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupPartnerSetRow ret = ((SGroupPartnerSetRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupPartnerSetRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupPartnerSetRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_set_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_inclusive_or_exclusive_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerSetId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnPartnerSetUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnInclusiveOrExclusive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Associates a Group with a Partner Set. This may be an inclusive or exclusive association and may be read, write, delete
    [Serializable()]
    public class SGroupPartnerSetRow : System.Data.DataRow
    {
        
        private SGroupPartnerSetTable myTable;
        
        /// Constructor
        public SGroupPartnerSetRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupPartnerSetTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Identifier for the Partner Set
        public String PartnerSetId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetId) 
                            || (((String)(this[this.myTable.ColumnPartnerSetId])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetId] = value;
                }
            }
        }
        
        /// Field that the Partner Set relates to
        public Int64 PartnerSetUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerSetUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerSetUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerSetUnitKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerSetUnitKey] = value;
                }
            }
        }
        
        /// Is the association between the Group and Partner Set inclusive or exclusive
        public Boolean InclusiveOrExclusive
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInclusiveOrExclusive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInclusiveOrExclusive) 
                            || (((Boolean)(this[this.myTable.ColumnInclusiveOrExclusive])) != value)))
                {
                    this[this.myTable.ColumnInclusiveOrExclusive] = value;
                }
            }
        }
        
        /// If the association is inclusive this will grant read access to the Partners, otherwise it will deny read access to the Partners
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// If the association is inclusive this will grant write access to the Partners, otherwise it will deny write access to the Partners
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// If the association is inclusive this will grant delete access to the Partners, otherwise it will deny delete access to the Partners
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerSetId);
            this[this.myTable.ColumnPartnerSetUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnInclusiveOrExclusive);
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific gift, if the gift is restricted
    [Serializable()]
    public class SGroupGiftTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Ledger Number
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnGiftTransactionNumber;
        
        /// Control read access to the gift
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the gift
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the gift
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupGiftTable() : 
                base("SGroupGift")
        {
        }
        
        /// constructor
        public SGroupGiftTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupGiftTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupGiftRow this[int i]
        {
            get
            {
                return ((SGroupGiftRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftTransactionNumberDBName()
        {
            return "a_gift_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetGiftTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetGiftTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetGiftTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the gift";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the gift";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the gift";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupGift";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_gift";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Gifts";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_gift_transaction_number_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnGiftTransactionNumber = this.Columns["a_gift_transaction_number_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnGiftTransactionNumber};
        }
        
        /// get typed set of changes
        public SGroupGiftTable GetChangesTyped()
        {
            return ((SGroupGiftTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupGiftRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupGiftRow ret = ((SGroupGiftRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupGiftRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupGiftRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGiftTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific gift, if the gift is restricted
    [Serializable()]
    public class SGroupGiftRow : System.Data.DataRow
    {
        
        private SGroupGiftTable myTable;
        
        /// Constructor
        public SGroupGiftRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupGiftTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Ledger Number
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 GiftTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnGiftTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnGiftTransactionNumber] = value;
                }
            }
        }
        
        /// Control read access to the gift
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the gift
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the gift
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnGiftTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to gifts with a specific motivation
    [Serializable()]
    public class SGroupMotivationTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Ledger Number
        public DataColumn ColumnLedgerNumber;
        
        /// This defines a motivation group.
        public DataColumn ColumnMotivationGroupCode;
        
        /// This defines the motivation detail within a motivation group.
        public DataColumn ColumnMotivationDetailCode;
        
        /// Control read access to gifts with this motivation
        public DataColumn ColumnReadAccess;
        
        /// Control write access to gifts with this motivation
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to gifts with this motivation
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupMotivationTable() : 
                base("SGroupMotivation")
        {
        }
        
        /// constructor
        public SGroupMotivationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupMotivationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupMotivationRow this[int i]
        {
            get
            {
                return ((SGroupMotivationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationGroupCodeDBName()
        {
            return "a_motivation_group_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationGroupCodeHelp()
        {
            return "Enter a motivation group code";
        }
        
        /// get label of column
        public static string GetMotivationGroupCodeLabel()
        {
            return "Motivation Group Code";
        }
        
        /// get character length for column
        public static short GetMotivationGroupCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationDetailCodeDBName()
        {
            return "a_motivation_detail_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationDetailCodeHelp()
        {
            return "Enter a motivation detail code";
        }
        
        /// get label of column
        public static string GetMotivationDetailCodeLabel()
        {
            return "Motivation Detail Code";
        }
        
        /// get character length for column
        public static short GetMotivationDetailCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to gifts with this motivation";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to gifts with this motivation";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to gifts with this motivation";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupMotivation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_motivation";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Motivations";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "a_ledger_number_i",
                    "a_motivation_group_code_c",
                    "a_motivation_detail_code_c",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnMotivationGroupCode = this.Columns["a_motivation_group_code_c"];
            this.ColumnMotivationDetailCode = this.Columns["a_motivation_detail_code_c"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnLedgerNumber,
                    this.ColumnMotivationGroupCode,
                    this.ColumnMotivationDetailCode};
        }
        
        /// get typed set of changes
        public SGroupMotivationTable GetChangesTyped()
        {
            return ((SGroupMotivationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupMotivationRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupMotivationRow ret = ((SGroupMotivationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupMotivationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupMotivationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_group_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_detail_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMotivationGroupCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMotivationDetailCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to gifts with a specific motivation
    [Serializable()]
    public class SGroupMotivationRow : System.Data.DataRow
    {
        
        private SGroupMotivationTable myTable;
        
        /// Constructor
        public SGroupMotivationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupMotivationTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Ledger Number
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This defines a motivation group.
        public String MotivationGroupCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationGroupCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationGroupCode) 
                            || (((String)(this[this.myTable.ColumnMotivationGroupCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationGroupCode] = value;
                }
            }
        }
        
        /// This defines the motivation detail within a motivation group.
        public String MotivationDetailCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationDetailCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationDetailCode) 
                            || (((String)(this[this.myTable.ColumnMotivationDetailCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationDetailCode] = value;
                }
            }
        }
        
        /// Control read access to gifts with this motivation
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to gifts with this motivation
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to gifts with this motivation
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific Partner contact, if the contact is restricted
    [Serializable()]
    public class SGroupPartnerContactTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// identifying key for p_partner_contact
        public DataColumn ColumnContactId;
        
        /// Control read access to the contact
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the contact
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the contact
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupPartnerContactTable() : 
                base("SGroupPartnerContact")
        {
        }
        
        /// constructor
        public SGroupPartnerContactTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupPartnerContactTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupPartnerContactRow this[int i]
        {
            get
            {
                return ((SGroupPartnerContactRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactIdDBName()
        {
            return "p_contact_id_i";
        }
        
        /// get help text for column
        public static string GetContactIdHelp()
        {
            return "identifying key for p_partner_contact";
        }
        
        /// get label of column
        public static string GetContactIdLabel()
        {
            return "Contact ID";
        }
        
        /// get display format for column
        public static short GetContactIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the contact";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the contact";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the contact";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupPartnerContact";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_partner_contact";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Partner Contacts";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_contact_id_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnContactId = this.Columns["p_contact_id_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnContactId};
        }
        
        /// get typed set of changes
        public SGroupPartnerContactTable GetChangesTyped()
        {
            return ((SGroupPartnerContactTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupPartnerContactRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupPartnerContactRow ret = ((SGroupPartnerContactRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupPartnerContactRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupPartnerContactRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnContactId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific Partner contact, if the contact is restricted
    [Serializable()]
    public class SGroupPartnerContactRow : System.Data.DataRow
    {
        
        private SGroupPartnerContactTable myTable;
        
        /// Constructor
        public SGroupPartnerContactRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupPartnerContactTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// identifying key for p_partner_contact
        public Int32 ContactId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactId) 
                            || (((Int32)(this[this.myTable.ColumnContactId])) != value)))
                {
                    this[this.myTable.ColumnContactId] = value;
                }
            }
        }
        
        /// Control read access to the contact
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the contact
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the contact
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnContactId.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific Partner reminder, if the reminder is restricted
    [Serializable()]
    public class SGroupPartnerReminderTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Partner key of Partner to which the reminder is related
        public DataColumn ColumnPartnerKey;
        
        /// ID of Contact to which reminder relates. Null means that reminder relates just to a Partner
        public DataColumn ColumnContactId;
        
        /// identifying key for p_partner_reminder
        public DataColumn ColumnReminderId;
        
        /// Control read access to the reminder
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the reminder
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the reminder
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupPartnerReminderTable() : 
                base("SGroupPartnerReminder")
        {
        }
        
        /// constructor
        public SGroupPartnerReminderTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupPartnerReminderTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupPartnerReminderRow this[int i]
        {
            get
            {
                return ((SGroupPartnerReminderRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which the reminder is related";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContactIdDBName()
        {
            return "p_contact_id_i";
        }
        
        /// get help text for column
        public static string GetContactIdHelp()
        {
            return "ID of Contact to which reminder relates. Null means that reminder relates just to" +
                " a Partner";
        }
        
        /// get label of column
        public static string GetContactIdLabel()
        {
            return "Contact ID";
        }
        
        /// get display format for column
        public static short GetContactIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReminderIdDBName()
        {
            return "p_reminder_id_i";
        }
        
        /// get help text for column
        public static string GetReminderIdHelp()
        {
            return "identifying key for p_partner_reminder";
        }
        
        /// get label of column
        public static string GetReminderIdLabel()
        {
            return "Reminder ID";
        }
        
        /// get display format for column
        public static short GetReminderIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the reminder";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the reminder";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the reminder";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupPartnerReminder";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_partner_reminder";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Partner Reminders";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_partner_key_n",
                    "p_contact_id_i",
                    "p_reminder_id_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnContactId = this.Columns["p_contact_id_i"];
            this.ColumnReminderId = this.Columns["p_reminder_id_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnPartnerKey,
                    this.ColumnContactId,
                    this.ColumnReminderId};
        }
        
        /// get typed set of changes
        public SGroupPartnerReminderTable GetChangesTyped()
        {
            return ((SGroupPartnerReminderTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupPartnerReminderRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupPartnerReminderRow ret = ((SGroupPartnerReminderRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupPartnerReminderRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupPartnerReminderRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_contact_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_reminder_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnContactId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReminderId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific Partner reminder, if the reminder is restricted
    [Serializable()]
    public class SGroupPartnerReminderRow : System.Data.DataRow
    {
        
        private SGroupPartnerReminderTable myTable;
        
        /// Constructor
        public SGroupPartnerReminderRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupPartnerReminderTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Partner key of Partner to which the reminder is related
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// ID of Contact to which reminder relates. Null means that reminder relates just to a Partner
        public Int32 ContactId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactId) 
                            || (((Int32)(this[this.myTable.ColumnContactId])) != value)))
                {
                    this[this.myTable.ColumnContactId] = value;
                }
            }
        }
        
        /// identifying key for p_partner_reminder
        public Int32 ReminderId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReminderId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReminderId) 
                            || (((Int32)(this[this.myTable.ColumnReminderId])) != value)))
                {
                    this[this.myTable.ColumnReminderId] = value;
                }
            }
        }
        
        /// Control read access to the reminder
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the reminder
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the reminder
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnContactId);
            this[this.myTable.ColumnReminderId.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsContactIdNull()
        {
            return this.IsNull(this.myTable.ColumnContactId);
        }
        
        /// assign NULL value
        public void SetContactIdNull()
        {
            this.SetNull(this.myTable.ColumnContactId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific location, if the Location is restricted
    [Serializable()]
    public class SGroupLocationTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public DataColumn ColumnSiteKey;
        
        /// 
        public DataColumn ColumnLocationKey;
        
        /// Control read access to the location
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the location
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the location
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupLocationTable() : 
                base("SGroupLocation")
        {
        }
        
        /// constructor
        public SGroupLocationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupLocationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupLocationRow this[int i]
        {
            get
            {
                return ((SGroupLocationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }
        
        /// get help text for column
        public static string GetSiteKeyHelp()
        {
            return "Enter the site key";
        }
        
        /// get label of column
        public static string GetSiteKeyLabel()
        {
            return "Site Key";
        }
        
        /// get display format for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationKeyDBName()
        {
            return "p_location_key_i";
        }
        
        /// get help text for column
        public static string GetLocationKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLocationKeyLabel()
        {
            return "Location Key";
        }
        
        /// get display format for column
        public static short GetLocationKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the location";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the location";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the location";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupLocation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_location";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Location";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_site_key_n",
                    "p_location_key_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnLocationKey = this.Columns["p_location_key_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnSiteKey,
                    this.ColumnLocationKey};
        }
        
        /// get typed set of changes
        public SGroupLocationTable GetChangesTyped()
        {
            return ((SGroupLocationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupLocationRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupLocationRow ret = ((SGroupLocationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupLocationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupLocationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_location_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnSiteKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLocationKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific location, if the Location is restricted
    [Serializable()]
    public class SGroupLocationRow : System.Data.DataRow
    {
        
        private SGroupLocationTable myTable;
        
        /// Constructor
        public SGroupLocationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupLocationTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey) 
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }
        
        /// 
        public Int32 LocationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationKey) 
                            || (((Int32)(this[this.myTable.ColumnLocationKey])) != value)))
                {
                    this[this.myTable.ColumnLocationKey] = value;
                }
            }
        }
        
        /// Control read access to the location
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the location
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the location
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnLocationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific partner location, if the Partner Location is restricted
    [Serializable()]
    public class SGroupPartnerLocationTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Partner key of Partner to which the location is related
        public DataColumn ColumnPartnerKey;
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public DataColumn ColumnSiteKey;
        
        /// 
        public DataColumn ColumnLocationKey;
        
        /// Control read access to the partner location
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the partner location
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the partner location
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupPartnerLocationTable() : 
                base("SGroupPartnerLocation")
        {
        }
        
        /// constructor
        public SGroupPartnerLocationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupPartnerLocationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupPartnerLocationRow this[int i]
        {
            get
            {
                return ((SGroupPartnerLocationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key of Partner to which the location is related";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }
        
        /// get help text for column
        public static string GetSiteKeyHelp()
        {
            return "Enter the site key";
        }
        
        /// get label of column
        public static string GetSiteKeyLabel()
        {
            return "Site Key";
        }
        
        /// get display format for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLocationKeyDBName()
        {
            return "p_location_key_i";
        }
        
        /// get help text for column
        public static string GetLocationKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLocationKeyLabel()
        {
            return "Location Key";
        }
        
        /// get display format for column
        public static short GetLocationKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the partner location";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the partner location";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the partner location";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupPartnerLocation";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_partner_location";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Partner Location";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_partner_key_n",
                    "p_site_key_n",
                    "p_location_key_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnLocationKey = this.Columns["p_location_key_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnPartnerKey,
                    this.ColumnSiteKey,
                    this.ColumnLocationKey};
        }
        
        /// get typed set of changes
        public SGroupPartnerLocationTable GetChangesTyped()
        {
            return ((SGroupPartnerLocationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupPartnerLocationRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupPartnerLocationRow ret = ((SGroupPartnerLocationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupPartnerLocationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupPartnerLocationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_location_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnSiteKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLocationKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific partner location, if the Partner Location is restricted
    [Serializable()]
    public class SGroupPartnerLocationRow : System.Data.DataRow
    {
        
        private SGroupPartnerLocationTable myTable;
        
        /// Constructor
        public SGroupPartnerLocationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupPartnerLocationTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Partner key of Partner to which the location is related
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This is the key that tell what site created this location, it will help to merge addresses when doing imports
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey) 
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }
        
        /// 
        public Int32 LocationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLocationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLocationKey) 
                            || (((Int32)(this[this.myTable.ColumnLocationKey])) != value)))
                {
                    this[this.myTable.ColumnLocationKey] = value;
                }
            }
        }
        
        /// Control read access to the partner location
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the partner location
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the partner location
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnLocationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Controls the access that a group has to a specific Data Label, if the Data Label is restricted
    [Serializable()]
    public class SGroupDataLabelTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Identifying key for p_data_label
        public DataColumn ColumnDataLabelKey;
        
        /// Control read access to the data label
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the data label
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the data label
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupDataLabelTable() : 
                base("SGroupDataLabel")
        {
        }
        
        /// constructor
        public SGroupDataLabelTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupDataLabelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupDataLabelRow this[int i]
        {
            get
            {
                return ((SGroupDataLabelRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDataLabelKeyDBName()
        {
            return "p_data_label_key_i";
        }
        
        /// get help text for column
        public static string GetDataLabelKeyHelp()
        {
            return "Identifying key for p_data_label";
        }
        
        /// get label of column
        public static string GetDataLabelKeyLabel()
        {
            return "p_data_label_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the data label";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the data label";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the data label";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupDataLabel";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_data_label";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Data Label";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_data_label_key_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnDataLabelKey = this.Columns["p_data_label_key_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnDataLabelKey};
        }
        
        /// get typed set of changes
        public SGroupDataLabelTable GetChangesTyped()
        {
            return ((SGroupDataLabelTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupDataLabelRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupDataLabelRow ret = ((SGroupDataLabelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupDataLabelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupDataLabelRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_data_label_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDataLabelKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Controls the access that a group has to a specific Data Label, if the Data Label is restricted
    [Serializable()]
    public class SGroupDataLabelRow : System.Data.DataRow
    {
        
        private SGroupDataLabelTable myTable;
        
        /// Constructor
        public SGroupDataLabelRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupDataLabelTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Identifying key for p_data_label
        public Int32 DataLabelKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDataLabelKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDataLabelKey) 
                            || (((Int32)(this[this.myTable.ColumnDataLabelKey])) != value)))
                {
                    this[this.myTable.ColumnDataLabelKey] = value;
                }
            }
        }
        
        /// Control read access to the data label
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the data label
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the data label
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDataLabelKey);
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Gives a group access to a specific ledger
    [Serializable()]
    public class SGroupLedgerTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Ledger Number
        public DataColumn ColumnLedgerNumber;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupLedgerTable() : 
                base("SGroupLedger")
        {
        }
        
        /// constructor
        public SGroupLedgerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupLedgerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupLedgerRow this[int i]
        {
            get
            {
                return ((SGroupLedgerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupLedger";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_ledger";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Ledger";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "a_ledger_number_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnLedgerNumber};
        }
        
        /// get typed set of changes
        public SGroupLedgerTable GetChangesTyped()
        {
            return ((SGroupLedgerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupLedgerRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupLedgerRow ret = ((SGroupLedgerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupLedgerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupLedgerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Gives a group access to a specific ledger
    [Serializable()]
    public class SGroupLedgerRow : System.Data.DataRow
    {
        
        private SGroupLedgerTable myTable;
        
        /// Constructor
        public SGroupLedgerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupLedgerTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Ledger Number
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Gives a group access to a specific cost centre (so that people without other finance access can access data on their own department)
    [Serializable()]
    public class SGroupCostCentreTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Ledger Number
        public DataColumn ColumnLedgerNumber;
        
        /// Cost Centre
        public DataColumn ColumnCostCentreCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupCostCentreTable() : 
                base("SGroupCostCentre")
        {
        }
        
        /// constructor
        public SGroupCostCentreTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupCostCentreTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupCostCentreRow this[int i]
        {
            get
            {
                return ((SGroupCostCentreRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Cost Centre";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupCostCentre";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_cost_centre";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Cost Centre";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "a_ledger_number_i",
                    "a_cost_centre_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnLedgerNumber,
                    this.ColumnCostCentreCode};
        }
        
        /// get typed set of changes
        public SGroupCostCentreTable GetChangesTyped()
        {
            return ((SGroupCostCentreTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupCostCentreRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupCostCentreRow ret = ((SGroupCostCentreRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupCostCentreRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupCostCentreRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Gives a group access to a specific cost centre (so that people without other finance access can access data on their own department)
    [Serializable()]
    public class SGroupCostCentreRow : System.Data.DataRow
    {
        
        private SGroupCostCentreTable myTable;
        
        /// Constructor
        public SGroupCostCentreRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupCostCentreTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Ledger Number
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Cost Centre
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Gives a group access to a specific extract
    [Serializable()]
    public class SGroupExtractTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// Identifier for the extract
        public DataColumn ColumnExtractId;
        
        /// Control read access to the extract
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the extract
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the extract
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupExtractTable() : 
                base("SGroupExtract")
        {
        }
        
        /// constructor
        public SGroupExtractTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupExtractTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupExtractRow this[int i]
        {
            get
            {
                return ((SGroupExtractRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExtractIdDBName()
        {
            return "m_extract_id_i";
        }
        
        /// get help text for column
        public static string GetExtractIdHelp()
        {
            return "Identifier for the extract";
        }
        
        /// get label of column
        public static string GetExtractIdLabel()
        {
            return "Extract Id";
        }
        
        /// get display format for column
        public static short GetExtractIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the extract";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the extract";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the extract";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupExtract";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_extract";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group Extract";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "m_extract_id_i",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnExtractId = this.Columns["m_extract_id_i"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnExtractId};
        }
        
        /// get typed set of changes
        public SGroupExtractTable GetChangesTyped()
        {
            return ((SGroupExtractTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupExtractRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupExtractRow ret = ((SGroupExtractRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupExtractRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupExtractRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("m_extract_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnExtractId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Gives a group access to a specific extract
    [Serializable()]
    public class SGroupExtractRow : System.Data.DataRow
    {
        
        private SGroupExtractTable myTable;
        
        /// Constructor
        public SGroupExtractRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupExtractTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// Identifier for the extract
        public Int32 ExtractId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtractId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtractId) 
                            || (((Int32)(this[this.myTable.ColumnExtractId])) != value)))
                {
                    this[this.myTable.ColumnExtractId] = value;
                }
            }
        }
        
        /// Control read access to the extract
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the extract
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the extract
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnExtractId.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Records all database events (ie. insert, update, delete). Gets purged after each export
    [Serializable()]
    public class SChangeEventTable : TTypedDataTable
    {
        
        /// Name of the database table where the event occurred
        public DataColumn ColumnTableName;
        
        /// Rowid of the record that the event applied to
        public DataColumn ColumnRowid;
        
        /// Type of event (I, U or D - Insert, Update, Delete)
        public DataColumn ColumnChangeType;
        
        /// Concatenation of the natural key values for the affected record (the primary key is not enough where a surrogate key is used as this is not meaningful across sites)
        public DataColumn ColumnNaturalKey;
        
        /// Date on which the event took place
        public DataColumn ColumnDate;
        
        /// Time at which event took place
        public DataColumn ColumnTime;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SChangeEventTable() : 
                base("SChangeEvent")
        {
        }
        
        /// constructor
        public SChangeEventTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SChangeEventTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SChangeEventRow this[int i]
        {
            get
            {
                return ((SChangeEventRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetTableNameDBName()
        {
            return "s_table_name_c";
        }
        
        /// get help text for column
        public static string GetTableNameHelp()
        {
            return "Name of the database table where the event occurred";
        }
        
        /// get label of column
        public static string GetTableNameLabel()
        {
            return "Table Name";
        }
        
        /// get character length for column
        public static short GetTableNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRowidDBName()
        {
            return "s_rowid_c";
        }
        
        /// get help text for column
        public static string GetRowidHelp()
        {
            return "Rowid of the record that the event applied to";
        }
        
        /// get label of column
        public static string GetRowidLabel()
        {
            return "Rowid";
        }
        
        /// get character length for column
        public static short GetRowidLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChangeTypeDBName()
        {
            return "s_change_type_c";
        }
        
        /// get help text for column
        public static string GetChangeTypeHelp()
        {
            return "Type of event (I, U or D - Insert, Update, Delete)";
        }
        
        /// get label of column
        public static string GetChangeTypeLabel()
        {
            return "Type of Change";
        }
        
        /// get character length for column
        public static short GetChangeTypeLength()
        {
            return 1;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNaturalKeyDBName()
        {
            return "s_natural_key_c";
        }
        
        /// get help text for column
        public static string GetNaturalKeyHelp()
        {
            return "Concatenation of the natural key values for the affected record (the primary key " +
                "is not enough where a surrogate key is used as this is not meaningful across sit" +
                "es)";
        }
        
        /// get label of column
        public static string GetNaturalKeyLabel()
        {
            return "s_natural_key_c";
        }
        
        /// get character length for column
        public static short GetNaturalKeyLength()
        {
            return 1000;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateDBName()
        {
            return "s_date_d";
        }
        
        /// get help text for column
        public static string GetDateHelp()
        {
            return "Date on which the event took place";
        }
        
        /// get label of column
        public static string GetDateLabel()
        {
            return "s_date_d";
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeDBName()
        {
            return "s_time_i";
        }
        
        /// get help text for column
        public static string GetTimeHelp()
        {
            return "Time at which event took place";
        }
        
        /// get label of column
        public static string GetTimeLabel()
        {
            return "s_time_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SChangeEvent";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_change_event";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Change Events";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_table_name_c",
                    "s_rowid_c",
                    "s_change_type_c",
                    "s_natural_key_c",
                    "s_date_d",
                    "s_time_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnTableName = this.Columns["s_table_name_c"];
            this.ColumnRowid = this.Columns["s_rowid_c"];
            this.ColumnChangeType = this.Columns["s_change_type_c"];
            this.ColumnNaturalKey = this.Columns["s_natural_key_c"];
            this.ColumnDate = this.Columns["s_date_d"];
            this.ColumnTime = this.Columns["s_time_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnTableName,
                    this.ColumnRowid};
        }
        
        /// get typed set of changes
        public SChangeEventTable GetChangesTyped()
        {
            return ((SChangeEventTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SChangeEventRow NewRowTyped(bool AWithDefaultValues)
        {
            SChangeEventRow ret = ((SChangeEventRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SChangeEventRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SChangeEventRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_table_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_rowid_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_change_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_natural_key_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnTableName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnRowid))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnChangeType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 2);
            }
            if ((ACol == ColumnNaturalKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 2000);
            }
            if ((ACol == ColumnDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Records all database events (ie. insert, update, delete). Gets purged after each export
    [Serializable()]
    public class SChangeEventRow : System.Data.DataRow
    {
        
        private SChangeEventTable myTable;
        
        /// Constructor
        public SChangeEventRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SChangeEventTable)(this.Table));
        }
        
        /// Name of the database table where the event occurred
        public String TableName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTableName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTableName) 
                            || (((String)(this[this.myTable.ColumnTableName])) != value)))
                {
                    this[this.myTable.ColumnTableName] = value;
                }
            }
        }
        
        /// Rowid of the record that the event applied to
        public String Rowid
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRowid.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRowid) 
                            || (((String)(this[this.myTable.ColumnRowid])) != value)))
                {
                    this[this.myTable.ColumnRowid] = value;
                }
            }
        }
        
        /// Type of event (I, U or D - Insert, Update, Delete)
        public String ChangeType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChangeType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChangeType) 
                            || (((String)(this[this.myTable.ColumnChangeType])) != value)))
                {
                    this[this.myTable.ColumnChangeType] = value;
                }
            }
        }
        
        /// Concatenation of the natural key values for the affected record (the primary key is not enough where a surrogate key is used as this is not meaningful across sites)
        public String NaturalKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNaturalKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNaturalKey) 
                            || (((String)(this[this.myTable.ColumnNaturalKey])) != value)))
                {
                    this[this.myTable.ColumnNaturalKey] = value;
                }
            }
        }
        
        /// Date on which the event took place
        public System.DateTime Date
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnDate])) != value)))
                {
                    this[this.myTable.ColumnDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Time at which event took place
        public Int32 Time
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTime) 
                            || (((Int32)(this[this.myTable.ColumnTime])) != value)))
                {
                    this[this.myTable.ColumnTime] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnTableName);
            this.SetNull(this.myTable.ColumnRowid);
            this.SetNull(this.myTable.ColumnChangeType);
            this.SetNull(this.myTable.ColumnNaturalKey);
            this.SetNull(this.myTable.ColumnDate);
            this.SetNull(this.myTable.ColumnTime);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Attributes for label paper
    [Serializable()]
    public class SLabelTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLabelName;
        
        /// 
        public DataColumn ColumnLabelDescription;
        
        /// The form the label is designed for
        public DataColumn ColumnFormName;
        
        /// The disance from the top of the page to the top of the first label.
        public DataColumn ColumnTopMargin;
        
        /// The distance from the left edge of the page to the left edge of the first label.
        public DataColumn ColumnSideMargin;
        
        /// The distance from the top of the first label to the top of the next label.
        public DataColumn ColumnVerticalPitch;
        
        /// The distance from the left edge of the first label to the left edge of the next label.
        public DataColumn ColumnHorizontalPitch;
        
        /// The height of each label.
        public DataColumn ColumnLabelHeight;
        
        /// The width of each label.
        public DataColumn ColumnLabelWidth;
        
        /// The number of labels across a page.
        public DataColumn ColumnLabelsAcross;
        
        /// The number of labels down a page.
        public DataColumn ColumnLabelsDown;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SLabelTable() : 
                base("SLabel")
        {
        }
        
        /// constructor
        public SLabelTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SLabelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SLabelRow this[int i]
        {
            get
            {
                return ((SLabelRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelNameDBName()
        {
            return "p_label_name_c";
        }
        
        /// get help text for column
        public static string GetLabelNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLabelNameLabel()
        {
            return "Label Name";
        }
        
        /// get character length for column
        public static short GetLabelNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelDescriptionDBName()
        {
            return "s_label_description_c";
        }
        
        /// get help text for column
        public static string GetLabelDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetLabelDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetLabelDescriptionLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "s_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "Enter the form name";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTopMarginDBName()
        {
            return "s_top_margin_n";
        }
        
        /// get help text for column
        public static string GetTopMarginHelp()
        {
            return "Enter the top margin.";
        }
        
        /// get label of column
        public static string GetTopMarginLabel()
        {
            return "Top Margin";
        }
        
        /// get display format for column
        public static short GetTopMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSideMarginDBName()
        {
            return "s_side_margin_n";
        }
        
        /// get help text for column
        public static string GetSideMarginHelp()
        {
            return "Enter the side margin.";
        }
        
        /// get label of column
        public static string GetSideMarginLabel()
        {
            return "Side Margin";
        }
        
        /// get display format for column
        public static short GetSideMarginLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetVerticalPitchDBName()
        {
            return "s_vertical_pitch_n";
        }
        
        /// get help text for column
        public static string GetVerticalPitchHelp()
        {
            return "Enter the vertical pitch.";
        }
        
        /// get label of column
        public static string GetVerticalPitchLabel()
        {
            return "Side Margin";
        }
        
        /// get display format for column
        public static short GetVerticalPitchLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHorizontalPitchDBName()
        {
            return "s_horizontal_pitch_n";
        }
        
        /// get help text for column
        public static string GetHorizontalPitchHelp()
        {
            return "Enter the horizontal pitch.";
        }
        
        /// get label of column
        public static string GetHorizontalPitchLabel()
        {
            return "Horizontal pitch";
        }
        
        /// get display format for column
        public static short GetHorizontalPitchLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelHeightDBName()
        {
            return "s_label_height_n";
        }
        
        /// get help text for column
        public static string GetLabelHeightHelp()
        {
            return "Enter the label height.";
        }
        
        /// get label of column
        public static string GetLabelHeightLabel()
        {
            return "Label Height";
        }
        
        /// get display format for column
        public static short GetLabelHeightLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelWidthDBName()
        {
            return "s_label_width_n";
        }
        
        /// get help text for column
        public static string GetLabelWidthHelp()
        {
            return "Enter the label width.";
        }
        
        /// get label of column
        public static string GetLabelWidthLabel()
        {
            return "Label Width";
        }
        
        /// get display format for column
        public static short GetLabelWidthLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelsAcrossDBName()
        {
            return "s_labels_across_i";
        }
        
        /// get help text for column
        public static string GetLabelsAcrossHelp()
        {
            return "Enter the number of labels across a page.";
        }
        
        /// get label of column
        public static string GetLabelsAcrossLabel()
        {
            return "Number of labels across";
        }
        
        /// get display format for column
        public static short GetLabelsAcrossLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLabelsDownDBName()
        {
            return "s_labels_down_i";
        }
        
        /// get help text for column
        public static string GetLabelsDownHelp()
        {
            return "Enter the number of labels down a page.";
        }
        
        /// get label of column
        public static string GetLabelsDownLabel()
        {
            return "Number of labels down";
        }
        
        /// get display format for column
        public static short GetLabelsDownLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SLabel";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_label";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Label";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_label_name_c",
                    "s_label_description_c",
                    "s_form_name_c",
                    "s_top_margin_n",
                    "s_side_margin_n",
                    "s_vertical_pitch_n",
                    "s_horizontal_pitch_n",
                    "s_label_height_n",
                    "s_label_width_n",
                    "s_labels_across_i",
                    "s_labels_down_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLabelName = this.Columns["p_label_name_c"];
            this.ColumnLabelDescription = this.Columns["s_label_description_c"];
            this.ColumnFormName = this.Columns["s_form_name_c"];
            this.ColumnTopMargin = this.Columns["s_top_margin_n"];
            this.ColumnSideMargin = this.Columns["s_side_margin_n"];
            this.ColumnVerticalPitch = this.Columns["s_vertical_pitch_n"];
            this.ColumnHorizontalPitch = this.Columns["s_horizontal_pitch_n"];
            this.ColumnLabelHeight = this.Columns["s_label_height_n"];
            this.ColumnLabelWidth = this.Columns["s_label_width_n"];
            this.ColumnLabelsAcross = this.Columns["s_labels_across_i"];
            this.ColumnLabelsDown = this.Columns["s_labels_down_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLabelName};
        }
        
        /// get typed set of changes
        public SLabelTable GetChangesTyped()
        {
            return ((SLabelTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SLabelRow NewRowTyped(bool AWithDefaultValues)
        {
            SLabelRow ret = ((SLabelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SLabelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SLabelRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_label_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_label_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_top_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_side_margin_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_vertical_pitch_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_horizontal_pitch_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_label_height_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_label_width_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_labels_across_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_labels_down_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLabelName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnLabelDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnTopMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnSideMargin))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnVerticalPitch))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnHorizontalPitch))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnLabelHeight))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnLabelWidth))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 6);
            }
            if ((ACol == ColumnLabelsAcross))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLabelsDown))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Attributes for label paper
    [Serializable()]
    public class SLabelRow : System.Data.DataRow
    {
        
        private SLabelTable myTable;
        
        /// Constructor
        public SLabelRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SLabelTable)(this.Table));
        }
        
        /// 
        public String LabelName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelName) 
                            || (((String)(this[this.myTable.ColumnLabelName])) != value)))
                {
                    this[this.myTable.ColumnLabelName] = value;
                }
            }
        }
        
        /// 
        public String LabelDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelDescription) 
                            || (((String)(this[this.myTable.ColumnLabelDescription])) != value)))
                {
                    this[this.myTable.ColumnLabelDescription] = value;
                }
            }
        }
        
        /// The form the label is designed for
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// The disance from the top of the page to the top of the first label.
        public Decimal TopMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTopMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTopMargin) 
                            || (((Decimal)(this[this.myTable.ColumnTopMargin])) != value)))
                {
                    this[this.myTable.ColumnTopMargin] = value;
                }
            }
        }
        
        /// The distance from the left edge of the page to the left edge of the first label.
        public Decimal SideMargin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSideMargin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSideMargin) 
                            || (((Decimal)(this[this.myTable.ColumnSideMargin])) != value)))
                {
                    this[this.myTable.ColumnSideMargin] = value;
                }
            }
        }
        
        /// The distance from the top of the first label to the top of the next label.
        public Decimal VerticalPitch
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVerticalPitch.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVerticalPitch) 
                            || (((Decimal)(this[this.myTable.ColumnVerticalPitch])) != value)))
                {
                    this[this.myTable.ColumnVerticalPitch] = value;
                }
            }
        }
        
        /// The distance from the left edge of the first label to the left edge of the next label.
        public Decimal HorizontalPitch
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHorizontalPitch.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHorizontalPitch) 
                            || (((Decimal)(this[this.myTable.ColumnHorizontalPitch])) != value)))
                {
                    this[this.myTable.ColumnHorizontalPitch] = value;
                }
            }
        }
        
        /// The height of each label.
        public Decimal LabelHeight
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelHeight.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelHeight) 
                            || (((Decimal)(this[this.myTable.ColumnLabelHeight])) != value)))
                {
                    this[this.myTable.ColumnLabelHeight] = value;
                }
            }
        }
        
        /// The width of each label.
        public Decimal LabelWidth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelWidth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelWidth) 
                            || (((Decimal)(this[this.myTable.ColumnLabelWidth])) != value)))
                {
                    this[this.myTable.ColumnLabelWidth] = value;
                }
            }
        }
        
        /// The number of labels across a page.
        public Int32 LabelsAcross
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelsAcross.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelsAcross) 
                            || (((Int32)(this[this.myTable.ColumnLabelsAcross])) != value)))
                {
                    this[this.myTable.ColumnLabelsAcross] = value;
                }
            }
        }
        
        /// The number of labels down a page.
        public Int32 LabelsDown
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLabelsDown.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLabelsDown) 
                            || (((Int32)(this[this.myTable.ColumnLabelsDown])) != value)))
                {
                    this[this.myTable.ColumnLabelsDown] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLabelName);
            this.SetNull(this.myTable.ColumnLabelDescription);
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnTopMargin.Ordinal] = 0;
            this[this.myTable.ColumnSideMargin.Ordinal] = 0;
            this[this.myTable.ColumnVerticalPitch.Ordinal] = 0;
            this[this.myTable.ColumnHorizontalPitch.Ordinal] = 0;
            this[this.myTable.ColumnLabelHeight.Ordinal] = 0;
            this[this.myTable.ColumnLabelWidth.Ordinal] = 0;
            this[this.myTable.ColumnLabelsAcross.Ordinal] = 0;
            this[this.myTable.ColumnLabelsDown.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsLabelDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnLabelDescription);
        }
        
        /// assign NULL value
        public void SetLabelDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnLabelDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores the definition of each workflow. These may be pre-created, or created by the user.
    [Serializable()]
    public class SWorkflowDefinitionTable : TTypedDataTable
    {
        
        /// Workflow ID
        public DataColumn ColumnWorkflowId;
        
        /// 
        public DataColumn ColumnName;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// List of all modules within which workflow should be available
        public DataColumn ColumnModuleList;
        
        /// If workflow is dependent on a particular data item what sort of data item is it (eg. partner key, application, extract).
        public DataColumn ColumnTypeOfSharedData;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowDefinitionTable() : 
                base("SWorkflowDefinition")
        {
        }
        
        /// constructor
        public SWorkflowDefinitionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowDefinitionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowDefinitionRow this[int i]
        {
            get
            {
                return ((SWorkflowDefinitionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowIdDBName()
        {
            return "s_workflow_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowIdHelp()
        {
            return "Workflow ID";
        }
        
        /// get label of column
        public static string GetWorkflowIdLabel()
        {
            return "Workflow ID";
        }
        
        /// get display format for column
        public static short GetWorkflowIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNameDBName()
        {
            return "s_name_c";
        }
        
        /// get help text for column
        public static string GetNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNameLabel()
        {
            return "Workflow Name";
        }
        
        /// get character length for column
        public static short GetNameLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "s_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 300;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModuleListDBName()
        {
            return "s_module_list_c";
        }
        
        /// get help text for column
        public static string GetModuleListHelp()
        {
            return "List of all modules within which workflow should be available";
        }
        
        /// get label of column
        public static string GetModuleListLabel()
        {
            return "Module List";
        }
        
        /// get character length for column
        public static short GetModuleListLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTypeOfSharedDataDBName()
        {
            return "s_type_of_shared_data_c";
        }
        
        /// get help text for column
        public static string GetTypeOfSharedDataHelp()
        {
            return "If workflow is dependent on a particular data item what sort of data item is it (" +
                "eg. partner key, application, extract).";
        }
        
        /// get label of column
        public static string GetTypeOfSharedDataLabel()
        {
            return "Shared Data Type";
        }
        
        /// get character length for column
        public static short GetTypeOfSharedDataLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowDefinition";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_definition";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow Definition";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_id_i",
                    "s_name_c",
                    "s_description_c",
                    "s_module_list_c",
                    "s_type_of_shared_data_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowId = this.Columns["s_workflow_id_i"];
            this.ColumnName = this.Columns["s_name_c"];
            this.ColumnDescription = this.Columns["s_description_c"];
            this.ColumnModuleList = this.Columns["s_module_list_c"];
            this.ColumnTypeOfSharedData = this.Columns["s_type_of_shared_data_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowId};
        }
        
        /// get typed set of changes
        public SWorkflowDefinitionTable GetChangesTyped()
        {
            return ((SWorkflowDefinitionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowDefinitionRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowDefinitionRow ret = ((SWorkflowDefinitionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowDefinitionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowDefinitionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_module_list_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_type_of_shared_data_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 600);
            }
            if ((ACol == ColumnModuleList))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnTypeOfSharedData))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores the definition of each workflow. These may be pre-created, or created by the user.
    [Serializable()]
    public class SWorkflowDefinitionRow : System.Data.DataRow
    {
        
        private SWorkflowDefinitionTable myTable;
        
        /// Constructor
        public SWorkflowDefinitionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowDefinitionTable)(this.Table));
        }
        
        /// Workflow ID
        public Int32 WorkflowId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowId] = value;
                }
            }
        }
        
        /// 
        public String Name
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnName) 
                            || (((String)(this[this.myTable.ColumnName])) != value)))
                {
                    this[this.myTable.ColumnName] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// List of all modules within which workflow should be available
        public String ModuleList
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModuleList.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModuleList) 
                            || (((String)(this[this.myTable.ColumnModuleList])) != value)))
                {
                    this[this.myTable.ColumnModuleList] = value;
                }
            }
        }
        
        /// If workflow is dependent on a particular data item what sort of data item is it (eg. partner key, application, extract).
        public String TypeOfSharedData
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTypeOfSharedData.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTypeOfSharedData) 
                            || (((String)(this[this.myTable.ColumnTypeOfSharedData])) != value)))
                {
                    this[this.myTable.ColumnTypeOfSharedData] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowId);
            this.SetNull(this.myTable.ColumnName);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnModuleList);
            this.SetNull(this.myTable.ColumnTypeOfSharedData);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsModuleListNull()
        {
            return this.IsNull(this.myTable.ColumnModuleList);
        }
        
        /// assign NULL value
        public void SetModuleListNull()
        {
            this.SetNull(this.myTable.ColumnModuleList);
        }
        
        /// test for NULL value
        public bool IsTypeOfSharedDataNull()
        {
            return this.IsNull(this.myTable.ColumnTypeOfSharedData);
        }
        
        /// assign NULL value
        public void SetTypeOfSharedDataNull()
        {
            this.SetNull(this.myTable.ColumnTypeOfSharedData);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Which users have access to this workflow
    [Serializable()]
    public class SWorkflowUserTable : TTypedDataTable
    {
        
        /// Workflow ID
        public DataColumn ColumnWorkflowId;
        
        /// The user that has access to the workflow
        public DataColumn ColumnUserId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowUserTable() : 
                base("SWorkflowUser")
        {
        }
        
        /// constructor
        public SWorkflowUserTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowUserTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowUserRow this[int i]
        {
            get
            {
                return ((SWorkflowUserRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowIdDBName()
        {
            return "s_workflow_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowIdHelp()
        {
            return "Workflow ID";
        }
        
        /// get label of column
        public static string GetWorkflowIdLabel()
        {
            return "Workflow ID";
        }
        
        /// get display format for column
        public static short GetWorkflowIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter the User ID for the person who needs access to the workflow.";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowUser";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_user";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow User";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_id_i",
                    "s_user_id_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowId = this.Columns["s_workflow_id_i"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowId,
                    this.ColumnUserId};
        }
        
        /// get typed set of changes
        public SWorkflowUserTable GetChangesTyped()
        {
            return ((SWorkflowUserTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowUserRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowUserRow ret = ((SWorkflowUserRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowUserRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowUserRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Which users have access to this workflow
    [Serializable()]
    public class SWorkflowUserRow : System.Data.DataRow
    {
        
        private SWorkflowUserTable myTable;
        
        /// Constructor
        public SWorkflowUserRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowUserTable)(this.Table));
        }
        
        /// Workflow ID
        public Int32 WorkflowId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowId] = value;
                }
            }
        }
        
        /// The user that has access to the workflow
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowId);
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Which groups have access to this workflow
    [Serializable()]
    public class SWorkflowGroupTable : TTypedDataTable
    {
        
        /// Workflow ID
        public DataColumn ColumnWorkflowId;
        
        /// The group that has access to the workflow
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowGroupTable() : 
                base("SWorkflowGroup")
        {
        }
        
        /// constructor
        public SWorkflowGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowGroupRow this[int i]
        {
            get
            {
                return ((SWorkflowGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowIdDBName()
        {
            return "s_workflow_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowIdHelp()
        {
            return "Workflow ID";
        }
        
        /// get label of column
        public static string GetWorkflowIdLabel()
        {
            return "Workflow ID";
        }
        
        /// get display format for column
        public static short GetWorkflowIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter the id for the group that needs access to the workflow";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow Group";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_id_i",
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowId = this.Columns["s_workflow_id_i"];
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowId,
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey};
        }
        
        /// get typed set of changes
        public SWorkflowGroupTable GetChangesTyped()
        {
            return ((SWorkflowGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowGroupRow ret = ((SWorkflowGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Which groups have access to this workflow
    [Serializable()]
    public class SWorkflowGroupRow : System.Data.DataRow
    {
        
        private SWorkflowGroupTable myTable;
        
        /// Constructor
        public SWorkflowGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowGroupTable)(this.Table));
        }
        
        /// Workflow ID
        public Int32 WorkflowId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowId] = value;
                }
            }
        }
        
        /// The group that has access to the workflow
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowId);
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores each step of the workflow
    [Serializable()]
    public class SWorkflowStepTable : TTypedDataTable
    {
        
        /// Workflow ID
        public DataColumn ColumnWorkflowId;
        
        /// Indicates position within workflow (ie. 1 means first step, etc)
        public DataColumn ColumnStepNumber;
        
        /// Identifier for the particular function
        public DataColumn ColumnFunctionId;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowStepTable() : 
                base("SWorkflowStep")
        {
        }
        
        /// constructor
        public SWorkflowStepTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowStepTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowStepRow this[int i]
        {
            get
            {
                return ((SWorkflowStepRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowIdDBName()
        {
            return "s_workflow_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowIdHelp()
        {
            return "Workflow ID";
        }
        
        /// get label of column
        public static string GetWorkflowIdLabel()
        {
            return "Workflow ID";
        }
        
        /// get display format for column
        public static short GetWorkflowIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStepNumberDBName()
        {
            return "s_step_number_i";
        }
        
        /// get help text for column
        public static string GetStepNumberHelp()
        {
            return "Position within the workflow";
        }
        
        /// get label of column
        public static string GetStepNumberLabel()
        {
            return "Step Number";
        }
        
        /// get display format for column
        public static short GetStepNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunctionIdDBName()
        {
            return "s_function_id_c";
        }
        
        /// get help text for column
        public static string GetFunctionIdHelp()
        {
            return "Identifier for the particular function";
        }
        
        /// get label of column
        public static string GetFunctionIdLabel()
        {
            return "Function ID";
        }
        
        /// get character length for column
        public static short GetFunctionIdLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowStep";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_step";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow Step";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_id_i",
                    "s_step_number_i",
                    "s_function_id_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowId = this.Columns["s_workflow_id_i"];
            this.ColumnStepNumber = this.Columns["s_step_number_i"];
            this.ColumnFunctionId = this.Columns["s_function_id_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowId,
                    this.ColumnStepNumber};
        }
        
        /// get typed set of changes
        public SWorkflowStepTable GetChangesTyped()
        {
            return ((SWorkflowStepTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowStepRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowStepRow ret = ((SWorkflowStepRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowStepRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowStepRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_step_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_function_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnStepNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFunctionId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores each step of the workflow
    [Serializable()]
    public class SWorkflowStepRow : System.Data.DataRow
    {
        
        private SWorkflowStepTable myTable;
        
        /// Constructor
        public SWorkflowStepRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowStepTable)(this.Table));
        }
        
        /// Workflow ID
        public Int32 WorkflowId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowId] = value;
                }
            }
        }
        
        /// Indicates position within workflow (ie. 1 means first step, etc)
        public Int32 StepNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStepNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStepNumber) 
                            || (((Int32)(this[this.myTable.ColumnStepNumber])) != value)))
                {
                    this[this.myTable.ColumnStepNumber] = value;
                }
            }
        }
        
        /// Identifier for the particular function
        public String FunctionId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunctionId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunctionId) 
                            || (((String)(this[this.myTable.ColumnFunctionId])) != value)))
                {
                    this[this.myTable.ColumnFunctionId] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowId);
            this.SetNull(this.myTable.ColumnStepNumber);
            this.SetNull(this.myTable.ColumnFunctionId);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Represents a relationship between two particular functions. Eg. Partner Find and Partner Edit
    [Serializable()]
    public class SFunctionRelationshipTable : TTypedDataTable
    {
        
        /// Identifier for one particular function
        public DataColumn ColumnFunction1;
        
        /// Identifier for related function
        public DataColumn ColumnFunction2;
        
        /// Code to run if a workflow contains function_1 and function_2 as adjacent steps. This code will provide the glue to connect the two steps.
        public DataColumn ColumnCodeToRun;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SFunctionRelationshipTable() : 
                base("SFunctionRelationship")
        {
        }
        
        /// constructor
        public SFunctionRelationshipTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SFunctionRelationshipTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SFunctionRelationshipRow this[int i]
        {
            get
            {
                return ((SFunctionRelationshipRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunction1DBName()
        {
            return "s_function_1_c";
        }
        
        /// get help text for column
        public static string GetFunction1Help()
        {
            return "Identifier for one particular function";
        }
        
        /// get label of column
        public static string GetFunction1Label()
        {
            return "Function ID";
        }
        
        /// get character length for column
        public static short GetFunction1Length()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFunction2DBName()
        {
            return "s_function_2_c";
        }
        
        /// get help text for column
        public static string GetFunction2Help()
        {
            return "Identifier for related function";
        }
        
        /// get label of column
        public static string GetFunction2Label()
        {
            return "Function ID";
        }
        
        /// get character length for column
        public static short GetFunction2Length()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCodeToRunDBName()
        {
            return "s_code_to_run_c";
        }
        
        /// get help text for column
        public static string GetCodeToRunHelp()
        {
            return "Code to run if a workflow contains function_1 and function_2 as adjacent steps. T" +
                "his code will provide the glue to connect the two steps.";
        }
        
        /// get label of column
        public static string GetCodeToRunLabel()
        {
            return "Code to run";
        }
        
        /// get character length for column
        public static short GetCodeToRunLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SFunctionRelationship";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_function_relationship";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Function Relationship";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_function_1_c",
                    "s_function_2_c",
                    "s_code_to_run_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFunction1 = this.Columns["s_function_1_c"];
            this.ColumnFunction2 = this.Columns["s_function_2_c"];
            this.ColumnCodeToRun = this.Columns["s_code_to_run_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFunction1,
                    this.ColumnFunction2};
        }
        
        /// get typed set of changes
        public SFunctionRelationshipTable GetChangesTyped()
        {
            return ((SFunctionRelationshipTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SFunctionRelationshipRow NewRowTyped(bool AWithDefaultValues)
        {
            SFunctionRelationshipRow ret = ((SFunctionRelationshipRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SFunctionRelationshipRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SFunctionRelationshipRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_function_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_function_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_code_to_run_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFunction1))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnFunction2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 30);
            }
            if ((ACol == ColumnCodeToRun))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Represents a relationship between two particular functions. Eg. Partner Find and Partner Edit
    [Serializable()]
    public class SFunctionRelationshipRow : System.Data.DataRow
    {
        
        private SFunctionRelationshipTable myTable;
        
        /// Constructor
        public SFunctionRelationshipRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SFunctionRelationshipTable)(this.Table));
        }
        
        /// Identifier for one particular function
        public String Function1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunction1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunction1) 
                            || (((String)(this[this.myTable.ColumnFunction1])) != value)))
                {
                    this[this.myTable.ColumnFunction1] = value;
                }
            }
        }
        
        /// Identifier for related function
        public String Function2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFunction2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFunction2) 
                            || (((String)(this[this.myTable.ColumnFunction2])) != value)))
                {
                    this[this.myTable.ColumnFunction2] = value;
                }
            }
        }
        
        /// Code to run if a workflow contains function_1 and function_2 as adjacent steps. This code will provide the glue to connect the two steps.
        public String CodeToRun
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCodeToRun.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCodeToRun) 
                            || (((String)(this[this.myTable.ColumnCodeToRun])) != value)))
                {
                    this[this.myTable.ColumnCodeToRun] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFunction1);
            this.SetNull(this.myTable.ColumnFunction2);
            this.SetNull(this.myTable.ColumnCodeToRun);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCodeToRunNull()
        {
            return this.IsNull(this.myTable.ColumnCodeToRun);
        }
        
        /// assign NULL value
        public void SetCodeToRunNull()
        {
            this.SetNull(this.myTable.ColumnCodeToRun);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// A running instance of a defined workflow
    [Serializable()]
    public class SWorkflowInstanceTable : TTypedDataTable
    {
        
        /// Workflow Instance ID
        public DataColumn ColumnWorkflowInstanceId;
        
        /// Workflow ID
        public DataColumn ColumnWorkflowId;
        
        /// If there is a particular data item required through the workflow what is it. Eg. if a Partner Key is required what is that Partner Key
        public DataColumn ColumnKeyDataItem;
        
        /// The type of the shared data item (eg. Partner Key)
        public DataColumn ColumnKeyDataItemType;
        
        /// Was this instance generated by the System rather than the user
        public DataColumn ColumnSystemGenerated;
        
        /// Has the workflow been completed
        public DataColumn ColumnComplete;
        
        /// User entered comment or note attached to the workflow
        public DataColumn ColumnNote;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowInstanceTable() : 
                base("SWorkflowInstance")
        {
        }
        
        /// constructor
        public SWorkflowInstanceTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowInstanceTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowInstanceRow this[int i]
        {
            get
            {
                return ((SWorkflowInstanceRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowInstanceIdDBName()
        {
            return "s_workflow_instance_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowInstanceIdHelp()
        {
            return "Workflow Instance ID";
        }
        
        /// get label of column
        public static string GetWorkflowInstanceIdLabel()
        {
            return "Workflow Instance ID";
        }
        
        /// get display format for column
        public static short GetWorkflowInstanceIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowIdDBName()
        {
            return "s_workflow_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowIdHelp()
        {
            return "Workflow ID";
        }
        
        /// get label of column
        public static string GetWorkflowIdLabel()
        {
            return "Workflow ID";
        }
        
        /// get display format for column
        public static short GetWorkflowIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyDataItemDBName()
        {
            return "s_key_data_item_c";
        }
        
        /// get help text for column
        public static string GetKeyDataItemHelp()
        {
            return "If there is a particular data item required through the workflow what is it. Eg. " +
                "if a Partner Key is required what is that Partner Key";
        }
        
        /// get label of column
        public static string GetKeyDataItemLabel()
        {
            return "Data Item Key";
        }
        
        /// get character length for column
        public static short GetKeyDataItemLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyDataItemTypeDBName()
        {
            return "s_key_data_item_type_c";
        }
        
        /// get help text for column
        public static string GetKeyDataItemTypeHelp()
        {
            return "The type of the shared data item (eg. Partner Key)";
        }
        
        /// get label of column
        public static string GetKeyDataItemTypeLabel()
        {
            return "Data Item Type";
        }
        
        /// get character length for column
        public static short GetKeyDataItemTypeLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "s_system_generated_l";
        }
        
        /// get help text for column
        public static string GetSystemGeneratedHelp()
        {
            return "Was this instance generated by the System rather than the user";
        }
        
        /// get label of column
        public static string GetSystemGeneratedLabel()
        {
            return "System Generated";
        }
        
        /// get display format for column
        public static short GetSystemGeneratedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCompleteDBName()
        {
            return "s_complete_l";
        }
        
        /// get help text for column
        public static string GetCompleteHelp()
        {
            return "Has the workflow been completed";
        }
        
        /// get label of column
        public static string GetCompleteLabel()
        {
            return "Completed";
        }
        
        /// get display format for column
        public static short GetCompleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNoteDBName()
        {
            return "s_note_c";
        }
        
        /// get help text for column
        public static string GetNoteHelp()
        {
            return "User entered comment or note attached to the workflow";
        }
        
        /// get label of column
        public static string GetNoteLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetNoteLength()
        {
            return 300;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowInstance";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_instance";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow Instance";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_instance_id_i",
                    "s_workflow_id_i",
                    "s_key_data_item_c",
                    "s_key_data_item_type_c",
                    "s_system_generated_l",
                    "s_complete_l",
                    "s_note_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowInstanceId = this.Columns["s_workflow_instance_id_i"];
            this.ColumnWorkflowId = this.Columns["s_workflow_id_i"];
            this.ColumnKeyDataItem = this.Columns["s_key_data_item_c"];
            this.ColumnKeyDataItemType = this.Columns["s_key_data_item_type_c"];
            this.ColumnSystemGenerated = this.Columns["s_system_generated_l"];
            this.ColumnComplete = this.Columns["s_complete_l"];
            this.ColumnNote = this.Columns["s_note_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowInstanceId};
        }
        
        /// get typed set of changes
        public SWorkflowInstanceTable GetChangesTyped()
        {
            return ((SWorkflowInstanceTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowInstanceRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowInstanceRow ret = ((SWorkflowInstanceRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowInstanceRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowInstanceRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_instance_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_workflow_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_key_data_item_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_key_data_item_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_note_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowInstanceId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnWorkflowId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnKeyDataItem))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnKeyDataItemType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnSystemGenerated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnComplete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNote))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 600);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// A running instance of a defined workflow
    [Serializable()]
    public class SWorkflowInstanceRow : System.Data.DataRow
    {
        
        private SWorkflowInstanceTable myTable;
        
        /// Constructor
        public SWorkflowInstanceRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowInstanceTable)(this.Table));
        }
        
        /// Workflow Instance ID
        public Int32 WorkflowInstanceId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowInstanceId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowInstanceId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowInstanceId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowInstanceId] = value;
                }
            }
        }
        
        /// Workflow ID
        public Int32 WorkflowId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowId] = value;
                }
            }
        }
        
        /// If there is a particular data item required through the workflow what is it. Eg. if a Partner Key is required what is that Partner Key
        public String KeyDataItem
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyDataItem.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyDataItem) 
                            || (((String)(this[this.myTable.ColumnKeyDataItem])) != value)))
                {
                    this[this.myTable.ColumnKeyDataItem] = value;
                }
            }
        }
        
        /// The type of the shared data item (eg. Partner Key)
        public String KeyDataItemType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyDataItemType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyDataItemType) 
                            || (((String)(this[this.myTable.ColumnKeyDataItemType])) != value)))
                {
                    this[this.myTable.ColumnKeyDataItemType] = value;
                }
            }
        }
        
        /// Was this instance generated by the System rather than the user
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated) 
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }
        
        /// Has the workflow been completed
        public Boolean Complete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComplete) 
                            || (((Boolean)(this[this.myTable.ColumnComplete])) != value)))
                {
                    this[this.myTable.ColumnComplete] = value;
                }
            }
        }
        
        /// User entered comment or note attached to the workflow
        public String Note
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNote.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNote) 
                            || (((String)(this[this.myTable.ColumnNote])) != value)))
                {
                    this[this.myTable.ColumnNote] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowInstanceId);
            this.SetNull(this.myTable.ColumnWorkflowId);
            this.SetNull(this.myTable.ColumnKeyDataItem);
            this.SetNull(this.myTable.ColumnKeyDataItemType);
            this.SetNull(this.myTable.ColumnSystemGenerated);
            this.SetNull(this.myTable.ColumnComplete);
            this.SetNull(this.myTable.ColumnNote);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsKeyDataItemNull()
        {
            return this.IsNull(this.myTable.ColumnKeyDataItem);
        }
        
        /// assign NULL value
        public void SetKeyDataItemNull()
        {
            this.SetNull(this.myTable.ColumnKeyDataItem);
        }
        
        /// test for NULL value
        public bool IsKeyDataItemTypeNull()
        {
            return this.IsNull(this.myTable.ColumnKeyDataItemType);
        }
        
        /// assign NULL value
        public void SetKeyDataItemTypeNull()
        {
            this.SetNull(this.myTable.ColumnKeyDataItemType);
        }
        
        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// test for NULL value
        public bool IsCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnComplete);
        }
        
        /// assign NULL value
        public void SetCompleteNull()
        {
            this.SetNull(this.myTable.ColumnComplete);
        }
        
        /// test for NULL value
        public bool IsNoteNull()
        {
            return this.IsNull(this.myTable.ColumnNote);
        }
        
        /// assign NULL value
        public void SetNoteNull()
        {
            this.SetNull(this.myTable.ColumnNote);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Each step of the running workflow, including the status of that step
    [Serializable()]
    public class SWorkflowInstanceStepTable : TTypedDataTable
    {
        
        /// Workflow Instance ID
        public DataColumn ColumnWorkflowInstanceId;
        
        /// Indicates current position within workflow instance
        public DataColumn ColumnStepNumber;
        
        /// Has this step been completed
        public DataColumn ColumnComplete;
        
        /// User who ran or is running this step
        public DataColumn ColumnUserId;
        
        /// Any output parameters from this step
        public DataColumn ColumnOutputParameters;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SWorkflowInstanceStepTable() : 
                base("SWorkflowInstanceStep")
        {
        }
        
        /// constructor
        public SWorkflowInstanceStepTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SWorkflowInstanceStepTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SWorkflowInstanceStepRow this[int i]
        {
            get
            {
                return ((SWorkflowInstanceStepRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetWorkflowInstanceIdDBName()
        {
            return "s_workflow_instance_id_i";
        }
        
        /// get help text for column
        public static string GetWorkflowInstanceIdHelp()
        {
            return "Workflow Instance ID";
        }
        
        /// get label of column
        public static string GetWorkflowInstanceIdLabel()
        {
            return "Workflow Instance ID";
        }
        
        /// get display format for column
        public static short GetWorkflowInstanceIdLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStepNumberDBName()
        {
            return "s_step_number_i";
        }
        
        /// get help text for column
        public static string GetStepNumberHelp()
        {
            return "Position within the workflow";
        }
        
        /// get label of column
        public static string GetStepNumberLabel()
        {
            return "Step Number";
        }
        
        /// get display format for column
        public static short GetStepNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCompleteDBName()
        {
            return "s_complete_l";
        }
        
        /// get help text for column
        public static string GetCompleteHelp()
        {
            return "Has this step been completed";
        }
        
        /// get label of column
        public static string GetCompleteLabel()
        {
            return "Completed";
        }
        
        /// get display format for column
        public static short GetCompleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "User who ran or is running this step";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOutputParametersDBName()
        {
            return "s_output_parameters_c";
        }
        
        /// get help text for column
        public static string GetOutputParametersHelp()
        {
            return "Any output parameters from this step";
        }
        
        /// get label of column
        public static string GetOutputParametersLabel()
        {
            return "s_output_parameters_c";
        }
        
        /// get character length for column
        public static short GetOutputParametersLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SWorkflowInstanceStep";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_workflow_instance_step";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Workflow Instance Step";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_workflow_instance_id_i",
                    "s_step_number_i",
                    "s_complete_l",
                    "s_user_id_c",
                    "s_output_parameters_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnWorkflowInstanceId = this.Columns["s_workflow_instance_id_i"];
            this.ColumnStepNumber = this.Columns["s_step_number_i"];
            this.ColumnComplete = this.Columns["s_complete_l"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnOutputParameters = this.Columns["s_output_parameters_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnWorkflowInstanceId,
                    this.ColumnStepNumber};
        }
        
        /// get typed set of changes
        public SWorkflowInstanceStepTable GetChangesTyped()
        {
            return ((SWorkflowInstanceStepTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SWorkflowInstanceStepRow NewRowTyped(bool AWithDefaultValues)
        {
            SWorkflowInstanceStepRow ret = ((SWorkflowInstanceStepRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SWorkflowInstanceStepRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SWorkflowInstanceStepRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_workflow_instance_id_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_step_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_output_parameters_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnWorkflowInstanceId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnStepNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnComplete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnOutputParameters))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Each step of the running workflow, including the status of that step
    [Serializable()]
    public class SWorkflowInstanceStepRow : System.Data.DataRow
    {
        
        private SWorkflowInstanceStepTable myTable;
        
        /// Constructor
        public SWorkflowInstanceStepRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SWorkflowInstanceStepTable)(this.Table));
        }
        
        /// Workflow Instance ID
        public Int32 WorkflowInstanceId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWorkflowInstanceId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWorkflowInstanceId) 
                            || (((Int32)(this[this.myTable.ColumnWorkflowInstanceId])) != value)))
                {
                    this[this.myTable.ColumnWorkflowInstanceId] = value;
                }
            }
        }
        
        /// Indicates current position within workflow instance
        public Int32 StepNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStepNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStepNumber) 
                            || (((Int32)(this[this.myTable.ColumnStepNumber])) != value)))
                {
                    this[this.myTable.ColumnStepNumber] = value;
                }
            }
        }
        
        /// Has this step been completed
        public Boolean Complete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComplete) 
                            || (((Boolean)(this[this.myTable.ColumnComplete])) != value)))
                {
                    this[this.myTable.ColumnComplete] = value;
                }
            }
        }
        
        /// User who ran or is running this step
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// Any output parameters from this step
        public String OutputParameters
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOutputParameters.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOutputParameters) 
                            || (((String)(this[this.myTable.ColumnOutputParameters])) != value)))
                {
                    this[this.myTable.ColumnOutputParameters] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnWorkflowInstanceId);
            this.SetNull(this.myTable.ColumnStepNumber);
            this.SetNull(this.myTable.ColumnComplete);
            this.SetNull(this.myTable.ColumnUserId);
            this.SetNull(this.myTable.ColumnOutputParameters);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnComplete);
        }
        
        /// assign NULL value
        public void SetCompleteNull()
        {
            this.SetNull(this.myTable.ColumnComplete);
        }
        
        /// test for NULL value
        public bool IsOutputParametersNull()
        {
            return this.IsNull(this.myTable.ColumnOutputParameters);
        }
        
        /// assign NULL value
        public void SetOutputParametersNull()
        {
            this.SetNull(this.myTable.ColumnOutputParameters);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Volume to either represent a file directory or a volume relative to a parent volume
    [Serializable()]
    public class SVolumeTable : TTypedDataTable
    {
        
        /// Name (Identifier) for the volume
        public DataColumn ColumnName;
        
        /// Name of the parent volume (use either Path or Parent Volume)
        public DataColumn ColumnParentVolumeName;
        
        /// Path information (use either Path or Parent Volume)
        public DataColumn ColumnPath;
        
        /// Comment for the user
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SVolumeTable() : 
                base("SVolume")
        {
        }
        
        /// constructor
        public SVolumeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SVolumeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SVolumeRow this[int i]
        {
            get
            {
                return ((SVolumeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetNameDBName()
        {
            return "s_name_c";
        }
        
        /// get help text for column
        public static string GetNameHelp()
        {
            return "Name (Identifier) for the volume";
        }
        
        /// get label of column
        public static string GetNameLabel()
        {
            return "Name";
        }
        
        /// get character length for column
        public static short GetNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetParentVolumeNameDBName()
        {
            return "s_parent_volume_name_c";
        }
        
        /// get help text for column
        public static string GetParentVolumeNameHelp()
        {
            return "Name of the parent volume (use either Path or Parent Volume)";
        }
        
        /// get label of column
        public static string GetParentVolumeNameLabel()
        {
            return "Parent Volume";
        }
        
        /// get character length for column
        public static short GetParentVolumeNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPathDBName()
        {
            return "s_path_c";
        }
        
        /// get help text for column
        public static string GetPathHelp()
        {
            return "Path information (use either Path or Parent Volume)";
        }
        
        /// get label of column
        public static string GetPathLabel()
        {
            return "Path";
        }
        
        /// get character length for column
        public static short GetPathLength()
        {
            return 2048;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "s_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Comment for the user";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 500;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SVolume";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_volume";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Volume";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_name_c",
                    "s_parent_volume_name_c",
                    "s_path_c",
                    "s_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnName = this.Columns["s_name_c"];
            this.ColumnParentVolumeName = this.Columns["s_parent_volume_name_c"];
            this.ColumnPath = this.Columns["s_path_c"];
            this.ColumnComment = this.Columns["s_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnName};
        }
        
        /// get typed set of changes
        public SVolumeTable GetChangesTyped()
        {
            return ((SVolumeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SVolumeRow NewRowTyped(bool AWithDefaultValues)
        {
            SVolumeRow ret = ((SVolumeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SVolumeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SVolumeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_parent_volume_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnParentVolumeName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnPath))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 4096);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 1000);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Volume to either represent a file directory or a volume relative to a parent volume
    [Serializable()]
    public class SVolumeRow : System.Data.DataRow
    {
        
        private SVolumeTable myTable;
        
        /// Constructor
        public SVolumeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SVolumeTable)(this.Table));
        }
        
        /// Name (Identifier) for the volume
        public String Name
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnName) 
                            || (((String)(this[this.myTable.ColumnName])) != value)))
                {
                    this[this.myTable.ColumnName] = value;
                }
            }
        }
        
        /// Name of the parent volume (use either Path or Parent Volume)
        public String ParentVolumeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnParentVolumeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnParentVolumeName) 
                            || (((String)(this[this.myTable.ColumnParentVolumeName])) != value)))
                {
                    this[this.myTable.ColumnParentVolumeName] = value;
                }
            }
        }
        
        /// Path information (use either Path or Parent Volume)
        public String Path
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPath) 
                            || (((String)(this[this.myTable.ColumnPath])) != value)))
                {
                    this[this.myTable.ColumnPath] = value;
                }
            }
        }
        
        /// Comment for the user
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnName);
            this.SetNull(this.myTable.ColumnParentVolumeName);
            this.SetNull(this.myTable.ColumnPath);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsParentVolumeNameNull()
        {
            return this.IsNull(this.myTable.ColumnParentVolumeName);
        }
        
        /// assign NULL value
        public void SetParentVolumeNameNull()
        {
            this.SetNull(this.myTable.ColumnParentVolumeName);
        }
        
        /// test for NULL value
        public bool IsPathNull()
        {
            return this.IsNull(this.myTable.ColumnPath);
        }
        
        /// assign NULL value
        public void SetPathNull()
        {
            this.SetNull(this.myTable.ColumnPath);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Set Default Volume for a user group in a specific area
    [Serializable()]
    public class SDefaultFileVolumeTable : TTypedDataTable
    {
        
        /// Group Name this default volume applies to
        public DataColumn ColumnGroupName;
        
        /// Area this default volume applies to (e.g. Partner, Application, Contacts, ...)
        public DataColumn ColumnArea;
        
        /// Default Volume for combination of group and area
        public DataColumn ColumnVolumeName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SDefaultFileVolumeTable() : 
                base("SDefaultFileVolume")
        {
        }
        
        /// constructor
        public SDefaultFileVolumeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SDefaultFileVolumeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SDefaultFileVolumeRow this[int i]
        {
            get
            {
                return ((SDefaultFileVolumeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupNameDBName()
        {
            return "s_group_name_c";
        }
        
        /// get help text for column
        public static string GetGroupNameHelp()
        {
            return "Group Name this default volume applies to";
        }
        
        /// get label of column
        public static string GetGroupNameLabel()
        {
            return "Group Name";
        }
        
        /// get character length for column
        public static short GetGroupNameLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAreaDBName()
        {
            return "s_area_c";
        }
        
        /// get help text for column
        public static string GetAreaHelp()
        {
            return "Area this default volume applies to (e.g. Partner, Application, Contacts, ...)";
        }
        
        /// get label of column
        public static string GetAreaLabel()
        {
            return "Area";
        }
        
        /// get character length for column
        public static short GetAreaLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetVolumeNameDBName()
        {
            return "s_volume_name_c";
        }
        
        /// get help text for column
        public static string GetVolumeNameHelp()
        {
            return "Default Volume for combination of group and area";
        }
        
        /// get label of column
        public static string GetVolumeNameLabel()
        {
            return "Volume";
        }
        
        /// get character length for column
        public static short GetVolumeNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SDefaultFileVolume";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_default_file_volume";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Volume";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_name_c",
                    "s_area_c",
                    "s_volume_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupName = this.Columns["s_group_name_c"];
            this.ColumnArea = this.Columns["s_area_c"];
            this.ColumnVolumeName = this.Columns["s_volume_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupName,
                    this.ColumnArea};
        }
        
        /// get typed set of changes
        public SDefaultFileVolumeTable GetChangesTyped()
        {
            return ((SDefaultFileVolumeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SDefaultFileVolumeRow NewRowTyped(bool AWithDefaultValues)
        {
            SDefaultFileVolumeRow ret = ((SDefaultFileVolumeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SDefaultFileVolumeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SDefaultFileVolumeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_area_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_volume_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnArea))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnVolumeName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Set Default Volume for a user group in a specific area
    [Serializable()]
    public class SDefaultFileVolumeRow : System.Data.DataRow
    {
        
        private SDefaultFileVolumeTable myTable;
        
        /// Constructor
        public SDefaultFileVolumeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SDefaultFileVolumeTable)(this.Table));
        }
        
        /// Group Name this default volume applies to
        public String GroupName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupName) 
                            || (((String)(this[this.myTable.ColumnGroupName])) != value)))
                {
                    this[this.myTable.ColumnGroupName] = value;
                }
            }
        }
        
        /// Area this default volume applies to (e.g. Partner, Application, Contacts, ...)
        public String Area
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArea.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArea) 
                            || (((String)(this[this.myTable.ColumnArea])) != value)))
                {
                    this[this.myTable.ColumnArea] = value;
                }
            }
        }
        
        /// Default Volume for combination of group and area
        public String VolumeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVolumeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVolumeName) 
                            || (((String)(this[this.myTable.ColumnVolumeName])) != value)))
                {
                    this[this.myTable.ColumnVolumeName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupName);
            this.SetNull(this.myTable.ColumnArea);
            this.SetNull(this.myTable.ColumnVolumeName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsVolumeNameNull()
        {
            return this.IsNull(this.myTable.ColumnVolumeName);
        }
        
        /// assign NULL value
        public void SetVolumeNameNull()
        {
            this.SetNull(this.myTable.ColumnVolumeName);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Set up a Group for use in Default Volumes
    [Serializable()]
    public class SVolumePartnerGroupTable : TTypedDataTable
    {
        
        /// Group Name this default volume applies to
        public DataColumn ColumnName;
        
        /// Description
        public DataColumn ColumnDescription;
        
        /// Comment field
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SVolumePartnerGroupTable() : 
                base("SVolumePartnerGroup")
        {
        }
        
        /// constructor
        public SVolumePartnerGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SVolumePartnerGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SVolumePartnerGroupRow this[int i]
        {
            get
            {
                return ((SVolumePartnerGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetNameDBName()
        {
            return "s_name_c";
        }
        
        /// get help text for column
        public static string GetNameHelp()
        {
            return "Group Name this default volume applies to";
        }
        
        /// get label of column
        public static string GetNameLabel()
        {
            return "Group Name";
        }
        
        /// get character length for column
        public static short GetNameLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "s_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Description";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "s_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Comment field";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 300;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SVolumePartnerGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_volume_partner_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Volume";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_name_c",
                    "s_description_c",
                    "s_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnName = this.Columns["s_name_c"];
            this.ColumnDescription = this.Columns["s_description_c"];
            this.ColumnComment = this.Columns["s_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnName};
        }
        
        /// get typed set of changes
        public SVolumePartnerGroupTable GetChangesTyped()
        {
            return ((SVolumePartnerGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SVolumePartnerGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            SVolumePartnerGroupRow ret = ((SVolumePartnerGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SVolumePartnerGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SVolumePartnerGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 600);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Set up a Group for use in Default Volumes
    [Serializable()]
    public class SVolumePartnerGroupRow : System.Data.DataRow
    {
        
        private SVolumePartnerGroupTable myTable;
        
        /// Constructor
        public SVolumePartnerGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SVolumePartnerGroupTable)(this.Table));
        }
        
        /// Group Name this default volume applies to
        public String Name
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnName) 
                            || (((String)(this[this.myTable.ColumnName])) != value)))
                {
                    this[this.myTable.ColumnName] = value;
                }
            }
        }
        
        /// Description
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// Comment field
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnName);
            this.SetNull(this.myTable.ColumnDescription);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Assign Partners to a Group for use in Default Volumes
    [Serializable()]
    public class SVolumePartnerGroupPartnerTable : TTypedDataTable
    {
        
        /// Group Name this default volume applies to
        public DataColumn ColumnGroupName;
        
        /// Partner key (one partner can be in several groups)
        public DataColumn ColumnPartnerKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SVolumePartnerGroupPartnerTable() : 
                base("SVolumePartnerGroupPartner")
        {
        }
        
        /// constructor
        public SVolumePartnerGroupPartnerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SVolumePartnerGroupPartnerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SVolumePartnerGroupPartnerRow this[int i]
        {
            get
            {
                return ((SVolumePartnerGroupPartnerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupNameDBName()
        {
            return "s_group_name_c";
        }
        
        /// get help text for column
        public static string GetGroupNameHelp()
        {
            return "Group Name this default volume applies to";
        }
        
        /// get label of column
        public static string GetGroupNameLabel()
        {
            return "Group Name";
        }
        
        /// get character length for column
        public static short GetGroupNameLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key (one partner can be in several groups)";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SVolumePartnerGroupPartner";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_volume_partner_group_partner";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Data Volume";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_name_c",
                    "p_partner_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupName = this.Columns["s_group_name_c"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupName,
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public SVolumePartnerGroupPartnerTable GetChangesTyped()
        {
            return ((SVolumePartnerGroupPartnerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SVolumePartnerGroupPartnerRow NewRowTyped(bool AWithDefaultValues)
        {
            SVolumePartnerGroupPartnerRow ret = ((SVolumePartnerGroupPartnerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SVolumePartnerGroupPartnerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SVolumePartnerGroupPartnerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Assign Partners to a Group for use in Default Volumes
    [Serializable()]
    public class SVolumePartnerGroupPartnerRow : System.Data.DataRow
    {
        
        private SVolumePartnerGroupPartnerTable myTable;
        
        /// Constructor
        public SVolumePartnerGroupPartnerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SVolumePartnerGroupPartnerTable)(this.Table));
        }
        
        /// Group Name this default volume applies to
        public String GroupName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupName) 
                            || (((String)(this[this.myTable.ColumnGroupName])) != value)))
                {
                    this[this.myTable.ColumnGroupName] = value;
                }
            }
        }
        
        /// Partner key (one partner can be in several groups)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupName);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Associates a Group with an external document (file info). This may be read, write, delete
    [Serializable()]
    public class SGroupFileInfoTable : TTypedDataTable
    {
        
        /// identifies a system group
        public DataColumn ColumnGroupId;
        
        /// Field that the group belongs to
        public DataColumn ColumnGroupUnitKey;
        
        /// 
        public DataColumn ColumnFileInfoKey;
        
        /// Control read access to the file information
        public DataColumn ColumnReadAccess;
        
        /// Control write access to the file information
        public DataColumn ColumnWriteAccess;
        
        /// Control delete access to the file information
        public DataColumn ColumnDeleteAccess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public SGroupFileInfoTable() : 
                base("SGroupFileInfo")
        {
        }
        
        /// constructor
        public SGroupFileInfoTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public SGroupFileInfoTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public SGroupFileInfoRow this[int i]
        {
            get
            {
                return ((SGroupFileInfoRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupIdDBName()
        {
            return "s_group_id_c";
        }
        
        /// get help text for column
        public static string GetGroupIdHelp()
        {
            return "Enter a system group id";
        }
        
        /// get label of column
        public static string GetGroupIdLabel()
        {
            return "Group ID";
        }
        
        /// get character length for column
        public static short GetGroupIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGroupUnitKeyDBName()
        {
            return "s_group_unit_key_n";
        }
        
        /// get help text for column
        public static string GetGroupUnitKeyHelp()
        {
            return "Field that the group belongs to";
        }
        
        /// get label of column
        public static string GetGroupUnitKeyLabel()
        {
            return "Field of Group";
        }
        
        /// get display format for column
        public static short GetGroupUnitKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }
        
        /// get help text for column
        public static string GetFileInfoKeyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFileInfoKeyLabel()
        {
            return "";
        }
        
        /// get display format for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReadAccessDBName()
        {
            return "s_read_access_l";
        }
        
        /// get help text for column
        public static string GetReadAccessHelp()
        {
            return "Control read access to the file information";
        }
        
        /// get label of column
        public static string GetReadAccessLabel()
        {
            return "Read Access?";
        }
        
        /// get display format for column
        public static short GetReadAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWriteAccessDBName()
        {
            return "s_write_access_l";
        }
        
        /// get help text for column
        public static string GetWriteAccessHelp()
        {
            return "Control write access to the file information";
        }
        
        /// get label of column
        public static string GetWriteAccessLabel()
        {
            return "Write Access?";
        }
        
        /// get display format for column
        public static short GetWriteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteAccessDBName()
        {
            return "s_delete_access_l";
        }
        
        /// get help text for column
        public static string GetDeleteAccessHelp()
        {
            return "Control delete access to the file information";
        }
        
        /// get label of column
        public static string GetDeleteAccessLabel()
        {
            return "Delete Access?";
        }
        
        /// get display format for column
        public static short GetDeleteAccessLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "SGroupFileInfo";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "s_group_file_info";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Group File Info";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "s_group_id_c",
                    "s_group_unit_key_n",
                    "p_file_info_key_n",
                    "s_read_access_l",
                    "s_write_access_l",
                    "s_delete_access_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGroupId = this.Columns["s_group_id_c"];
            this.ColumnGroupUnitKey = this.Columns["s_group_unit_key_n"];
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnReadAccess = this.Columns["s_read_access_l"];
            this.ColumnWriteAccess = this.Columns["s_write_access_l"];
            this.ColumnDeleteAccess = this.Columns["s_delete_access_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGroupId,
                    this.ColumnGroupUnitKey,
                    this.ColumnFileInfoKey};
        }
        
        /// get typed set of changes
        public SGroupFileInfoTable GetChangesTyped()
        {
            return ((SGroupFileInfoTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public SGroupFileInfoRow NewRowTyped(bool AWithDefaultValues)
        {
            SGroupFileInfoRow ret = ((SGroupFileInfoRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public SGroupFileInfoRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new SGroupFileInfoRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("s_group_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_group_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_read_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_write_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_delete_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGroupId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnGroupUnitKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnFileInfoKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnReadAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnWriteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteAccess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Associates a Group with an external document (file info). This may be read, write, delete
    [Serializable()]
    public class SGroupFileInfoRow : System.Data.DataRow
    {
        
        private SGroupFileInfoTable myTable;
        
        /// Constructor
        public SGroupFileInfoRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((SGroupFileInfoTable)(this.Table));
        }
        
        /// identifies a system group
        public String GroupId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupId) 
                            || (((String)(this[this.myTable.ColumnGroupId])) != value)))
                {
                    this[this.myTable.ColumnGroupId] = value;
                }
            }
        }
        
        /// Field that the group belongs to
        public Int64 GroupUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGroupUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGroupUnitKey) 
                            || (((Int64)(this[this.myTable.ColumnGroupUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGroupUnitKey] = value;
                }
            }
        }
        
        /// 
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey) 
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }
        
        /// Control read access to the file information
        public Boolean ReadAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReadAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReadAccess) 
                            || (((Boolean)(this[this.myTable.ColumnReadAccess])) != value)))
                {
                    this[this.myTable.ColumnReadAccess] = value;
                }
            }
        }
        
        /// Control write access to the file information
        public Boolean WriteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWriteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWriteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnWriteAccess])) != value)))
                {
                    this[this.myTable.ColumnWriteAccess] = value;
                }
            }
        }
        
        /// Control delete access to the file information
        public Boolean DeleteAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteAccess) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteAccess])) != value)))
                {
                    this[this.myTable.ColumnDeleteAccess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGroupId);
            this[this.myTable.ColumnGroupUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnReadAccess);
            this.SetNull(this.myTable.ColumnWriteAccess);
            this.SetNull(this.myTable.ColumnDeleteAccess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReadAccessNull()
        {
            return this.IsNull(this.myTable.ColumnReadAccess);
        }
        
        /// assign NULL value
        public void SetReadAccessNull()
        {
            this.SetNull(this.myTable.ColumnReadAccess);
        }
        
        /// test for NULL value
        public bool IsWriteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnWriteAccess);
        }
        
        /// assign NULL value
        public void SetWriteAccessNull()
        {
            this.SetNull(this.myTable.ColumnWriteAccess);
        }
        
        /// test for NULL value
        public bool IsDeleteAccessNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// assign NULL value
        public void SetDeleteAccessNull()
        {
            this.SetNull(this.myTable.ColumnDeleteAccess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
}
