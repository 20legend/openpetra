/* Auto generated with nant generateORM
 * Do not modify this file manually!
 */
namespace Ict.Petra.Shared.MFinance.Account.Data
{
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Odbc;
    using System.Runtime.Serialization;
    using System.Xml;
    using Ict.Common;
    using Ict.Common.Data;
    
    
    /// This contains the settings for one specific bank account
    [Serializable()]
    public class AEpAccountTable : TTypedDataTable
    {
        
        /// The bank account whose settings are defined here
        public DataColumn ColumnBankingDetailsKey;
        
        /// The bank account has to be assigned to a ledger
        public DataColumn ColumnLedgerNumber;
        
        /// The GL account for the bank account
        public DataColumn ColumnAccountCode;
        
        /// This tells the plugin where to find the statement files for this bank account
        public DataColumn ColumnImportfilePath;
        
        /// This tells the plugin where to write any generated files for this bank account
        public DataColumn ColumnExportfilePath;
        
        /// This can be either the name of an executable or a DLL that is able to process the country (or bank) specific bank statements
        public DataColumn ColumnPluginFilename;
        
        /// Other parameters for the plugin can be stored here
        public DataColumn ColumnPluginParameters;
        
        /// if this is true, all gifts to this bank account get this flag set
        public DataColumn ColumnConfidentialGiftFlag;
        
        /// Whether the gifts to this bank account are tax deductable
        public DataColumn ColumnTaxDeductable;
        
        /// This defines a default motivation group.
        public DataColumn ColumnMotivationGroupCode;
        
        /// This defines a default motivation detail within a motivation group.
        public DataColumn ColumnMotivationDetailCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AEpAccountTable() : 
                base("AEpAccount")
        {
        }
        
        /// constructor
        public AEpAccountTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AEpAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AEpAccountRow this[int i]
        {
            get
            {
                return ((AEpAccountRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "a_banking_details_key_i";
        }
        
        /// get help text for column
        public static string GetBankingDetailsKeyHelp()
        {
            return "The bank account whose settings are defined here";
        }
        
        /// get label of column
        public static string GetBankingDetailsKeyLabel()
        {
            return "a_banking_details_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "The bank account has to be assigned to a ledger";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "The GL account for the bank account";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "a_account_code_c";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetImportfilePathDBName()
        {
            return "a_importfile_path_c";
        }
        
        /// get help text for column
        public static string GetImportfilePathHelp()
        {
            return "This tells the plugin where to find the statement files for this bank account";
        }
        
        /// get label of column
        public static string GetImportfilePathLabel()
        {
            return "a_importfile_path_c";
        }
        
        /// get character length for column
        public static short GetImportfilePathLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExportfilePathDBName()
        {
            return "a_exportfile_path_c";
        }
        
        /// get help text for column
        public static string GetExportfilePathHelp()
        {
            return "This tells the plugin where to write any generated files for this bank account";
        }
        
        /// get label of column
        public static string GetExportfilePathLabel()
        {
            return "a_exportfile_path_c";
        }
        
        /// get character length for column
        public static short GetExportfilePathLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPluginFilenameDBName()
        {
            return "a_plugin_filename_c";
        }
        
        /// get help text for column
        public static string GetPluginFilenameHelp()
        {
            return "This can be either the name of an executable or a DLL that is able to process the" +
                " country (or bank) specific bank statements";
        }
        
        /// get label of column
        public static string GetPluginFilenameLabel()
        {
            return "a_plugin_filename_c";
        }
        
        /// get character length for column
        public static short GetPluginFilenameLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPluginParametersDBName()
        {
            return "a_plugin_parameters_c";
        }
        
        /// get help text for column
        public static string GetPluginParametersHelp()
        {
            return "Other parameters for the plugin can be stored here";
        }
        
        /// get label of column
        public static string GetPluginParametersLabel()
        {
            return "a_plugin_parameters_c";
        }
        
        /// get character length for column
        public static short GetPluginParametersLength()
        {
            return 250;
        }
        
        /// get the name of the field in the database for this column
        public static string GetConfidentialGiftFlagDBName()
        {
            return "a_confidential_gift_flag_l";
        }
        
        /// get help text for column
        public static string GetConfidentialGiftFlagHelp()
        {
            return "if this is true, all gifts to this bank account get this flag set";
        }
        
        /// get label of column
        public static string GetConfidentialGiftFlagLabel()
        {
            return "Confidential Gift";
        }
        
        /// get display format for column
        public static short GetConfidentialGiftFlagLength()
        {
            return 17;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxDeductableDBName()
        {
            return "a_tax_deductable_l";
        }
        
        /// get help text for column
        public static string GetTaxDeductableHelp()
        {
            return "Whether the gifts to this bank account are tax deductable";
        }
        
        /// get label of column
        public static string GetTaxDeductableLabel()
        {
            return "Tax Deductable";
        }
        
        /// get display format for column
        public static short GetTaxDeductableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationGroupCodeDBName()
        {
            return "a_motivation_group_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationGroupCodeHelp()
        {
            return "This defines a default motivation group.";
        }
        
        /// get label of column
        public static string GetMotivationGroupCodeLabel()
        {
            return "a_motivation_group_code_c";
        }
        
        /// get character length for column
        public static short GetMotivationGroupCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationDetailCodeDBName()
        {
            return "a_motivation_detail_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationDetailCodeHelp()
        {
            return "This defines a default motivation detail within a motivation group.";
        }
        
        /// get label of column
        public static string GetMotivationDetailCodeLabel()
        {
            return "a_motivation_detail_code_c";
        }
        
        /// get character length for column
        public static short GetMotivationDetailCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AEpAccount";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ep_account";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Bank Account";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_banking_details_key_i",
                    "a_ledger_number_i",
                    "a_account_code_c",
                    "a_importfile_path_c",
                    "a_exportfile_path_c",
                    "a_plugin_filename_c",
                    "a_plugin_parameters_c",
                    "a_confidential_gift_flag_l",
                    "a_tax_deductable_l",
                    "a_motivation_group_code_c",
                    "a_motivation_detail_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBankingDetailsKey = this.Columns["a_banking_details_key_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnImportfilePath = this.Columns["a_importfile_path_c"];
            this.ColumnExportfilePath = this.Columns["a_exportfile_path_c"];
            this.ColumnPluginFilename = this.Columns["a_plugin_filename_c"];
            this.ColumnPluginParameters = this.Columns["a_plugin_parameters_c"];
            this.ColumnConfidentialGiftFlag = this.Columns["a_confidential_gift_flag_l"];
            this.ColumnTaxDeductable = this.Columns["a_tax_deductable_l"];
            this.ColumnMotivationGroupCode = this.Columns["a_motivation_group_code_c"];
            this.ColumnMotivationDetailCode = this.Columns["a_motivation_detail_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBankingDetailsKey};
        }
        
        /// get typed set of changes
        public AEpAccountTable GetChangesTyped()
        {
            return ((AEpAccountTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AEpAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpAccountRow ret = ((AEpAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AEpAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpAccountRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_importfile_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exportfile_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_plugin_filename_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_plugin_parameters_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_confidential_gift_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_deductable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_group_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_detail_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBankingDetailsKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnImportfilePath))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnExportfilePath))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnPluginFilename))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnPluginParameters))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 500);
            }
            if ((ACol == ColumnConfidentialGiftFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTaxDeductable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnMotivationGroupCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMotivationDetailCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This contains the settings for one specific bank account
    [Serializable()]
    public class AEpAccountRow : System.Data.DataRow
    {
        
        private AEpAccountTable myTable;
        
        /// Constructor
        public AEpAccountRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AEpAccountTable)(this.Table));
        }
        
        /// The bank account whose settings are defined here
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey) 
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }
        
        /// The bank account has to be assigned to a ledger
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The GL account for the bank account
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This tells the plugin where to find the statement files for this bank account
        public String ImportfilePath
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnImportfilePath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnImportfilePath) 
                            || (((String)(this[this.myTable.ColumnImportfilePath])) != value)))
                {
                    this[this.myTable.ColumnImportfilePath] = value;
                }
            }
        }
        
        /// This tells the plugin where to write any generated files for this bank account
        public String ExportfilePath
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExportfilePath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExportfilePath) 
                            || (((String)(this[this.myTable.ColumnExportfilePath])) != value)))
                {
                    this[this.myTable.ColumnExportfilePath] = value;
                }
            }
        }
        
        /// This can be either the name of an executable or a DLL that is able to process the country (or bank) specific bank statements
        public String PluginFilename
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPluginFilename.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPluginFilename) 
                            || (((String)(this[this.myTable.ColumnPluginFilename])) != value)))
                {
                    this[this.myTable.ColumnPluginFilename] = value;
                }
            }
        }
        
        /// Other parameters for the plugin can be stored here
        public String PluginParameters
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPluginParameters.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPluginParameters) 
                            || (((String)(this[this.myTable.ColumnPluginParameters])) != value)))
                {
                    this[this.myTable.ColumnPluginParameters] = value;
                }
            }
        }
        
        /// if this is true, all gifts to this bank account get this flag set
        public Boolean ConfidentialGiftFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConfidentialGiftFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConfidentialGiftFlag) 
                            || (((Boolean)(this[this.myTable.ColumnConfidentialGiftFlag])) != value)))
                {
                    this[this.myTable.ColumnConfidentialGiftFlag] = value;
                }
            }
        }
        
        /// Whether the gifts to this bank account are tax deductable
        public Boolean TaxDeductable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxDeductable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxDeductable) 
                            || (((Boolean)(this[this.myTable.ColumnTaxDeductable])) != value)))
                {
                    this[this.myTable.ColumnTaxDeductable] = value;
                }
            }
        }
        
        /// This defines a default motivation group.
        public String MotivationGroupCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationGroupCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationGroupCode) 
                            || (((String)(this[this.myTable.ColumnMotivationGroupCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationGroupCode] = value;
                }
            }
        }
        
        /// This defines a default motivation detail within a motivation group.
        public String MotivationDetailCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationDetailCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationDetailCode) 
                            || (((String)(this[this.myTable.ColumnMotivationDetailCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationDetailCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnImportfilePath);
            this.SetNull(this.myTable.ColumnExportfilePath);
            this.SetNull(this.myTable.ColumnPluginFilename);
            this.SetNull(this.myTable.ColumnPluginParameters);
            this[this.myTable.ColumnConfidentialGiftFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxDeductable.Ordinal] = true;
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsImportfilePathNull()
        {
            return this.IsNull(this.myTable.ColumnImportfilePath);
        }
        
        /// assign NULL value
        public void SetImportfilePathNull()
        {
            this.SetNull(this.myTable.ColumnImportfilePath);
        }
        
        /// test for NULL value
        public bool IsExportfilePathNull()
        {
            return this.IsNull(this.myTable.ColumnExportfilePath);
        }
        
        /// assign NULL value
        public void SetExportfilePathNull()
        {
            this.SetNull(this.myTable.ColumnExportfilePath);
        }
        
        /// test for NULL value
        public bool IsPluginFilenameNull()
        {
            return this.IsNull(this.myTable.ColumnPluginFilename);
        }
        
        /// assign NULL value
        public void SetPluginFilenameNull()
        {
            this.SetNull(this.myTable.ColumnPluginFilename);
        }
        
        /// test for NULL value
        public bool IsPluginParametersNull()
        {
            return this.IsNull(this.myTable.ColumnPluginParameters);
        }
        
        /// assign NULL value
        public void SetPluginParametersNull()
        {
            this.SetNull(this.myTable.ColumnPluginParameters);
        }
        
        /// test for NULL value
        public bool IsConfidentialGiftFlagNull()
        {
            return this.IsNull(this.myTable.ColumnConfidentialGiftFlag);
        }
        
        /// assign NULL value
        public void SetConfidentialGiftFlagNull()
        {
            this.SetNull(this.myTable.ColumnConfidentialGiftFlag);
        }
        
        /// test for NULL value
        public bool IsTaxDeductableNull()
        {
            return this.IsNull(this.myTable.ColumnTaxDeductable);
        }
        
        /// assign NULL value
        public void SetTaxDeductableNull()
        {
            this.SetNull(this.myTable.ColumnTaxDeductable);
        }
        
        /// test for NULL value
        public bool IsMotivationGroupCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationGroupCode);
        }
        
        /// assign NULL value
        public void SetMotivationGroupCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
        }
        
        /// test for NULL value
        public bool IsMotivationDetailCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationDetailCode);
        }
        
        /// assign NULL value
        public void SetMotivationDetailCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of recently imported bank statements
    [Serializable()]
    public class AEpStatementTable : TTypedDataTable
    {
        
        /// auto generated unique identifier for bank statements
        public DataColumn ColumnStatementKey;
        
        /// The bank that issued this statement
        public DataColumn ColumnBankKey;
        
        /// The date of this statement
        public DataColumn ColumnDate;
        
        /// This is the ID that the bank uses for this statement; it can be used to find the paper version of the bank statement
        public DataColumn ColumnIdFromBank;
        
        /// This is the name of the file that this statement was read from; this can be used to prevent duplicate import of bank statements
        public DataColumn ColumnFilename;
        
        /// The end balance of the bank account after the statement
        public DataColumn ColumnEndBalance;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AEpStatementTable() : 
                base("AEpStatement")
        {
        }
        
        /// constructor
        public AEpStatementTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AEpStatementTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AEpStatementRow this[int i]
        {
            get
            {
                return ((AEpStatementRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatementKeyDBName()
        {
            return "a_statement_key_i";
        }
        
        /// get help text for column
        public static string GetStatementKeyHelp()
        {
            return "auto generated unique identifier for bank statements";
        }
        
        /// get label of column
        public static string GetStatementKeyLabel()
        {
            return "Bank statement";
        }
        
        /// get display format for column
        public static short GetStatementKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankKeyDBName()
        {
            return "p_bank_key_n";
        }
        
        /// get help text for column
        public static string GetBankKeyHelp()
        {
            return "The bank that issued this statement";
        }
        
        /// get label of column
        public static string GetBankKeyLabel()
        {
            return "p_bank_key_n";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateDBName()
        {
            return "a_date_d";
        }
        
        /// get help text for column
        public static string GetDateHelp()
        {
            return "The date of this statement";
        }
        
        /// get label of column
        public static string GetDateLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIdFromBankDBName()
        {
            return "a_id_from_bank_c";
        }
        
        /// get help text for column
        public static string GetIdFromBankHelp()
        {
            return "This is the ID that the bank uses for this statement; it can be used to find the " +
                "paper version of the bank statement";
        }
        
        /// get label of column
        public static string GetIdFromBankLabel()
        {
            return "Id from Bank";
        }
        
        /// get character length for column
        public static short GetIdFromBankLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFilenameDBName()
        {
            return "a_filename_c";
        }
        
        /// get help text for column
        public static string GetFilenameHelp()
        {
            return "This is the name of the file that this statement was read from; this can be used " +
                "to prevent duplicate import of bank statements";
        }
        
        /// get label of column
        public static string GetFilenameLabel()
        {
            return "filename of statement";
        }
        
        /// get character length for column
        public static short GetFilenameLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEndBalanceDBName()
        {
            return "a_end_balance_n";
        }
        
        /// get help text for column
        public static string GetEndBalanceHelp()
        {
            return "The end balance of the bank account after the statement";
        }
        
        /// get label of column
        public static string GetEndBalanceLabel()
        {
            return "End balance";
        }
        
        /// get display format for column
        public static short GetEndBalanceLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AEpStatement";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ep_statement";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Bank statements";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_statement_key_i",
                    "p_bank_key_n",
                    "a_date_d",
                    "a_id_from_bank_c",
                    "a_filename_c",
                    "a_end_balance_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatementKey = this.Columns["a_statement_key_i"];
            this.ColumnBankKey = this.Columns["p_bank_key_n"];
            this.ColumnDate = this.Columns["a_date_d"];
            this.ColumnIdFromBank = this.Columns["a_id_from_bank_c"];
            this.ColumnFilename = this.Columns["a_filename_c"];
            this.ColumnEndBalance = this.Columns["a_end_balance_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnStatementKey};
        }
        
        /// get typed set of changes
        public AEpStatementTable GetChangesTyped()
        {
            return ((AEpStatementTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AEpStatementRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpStatementRow ret = ((AEpStatementRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AEpStatementRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpStatementRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_statement_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_bank_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_id_from_bank_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_filename_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_end_balance_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnStatementKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBankKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnIdFromBank))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnFilename))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnEndBalance))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of recently imported bank statements
    [Serializable()]
    public class AEpStatementRow : System.Data.DataRow
    {
        
        private AEpStatementTable myTable;
        
        /// Constructor
        public AEpStatementRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AEpStatementTable)(this.Table));
        }
        
        /// auto generated unique identifier for bank statements
        public Int32 StatementKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatementKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatementKey) 
                            || (((Int32)(this[this.myTable.ColumnStatementKey])) != value)))
                {
                    this[this.myTable.ColumnStatementKey] = value;
                }
            }
        }
        
        /// The bank that issued this statement
        public Int64 BankKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankKey) 
                            || (((Int64)(this[this.myTable.ColumnBankKey])) != value)))
                {
                    this[this.myTable.ColumnBankKey] = value;
                }
            }
        }
        
        /// The date of this statement
        public System.DateTime Date
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnDate])) != value)))
                {
                    this[this.myTable.ColumnDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is the ID that the bank uses for this statement; it can be used to find the paper version of the bank statement
        public String IdFromBank
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIdFromBank.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIdFromBank) 
                            || (((String)(this[this.myTable.ColumnIdFromBank])) != value)))
                {
                    this[this.myTable.ColumnIdFromBank] = value;
                }
            }
        }
        
        /// This is the name of the file that this statement was read from; this can be used to prevent duplicate import of bank statements
        public String Filename
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFilename.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFilename) 
                            || (((String)(this[this.myTable.ColumnFilename])) != value)))
                {
                    this[this.myTable.ColumnFilename] = value;
                }
            }
        }
        
        /// The end balance of the bank account after the statement
        public Double EndBalance
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEndBalance.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEndBalance) 
                            || (((Double)(this[this.myTable.ColumnEndBalance])) != value)))
                {
                    this[this.myTable.ColumnEndBalance] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
            this.SetNull(this.myTable.ColumnBankKey);
            this[this.myTable.ColumnDate.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnIdFromBank);
            this.SetNull(this.myTable.ColumnFilename);
            this.SetNull(this.myTable.ColumnEndBalance);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsIdFromBankNull()
        {
            return this.IsNull(this.myTable.ColumnIdFromBank);
        }
        
        /// assign NULL value
        public void SetIdFromBankNull()
        {
            this.SetNull(this.myTable.ColumnIdFromBank);
        }
        
        /// test for NULL value
        public bool IsFilenameNull()
        {
            return this.IsNull(this.myTable.ColumnFilename);
        }
        
        /// assign NULL value
        public void SetFilenameNull()
        {
            this.SetNull(this.myTable.ColumnFilename);
        }
        
        /// test for NULL value
        public bool IsEndBalanceNull()
        {
            return this.IsNull(this.myTable.ColumnEndBalance);
        }
        
        /// assign NULL value
        public void SetEndBalanceNull()
        {
            this.SetNull(this.myTable.ColumnEndBalance);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// the matches that can be used to identify recurring gift or GL transactions
    [Serializable()]
    public class AEpMatchTable : TTypedDataTable
    {
        
        /// this is a sequence to easily identify which transaction has been matched and how
        public DataColumn ColumnEpMatchKey;
        
        /// this is a separated list of all the recurring details of a_ep_transaction (ie. name, bank account, sort code, IBAN, amount, description)
        public DataColumn ColumnMatchText;
        
        /// the match can be applied to split gifts as well
        public DataColumn ColumnDetail;
        
        /// What to do with this match: gift, GL, or discard
        public DataColumn ColumnAction;
        
        /// The date when this match was recently applied; useful for purging old entries
        public DataColumn ColumnRecentMatch;
        
        /// The four digit ledger number of the gift.
        public DataColumn ColumnLedgerNumber;
        
        /// The partner key of the commitment field (the unit) of the recipient of the gift.  This is not the ledger number but rather the partner key of the unit associated with the ledger.
        public DataColumn ColumnRecipientLedgerNumber;
        
        /// This defines a motivation group.
        public DataColumn ColumnMotivationGroupCode;
        
        /// This defines the motivation detail within a motivation group.
        public DataColumn ColumnMotivationDetailCode;
        
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentOneType;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentOne;
        
        /// Defines whether the donor wishes the recipient to know who gave the gift
        public DataColumn ColumnConfidentialGiftFlag;
        
        /// Whether this gift is tax deductable
        public DataColumn ColumnTaxDeductable;
        
        /// The partner key of the recipient of the gift.
        public DataColumn ColumnRecipientKey;
        
        /// To determine whether an admin fee on the transaction should be overwritten if it normally has a charge associated with it. Used for both local and ilt transaction.
        public DataColumn ColumnChargeFlag;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner.
        public DataColumn ColumnCostCentreCode;
        
        /// Mailing Code of the mailing that the gift was a response to.
        public DataColumn ColumnMailingCode;
        
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentTwoType;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentTwo;
        
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentThreeType;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentThree;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AEpMatchTable() : 
                base("AEpMatch")
        {
        }
        
        /// constructor
        public AEpMatchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AEpMatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AEpMatchRow this[int i]
        {
            get
            {
                return ((AEpMatchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetEpMatchKeyDBName()
        {
            return "a_ep_match_key_i";
        }
        
        /// get help text for column
        public static string GetEpMatchKeyHelp()
        {
            return "this is a sequence to easily identify which transaction has been matched and how";
        }
        
        /// get label of column
        public static string GetEpMatchKeyLabel()
        {
            return "a_ep_match_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetMatchTextDBName()
        {
            return "a_match_text_c";
        }
        
        /// get help text for column
        public static string GetMatchTextHelp()
        {
            return "this is a separated list of all the recurring details of a_ep_transaction (ie. na" +
                "me, bank account, sort code, IBAN, amount, description)";
        }
        
        /// get label of column
        public static string GetMatchTextLabel()
        {
            return "a_match_text_c";
        }
        
        /// get character length for column
        public static short GetMatchTextLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailDBName()
        {
            return "a_detail_i";
        }
        
        /// get help text for column
        public static string GetDetailHelp()
        {
            return "the match can be applied to split gifts as well";
        }
        
        /// get label of column
        public static string GetDetailLabel()
        {
            return "a_detail_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetActionDBName()
        {
            return "a_action_c";
        }
        
        /// get help text for column
        public static string GetActionHelp()
        {
            return "What to do with this match: gift, GL, or discard";
        }
        
        /// get label of column
        public static string GetActionLabel()
        {
            return "a_action_c";
        }
        
        /// get character length for column
        public static short GetActionLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecentMatchDBName()
        {
            return "a_recent_match_d";
        }
        
        /// get help text for column
        public static string GetRecentMatchHelp()
        {
            return "last occurance of this match";
        }
        
        /// get label of column
        public static string GetRecentMatchLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetRecentMatchLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecipientLedgerNumberDBName()
        {
            return "a_recipient_ledger_number_n";
        }
        
        /// get help text for column
        public static string GetRecipientLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetRecipientLedgerNumberLabel()
        {
            return "Recipient Ledger";
        }
        
        /// get display format for column
        public static short GetRecipientLedgerNumberLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationGroupCodeDBName()
        {
            return "a_motivation_group_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationGroupCodeHelp()
        {
            return "Enter a motivation group code";
        }
        
        /// get label of column
        public static string GetMotivationGroupCodeLabel()
        {
            return "Motivation Group";
        }
        
        /// get character length for column
        public static short GetMotivationGroupCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMotivationDetailCodeDBName()
        {
            return "a_motivation_detail_code_c";
        }
        
        /// get help text for column
        public static string GetMotivationDetailCodeHelp()
        {
            return "Enter a motivation detail code";
        }
        
        /// get label of column
        public static string GetMotivationDetailCodeLabel()
        {
            return "Motivation Detail";
        }
        
        /// get character length for column
        public static short GetMotivationDetailCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentOneTypeDBName()
        {
            return "a_comment_one_type_c";
        }
        
        /// get help text for column
        public static string GetCommentOneTypeHelp()
        {
            return "Make a selection";
        }
        
        /// get label of column
        public static string GetCommentOneTypeLabel()
        {
            return "Comment Type";
        }
        
        /// get character length for column
        public static short GetCommentOneTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftCommentOneDBName()
        {
            return "a_gift_comment_one_c";
        }
        
        /// get help text for column
        public static string GetGiftCommentOneHelp()
        {
            return "Enter a comment";
        }
        
        /// get label of column
        public static string GetGiftCommentOneLabel()
        {
            return "Comment One";
        }
        
        /// get character length for column
        public static short GetGiftCommentOneLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetConfidentialGiftFlagDBName()
        {
            return "a_confidential_gift_flag_l";
        }
        
        /// get help text for column
        public static string GetConfidentialGiftFlagHelp()
        {
            return "Make a selection";
        }
        
        /// get label of column
        public static string GetConfidentialGiftFlagLabel()
        {
            return "Confidential Gift";
        }
        
        /// get display format for column
        public static short GetConfidentialGiftFlagLength()
        {
            return 17;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxDeductableDBName()
        {
            return "a_tax_deductable_l";
        }
        
        /// get help text for column
        public static string GetTaxDeductableHelp()
        {
            return "Is this gift tax deductable?";
        }
        
        /// get label of column
        public static string GetTaxDeductableLabel()
        {
            return "Tax Deductable";
        }
        
        /// get display format for column
        public static short GetTaxDeductableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecipientKeyDBName()
        {
            return "p_recipient_key_n";
        }
        
        /// get help text for column
        public static string GetRecipientKeyHelp()
        {
            return "Enter the partner key";
        }
        
        /// get label of column
        public static string GetRecipientKeyLabel()
        {
            return "Recipient";
        }
        
        /// get display format for column
        public static short GetRecipientKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargeFlagDBName()
        {
            return "a_charge_flag_l";
        }
        
        /// get help text for column
        public static string GetChargeFlagHelp()
        {
            return "To determine whether an admin fee on the transaction should be overwritten if it " +
                "normally has a charge associated with it. Used for both local and ilt transactio" +
                "n.";
        }
        
        /// get label of column
        public static string GetChargeFlagLabel()
        {
            return "Charge Fee";
        }
        
        /// get display format for column
        public static short GetChargeFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMailingCodeDBName()
        {
            return "p_mailing_code_c";
        }
        
        /// get help text for column
        public static string GetMailingCodeHelp()
        {
            return "The mailing code if the gift was given in response to a mailing";
        }
        
        /// get label of column
        public static string GetMailingCodeLabel()
        {
            return "Mailing Code";
        }
        
        /// get character length for column
        public static short GetMailingCodeLength()
        {
            return 25;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentTwoTypeDBName()
        {
            return "a_comment_two_type_c";
        }
        
        /// get help text for column
        public static string GetCommentTwoTypeHelp()
        {
            return "Make a selection";
        }
        
        /// get label of column
        public static string GetCommentTwoTypeLabel()
        {
            return "Comment Type";
        }
        
        /// get character length for column
        public static short GetCommentTwoTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftCommentTwoDBName()
        {
            return "a_gift_comment_two_c";
        }
        
        /// get help text for column
        public static string GetGiftCommentTwoHelp()
        {
            return "Enter a comment";
        }
        
        /// get label of column
        public static string GetGiftCommentTwoLabel()
        {
            return "Comment Two";
        }
        
        /// get character length for column
        public static short GetGiftCommentTwoLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentThreeTypeDBName()
        {
            return "a_comment_three_type_c";
        }
        
        /// get help text for column
        public static string GetCommentThreeTypeHelp()
        {
            return "Make a selection";
        }
        
        /// get label of column
        public static string GetCommentThreeTypeLabel()
        {
            return "Comment Type";
        }
        
        /// get character length for column
        public static short GetCommentThreeTypeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftCommentThreeDBName()
        {
            return "a_gift_comment_three_c";
        }
        
        /// get help text for column
        public static string GetGiftCommentThreeHelp()
        {
            return "Enter a comment";
        }
        
        /// get label of column
        public static string GetGiftCommentThreeLabel()
        {
            return "Comment Three";
        }
        
        /// get character length for column
        public static short GetGiftCommentThreeLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AEpMatch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ep_match";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Matches of Gift or GL transactions";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ep_match_key_i",
                    "a_match_text_c",
                    "a_detail_i",
                    "a_action_c",
                    "a_recent_match_d",
                    "a_ledger_number_i",
                    "a_recipient_ledger_number_n",
                    "a_motivation_group_code_c",
                    "a_motivation_detail_code_c",
                    "a_comment_one_type_c",
                    "a_gift_comment_one_c",
                    "a_confidential_gift_flag_l",
                    "a_tax_deductable_l",
                    "p_recipient_key_n",
                    "a_charge_flag_l",
                    "a_cost_centre_code_c",
                    "p_mailing_code_c",
                    "a_comment_two_type_c",
                    "a_gift_comment_two_c",
                    "a_comment_three_type_c",
                    "a_gift_comment_three_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnEpMatchKey = this.Columns["a_ep_match_key_i"];
            this.ColumnMatchText = this.Columns["a_match_text_c"];
            this.ColumnDetail = this.Columns["a_detail_i"];
            this.ColumnAction = this.Columns["a_action_c"];
            this.ColumnRecentMatch = this.Columns["a_recent_match_d"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnRecipientLedgerNumber = this.Columns["a_recipient_ledger_number_n"];
            this.ColumnMotivationGroupCode = this.Columns["a_motivation_group_code_c"];
            this.ColumnMotivationDetailCode = this.Columns["a_motivation_detail_code_c"];
            this.ColumnCommentOneType = this.Columns["a_comment_one_type_c"];
            this.ColumnGiftCommentOne = this.Columns["a_gift_comment_one_c"];
            this.ColumnConfidentialGiftFlag = this.Columns["a_confidential_gift_flag_l"];
            this.ColumnTaxDeductable = this.Columns["a_tax_deductable_l"];
            this.ColumnRecipientKey = this.Columns["p_recipient_key_n"];
            this.ColumnChargeFlag = this.Columns["a_charge_flag_l"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnMailingCode = this.Columns["p_mailing_code_c"];
            this.ColumnCommentTwoType = this.Columns["a_comment_two_type_c"];
            this.ColumnGiftCommentTwo = this.Columns["a_gift_comment_two_c"];
            this.ColumnCommentThreeType = this.Columns["a_comment_three_type_c"];
            this.ColumnGiftCommentThree = this.Columns["a_gift_comment_three_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnEpMatchKey};
        }
        
        /// get typed set of changes
        public AEpMatchTable GetChangesTyped()
        {
            return ((AEpMatchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AEpMatchRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpMatchRow ret = ((AEpMatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AEpMatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpMatchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ep_match_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_match_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_recent_match_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_ledger_number_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_group_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_detail_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_one_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_one_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_confidential_gift_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_deductable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_recipient_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_mailing_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_two_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_two_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_three_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_three_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnEpMatchKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMatchText))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnDetail))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAction))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnRecentMatch))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRecipientLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnMotivationGroupCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMotivationDetailCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCommentOneType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnGiftCommentOne))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnConfidentialGiftFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTaxDeductable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRecipientKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnChargeFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnMailingCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 50);
            }
            if ((ACol == ColumnCommentTwoType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnGiftCommentTwo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnCommentThreeType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnGiftCommentThree))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// the matches that can be used to identify recurring gift or GL transactions
    [Serializable()]
    public class AEpMatchRow : System.Data.DataRow
    {
        
        private AEpMatchTable myTable;
        
        /// Constructor
        public AEpMatchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AEpMatchTable)(this.Table));
        }
        
        /// this is a sequence to easily identify which transaction has been matched and how
        public Int32 EpMatchKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEpMatchKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEpMatchKey) 
                            || (((Int32)(this[this.myTable.ColumnEpMatchKey])) != value)))
                {
                    this[this.myTable.ColumnEpMatchKey] = value;
                }
            }
        }
        
        /// this is a separated list of all the recurring details of a_ep_transaction (ie. name, bank account, sort code, IBAN, amount, description)
        public String MatchText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMatchText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMatchText) 
                            || (((String)(this[this.myTable.ColumnMatchText])) != value)))
                {
                    this[this.myTable.ColumnMatchText] = value;
                }
            }
        }
        
        /// the match can be applied to split gifts as well
        public Int32 Detail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetail) 
                            || (((Int32)(this[this.myTable.ColumnDetail])) != value)))
                {
                    this[this.myTable.ColumnDetail] = value;
                }
            }
        }
        
        /// What to do with this match: gift, GL, or discard
        public String Action
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAction) 
                            || (((String)(this[this.myTable.ColumnAction])) != value)))
                {
                    this[this.myTable.ColumnAction] = value;
                }
            }
        }
        
        /// The date when this match was recently applied; useful for purging old entries
        public System.DateTime RecentMatch
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecentMatch.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecentMatch) 
                            || (((System.DateTime)(this[this.myTable.ColumnRecentMatch])) != value)))
                {
                    this[this.myTable.ColumnRecentMatch] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime RecentMatchLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnRecentMatch], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime RecentMatchHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnRecentMatch.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The four digit ledger number of the gift.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The partner key of the commitment field (the unit) of the recipient of the gift.  This is not the ledger number but rather the partner key of the unit associated with the ledger.
        public Int64 RecipientLedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientLedgerNumber) 
                            || (((Int64)(this[this.myTable.ColumnRecipientLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnRecipientLedgerNumber] = value;
                }
            }
        }
        
        /// This defines a motivation group.
        public String MotivationGroupCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationGroupCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationGroupCode) 
                            || (((String)(this[this.myTable.ColumnMotivationGroupCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationGroupCode] = value;
                }
            }
        }
        
        /// This defines the motivation detail within a motivation group.
        public String MotivationDetailCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationDetailCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationDetailCode) 
                            || (((String)(this[this.myTable.ColumnMotivationDetailCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationDetailCode] = value;
                }
            }
        }
        
        /// Used to decide whose reports will see this comment
        public String CommentOneType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentOneType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentOneType) 
                            || (((String)(this[this.myTable.ColumnCommentOneType])) != value)))
                {
                    this[this.myTable.ColumnCommentOneType] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String GiftCommentOne
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentOne.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentOne) 
                            || (((String)(this[this.myTable.ColumnGiftCommentOne])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentOne] = value;
                }
            }
        }
        
        /// Defines whether the donor wishes the recipient to know who gave the gift
        public Boolean ConfidentialGiftFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConfidentialGiftFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConfidentialGiftFlag) 
                            || (((Boolean)(this[this.myTable.ColumnConfidentialGiftFlag])) != value)))
                {
                    this[this.myTable.ColumnConfidentialGiftFlag] = value;
                }
            }
        }
        
        /// Whether this gift is tax deductable
        public Boolean TaxDeductable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxDeductable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxDeductable) 
                            || (((Boolean)(this[this.myTable.ColumnTaxDeductable])) != value)))
                {
                    this[this.myTable.ColumnTaxDeductable] = value;
                }
            }
        }
        
        /// The partner key of the recipient of the gift.
        public Int64 RecipientKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientKey) 
                            || (((Int64)(this[this.myTable.ColumnRecipientKey])) != value)))
                {
                    this[this.myTable.ColumnRecipientKey] = value;
                }
            }
        }
        
        /// To determine whether an admin fee on the transaction should be overwritten if it normally has a charge associated with it. Used for both local and ilt transaction.
        public Boolean ChargeFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeFlag) 
                            || (((Boolean)(this[this.myTable.ColumnChargeFlag])) != value)))
                {
                    this[this.myTable.ColumnChargeFlag] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner.
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// Mailing Code of the mailing that the gift was a response to.
        public String MailingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMailingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMailingCode) 
                            || (((String)(this[this.myTable.ColumnMailingCode])) != value)))
                {
                    this[this.myTable.ColumnMailingCode] = value;
                }
            }
        }
        
        /// Used to decide whose reports will see this comment
        public String CommentTwoType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentTwoType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentTwoType) 
                            || (((String)(this[this.myTable.ColumnCommentTwoType])) != value)))
                {
                    this[this.myTable.ColumnCommentTwoType] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String GiftCommentTwo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentTwo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentTwo) 
                            || (((String)(this[this.myTable.ColumnGiftCommentTwo])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentTwo] = value;
                }
            }
        }
        
        /// Used to decide whose reports will see this comment
        public String CommentThreeType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentThreeType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentThreeType) 
                            || (((String)(this[this.myTable.ColumnCommentThreeType])) != value)))
                {
                    this[this.myTable.ColumnCommentThreeType] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String GiftCommentThree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentThree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentThree) 
                            || (((String)(this[this.myTable.ColumnGiftCommentThree])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentThree] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
            this.SetNull(this.myTable.ColumnMatchText);
            this[this.myTable.ColumnDetail.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAction);
            this[this.myTable.ColumnRecentMatch.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnRecipientLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
            this.SetNull(this.myTable.ColumnCommentOneType);
            this.SetNull(this.myTable.ColumnGiftCommentOne);
            this[this.myTable.ColumnConfidentialGiftFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxDeductable.Ordinal] = true;
            this[this.myTable.ColumnRecipientKey.Ordinal] = 0;
            this[this.myTable.ColumnChargeFlag.Ordinal] = true;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnMailingCode);
            this.SetNull(this.myTable.ColumnCommentTwoType);
            this.SetNull(this.myTable.ColumnGiftCommentTwo);
            this.SetNull(this.myTable.ColumnCommentThreeType);
            this.SetNull(this.myTable.ColumnGiftCommentThree);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsEpMatchKeyNull()
        {
            return this.IsNull(this.myTable.ColumnEpMatchKey);
        }
        
        /// assign NULL value
        public void SetEpMatchKeyNull()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
        }
        
        /// test for NULL value
        public bool IsMatchTextNull()
        {
            return this.IsNull(this.myTable.ColumnMatchText);
        }
        
        /// assign NULL value
        public void SetMatchTextNull()
        {
            this.SetNull(this.myTable.ColumnMatchText);
        }
        
        /// test for NULL value
        public bool IsDetailNull()
        {
            return this.IsNull(this.myTable.ColumnDetail);
        }
        
        /// assign NULL value
        public void SetDetailNull()
        {
            this.SetNull(this.myTable.ColumnDetail);
        }
        
        /// test for NULL value
        public bool IsCommentOneTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentOneType);
        }
        
        /// assign NULL value
        public void SetCommentOneTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentOneType);
        }
        
        /// test for NULL value
        public bool IsGiftCommentOneNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentOne);
        }
        
        /// assign NULL value
        public void SetGiftCommentOneNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentOne);
        }
        
        /// test for NULL value
        public bool IsTaxDeductableNull()
        {
            return this.IsNull(this.myTable.ColumnTaxDeductable);
        }
        
        /// assign NULL value
        public void SetTaxDeductableNull()
        {
            this.SetNull(this.myTable.ColumnTaxDeductable);
        }
        
        /// test for NULL value
        public bool IsChargeFlagNull()
        {
            return this.IsNull(this.myTable.ColumnChargeFlag);
        }
        
        /// assign NULL value
        public void SetChargeFlagNull()
        {
            this.SetNull(this.myTable.ColumnChargeFlag);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsMailingCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMailingCode);
        }
        
        /// assign NULL value
        public void SetMailingCodeNull()
        {
            this.SetNull(this.myTable.ColumnMailingCode);
        }
        
        /// test for NULL value
        public bool IsCommentTwoTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentTwoType);
        }
        
        /// assign NULL value
        public void SetCommentTwoTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentTwoType);
        }
        
        /// test for NULL value
        public bool IsGiftCommentTwoNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentTwo);
        }
        
        /// assign NULL value
        public void SetGiftCommentTwoNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentTwo);
        }
        
        /// test for NULL value
        public bool IsCommentThreeTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentThreeType);
        }
        
        /// assign NULL value
        public void SetCommentThreeTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentThreeType);
        }
        
        /// test for NULL value
        public bool IsGiftCommentThreeNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentThree);
        }
        
        /// assign NULL value
        public void SetGiftCommentThreeNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentThree);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// the transactions from the recently imported bank statements; they should help to identify the other party of the transaction (donor, etc) and the purpose of the transaction
    [Serializable()]
    public class AEpTransactionTable : TTypedDataTable
    {
        
        /// this transaction belongs to that statement
        public DataColumn ColumnStatementKey;
        
        /// to complete the primary key
        public DataColumn ColumnOrder;
        
        /// this is the bank account that this transaction is for; this is necessary because one statement can contain transactions to several accounts at the same bank?
        public DataColumn ColumnStatementBankAccountKey;
        
        /// This can be a summary of title, first name, last name etc. of the other party
        public DataColumn ColumnAccountName;
        
        /// 
        public DataColumn ColumnTitle;
        
        /// 
        public DataColumn ColumnFirstName;
        
        /// 
        public DataColumn ColumnMiddleName;
        
        /// the name of the other party
        public DataColumn ColumnLastName;
        
        /// The bank code/branch code/sort code of the other party.
        public DataColumn ColumnBranchCode;
        
        /// BIC (Bank Identifier Code)/SWIFT code of the other party
        public DataColumn ColumnBic;
        
        /// The account number in the bank of the other party
        public DataColumn ColumnBankAccountNumber;
        
        /// The IBAN (International Bank Account Number) of the other party.
        public DataColumn ColumnIban;
        
        /// This can be recurring income, recurring payment, income, payment, direct debit, etc.
        public DataColumn ColumnTransactionTypeCode;
        
        /// The amount in the currency of the bank account
        public DataColumn ColumnTransactionAmount;
        
        /// This description was given when the transfer was initiated
        public DataColumn ColumnDescription;
        
        /// The date when this transaction became valid or available
        public DataColumn ColumnDateEffective;
        
        /// set this value to the match (either new match or set automatically)
        public DataColumn ColumnEpMatchKey;
        
        /// This defines if the match was automatically set, was created new, or this is not a recurring transaction or has not been processed yet
        public DataColumn ColumnMatchingStatus;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AEpTransactionTable() : 
                base("AEpTransaction")
        {
        }
        
        /// constructor
        public AEpTransactionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AEpTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AEpTransactionRow this[int i]
        {
            get
            {
                return ((AEpTransactionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatementKeyDBName()
        {
            return "a_statement_key_i";
        }
        
        /// get help text for column
        public static string GetStatementKeyHelp()
        {
            return "this transaction belongs to that statement";
        }
        
        /// get label of column
        public static string GetStatementKeyLabel()
        {
            return "Bank statement";
        }
        
        /// get display format for column
        public static short GetStatementKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOrderDBName()
        {
            return "a_order_i";
        }
        
        /// get help text for column
        public static string GetOrderHelp()
        {
            return "to complete the primary key";
        }
        
        /// get label of column
        public static string GetOrderLabel()
        {
            return "order";
        }
        
        /// get display format for column
        public static short GetOrderLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStatementBankAccountKeyDBName()
        {
            return "a_statement_bank_account_key_i";
        }
        
        /// get help text for column
        public static string GetStatementBankAccountKeyHelp()
        {
            return "this is the bank account that this transaction is for; this is necessary because " +
                "one statement can contain transactions to several accounts at the same bank?";
        }
        
        /// get label of column
        public static string GetStatementBankAccountKeyLabel()
        {
            return "banking details";
        }
        
        /// get display format for column
        public static short GetStatementBankAccountKeyLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountNameDBName()
        {
            return "a_account_name_c";
        }
        
        /// get help text for column
        public static string GetAccountNameHelp()
        {
            return "This can be a summary of title, first name, last name etc. of the other party";
        }
        
        /// get label of column
        public static string GetAccountNameLabel()
        {
            return "Account Name";
        }
        
        /// get character length for column
        public static short GetAccountNameLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "a_title_c";
        }
        
        /// get help text for column
        public static string GetTitleHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTitleLabel()
        {
            return "Title";
        }
        
        /// get character length for column
        public static short GetTitleLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "a_first_name_c";
        }
        
        /// get help text for column
        public static string GetFirstNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFirstNameLabel()
        {
            return "First Name";
        }
        
        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMiddleNameDBName()
        {
            return "a_middle_name_c";
        }
        
        /// get help text for column
        public static string GetMiddleNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetMiddleNameLabel()
        {
            return "Middle Name";
        }
        
        /// get character length for column
        public static short GetMiddleNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastNameDBName()
        {
            return "a_last_name_c";
        }
        
        /// get help text for column
        public static string GetLastNameHelp()
        {
            return "the name of the other party";
        }
        
        /// get label of column
        public static string GetLastNameLabel()
        {
            return "Last Name";
        }
        
        /// get character length for column
        public static short GetLastNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBranchCodeDBName()
        {
            return "p_branch_code_c";
        }
        
        /// get help text for column
        public static string GetBranchCodeHelp()
        {
            return "The bank code/branch code/sort code of the other party.";
        }
        
        /// get label of column
        public static string GetBranchCodeLabel()
        {
            return "Bank/Branch Code";
        }
        
        /// get character length for column
        public static short GetBranchCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBicDBName()
        {
            return "p_bic_c";
        }
        
        /// get help text for column
        public static string GetBicHelp()
        {
            return "BIC (Bank Identifier Code)/SWIFT code of the other party";
        }
        
        /// get label of column
        public static string GetBicLabel()
        {
            return "BIC/SWIFT Code";
        }
        
        /// get character length for column
        public static short GetBicLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankAccountNumberDBName()
        {
            return "a_bank_account_number_c";
        }
        
        /// get help text for column
        public static string GetBankAccountNumberHelp()
        {
            return "The account number in the bank of the other party";
        }
        
        /// get label of column
        public static string GetBankAccountNumberLabel()
        {
            return "Account Number";
        }
        
        /// get character length for column
        public static short GetBankAccountNumberLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIbanDBName()
        {
            return "a_iban_c";
        }
        
        /// get help text for column
        public static string GetIbanHelp()
        {
            return "The IBAN (International Bank Account Number) of the other party.";
        }
        
        /// get label of column
        public static string GetIbanLabel()
        {
            return "IBAN";
        }
        
        /// get character length for column
        public static short GetIbanLength()
        {
            return 64;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "This can be recurring income, recurring payment, income, payment, direct debit, e" +
                "tc.";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "transaction type";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }
        
        /// get help text for column
        public static string GetTransactionAmountHelp()
        {
            return "The amount in the currency of the bank account";
        }
        
        /// get label of column
        public static string GetTransactionAmountLabel()
        {
            return "Transaction Amount";
        }
        
        /// get display format for column
        public static short GetTransactionAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "This description was given when the transfer was initiated";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 256;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "The date of this transaction";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEpMatchKeyDBName()
        {
            return "a_ep_match_key_i";
        }
        
        /// get help text for column
        public static string GetEpMatchKeyHelp()
        {
            return "set this value to the match (either new match or set automatically)";
        }
        
        /// get label of column
        public static string GetEpMatchKeyLabel()
        {
            return "a_ep_match_key_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetMatchingStatusDBName()
        {
            return "a_matching_status_c";
        }
        
        /// get help text for column
        public static string GetMatchingStatusHelp()
        {
            return "This defines if the match was automatically set, was created new, or this is not " +
                "a recurring transaction or has not been processed yet";
        }
        
        /// get label of column
        public static string GetMatchingStatusLabel()
        {
            return "a_matching_status_c";
        }
        
        /// get character length for column
        public static short GetMatchingStatusLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AEpTransaction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ep_transaction";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "transactions of Bank statements";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_statement_key_i",
                    "a_order_i",
                    "a_statement_bank_account_key_i",
                    "a_account_name_c",
                    "a_title_c",
                    "a_first_name_c",
                    "a_middle_name_c",
                    "a_last_name_c",
                    "p_branch_code_c",
                    "p_bic_c",
                    "a_bank_account_number_c",
                    "a_iban_c",
                    "a_transaction_type_code_c",
                    "a_transaction_amount_n",
                    "a_description_c",
                    "a_date_effective_d",
                    "a_ep_match_key_i",
                    "a_matching_status_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatementKey = this.Columns["a_statement_key_i"];
            this.ColumnOrder = this.Columns["a_order_i"];
            this.ColumnStatementBankAccountKey = this.Columns["a_statement_bank_account_key_i"];
            this.ColumnAccountName = this.Columns["a_account_name_c"];
            this.ColumnTitle = this.Columns["a_title_c"];
            this.ColumnFirstName = this.Columns["a_first_name_c"];
            this.ColumnMiddleName = this.Columns["a_middle_name_c"];
            this.ColumnLastName = this.Columns["a_last_name_c"];
            this.ColumnBranchCode = this.Columns["p_branch_code_c"];
            this.ColumnBic = this.Columns["p_bic_c"];
            this.ColumnBankAccountNumber = this.Columns["a_bank_account_number_c"];
            this.ColumnIban = this.Columns["a_iban_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnEpMatchKey = this.Columns["a_ep_match_key_i"];
            this.ColumnMatchingStatus = this.Columns["a_matching_status_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnStatementKey,
                    this.ColumnOrder};
        }
        
        /// get typed set of changes
        public AEpTransactionTable GetChangesTyped()
        {
            return ((AEpTransactionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AEpTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpTransactionRow ret = ((AEpTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AEpTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpTransactionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_statement_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_order_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_statement_bank_account_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_middle_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_branch_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_bic_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_account_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_iban_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_ep_match_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_matching_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnStatementKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnOrder))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnStatementBankAccountKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnTitle))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnFirstName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnMiddleName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnLastName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnBranchCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnBic))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 22);
            }
            if ((ACol == ColumnBankAccountNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnIban))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 128);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnTransactionAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 512);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnEpMatchKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMatchingStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// the transactions from the recently imported bank statements; they should help to identify the other party of the transaction (donor, etc) and the purpose of the transaction
    [Serializable()]
    public class AEpTransactionRow : System.Data.DataRow
    {
        
        private AEpTransactionTable myTable;
        
        /// Constructor
        public AEpTransactionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AEpTransactionTable)(this.Table));
        }
        
        /// this transaction belongs to that statement
        public Int32 StatementKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatementKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatementKey) 
                            || (((Int32)(this[this.myTable.ColumnStatementKey])) != value)))
                {
                    this[this.myTable.ColumnStatementKey] = value;
                }
            }
        }
        
        /// to complete the primary key
        public Int32 Order
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOrder.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOrder) 
                            || (((Int32)(this[this.myTable.ColumnOrder])) != value)))
                {
                    this[this.myTable.ColumnOrder] = value;
                }
            }
        }
        
        /// this is the bank account that this transaction is for; this is necessary because one statement can contain transactions to several accounts at the same bank?
        public Int32 StatementBankAccountKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatementBankAccountKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatementBankAccountKey) 
                            || (((Int32)(this[this.myTable.ColumnStatementBankAccountKey])) != value)))
                {
                    this[this.myTable.ColumnStatementBankAccountKey] = value;
                }
            }
        }
        
        /// This can be a summary of title, first name, last name etc. of the other party
        public String AccountName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountName) 
                            || (((String)(this[this.myTable.ColumnAccountName])) != value)))
                {
                    this[this.myTable.ColumnAccountName] = value;
                }
            }
        }
        
        /// 
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle) 
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }
        
        /// 
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName) 
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }
        
        /// 
        public String MiddleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName) 
                            || (((String)(this[this.myTable.ColumnMiddleName])) != value)))
                {
                    this[this.myTable.ColumnMiddleName] = value;
                }
            }
        }
        
        /// the name of the other party
        public String LastName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastName) 
                            || (((String)(this[this.myTable.ColumnLastName])) != value)))
                {
                    this[this.myTable.ColumnLastName] = value;
                }
            }
        }
        
        /// The bank code/branch code/sort code of the other party.
        public String BranchCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchCode) 
                            || (((String)(this[this.myTable.ColumnBranchCode])) != value)))
                {
                    this[this.myTable.ColumnBranchCode] = value;
                }
            }
        }
        
        /// BIC (Bank Identifier Code)/SWIFT code of the other party
        public String Bic
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBic.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBic) 
                            || (((String)(this[this.myTable.ColumnBic])) != value)))
                {
                    this[this.myTable.ColumnBic] = value;
                }
            }
        }
        
        /// The account number in the bank of the other party
        public String BankAccountNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountNumber) 
                            || (((String)(this[this.myTable.ColumnBankAccountNumber])) != value)))
                {
                    this[this.myTable.ColumnBankAccountNumber] = value;
                }
            }
        }
        
        /// The IBAN (International Bank Account Number) of the other party.
        public String Iban
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIban.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIban) 
                            || (((String)(this[this.myTable.ColumnIban])) != value)))
                {
                    this[this.myTable.ColumnIban] = value;
                }
            }
        }
        
        /// This can be recurring income, recurring payment, income, payment, direct debit, etc.
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// The amount in the currency of the bank account
        public Double TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount) 
                            || (((Double)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }
        
        /// This description was given when the transfer was initiated
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// The date when this transaction became valid or available
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// set this value to the match (either new match or set automatically)
        public Int32 EpMatchKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEpMatchKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEpMatchKey) 
                            || (((Int32)(this[this.myTable.ColumnEpMatchKey])) != value)))
                {
                    this[this.myTable.ColumnEpMatchKey] = value;
                }
            }
        }
        
        /// This defines if the match was automatically set, was created new, or this is not a recurring transaction or has not been processed yet
        public String MatchingStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMatchingStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMatchingStatus) 
                            || (((String)(this[this.myTable.ColumnMatchingStatus])) != value)))
                {
                    this[this.myTable.ColumnMatchingStatus] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
            this.SetNull(this.myTable.ColumnOrder);
            this.SetNull(this.myTable.ColumnStatementBankAccountKey);
            this.SetNull(this.myTable.ColumnAccountName);
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnMiddleName);
            this.SetNull(this.myTable.ColumnLastName);
            this.SetNull(this.myTable.ColumnBranchCode);
            this.SetNull(this.myTable.ColumnBic);
            this.SetNull(this.myTable.ColumnBankAccountNumber);
            this.SetNull(this.myTable.ColumnIban);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnEpMatchKey);
            this.SetNull(this.myTable.ColumnMatchingStatus);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsAccountNameNull()
        {
            return this.IsNull(this.myTable.ColumnAccountName);
        }
        
        /// assign NULL value
        public void SetAccountNameNull()
        {
            this.SetNull(this.myTable.ColumnAccountName);
        }
        
        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }
        
        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }
        
        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }
        
        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }
        
        /// test for NULL value
        public bool IsMiddleNameNull()
        {
            return this.IsNull(this.myTable.ColumnMiddleName);
        }
        
        /// assign NULL value
        public void SetMiddleNameNull()
        {
            this.SetNull(this.myTable.ColumnMiddleName);
        }
        
        /// test for NULL value
        public bool IsLastNameNull()
        {
            return this.IsNull(this.myTable.ColumnLastName);
        }
        
        /// assign NULL value
        public void SetLastNameNull()
        {
            this.SetNull(this.myTable.ColumnLastName);
        }
        
        /// test for NULL value
        public bool IsBranchCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBranchCode);
        }
        
        /// assign NULL value
        public void SetBranchCodeNull()
        {
            this.SetNull(this.myTable.ColumnBranchCode);
        }
        
        /// test for NULL value
        public bool IsBicNull()
        {
            return this.IsNull(this.myTable.ColumnBic);
        }
        
        /// assign NULL value
        public void SetBicNull()
        {
            this.SetNull(this.myTable.ColumnBic);
        }
        
        /// test for NULL value
        public bool IsBankAccountNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountNumber);
        }
        
        /// assign NULL value
        public void SetBankAccountNumberNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountNumber);
        }
        
        /// test for NULL value
        public bool IsIbanNull()
        {
            return this.IsNull(this.myTable.ColumnIban);
        }
        
        /// assign NULL value
        public void SetIbanNull()
        {
            this.SetNull(this.myTable.ColumnIban);
        }
        
        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsEpMatchKeyNull()
        {
            return this.IsNull(this.myTable.ColumnEpMatchKey);
        }
        
        /// assign NULL value
        public void SetEpMatchKeyNull()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
        }
        
        /// test for NULL value
        public bool IsMatchingStatusNull()
        {
            return this.IsNull(this.myTable.ColumnMatchingStatus);
        }
        
        /// assign NULL value
        public void SetMatchingStatusNull()
        {
            this.SetNull(this.myTable.ColumnMatchingStatus);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Subsystems to the general ledger which can be added and removed independantly.  Eg GL, AP, AR, GR
    [Serializable()]
    public class ASubSystemTable : TTypedDataTable
    {
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// Name of a sub system
        public DataColumn ColumnSubSystemName;
        
        /// The filename of the process to call
        public DataColumn ColumnSetupSubSystemProcess;
        
        /// The filename of the process to call
        public DataColumn ColumnSubSystemToCall;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ASubSystemTable() : 
                base("ASubSystem")
        {
        }
        
        /// constructor
        public ASubSystemTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ASubSystemTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ASubSystemRow this[int i]
        {
            get
            {
                return ((ASubSystemRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System Code";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemNameDBName()
        {
            return "a_sub_system_name_c";
        }
        
        /// get help text for column
        public static string GetSubSystemNameHelp()
        {
            return "Name of a sub system";
        }
        
        /// get label of column
        public static string GetSubSystemNameLabel()
        {
            return "Sub System Name";
        }
        
        /// get character length for column
        public static short GetSubSystemNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSetupSubSystemProcessDBName()
        {
            return "a_setup_sub_system_process_c";
        }
        
        /// get help text for column
        public static string GetSetupSubSystemProcessHelp()
        {
            return "Enter the filename of the process to call";
        }
        
        /// get label of column
        public static string GetSetupSubSystemProcessLabel()
        {
            return "Setup process to Call";
        }
        
        /// get character length for column
        public static short GetSetupSubSystemProcessLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemToCallDBName()
        {
            return "a_sub_system_to_call_c";
        }
        
        /// get help text for column
        public static string GetSubSystemToCallHelp()
        {
            return "Enter the filename of the process to call";
        }
        
        /// get label of column
        public static string GetSubSystemToCallLabel()
        {
            return "To run Sub-system";
        }
        
        /// get character length for column
        public static short GetSubSystemToCallLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ASubSystem";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_sub_system";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Sub System";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_sub_system_code_c",
                    "a_sub_system_name_c",
                    "a_setup_sub_system_process_c",
                    "a_sub_system_to_call_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnSubSystemName = this.Columns["a_sub_system_name_c"];
            this.ColumnSetupSubSystemProcess = this.Columns["a_setup_sub_system_process_c"];
            this.ColumnSubSystemToCall = this.Columns["a_sub_system_to_call_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnSubSystemCode};
        }
        
        /// get typed set of changes
        public ASubSystemTable GetChangesTyped()
        {
            return ((ASubSystemTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ASubSystemRow NewRowTyped(bool AWithDefaultValues)
        {
            ASubSystemRow ret = ((ASubSystemRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ASubSystemRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASubSystemRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_setup_sub_system_process_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnSubSystemName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnSetupSubSystemProcess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnSubSystemToCall))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Subsystems to the general ledger which can be added and removed independantly.  Eg GL, AP, AR, GR
    [Serializable()]
    public class ASubSystemRow : System.Data.DataRow
    {
        
        private ASubSystemTable myTable;
        
        /// Constructor
        public ASubSystemRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ASubSystemTable)(this.Table));
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// Name of a sub system
        public String SubSystemName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemName) 
                            || (((String)(this[this.myTable.ColumnSubSystemName])) != value)))
                {
                    this[this.myTable.ColumnSubSystemName] = value;
                }
            }
        }
        
        /// The filename of the process to call
        public String SetupSubSystemProcess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSetupSubSystemProcess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSetupSubSystemProcess) 
                            || (((String)(this[this.myTable.ColumnSetupSubSystemProcess])) != value)))
                {
                    this[this.myTable.ColumnSetupSubSystemProcess] = value;
                }
            }
        }
        
        /// The filename of the process to call
        public String SubSystemToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemToCall) 
                            || (((String)(this[this.myTable.ColumnSubSystemToCall])) != value)))
                {
                    this[this.myTable.ColumnSubSystemToCall] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnSubSystemName);
            this.SetNull(this.myTable.ColumnSetupSubSystemProcess);
            this.SetNull(this.myTable.ColumnSubSystemToCall);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSubSystemToCallNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemToCall);
        }
        
        /// assign NULL value
        public void SetSubSystemToCallNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemToCall);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Basic information for each general ledger on the system. Also counters for ledger-specific variables (such as last receipt number).
    [Serializable()]
    public class ALedgerTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type &quot;&quot;ledger&quot;&quot;.
        public DataColumn ColumnLedgerNumber;
        
        /// This is the ledger name
        public DataColumn ColumnLedgerName;
        
        /// Defines if the ledger is in use
        public DataColumn ColumnLedgerStatus;
        
        /// This is the last batch number used within a ledger
        public DataColumn ColumnLastBatchNumber;
        
        /// 
        public DataColumn ColumnLastRecurringBatchNumber;
        
        /// 
        public DataColumn ColumnLastGiftNumber;
        
        /// 
        public DataColumn ColumnLastApInvNumber;
        
        /// 
        public DataColumn ColumnLastHeaderRNumber;
        
        /// 
        public DataColumn ColumnLastPoNumber;
        
        /// 
        public DataColumn ColumnLastSoNumber;
        
        /// This is a number of currency units
        public DataColumn ColumnMaxGiftAidAmount;
        
        /// This is a number of currency units
        public DataColumn ColumnMinGiftAidAmount;
        
        /// 
        public DataColumn ColumnNumberOfGiftsToDisplay;
        
        /// 
        public DataColumn ColumnTaxTypeCode;
        
        /// The account for inter-ledger transfers.
        public DataColumn ColumnIltGlAccountCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnProfitLossGlAccountCode;
        
        /// deprecated; not used at the moment; please use a_current_period_i
        public DataColumn ColumnCurrentAccountingPeriod;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnNumberOfAccountingPeriods;
        
        /// This identifies a country. It uses the ISO 3166-1-alpha-2 code elements.
        public DataColumn ColumnCountryCode;
        
        /// This defines which currency is being used
        public DataColumn ColumnBaseCurrency;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnTransactionAccountFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnYearEndFlag;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnForexGainsLossesAccount;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnSystemInterfaceFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnSuspenseAccountFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnBankAccountsFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnDeleteLedgerFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnNewFinancialYearFlag;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnRecalculateGlMasterFlag;
        
        /// Defines which installation is running on this database
        public DataColumn ColumnInstallationId;
        
        /// 
        public DataColumn ColumnBudgetControlFlag;
        
        /// 
        public DataColumn ColumnBudgetDataRetention;
        
        /// 
        public DataColumn ColumnCostOfSalesGlAccount;
        
        /// 
        public DataColumn ColumnCreditorGlAccountCode;
        
        /// 
        public DataColumn ColumnCurrentFinancialYear;
        
        /// 
        public DataColumn ColumnCurrentPeriod;
        
        /// 
        public DataColumn ColumnDateCrDrBalances;
        
        /// 
        public DataColumn ColumnDebtorGlAccountCode;
        
        /// 
        public DataColumn ColumnFaDepreciationGlAccount;
        
        /// 
        public DataColumn ColumnFaGlAccountCode;
        
        /// 
        public DataColumn ColumnFaPlOnSaleGlAccount;
        
        /// 
        public DataColumn ColumnFaProvForDepnGlAccount;
        
        /// 
        public DataColumn ColumnIltAccountFlag;
        
        /// 
        public DataColumn ColumnLastApDnNumber;
        
        /// 
        public DataColumn ColumnLastPoRetNumber;
        
        /// 
        public DataColumn ColumnLastSoDelNumber;
        
        /// 
        public DataColumn ColumnLastSoRetNumber;
        
        /// 
        public DataColumn ColumnLastSpecialGiftNumber;
        
        /// 
        public DataColumn ColumnNumberFwdPostingPeriods;
        
        /// deprecated; not used at the moment; please use a_number_of_accounting_periods_i
        public DataColumn ColumnPeriodsPerFinancialYear;
        
        /// 
        public DataColumn ColumnDiscountAllowedPct;
        
        /// 
        public DataColumn ColumnDiscountReceivedPct;
        
        /// 
        public DataColumn ColumnPoAccrualGlAccountCode;
        
        /// 
        public DataColumn ColumnProvisionalYearEndFlag;
        
        /// 
        public DataColumn ColumnPurchaseGlAccountCode;
        
        /// 
        public DataColumn ColumnRetEarningsGlAccount;
        
        /// 
        public DataColumn ColumnSalesGlAccountCode;
        
        /// 
        public DataColumn ColumnSoAccrualGlAccountCode;
        
        /// 
        public DataColumn ColumnStockAccrualGlAccount;
        
        /// 
        public DataColumn ColumnStockAdjGlAccountCode;
        
        /// 
        public DataColumn ColumnStockGlAccountCode;
        
        /// 
        public DataColumn ColumnTaxExclIncl;
        
        /// 
        public DataColumn ColumnTaxExclInclIndicator;
        
        /// 
        public DataColumn ColumnTaxInputGlAccountCode;
        
        /// 
        public DataColumn ColumnTaxInputGlCcCode;
        
        /// 
        public DataColumn ColumnTaxOutputGlAccountCode;
        
        /// 
        public DataColumn ColumnTermsOfPaymentCode;
        
        /// 
        public DataColumn ColumnLastPoRecNumber;
        
        /// 
        public DataColumn ColumnTaxGlAccountNumber;
        
        /// 
        public DataColumn ColumnActualsDataRetention;
        
        /// Partner key which links the ledger to the partner type record where the type is a ledger.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnCalendarMode;
        
        /// How far along is the year end process.
        public DataColumn ColumnYearEndProcessStatus;
        
        /// last used cashbook payment header number
        public DataColumn ColumnLastHeaderPNumber;
        
        /// Is this ledger an ILT processing centre (ie, clearinghouse status)
        public DataColumn ColumnIltProcessingCentre;
        
        /// The number of the last gift batch to be created.
        public DataColumn ColumnLastGiftBatchNumber;
        
        /// This defines which currency to use as a second ('international') base currency.
        public DataColumn ColumnIntlCurrency;
        
        /// The number of the last gift batch to be created.
        public DataColumn ColumnLastRecGiftBatchNumber;
        
        /// How many years to retain gift data.
        public DataColumn ColumnGiftDataRetention;
        
        /// When recalculating the account report structure this indicates that all periods should be recalculated.
        public DataColumn ColumnRecalculateAllPeriods;
        
        /// identifes the Last used ICH process number
        public DataColumn ColumnLastIchNumber;
        
        /// THis defines whether or not the ledger ha made up of separate branches/departments that are self contained (should balance).
        public DataColumn ColumnBranchProcessing;
        
        /// Indicates whether the ledger is just for storing consolidated accounts (rather than a 'real' ledger).
        public DataColumn ColumnConsolidationLedger;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ALedgerTable() : 
                base("ALedger")
        {
        }
        
        /// constructor
        public ALedgerTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ALedgerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ALedgerRow this[int i]
        {
            get
            {
                return ((ALedgerRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNameDBName()
        {
            return "a_ledger_name_c";
        }
        
        /// get help text for column
        public static string GetLedgerNameHelp()
        {
            return "Enter ledger name";
        }
        
        /// get label of column
        public static string GetLedgerNameLabel()
        {
            return "Ledger Name";
        }
        
        /// get character length for column
        public static short GetLedgerNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerStatusDBName()
        {
            return "a_ledger_status_l";
        }
        
        /// get help text for column
        public static string GetLedgerStatusHelp()
        {
            return "Make a selection";
        }
        
        /// get label of column
        public static string GetLedgerStatusLabel()
        {
            return "Ledger Status";
        }
        
        /// get display format for column
        public static short GetLedgerStatusLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastBatchNumberDBName()
        {
            return "a_last_batch_number_i";
        }
        
        /// get help text for column
        public static string GetLastBatchNumberHelp()
        {
            return "This is the last batch number used within a ledger";
        }
        
        /// get label of column
        public static string GetLastBatchNumberLabel()
        {
            return "Last Batch Number";
        }
        
        /// get display format for column
        public static short GetLastBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastRecurringBatchNumberDBName()
        {
            return "a_last_recurring_batch_number_i";
        }
        
        /// get help text for column
        public static string GetLastRecurringBatchNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastRecurringBatchNumberLabel()
        {
            return "Last Recurring Batch Number";
        }
        
        /// get display format for column
        public static short GetLastRecurringBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastGiftNumberDBName()
        {
            return "a_last_gift_number_i";
        }
        
        /// get help text for column
        public static string GetLastGiftNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastGiftNumberLabel()
        {
            return "Last Gift Number";
        }
        
        /// get display format for column
        public static short GetLastGiftNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastApInvNumberDBName()
        {
            return "a_last_ap_inv_number_i";
        }
        
        /// get help text for column
        public static string GetLastApInvNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastApInvNumberLabel()
        {
            return "Last Invoice Number";
        }
        
        /// get display format for column
        public static short GetLastApInvNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastHeaderRNumberDBName()
        {
            return "a_last_header_r_number_i";
        }
        
        /// get help text for column
        public static string GetLastHeaderRNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastHeaderRNumberLabel()
        {
            return "Last Receipt Number";
        }
        
        /// get display format for column
        public static short GetLastHeaderRNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastPoNumberDBName()
        {
            return "a_last_po_number_i";
        }
        
        /// get help text for column
        public static string GetLastPoNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastPoNumberLabel()
        {
            return "Last PO Number";
        }
        
        /// get display format for column
        public static short GetLastPoNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastSoNumberDBName()
        {
            return "a_last_so_number_i";
        }
        
        /// get help text for column
        public static string GetLastSoNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastSoNumberLabel()
        {
            return "Last SO Number";
        }
        
        /// get display format for column
        public static short GetLastSoNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMaxGiftAidAmountDBName()
        {
            return "a_max_gift_aid_amount_n";
        }
        
        /// get help text for column
        public static string GetMaxGiftAidAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetMaxGiftAidAmountLabel()
        {
            return "Max UK Gift Aid";
        }
        
        /// get display format for column
        public static short GetMaxGiftAidAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMinGiftAidAmountDBName()
        {
            return "a_min_gift_aid_amount_n";
        }
        
        /// get help text for column
        public static string GetMinGiftAidAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetMinGiftAidAmountLabel()
        {
            return "Min UK Gift Aid";
        }
        
        /// get display format for column
        public static short GetMinGiftAidAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberOfGiftsToDisplayDBName()
        {
            return "a_number_of_gifts_to_display_i";
        }
        
        /// get help text for column
        public static string GetNumberOfGiftsToDisplayHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNumberOfGiftsToDisplayLabel()
        {
            return "Number of Gifts to Display";
        }
        
        /// get display format for column
        public static short GetNumberOfGiftsToDisplayLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxTypeCodeDBName()
        {
            return "a_tax_type_code_c";
        }
        
        /// get help text for column
        public static string GetTaxTypeCodeHelp()
        {
            return "Enter a tax type code";
        }
        
        /// get label of column
        public static string GetTaxTypeCodeLabel()
        {
            return "Sales Tax System";
        }
        
        /// get character length for column
        public static short GetTaxTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIltGlAccountCodeDBName()
        {
            return "a_ilt_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetIltGlAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetIltGlAccountCodeLabel()
        {
            return "ILT Account Code";
        }
        
        /// get character length for column
        public static short GetIltGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProfitLossGlAccountCodeDBName()
        {
            return "a_profit_loss_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetProfitLossGlAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetProfitLossGlAccountCodeLabel()
        {
            return "Profit/Loss Account Code";
        }
        
        /// get character length for column
        public static short GetProfitLossGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrentAccountingPeriodDBName()
        {
            return "a_current_accounting_period_i";
        }
        
        /// get help text for column
        public static string GetCurrentAccountingPeriodHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetCurrentAccountingPeriodLabel()
        {
            return "Current Period Number";
        }
        
        /// get display format for column
        public static short GetCurrentAccountingPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberOfAccountingPeriodsDBName()
        {
            return "a_number_of_accounting_periods_i";
        }
        
        /// get help text for column
        public static string GetNumberOfAccountingPeriodsHelp()
        {
            return "This defines which accounting period is being used";
        }
        
        /// get label of column
        public static string GetNumberOfAccountingPeriodsLabel()
        {
            return "Number of Accounting Periods";
        }
        
        /// get display format for column
        public static short GetNumberOfAccountingPeriodsLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCountryCodeDBName()
        {
            return "a_country_code_c";
        }
        
        /// get help text for column
        public static string GetCountryCodeHelp()
        {
            return "Enter a country code";
        }
        
        /// get label of column
        public static string GetCountryCodeLabel()
        {
            return "Country Code";
        }
        
        /// get character length for column
        public static short GetCountryCodeLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }
        
        /// get help text for column
        public static string GetBaseCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetBaseCurrencyLabel()
        {
            return "Base Currency";
        }
        
        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAccountFlagDBName()
        {
            return "a_transaction_account_flag_l";
        }
        
        /// get help text for column
        public static string GetTransactionAccountFlagHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetTransactionAccountFlagLabel()
        {
            return "Transaction Account Flag";
        }
        
        /// get display format for column
        public static short GetTransactionAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYearEndFlagDBName()
        {
            return "a_year_end_flag_l";
        }
        
        /// get help text for column
        public static string GetYearEndFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetYearEndFlagLabel()
        {
            return "Year End Flag";
        }
        
        /// get display format for column
        public static short GetYearEndFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetForexGainsLossesAccountDBName()
        {
            return "a_forex_gains_losses_account_c";
        }
        
        /// get help text for column
        public static string GetForexGainsLossesAccountHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetForexGainsLossesAccountLabel()
        {
            return "Foreign Currency revaluation Account";
        }
        
        /// get character length for column
        public static short GetForexGainsLossesAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemInterfaceFlagDBName()
        {
            return "a_system_interface_flag_l";
        }
        
        /// get help text for column
        public static string GetSystemInterfaceFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetSystemInterfaceFlagLabel()
        {
            return "System Interface Flag";
        }
        
        /// get display format for column
        public static short GetSystemInterfaceFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSuspenseAccountFlagDBName()
        {
            return "a_suspense_account_flag_l";
        }
        
        /// get help text for column
        public static string GetSuspenseAccountFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetSuspenseAccountFlagLabel()
        {
            return "Suspense Account Flag";
        }
        
        /// get display format for column
        public static short GetSuspenseAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankAccountsFlagDBName()
        {
            return "a_bank_accounts_flag_l";
        }
        
        /// get help text for column
        public static string GetBankAccountsFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetBankAccountsFlagLabel()
        {
            return "Bank account Flag";
        }
        
        /// get display format for column
        public static short GetBankAccountsFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeleteLedgerFlagDBName()
        {
            return "a_delete_ledger_flag_l";
        }
        
        /// get help text for column
        public static string GetDeleteLedgerFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetDeleteLedgerFlagLabel()
        {
            return "Delete Ledger Flag";
        }
        
        /// get display format for column
        public static short GetDeleteLedgerFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNewFinancialYearFlagDBName()
        {
            return "a_new_financial_year_flag_l";
        }
        
        /// get help text for column
        public static string GetNewFinancialYearFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetNewFinancialYearFlagLabel()
        {
            return "New Financial Year Flag";
        }
        
        /// get display format for column
        public static short GetNewFinancialYearFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecalculateGlMasterFlagDBName()
        {
            return "a_recalculate_gl_master_flag_l";
        }
        
        /// get help text for column
        public static string GetRecalculateGlMasterFlagHelp()
        {
            return "Enter \"\"Yes\"\" or \"\"No\"\"";
        }
        
        /// get label of column
        public static string GetRecalculateGlMasterFlagLabel()
        {
            return "Recalculate GL Master Flag";
        }
        
        /// get display format for column
        public static short GetRecalculateGlMasterFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetInstallationIdDBName()
        {
            return "a_installation_id_c";
        }
        
        /// get help text for column
        public static string GetInstallationIdHelp()
        {
            return "Defines which installation is running on this database";
        }
        
        /// get label of column
        public static string GetInstallationIdLabel()
        {
            return "Installation ID";
        }
        
        /// get character length for column
        public static short GetInstallationIdLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetControlFlagDBName()
        {
            return "a_budget_control_flag_l";
        }
        
        /// get help text for column
        public static string GetBudgetControlFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetControlFlagLabel()
        {
            return "Budget Control";
        }
        
        /// get display format for column
        public static short GetBudgetControlFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetDataRetentionDBName()
        {
            return "a_budget_data_retention_i";
        }
        
        /// get help text for column
        public static string GetBudgetDataRetentionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetDataRetentionLabel()
        {
            return "Budget Data Retention Period";
        }
        
        /// get display format for column
        public static short GetBudgetDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostOfSalesGlAccountDBName()
        {
            return "a_cost_of_sales_gl_account_c";
        }
        
        /// get help text for column
        public static string GetCostOfSalesGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCostOfSalesGlAccountLabel()
        {
            return "Cost of Sales G/L Account Code";
        }
        
        /// get character length for column
        public static short GetCostOfSalesGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreditorGlAccountCodeDBName()
        {
            return "a_creditor_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetCreditorGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCreditorGlAccountCodeLabel()
        {
            return "Creditor G/L Account Code";
        }
        
        /// get character length for column
        public static short GetCreditorGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrentFinancialYearDBName()
        {
            return "a_current_financial_year_i";
        }
        
        /// get help text for column
        public static string GetCurrentFinancialYearHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCurrentFinancialYearLabel()
        {
            return "Current Financial Year";
        }
        
        /// get display format for column
        public static short GetCurrentFinancialYearLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrentPeriodDBName()
        {
            return "a_current_period_i";
        }
        
        /// get help text for column
        public static string GetCurrentPeriodHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCurrentPeriodLabel()
        {
            return "Current Period";
        }
        
        /// get display format for column
        public static short GetCurrentPeriodLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCrDrBalancesDBName()
        {
            return "a_date_cr_dr_balances_d";
        }
        
        /// get help text for column
        public static string GetDateCrDrBalancesHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateCrDrBalancesLabel()
        {
            return "Date CR/DR Balances";
        }
        
        /// get display format for column
        public static short GetDateCrDrBalancesLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebtorGlAccountCodeDBName()
        {
            return "a_debtor_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetDebtorGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDebtorGlAccountCodeLabel()
        {
            return "Debtor G/L Account Code";
        }
        
        /// get character length for column
        public static short GetDebtorGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaDepreciationGlAccountDBName()
        {
            return "a_fa_depreciation_gl_account_c";
        }
        
        /// get help text for column
        public static string GetFaDepreciationGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFaDepreciationGlAccountLabel()
        {
            return "FA Depreciation G/L Account Code";
        }
        
        /// get character length for column
        public static short GetFaDepreciationGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaGlAccountCodeDBName()
        {
            return "a_fa_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetFaGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFaGlAccountCodeLabel()
        {
            return "FA G/L Account Code";
        }
        
        /// get character length for column
        public static short GetFaGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaPlOnSaleGlAccountDBName()
        {
            return "a_fa_pl_on_sale_gl_account_c";
        }
        
        /// get help text for column
        public static string GetFaPlOnSaleGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFaPlOnSaleGlAccountLabel()
        {
            return "FA Pft/Loss On Sale G/L Account Code";
        }
        
        /// get character length for column
        public static short GetFaPlOnSaleGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFaProvForDepnGlAccountDBName()
        {
            return "a_fa_prov_for_depn_gl_account_c";
        }
        
        /// get help text for column
        public static string GetFaProvForDepnGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFaProvForDepnGlAccountLabel()
        {
            return "FA Provision For Depriciation G/L Account Code";
        }
        
        /// get character length for column
        public static short GetFaProvForDepnGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIltAccountFlagDBName()
        {
            return "a_ilt_account_flag_l";
        }
        
        /// get help text for column
        public static string GetIltAccountFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetIltAccountFlagLabel()
        {
            return "ILT Account Flag";
        }
        
        /// get display format for column
        public static short GetIltAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastApDnNumberDBName()
        {
            return "a_last_ap_dn_number_i";
        }
        
        /// get help text for column
        public static string GetLastApDnNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastApDnNumberLabel()
        {
            return "Last AP DN Number";
        }
        
        /// get display format for column
        public static short GetLastApDnNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastPoRetNumberDBName()
        {
            return "a_last_po_ret_number_i";
        }
        
        /// get help text for column
        public static string GetLastPoRetNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastPoRetNumberLabel()
        {
            return "Last PO Return Number";
        }
        
        /// get display format for column
        public static short GetLastPoRetNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastSoDelNumberDBName()
        {
            return "a_last_so_del_number_i";
        }
        
        /// get help text for column
        public static string GetLastSoDelNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastSoDelNumberLabel()
        {
            return "Last SO Delivery Number";
        }
        
        /// get display format for column
        public static short GetLastSoDelNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastSoRetNumberDBName()
        {
            return "a_last_so_ret_number_i";
        }
        
        /// get help text for column
        public static string GetLastSoRetNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastSoRetNumberLabel()
        {
            return "Last SO Return Number";
        }
        
        /// get display format for column
        public static short GetLastSoRetNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastSpecialGiftNumberDBName()
        {
            return "a_last_special_gift_number_i";
        }
        
        /// get help text for column
        public static string GetLastSpecialGiftNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastSpecialGiftNumberLabel()
        {
            return "Last Special Gift Number";
        }
        
        /// get display format for column
        public static short GetLastSpecialGiftNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberFwdPostingPeriodsDBName()
        {
            return "a_number_fwd_posting_periods_i";
        }
        
        /// get help text for column
        public static string GetNumberFwdPostingPeriodsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNumberFwdPostingPeriodsLabel()
        {
            return "Number Fwd Posting Periods";
        }
        
        /// get display format for column
        public static short GetNumberFwdPostingPeriodsLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodsPerFinancialYearDBName()
        {
            return "a_periods_per_financial_year_i";
        }
        
        /// get help text for column
        public static string GetPeriodsPerFinancialYearHelp()
        {
            return "deprecated; not used at the moment; please use a_number_of_accounting_periods_i";
        }
        
        /// get label of column
        public static string GetPeriodsPerFinancialYearLabel()
        {
            return "Periods Per  Financial Year";
        }
        
        /// get display format for column
        public static short GetPeriodsPerFinancialYearLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDiscountAllowedPctDBName()
        {
            return "a_discount_allowed_pct_n";
        }
        
        /// get help text for column
        public static string GetDiscountAllowedPctHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDiscountAllowedPctLabel()
        {
            return "Default Discount Allowed %";
        }
        
        /// get display format for column
        public static short GetDiscountAllowedPctLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDiscountReceivedPctDBName()
        {
            return "a_discount_received_pct_n";
        }
        
        /// get help text for column
        public static string GetDiscountReceivedPctHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDiscountReceivedPctLabel()
        {
            return "Default discount received %";
        }
        
        /// get display format for column
        public static short GetDiscountReceivedPctLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPoAccrualGlAccountCodeDBName()
        {
            return "a_po_accrual_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetPoAccrualGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPoAccrualGlAccountCodeLabel()
        {
            return "PO G/L Accrual Account Code";
        }
        
        /// get character length for column
        public static short GetPoAccrualGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProvisionalYearEndFlagDBName()
        {
            return "a_provisional_year_end_flag_l";
        }
        
        /// get help text for column
        public static string GetProvisionalYearEndFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProvisionalYearEndFlagLabel()
        {
            return "Provisional Year End Flag";
        }
        
        /// get display format for column
        public static short GetProvisionalYearEndFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPurchaseGlAccountCodeDBName()
        {
            return "a_purchase_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetPurchaseGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPurchaseGlAccountCodeLabel()
        {
            return "Purchase G/L Account Code";
        }
        
        /// get character length for column
        public static short GetPurchaseGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRetEarningsGlAccountDBName()
        {
            return "a_ret_earnings_gl_account_c";
        }
        
        /// get help text for column
        public static string GetRetEarningsGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetRetEarningsGlAccountLabel()
        {
            return "Retained Earnings G/L Account Code";
        }
        
        /// get character length for column
        public static short GetRetEarningsGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSalesGlAccountCodeDBName()
        {
            return "a_sales_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetSalesGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSalesGlAccountCodeLabel()
        {
            return "Sales G/L Account Code";
        }
        
        /// get character length for column
        public static short GetSalesGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSoAccrualGlAccountCodeDBName()
        {
            return "a_so_accrual_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetSoAccrualGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSoAccrualGlAccountCodeLabel()
        {
            return "SO G/L Accrual Account Code";
        }
        
        /// get character length for column
        public static short GetSoAccrualGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStockAccrualGlAccountDBName()
        {
            return "a_stock_accrual_gl_account_c";
        }
        
        /// get help text for column
        public static string GetStockAccrualGlAccountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStockAccrualGlAccountLabel()
        {
            return "Stock Accrual G/L Account Code";
        }
        
        /// get character length for column
        public static short GetStockAccrualGlAccountLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStockAdjGlAccountCodeDBName()
        {
            return "a_stock_adj_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetStockAdjGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStockAdjGlAccountCodeLabel()
        {
            return "Stock Adj. G/L Account Code";
        }
        
        /// get character length for column
        public static short GetStockAdjGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStockGlAccountCodeDBName()
        {
            return "a_stock_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetStockGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStockGlAccountCodeLabel()
        {
            return "Stock G/L Account Code";
        }
        
        /// get character length for column
        public static short GetStockGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxExclInclDBName()
        {
            return "a_tax_excl_incl_l";
        }
        
        /// get help text for column
        public static string GetTaxExclInclHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxExclInclLabel()
        {
            return "Tax Exclusive/Inclusive";
        }
        
        /// get display format for column
        public static short GetTaxExclInclLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxExclInclIndicatorDBName()
        {
            return "a_tax_excl_incl_indicator_l";
        }
        
        /// get help text for column
        public static string GetTaxExclInclIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxExclInclIndicatorLabel()
        {
            return "Tax Excl/Incl Indicator";
        }
        
        /// get display format for column
        public static short GetTaxExclInclIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxInputGlAccountCodeDBName()
        {
            return "a_tax_input_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetTaxInputGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxInputGlAccountCodeLabel()
        {
            return "Tax Input G/L Account Code";
        }
        
        /// get character length for column
        public static short GetTaxInputGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxInputGlCcCodeDBName()
        {
            return "a_tax_input_gl_cc_code_c";
        }
        
        /// get help text for column
        public static string GetTaxInputGlCcCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxInputGlCcCodeLabel()
        {
            return "Tax Input G/L Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetTaxInputGlCcCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxOutputGlAccountCodeDBName()
        {
            return "a_tax_output_gl_account_code_c";
        }
        
        /// get help text for column
        public static string GetTaxOutputGlAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxOutputGlAccountCodeLabel()
        {
            return "Tax Output G/L Account Code";
        }
        
        /// get character length for column
        public static short GetTaxOutputGlAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTermsOfPaymentCodeDBName()
        {
            return "a_terms_of_payment_code_c";
        }
        
        /// get help text for column
        public static string GetTermsOfPaymentCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTermsOfPaymentCodeLabel()
        {
            return "Terms of Payment Code";
        }
        
        /// get character length for column
        public static short GetTermsOfPaymentCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastPoRecNumberDBName()
        {
            return "a_last_po_rec_number_i";
        }
        
        /// get help text for column
        public static string GetLastPoRecNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastPoRecNumberLabel()
        {
            return "Last PO Received Number";
        }
        
        /// get display format for column
        public static short GetLastPoRecNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxGlAccountNumberDBName()
        {
            return "a_tax_gl_account_number_i";
        }
        
        /// get help text for column
        public static string GetTaxGlAccountNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTaxGlAccountNumberLabel()
        {
            return "Tax G/L Account Number";
        }
        
        /// get display format for column
        public static short GetTaxGlAccountNumberLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActualsDataRetentionDBName()
        {
            return "a_actuals_data_retention_i";
        }
        
        /// get help text for column
        public static string GetActualsDataRetentionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetActualsDataRetentionLabel()
        {
            return "Actuals Data Retention Period";
        }
        
        /// get display format for column
        public static short GetActualsDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Partner key which links the ledger to the partner type record where the type is a" +
                " ledger.";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCalendarModeDBName()
        {
            return "a_calendar_mode_l";
        }
        
        /// get help text for column
        public static string GetCalendarModeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCalendarModeLabel()
        {
            return "Calendar Mode";
        }
        
        /// get display format for column
        public static short GetCalendarModeLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYearEndProcessStatusDBName()
        {
            return "a_year_end_process_status_i";
        }
        
        /// get help text for column
        public static string GetYearEndProcessStatusHelp()
        {
            return "How far along is the year end process.";
        }
        
        /// get label of column
        public static string GetYearEndProcessStatusLabel()
        {
            return "a_year_end_process_status_i";
        }
        
        /// get display format for column
        public static short GetYearEndProcessStatusLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastHeaderPNumberDBName()
        {
            return "a_last_header_p_number_i";
        }
        
        /// get help text for column
        public static string GetLastHeaderPNumberHelp()
        {
            return "last used cashbook payment header number";
        }
        
        /// get label of column
        public static string GetLastHeaderPNumberLabel()
        {
            return "Last Cashbook Payment Number";
        }
        
        /// get display format for column
        public static short GetLastHeaderPNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIltProcessingCentreDBName()
        {
            return "a_ilt_processing_centre_l";
        }
        
        /// get help text for column
        public static string GetIltProcessingCentreHelp()
        {
            return "Is this ledger an ILT processing centre (ie, clearinghouse status)";
        }
        
        /// get label of column
        public static string GetIltProcessingCentreLabel()
        {
            return "ILT Processing Centre";
        }
        
        /// get display format for column
        public static short GetIltProcessingCentreLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastGiftBatchNumberDBName()
        {
            return "a_last_gift_batch_number_i";
        }
        
        /// get help text for column
        public static string GetLastGiftBatchNumberHelp()
        {
            return "The number of the last gift batch to be created.";
        }
        
        /// get label of column
        public static string GetLastGiftBatchNumberLabel()
        {
            return "Last Gift Batch";
        }
        
        /// get display format for column
        public static short GetLastGiftBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIntlCurrencyDBName()
        {
            return "a_intl_currency_c";
        }
        
        /// get help text for column
        public static string GetIntlCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetIntlCurrencyLabel()
        {
            return "International Currency";
        }
        
        /// get character length for column
        public static short GetIntlCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastRecGiftBatchNumberDBName()
        {
            return "a_last_rec_gift_batch_number_i";
        }
        
        /// get help text for column
        public static string GetLastRecGiftBatchNumberHelp()
        {
            return "The number of the last gift batch to be created.";
        }
        
        /// get label of column
        public static string GetLastRecGiftBatchNumberLabel()
        {
            return "Last Recurring Gift Batch";
        }
        
        /// get display format for column
        public static short GetLastRecGiftBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftDataRetentionDBName()
        {
            return "a_gift_data_retention_i";
        }
        
        /// get help text for column
        public static string GetGiftDataRetentionHelp()
        {
            return "Enter how many years to retain gift data.";
        }
        
        /// get label of column
        public static string GetGiftDataRetentionLabel()
        {
            return "Gift Data Retention Period";
        }
        
        /// get display format for column
        public static short GetGiftDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecalculateAllPeriodsDBName()
        {
            return "a_recalculate_all_periods_l";
        }
        
        /// get help text for column
        public static string GetRecalculateAllPeriodsHelp()
        {
            return "Should all the periods be recalculated?";
        }
        
        /// get label of column
        public static string GetRecalculateAllPeriodsLabel()
        {
            return "a_recalculate_all_periods_l";
        }
        
        /// get display format for column
        public static short GetRecalculateAllPeriodsLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastIchNumberDBName()
        {
            return "a_last_ich_number_i";
        }
        
        /// get help text for column
        public static string GetLastIchNumberHelp()
        {
            return "identifes the Last used ICH process number";
        }
        
        /// get label of column
        public static string GetLastIchNumberLabel()
        {
            return "ICH Process Number";
        }
        
        /// get display format for column
        public static short GetLastIchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBranchProcessingDBName()
        {
            return "a_branch_processing_l";
        }
        
        /// get help text for column
        public static string GetBranchProcessingHelp()
        {
            return "If you have cost centres that need to balance then set to yes";
        }
        
        /// get label of column
        public static string GetBranchProcessingLabel()
        {
            return "Branch Processing";
        }
        
        /// get display format for column
        public static short GetBranchProcessingLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetConsolidationLedgerDBName()
        {
            return "a_consolidation_ledger_l";
        }
        
        /// get help text for column
        public static string GetConsolidationLedgerHelp()
        {
            return "Indicates whether the ledger is just for storing consolidated accounts (rather th" +
                "an a \'real\' ledger).";
        }
        
        /// get label of column
        public static string GetConsolidationLedgerLabel()
        {
            return "a_consolidation_ledger_l";
        }
        
        /// get display format for column
        public static short GetConsolidationLedgerLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ALedger";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ledger";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Ledger";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_ledger_name_c",
                    "a_ledger_status_l",
                    "a_last_batch_number_i",
                    "a_last_recurring_batch_number_i",
                    "a_last_gift_number_i",
                    "a_last_ap_inv_number_i",
                    "a_last_header_r_number_i",
                    "a_last_po_number_i",
                    "a_last_so_number_i",
                    "a_max_gift_aid_amount_n",
                    "a_min_gift_aid_amount_n",
                    "a_number_of_gifts_to_display_i",
                    "a_tax_type_code_c",
                    "a_ilt_gl_account_code_c",
                    "a_profit_loss_gl_account_code_c",
                    "a_current_accounting_period_i",
                    "a_number_of_accounting_periods_i",
                    "a_country_code_c",
                    "a_base_currency_c",
                    "a_transaction_account_flag_l",
                    "a_year_end_flag_l",
                    "a_forex_gains_losses_account_c",
                    "a_system_interface_flag_l",
                    "a_suspense_account_flag_l",
                    "a_bank_accounts_flag_l",
                    "a_delete_ledger_flag_l",
                    "a_new_financial_year_flag_l",
                    "a_recalculate_gl_master_flag_l",
                    "a_installation_id_c",
                    "a_budget_control_flag_l",
                    "a_budget_data_retention_i",
                    "a_cost_of_sales_gl_account_c",
                    "a_creditor_gl_account_code_c",
                    "a_current_financial_year_i",
                    "a_current_period_i",
                    "a_date_cr_dr_balances_d",
                    "a_debtor_gl_account_code_c",
                    "a_fa_depreciation_gl_account_c",
                    "a_fa_gl_account_code_c",
                    "a_fa_pl_on_sale_gl_account_c",
                    "a_fa_prov_for_depn_gl_account_c",
                    "a_ilt_account_flag_l",
                    "a_last_ap_dn_number_i",
                    "a_last_po_ret_number_i",
                    "a_last_so_del_number_i",
                    "a_last_so_ret_number_i",
                    "a_last_special_gift_number_i",
                    "a_number_fwd_posting_periods_i",
                    "a_periods_per_financial_year_i",
                    "a_discount_allowed_pct_n",
                    "a_discount_received_pct_n",
                    "a_po_accrual_gl_account_code_c",
                    "a_provisional_year_end_flag_l",
                    "a_purchase_gl_account_code_c",
                    "a_ret_earnings_gl_account_c",
                    "a_sales_gl_account_code_c",
                    "a_so_accrual_gl_account_code_c",
                    "a_stock_accrual_gl_account_c",
                    "a_stock_adj_gl_account_code_c",
                    "a_stock_gl_account_code_c",
                    "a_tax_excl_incl_l",
                    "a_tax_excl_incl_indicator_l",
                    "a_tax_input_gl_account_code_c",
                    "a_tax_input_gl_cc_code_c",
                    "a_tax_output_gl_account_code_c",
                    "a_terms_of_payment_code_c",
                    "a_last_po_rec_number_i",
                    "a_tax_gl_account_number_i",
                    "a_actuals_data_retention_i",
                    "p_partner_key_n",
                    "a_calendar_mode_l",
                    "a_year_end_process_status_i",
                    "a_last_header_p_number_i",
                    "a_ilt_processing_centre_l",
                    "a_last_gift_batch_number_i",
                    "a_intl_currency_c",
                    "a_last_rec_gift_batch_number_i",
                    "a_gift_data_retention_i",
                    "a_recalculate_all_periods_l",
                    "a_last_ich_number_i",
                    "a_branch_processing_l",
                    "a_consolidation_ledger_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnLedgerName = this.Columns["a_ledger_name_c"];
            this.ColumnLedgerStatus = this.Columns["a_ledger_status_l"];
            this.ColumnLastBatchNumber = this.Columns["a_last_batch_number_i"];
            this.ColumnLastRecurringBatchNumber = this.Columns["a_last_recurring_batch_number_i"];
            this.ColumnLastGiftNumber = this.Columns["a_last_gift_number_i"];
            this.ColumnLastApInvNumber = this.Columns["a_last_ap_inv_number_i"];
            this.ColumnLastHeaderRNumber = this.Columns["a_last_header_r_number_i"];
            this.ColumnLastPoNumber = this.Columns["a_last_po_number_i"];
            this.ColumnLastSoNumber = this.Columns["a_last_so_number_i"];
            this.ColumnMaxGiftAidAmount = this.Columns["a_max_gift_aid_amount_n"];
            this.ColumnMinGiftAidAmount = this.Columns["a_min_gift_aid_amount_n"];
            this.ColumnNumberOfGiftsToDisplay = this.Columns["a_number_of_gifts_to_display_i"];
            this.ColumnTaxTypeCode = this.Columns["a_tax_type_code_c"];
            this.ColumnIltGlAccountCode = this.Columns["a_ilt_gl_account_code_c"];
            this.ColumnProfitLossGlAccountCode = this.Columns["a_profit_loss_gl_account_code_c"];
            this.ColumnCurrentAccountingPeriod = this.Columns["a_current_accounting_period_i"];
            this.ColumnNumberOfAccountingPeriods = this.Columns["a_number_of_accounting_periods_i"];
            this.ColumnCountryCode = this.Columns["a_country_code_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnTransactionAccountFlag = this.Columns["a_transaction_account_flag_l"];
            this.ColumnYearEndFlag = this.Columns["a_year_end_flag_l"];
            this.ColumnForexGainsLossesAccount = this.Columns["a_forex_gains_losses_account_c"];
            this.ColumnSystemInterfaceFlag = this.Columns["a_system_interface_flag_l"];
            this.ColumnSuspenseAccountFlag = this.Columns["a_suspense_account_flag_l"];
            this.ColumnBankAccountsFlag = this.Columns["a_bank_accounts_flag_l"];
            this.ColumnDeleteLedgerFlag = this.Columns["a_delete_ledger_flag_l"];
            this.ColumnNewFinancialYearFlag = this.Columns["a_new_financial_year_flag_l"];
            this.ColumnRecalculateGlMasterFlag = this.Columns["a_recalculate_gl_master_flag_l"];
            this.ColumnInstallationId = this.Columns["a_installation_id_c"];
            this.ColumnBudgetControlFlag = this.Columns["a_budget_control_flag_l"];
            this.ColumnBudgetDataRetention = this.Columns["a_budget_data_retention_i"];
            this.ColumnCostOfSalesGlAccount = this.Columns["a_cost_of_sales_gl_account_c"];
            this.ColumnCreditorGlAccountCode = this.Columns["a_creditor_gl_account_code_c"];
            this.ColumnCurrentFinancialYear = this.Columns["a_current_financial_year_i"];
            this.ColumnCurrentPeriod = this.Columns["a_current_period_i"];
            this.ColumnDateCrDrBalances = this.Columns["a_date_cr_dr_balances_d"];
            this.ColumnDebtorGlAccountCode = this.Columns["a_debtor_gl_account_code_c"];
            this.ColumnFaDepreciationGlAccount = this.Columns["a_fa_depreciation_gl_account_c"];
            this.ColumnFaGlAccountCode = this.Columns["a_fa_gl_account_code_c"];
            this.ColumnFaPlOnSaleGlAccount = this.Columns["a_fa_pl_on_sale_gl_account_c"];
            this.ColumnFaProvForDepnGlAccount = this.Columns["a_fa_prov_for_depn_gl_account_c"];
            this.ColumnIltAccountFlag = this.Columns["a_ilt_account_flag_l"];
            this.ColumnLastApDnNumber = this.Columns["a_last_ap_dn_number_i"];
            this.ColumnLastPoRetNumber = this.Columns["a_last_po_ret_number_i"];
            this.ColumnLastSoDelNumber = this.Columns["a_last_so_del_number_i"];
            this.ColumnLastSoRetNumber = this.Columns["a_last_so_ret_number_i"];
            this.ColumnLastSpecialGiftNumber = this.Columns["a_last_special_gift_number_i"];
            this.ColumnNumberFwdPostingPeriods = this.Columns["a_number_fwd_posting_periods_i"];
            this.ColumnPeriodsPerFinancialYear = this.Columns["a_periods_per_financial_year_i"];
            this.ColumnDiscountAllowedPct = this.Columns["a_discount_allowed_pct_n"];
            this.ColumnDiscountReceivedPct = this.Columns["a_discount_received_pct_n"];
            this.ColumnPoAccrualGlAccountCode = this.Columns["a_po_accrual_gl_account_code_c"];
            this.ColumnProvisionalYearEndFlag = this.Columns["a_provisional_year_end_flag_l"];
            this.ColumnPurchaseGlAccountCode = this.Columns["a_purchase_gl_account_code_c"];
            this.ColumnRetEarningsGlAccount = this.Columns["a_ret_earnings_gl_account_c"];
            this.ColumnSalesGlAccountCode = this.Columns["a_sales_gl_account_code_c"];
            this.ColumnSoAccrualGlAccountCode = this.Columns["a_so_accrual_gl_account_code_c"];
            this.ColumnStockAccrualGlAccount = this.Columns["a_stock_accrual_gl_account_c"];
            this.ColumnStockAdjGlAccountCode = this.Columns["a_stock_adj_gl_account_code_c"];
            this.ColumnStockGlAccountCode = this.Columns["a_stock_gl_account_code_c"];
            this.ColumnTaxExclIncl = this.Columns["a_tax_excl_incl_l"];
            this.ColumnTaxExclInclIndicator = this.Columns["a_tax_excl_incl_indicator_l"];
            this.ColumnTaxInputGlAccountCode = this.Columns["a_tax_input_gl_account_code_c"];
            this.ColumnTaxInputGlCcCode = this.Columns["a_tax_input_gl_cc_code_c"];
            this.ColumnTaxOutputGlAccountCode = this.Columns["a_tax_output_gl_account_code_c"];
            this.ColumnTermsOfPaymentCode = this.Columns["a_terms_of_payment_code_c"];
            this.ColumnLastPoRecNumber = this.Columns["a_last_po_rec_number_i"];
            this.ColumnTaxGlAccountNumber = this.Columns["a_tax_gl_account_number_i"];
            this.ColumnActualsDataRetention = this.Columns["a_actuals_data_retention_i"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnCalendarMode = this.Columns["a_calendar_mode_l"];
            this.ColumnYearEndProcessStatus = this.Columns["a_year_end_process_status_i"];
            this.ColumnLastHeaderPNumber = this.Columns["a_last_header_p_number_i"];
            this.ColumnIltProcessingCentre = this.Columns["a_ilt_processing_centre_l"];
            this.ColumnLastGiftBatchNumber = this.Columns["a_last_gift_batch_number_i"];
            this.ColumnIntlCurrency = this.Columns["a_intl_currency_c"];
            this.ColumnLastRecGiftBatchNumber = this.Columns["a_last_rec_gift_batch_number_i"];
            this.ColumnGiftDataRetention = this.Columns["a_gift_data_retention_i"];
            this.ColumnRecalculateAllPeriods = this.Columns["a_recalculate_all_periods_l"];
            this.ColumnLastIchNumber = this.Columns["a_last_ich_number_i"];
            this.ColumnBranchProcessing = this.Columns["a_branch_processing_l"];
            this.ColumnConsolidationLedger = this.Columns["a_consolidation_ledger_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber};
        }
        
        /// get typed set of changes
        public ALedgerTable GetChangesTyped()
        {
            return ((ALedgerTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ALedgerRow NewRowTyped(bool AWithDefaultValues)
        {
            ALedgerRow ret = ((ALedgerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ALedgerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ALedgerRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_recurring_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_gift_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ap_inv_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_header_r_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_max_gift_aid_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_min_gift_aid_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_gifts_to_display_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_profit_loss_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_current_accounting_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_accounting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_country_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_year_end_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_forex_gains_losses_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_interface_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_suspense_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_accounts_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_delete_ledger_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_new_financial_year_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_recalculate_gl_master_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_installation_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_control_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_of_sales_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_creditor_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_current_financial_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_current_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_cr_dr_balances_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_debtor_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_depreciation_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_pl_on_sale_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_prov_for_depn_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ap_dn_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_ret_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_del_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_ret_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_special_gift_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_fwd_posting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_periods_per_financial_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_discount_allowed_pct_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_discount_received_pct_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_po_accrual_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_provisional_year_end_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_purchase_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ret_earnings_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sales_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_so_accrual_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_accrual_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_adj_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_excl_incl_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_excl_incl_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_input_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_input_gl_cc_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_output_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_terms_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_rec_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_gl_account_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actuals_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_calendar_mode_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_year_end_process_status_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_header_p_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_processing_centre_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_gift_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_intl_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_rec_gift_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recalculate_all_periods_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_branch_processing_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_consolidation_ledger_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLedgerName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnLedgerStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLastBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastRecurringBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastGiftNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastApInvNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastHeaderRNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastPoNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastSoNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMaxGiftAidAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnMinGiftAidAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnNumberOfGiftsToDisplay))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTaxTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnIltGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnProfitLossGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCurrentAccountingPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnNumberOfAccountingPeriods))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCountryCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 8);
            }
            if ((ACol == ColumnBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTransactionAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnYearEndFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnForexGainsLossesAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnSystemInterfaceFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSuspenseAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnBankAccountsFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeleteLedgerFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNewFinancialYearFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRecalculateGlMasterFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnInstallationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBudgetControlFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnBudgetDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostOfSalesGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCreditorGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCurrentFinancialYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCurrentPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCrDrBalances))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDebtorGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFaDepreciationGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFaGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFaPlOnSaleGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFaProvForDepnGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnIltAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLastApDnNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastPoRetNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastSoDelNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastSoRetNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastSpecialGiftNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnNumberFwdPostingPeriods))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPeriodsPerFinancialYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDiscountAllowedPct))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 5);
            }
            if ((ACol == ColumnDiscountReceivedPct))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 5);
            }
            if ((ACol == ColumnPoAccrualGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnProvisionalYearEndFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnPurchaseGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnRetEarningsGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnSalesGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnSoAccrualGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnStockAccrualGlAccount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnStockAdjGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnStockGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTaxExclIncl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTaxExclInclIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTaxInputGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTaxInputGlCcCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTaxOutputGlAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTermsOfPaymentCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastPoRecNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTaxGlAccountNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnActualsDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnCalendarMode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnYearEndProcessStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastHeaderPNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnIltProcessingCentre))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLastGiftBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnIntlCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastRecGiftBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGiftDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRecalculateAllPeriods))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLastIchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBranchProcessing))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnConsolidationLedger))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Basic information for each general ledger on the system. Also counters for ledger-specific variables (such as last receipt number).
    [Serializable()]
    public class ALedgerRow : System.Data.DataRow
    {
        
        private ALedgerTable myTable;
        
        /// Constructor
        public ALedgerRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ALedgerTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type &quot;&quot;ledger&quot;&quot;.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This is the ledger name
        public String LedgerName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerName) 
                            || (((String)(this[this.myTable.ColumnLedgerName])) != value)))
                {
                    this[this.myTable.ColumnLedgerName] = value;
                }
            }
        }
        
        /// Defines if the ledger is in use
        public Boolean LedgerStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerStatus) 
                            || (((Boolean)(this[this.myTable.ColumnLedgerStatus])) != value)))
                {
                    this[this.myTable.ColumnLedgerStatus] = value;
                }
            }
        }
        
        /// This is the last batch number used within a ledger
        public Int32 LastBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastBatchNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastRecurringBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecurringBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecurringBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastRecurringBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastRecurringBatchNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastGiftNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastGiftNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastGiftNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastGiftNumber])) != value)))
                {
                    this[this.myTable.ColumnLastGiftNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastApInvNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastApInvNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastApInvNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastApInvNumber])) != value)))
                {
                    this[this.myTable.ColumnLastApInvNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastHeaderRNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastHeaderRNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastHeaderRNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastHeaderRNumber])) != value)))
                {
                    this[this.myTable.ColumnLastHeaderRNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastPoNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastPoNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastSoNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastSoNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoNumber] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double MaxGiftAidAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaxGiftAidAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaxGiftAidAmount) 
                            || (((Double)(this[this.myTable.ColumnMaxGiftAidAmount])) != value)))
                {
                    this[this.myTable.ColumnMaxGiftAidAmount] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double MinGiftAidAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinGiftAidAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinGiftAidAmount) 
                            || (((Double)(this[this.myTable.ColumnMinGiftAidAmount])) != value)))
                {
                    this[this.myTable.ColumnMinGiftAidAmount] = value;
                }
            }
        }
        
        /// 
        public Int32 NumberOfGiftsToDisplay
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfGiftsToDisplay.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfGiftsToDisplay) 
                            || (((Int32)(this[this.myTable.ColumnNumberOfGiftsToDisplay])) != value)))
                {
                    this[this.myTable.ColumnNumberOfGiftsToDisplay] = value;
                }
            }
        }
        
        /// 
        public String TaxTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxTypeCode) 
                            || (((String)(this[this.myTable.ColumnTaxTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTaxTypeCode] = value;
                }
            }
        }
        
        /// The account for inter-ledger transfers.
        public String IltGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnIltGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnIltGlAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String ProfitLossGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProfitLossGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProfitLossGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnProfitLossGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnProfitLossGlAccountCode] = value;
                }
            }
        }
        
        /// deprecated; not used at the moment; please use a_current_period_i
        public Int32 CurrentAccountingPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentAccountingPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentAccountingPeriod) 
                            || (((Int32)(this[this.myTable.ColumnCurrentAccountingPeriod])) != value)))
                {
                    this[this.myTable.ColumnCurrentAccountingPeriod] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 NumberOfAccountingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods) 
                            || (((Int32)(this[this.myTable.ColumnNumberOfAccountingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberOfAccountingPeriods] = value;
                }
            }
        }
        
        /// This identifies a country. It uses the ISO 3166-1-alpha-2 code elements.
        public String CountryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryCode) 
                            || (((String)(this[this.myTable.ColumnCountryCode])) != value)))
                {
                    this[this.myTable.ColumnCountryCode] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency) 
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean TransactionAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnTransactionAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnTransactionAccountFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean YearEndFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearEndFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearEndFlag) 
                            || (((Boolean)(this[this.myTable.ColumnYearEndFlag])) != value)))
                {
                    this[this.myTable.ColumnYearEndFlag] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String ForexGainsLossesAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForexGainsLossesAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForexGainsLossesAccount) 
                            || (((String)(this[this.myTable.ColumnForexGainsLossesAccount])) != value)))
                {
                    this[this.myTable.ColumnForexGainsLossesAccount] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean SystemInterfaceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemInterfaceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemInterfaceFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSystemInterfaceFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemInterfaceFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean SuspenseAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSuspenseAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSuspenseAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSuspenseAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnSuspenseAccountFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean BankAccountsFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountsFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountsFlag) 
                            || (((Boolean)(this[this.myTable.ColumnBankAccountsFlag])) != value)))
                {
                    this[this.myTable.ColumnBankAccountsFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean DeleteLedgerFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteLedgerFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteLedgerFlag) 
                            || (((Boolean)(this[this.myTable.ColumnDeleteLedgerFlag])) != value)))
                {
                    this[this.myTable.ColumnDeleteLedgerFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean NewFinancialYearFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNewFinancialYearFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNewFinancialYearFlag) 
                            || (((Boolean)(this[this.myTable.ColumnNewFinancialYearFlag])) != value)))
                {
                    this[this.myTable.ColumnNewFinancialYearFlag] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean RecalculateGlMasterFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecalculateGlMasterFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecalculateGlMasterFlag) 
                            || (((Boolean)(this[this.myTable.ColumnRecalculateGlMasterFlag])) != value)))
                {
                    this[this.myTable.ColumnRecalculateGlMasterFlag] = value;
                }
            }
        }
        
        /// Defines which installation is running on this database
        public String InstallationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInstallationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInstallationId) 
                            || (((String)(this[this.myTable.ColumnInstallationId])) != value)))
                {
                    this[this.myTable.ColumnInstallationId] = value;
                }
            }
        }
        
        /// 
        public Boolean BudgetControlFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetControlFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetControlFlag) 
                            || (((Boolean)(this[this.myTable.ColumnBudgetControlFlag])) != value)))
                {
                    this[this.myTable.ColumnBudgetControlFlag] = value;
                }
            }
        }
        
        /// 
        public Int32 BudgetDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnBudgetDataRetention])) != value)))
                {
                    this[this.myTable.ColumnBudgetDataRetention] = value;
                }
            }
        }
        
        /// 
        public String CostOfSalesGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostOfSalesGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostOfSalesGlAccount) 
                            || (((String)(this[this.myTable.ColumnCostOfSalesGlAccount])) != value)))
                {
                    this[this.myTable.ColumnCostOfSalesGlAccount] = value;
                }
            }
        }
        
        /// 
        public String CreditorGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreditorGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreditorGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnCreditorGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnCreditorGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public Int32 CurrentFinancialYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentFinancialYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentFinancialYear) 
                            || (((Int32)(this[this.myTable.ColumnCurrentFinancialYear])) != value)))
                {
                    this[this.myTable.ColumnCurrentFinancialYear] = value;
                }
            }
        }
        
        /// 
        public Int32 CurrentPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentPeriod) 
                            || (((Int32)(this[this.myTable.ColumnCurrentPeriod])) != value)))
                {
                    this[this.myTable.ColumnCurrentPeriod] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateCrDrBalances
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCrDrBalances.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCrDrBalances) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCrDrBalances])) != value)))
                {
                    this[this.myTable.ColumnDateCrDrBalances] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCrDrBalancesLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCrDrBalances], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCrDrBalancesHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCrDrBalances.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String DebtorGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebtorGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebtorGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnDebtorGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDebtorGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String FaDepreciationGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaDepreciationGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaDepreciationGlAccount) 
                            || (((String)(this[this.myTable.ColumnFaDepreciationGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaDepreciationGlAccount] = value;
                }
            }
        }
        
        /// 
        public String FaGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnFaGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnFaGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String FaPlOnSaleGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaPlOnSaleGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaPlOnSaleGlAccount) 
                            || (((String)(this[this.myTable.ColumnFaPlOnSaleGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaPlOnSaleGlAccount] = value;
                }
            }
        }
        
        /// 
        public String FaProvForDepnGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaProvForDepnGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaProvForDepnGlAccount) 
                            || (((String)(this[this.myTable.ColumnFaProvForDepnGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaProvForDepnGlAccount] = value;
                }
            }
        }
        
        /// 
        public Boolean IltAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnIltAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnIltAccountFlag] = value;
                }
            }
        }
        
        /// 
        public Int32 LastApDnNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastApDnNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastApDnNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastApDnNumber])) != value)))
                {
                    this[this.myTable.ColumnLastApDnNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastPoRetNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoRetNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoRetNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastPoRetNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoRetNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastSoDelNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoDelNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoDelNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastSoDelNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoDelNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastSoRetNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoRetNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoRetNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastSoRetNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoRetNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 LastSpecialGiftNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSpecialGiftNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSpecialGiftNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastSpecialGiftNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSpecialGiftNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 NumberFwdPostingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods) 
                            || (((Int32)(this[this.myTable.ColumnNumberFwdPostingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberFwdPostingPeriods] = value;
                }
            }
        }
        
        /// deprecated; not used at the moment; please use a_number_of_accounting_periods_i
        public Int32 PeriodsPerFinancialYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodsPerFinancialYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodsPerFinancialYear) 
                            || (((Int32)(this[this.myTable.ColumnPeriodsPerFinancialYear])) != value)))
                {
                    this[this.myTable.ColumnPeriodsPerFinancialYear] = value;
                }
            }
        }
        
        /// 
        public Decimal DiscountAllowedPct
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDiscountAllowedPct.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDiscountAllowedPct) 
                            || (((Decimal)(this[this.myTable.ColumnDiscountAllowedPct])) != value)))
                {
                    this[this.myTable.ColumnDiscountAllowedPct] = value;
                }
            }
        }
        
        /// 
        public Decimal DiscountReceivedPct
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDiscountReceivedPct.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDiscountReceivedPct) 
                            || (((Decimal)(this[this.myTable.ColumnDiscountReceivedPct])) != value)))
                {
                    this[this.myTable.ColumnDiscountReceivedPct] = value;
                }
            }
        }
        
        /// 
        public String PoAccrualGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPoAccrualGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPoAccrualGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnPoAccrualGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPoAccrualGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public Boolean ProvisionalYearEndFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProvisionalYearEndFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProvisionalYearEndFlag) 
                            || (((Boolean)(this[this.myTable.ColumnProvisionalYearEndFlag])) != value)))
                {
                    this[this.myTable.ColumnProvisionalYearEndFlag] = value;
                }
            }
        }
        
        /// 
        public String PurchaseGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPurchaseGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPurchaseGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnPurchaseGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPurchaseGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String RetEarningsGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRetEarningsGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRetEarningsGlAccount) 
                            || (((String)(this[this.myTable.ColumnRetEarningsGlAccount])) != value)))
                {
                    this[this.myTable.ColumnRetEarningsGlAccount] = value;
                }
            }
        }
        
        /// 
        public String SalesGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSalesGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSalesGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnSalesGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSalesGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String SoAccrualGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSoAccrualGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSoAccrualGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnSoAccrualGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSoAccrualGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String StockAccrualGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockAccrualGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockAccrualGlAccount) 
                            || (((String)(this[this.myTable.ColumnStockAccrualGlAccount])) != value)))
                {
                    this[this.myTable.ColumnStockAccrualGlAccount] = value;
                }
            }
        }
        
        /// 
        public String StockAdjGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockAdjGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockAdjGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnStockAdjGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnStockAdjGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String StockGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnStockGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnStockGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public Boolean TaxExclIncl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxExclIncl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxExclIncl) 
                            || (((Boolean)(this[this.myTable.ColumnTaxExclIncl])) != value)))
                {
                    this[this.myTable.ColumnTaxExclIncl] = value;
                }
            }
        }
        
        /// 
        public Boolean TaxExclInclIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxExclInclIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxExclInclIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnTaxExclInclIndicator])) != value)))
                {
                    this[this.myTable.ColumnTaxExclInclIndicator] = value;
                }
            }
        }
        
        /// 
        public String TaxInputGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxInputGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxInputGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnTaxInputGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnTaxInputGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String TaxInputGlCcCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxInputGlCcCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxInputGlCcCode) 
                            || (((String)(this[this.myTable.ColumnTaxInputGlCcCode])) != value)))
                {
                    this[this.myTable.ColumnTaxInputGlCcCode] = value;
                }
            }
        }
        
        /// 
        public String TaxOutputGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxOutputGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxOutputGlAccountCode) 
                            || (((String)(this[this.myTable.ColumnTaxOutputGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnTaxOutputGlAccountCode] = value;
                }
            }
        }
        
        /// 
        public String TermsOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTermsOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTermsOfPaymentCode) 
                            || (((String)(this[this.myTable.ColumnTermsOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnTermsOfPaymentCode] = value;
                }
            }
        }
        
        /// 
        public Int32 LastPoRecNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoRecNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoRecNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastPoRecNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoRecNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 TaxGlAccountNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxGlAccountNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxGlAccountNumber) 
                            || (((Int32)(this[this.myTable.ColumnTaxGlAccountNumber])) != value)))
                {
                    this[this.myTable.ColumnTaxGlAccountNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 ActualsDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualsDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualsDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnActualsDataRetention])) != value)))
                {
                    this[this.myTable.ColumnActualsDataRetention] = value;
                }
            }
        }
        
        /// Partner key which links the ledger to the partner type record where the type is a ledger.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public Boolean CalendarMode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCalendarMode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCalendarMode) 
                            || (((Boolean)(this[this.myTable.ColumnCalendarMode])) != value)))
                {
                    this[this.myTable.ColumnCalendarMode] = value;
                }
            }
        }
        
        /// How far along is the year end process.
        public Int32 YearEndProcessStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearEndProcessStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearEndProcessStatus) 
                            || (((Int32)(this[this.myTable.ColumnYearEndProcessStatus])) != value)))
                {
                    this[this.myTable.ColumnYearEndProcessStatus] = value;
                }
            }
        }
        
        /// last used cashbook payment header number
        public Int32 LastHeaderPNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastHeaderPNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastHeaderPNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastHeaderPNumber])) != value)))
                {
                    this[this.myTable.ColumnLastHeaderPNumber] = value;
                }
            }
        }
        
        /// Is this ledger an ILT processing centre (ie, clearinghouse status)
        public Boolean IltProcessingCentre
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltProcessingCentre.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltProcessingCentre) 
                            || (((Boolean)(this[this.myTable.ColumnIltProcessingCentre])) != value)))
                {
                    this[this.myTable.ColumnIltProcessingCentre] = value;
                }
            }
        }
        
        /// The number of the last gift batch to be created.
        public Int32 LastGiftBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastGiftBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastGiftBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastGiftBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastGiftBatchNumber] = value;
                }
            }
        }
        
        /// This defines which currency to use as a second ('international') base currency.
        public String IntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntlCurrency) 
                            || (((String)(this[this.myTable.ColumnIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnIntlCurrency] = value;
                }
            }
        }
        
        /// The number of the last gift batch to be created.
        public Int32 LastRecGiftBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecGiftBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecGiftBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastRecGiftBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastRecGiftBatchNumber] = value;
                }
            }
        }
        
        /// How many years to retain gift data.
        public Int32 GiftDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnGiftDataRetention])) != value)))
                {
                    this[this.myTable.ColumnGiftDataRetention] = value;
                }
            }
        }
        
        /// When recalculating the account report structure this indicates that all periods should be recalculated.
        public Boolean RecalculateAllPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecalculateAllPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecalculateAllPeriods) 
                            || (((Boolean)(this[this.myTable.ColumnRecalculateAllPeriods])) != value)))
                {
                    this[this.myTable.ColumnRecalculateAllPeriods] = value;
                }
            }
        }
        
        /// identifes the Last used ICH process number
        public Int32 LastIchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastIchNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastIchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastIchNumber] = value;
                }
            }
        }
        
        /// THis defines whether or not the ledger ha made up of separate branches/departments that are self contained (should balance).
        public Boolean BranchProcessing
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchProcessing.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchProcessing) 
                            || (((Boolean)(this[this.myTable.ColumnBranchProcessing])) != value)))
                {
                    this[this.myTable.ColumnBranchProcessing] = value;
                }
            }
        }
        
        /// Indicates whether the ledger is just for storing consolidated accounts (rather than a 'real' ledger).
        public Boolean ConsolidationLedger
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConsolidationLedger.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConsolidationLedger) 
                            || (((Boolean)(this[this.myTable.ColumnConsolidationLedger])) != value)))
                {
                    this[this.myTable.ColumnConsolidationLedger] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLedgerName);
            this[this.myTable.ColumnLedgerStatus.Ordinal] = true;
            this[this.myTable.ColumnLastBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastRecurringBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastGiftNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastApInvNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastHeaderRNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastPoNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoNumber.Ordinal] = 0;
            this[this.myTable.ColumnMaxGiftAidAmount.Ordinal] = 0;
            this[this.myTable.ColumnMinGiftAidAmount.Ordinal] = 0;
            this[this.myTable.ColumnNumberOfGiftsToDisplay.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTaxTypeCode);
            this.SetNull(this.myTable.ColumnIltGlAccountCode);
            this.SetNull(this.myTable.ColumnProfitLossGlAccountCode);
            this[this.myTable.ColumnCurrentAccountingPeriod.Ordinal] = 0;
            this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCountryCode);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnTransactionAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnYearEndFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnForexGainsLossesAccount);
            this[this.myTable.ColumnSystemInterfaceFlag.Ordinal] = false;
            this[this.myTable.ColumnSuspenseAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnBankAccountsFlag.Ordinal] = false;
            this[this.myTable.ColumnDeleteLedgerFlag.Ordinal] = false;
            this[this.myTable.ColumnNewFinancialYearFlag.Ordinal] = false;
            this[this.myTable.ColumnRecalculateGlMasterFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnInstallationId);
            this[this.myTable.ColumnBudgetControlFlag.Ordinal] = false;
            this[this.myTable.ColumnBudgetDataRetention.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostOfSalesGlAccount);
            this.SetNull(this.myTable.ColumnCreditorGlAccountCode);
            this[this.myTable.ColumnCurrentFinancialYear.Ordinal] = 0;
            this[this.myTable.ColumnCurrentPeriod.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDateCrDrBalances);
            this.SetNull(this.myTable.ColumnDebtorGlAccountCode);
            this.SetNull(this.myTable.ColumnFaDepreciationGlAccount);
            this.SetNull(this.myTable.ColumnFaGlAccountCode);
            this.SetNull(this.myTable.ColumnFaPlOnSaleGlAccount);
            this.SetNull(this.myTable.ColumnFaProvForDepnGlAccount);
            this[this.myTable.ColumnIltAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnLastApDnNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastPoRetNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoDelNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoRetNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSpecialGiftNumber.Ordinal] = 0;
            this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnPeriodsPerFinancialYear.Ordinal] = 0;
            this[this.myTable.ColumnDiscountAllowedPct.Ordinal] = 0;
            this[this.myTable.ColumnDiscountReceivedPct.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPoAccrualGlAccountCode);
            this[this.myTable.ColumnProvisionalYearEndFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnPurchaseGlAccountCode);
            this.SetNull(this.myTable.ColumnRetEarningsGlAccount);
            this.SetNull(this.myTable.ColumnSalesGlAccountCode);
            this.SetNull(this.myTable.ColumnSoAccrualGlAccountCode);
            this.SetNull(this.myTable.ColumnStockAccrualGlAccount);
            this.SetNull(this.myTable.ColumnStockAdjGlAccountCode);
            this.SetNull(this.myTable.ColumnStockGlAccountCode);
            this[this.myTable.ColumnTaxExclIncl.Ordinal] = true;
            this[this.myTable.ColumnTaxExclInclIndicator.Ordinal] = false;
            this.SetNull(this.myTable.ColumnTaxInputGlAccountCode);
            this.SetNull(this.myTable.ColumnTaxInputGlCcCode);
            this.SetNull(this.myTable.ColumnTaxOutputGlAccountCode);
            this.SetNull(this.myTable.ColumnTermsOfPaymentCode);
            this[this.myTable.ColumnLastPoRecNumber.Ordinal] = 0;
            this[this.myTable.ColumnTaxGlAccountNumber.Ordinal] = 0;
            this[this.myTable.ColumnActualsDataRetention.Ordinal] = 0;
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnCalendarMode.Ordinal] = true;
            this[this.myTable.ColumnYearEndProcessStatus.Ordinal] = 0;
            this[this.myTable.ColumnLastHeaderPNumber.Ordinal] = 0;
            this[this.myTable.ColumnIltProcessingCentre.Ordinal] = false;
            this[this.myTable.ColumnLastGiftBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnIntlCurrency);
            this[this.myTable.ColumnLastRecGiftBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnGiftDataRetention.Ordinal] = 2;
            this[this.myTable.ColumnRecalculateAllPeriods.Ordinal] = false;
            this[this.myTable.ColumnLastIchNumber.Ordinal] = 0;
            this[this.myTable.ColumnBranchProcessing.Ordinal] = false;
            this[this.myTable.ColumnConsolidationLedger.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsLedgerNameNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerName);
        }
        
        /// assign NULL value
        public void SetLedgerNameNull()
        {
            this.SetNull(this.myTable.ColumnLedgerName);
        }
        
        /// test for NULL value
        public bool IsMaxGiftAidAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMaxGiftAidAmount);
        }
        
        /// assign NULL value
        public void SetMaxGiftAidAmountNull()
        {
            this.SetNull(this.myTable.ColumnMaxGiftAidAmount);
        }
        
        /// test for NULL value
        public bool IsMinGiftAidAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMinGiftAidAmount);
        }
        
        /// assign NULL value
        public void SetMinGiftAidAmountNull()
        {
            this.SetNull(this.myTable.ColumnMinGiftAidAmount);
        }
        
        /// test for NULL value
        public bool IsTaxTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxTypeCode);
        }
        
        /// assign NULL value
        public void SetTaxTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxTypeCode);
        }
        
        /// test for NULL value
        public bool IsIltGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnIltGlAccountCode);
        }
        
        /// assign NULL value
        public void SetIltGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnIltGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsProfitLossGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnProfitLossGlAccountCode);
        }
        
        /// assign NULL value
        public void SetProfitLossGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnProfitLossGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsCountryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCountryCode);
        }
        
        /// assign NULL value
        public void SetCountryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCountryCode);
        }
        
        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// test for NULL value
        public bool IsInstallationIdNull()
        {
            return this.IsNull(this.myTable.ColumnInstallationId);
        }
        
        /// assign NULL value
        public void SetInstallationIdNull()
        {
            this.SetNull(this.myTable.ColumnInstallationId);
        }
        
        /// test for NULL value
        public bool IsBudgetControlFlagNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetControlFlag);
        }
        
        /// assign NULL value
        public void SetBudgetControlFlagNull()
        {
            this.SetNull(this.myTable.ColumnBudgetControlFlag);
        }
        
        /// test for NULL value
        public bool IsBudgetDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetDataRetention);
        }
        
        /// assign NULL value
        public void SetBudgetDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnBudgetDataRetention);
        }
        
        /// test for NULL value
        public bool IsCostOfSalesGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnCostOfSalesGlAccount);
        }
        
        /// assign NULL value
        public void SetCostOfSalesGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnCostOfSalesGlAccount);
        }
        
        /// test for NULL value
        public bool IsCreditorGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCreditorGlAccountCode);
        }
        
        /// assign NULL value
        public void SetCreditorGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnCreditorGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsCurrentFinancialYearNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentFinancialYear);
        }
        
        /// assign NULL value
        public void SetCurrentFinancialYearNull()
        {
            this.SetNull(this.myTable.ColumnCurrentFinancialYear);
        }
        
        /// test for NULL value
        public bool IsCurrentPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentPeriod);
        }
        
        /// assign NULL value
        public void SetCurrentPeriodNull()
        {
            this.SetNull(this.myTable.ColumnCurrentPeriod);
        }
        
        /// test for NULL value
        public bool IsDateCrDrBalancesNull()
        {
            return this.IsNull(this.myTable.ColumnDateCrDrBalances);
        }
        
        /// assign NULL value
        public void SetDateCrDrBalancesNull()
        {
            this.SetNull(this.myTable.ColumnDateCrDrBalances);
        }
        
        /// test for NULL value
        public bool IsDebtorGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDebtorGlAccountCode);
        }
        
        /// assign NULL value
        public void SetDebtorGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnDebtorGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsFaDepreciationGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaDepreciationGlAccount);
        }
        
        /// assign NULL value
        public void SetFaDepreciationGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaDepreciationGlAccount);
        }
        
        /// test for NULL value
        public bool IsFaGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFaGlAccountCode);
        }
        
        /// assign NULL value
        public void SetFaGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnFaGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsFaPlOnSaleGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaPlOnSaleGlAccount);
        }
        
        /// assign NULL value
        public void SetFaPlOnSaleGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaPlOnSaleGlAccount);
        }
        
        /// test for NULL value
        public bool IsFaProvForDepnGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaProvForDepnGlAccount);
        }
        
        /// assign NULL value
        public void SetFaProvForDepnGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaProvForDepnGlAccount);
        }
        
        /// test for NULL value
        public bool IsIltAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnIltAccountFlag);
        }
        
        /// assign NULL value
        public void SetIltAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnIltAccountFlag);
        }
        
        /// test for NULL value
        public bool IsLastApDnNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastApDnNumber);
        }
        
        /// assign NULL value
        public void SetLastApDnNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastApDnNumber);
        }
        
        /// test for NULL value
        public bool IsLastPoRetNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastPoRetNumber);
        }
        
        /// assign NULL value
        public void SetLastPoRetNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastPoRetNumber);
        }
        
        /// test for NULL value
        public bool IsLastSoDelNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSoDelNumber);
        }
        
        /// assign NULL value
        public void SetLastSoDelNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSoDelNumber);
        }
        
        /// test for NULL value
        public bool IsLastSoRetNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSoRetNumber);
        }
        
        /// assign NULL value
        public void SetLastSoRetNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSoRetNumber);
        }
        
        /// test for NULL value
        public bool IsLastSpecialGiftNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSpecialGiftNumber);
        }
        
        /// assign NULL value
        public void SetLastSpecialGiftNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSpecialGiftNumber);
        }
        
        /// test for NULL value
        public bool IsNumberFwdPostingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }
        
        /// assign NULL value
        public void SetNumberFwdPostingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }
        
        /// test for NULL value
        public bool IsPeriodsPerFinancialYearNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodsPerFinancialYear);
        }
        
        /// assign NULL value
        public void SetPeriodsPerFinancialYearNull()
        {
            this.SetNull(this.myTable.ColumnPeriodsPerFinancialYear);
        }
        
        /// test for NULL value
        public bool IsDiscountAllowedPctNull()
        {
            return this.IsNull(this.myTable.ColumnDiscountAllowedPct);
        }
        
        /// assign NULL value
        public void SetDiscountAllowedPctNull()
        {
            this.SetNull(this.myTable.ColumnDiscountAllowedPct);
        }
        
        /// test for NULL value
        public bool IsDiscountReceivedPctNull()
        {
            return this.IsNull(this.myTable.ColumnDiscountReceivedPct);
        }
        
        /// assign NULL value
        public void SetDiscountReceivedPctNull()
        {
            this.SetNull(this.myTable.ColumnDiscountReceivedPct);
        }
        
        /// test for NULL value
        public bool IsPoAccrualGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPoAccrualGlAccountCode);
        }
        
        /// assign NULL value
        public void SetPoAccrualGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPoAccrualGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsProvisionalYearEndFlagNull()
        {
            return this.IsNull(this.myTable.ColumnProvisionalYearEndFlag);
        }
        
        /// assign NULL value
        public void SetProvisionalYearEndFlagNull()
        {
            this.SetNull(this.myTable.ColumnProvisionalYearEndFlag);
        }
        
        /// test for NULL value
        public bool IsPurchaseGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPurchaseGlAccountCode);
        }
        
        /// assign NULL value
        public void SetPurchaseGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPurchaseGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsRetEarningsGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnRetEarningsGlAccount);
        }
        
        /// assign NULL value
        public void SetRetEarningsGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnRetEarningsGlAccount);
        }
        
        /// test for NULL value
        public bool IsSalesGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSalesGlAccountCode);
        }
        
        /// assign NULL value
        public void SetSalesGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnSalesGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsSoAccrualGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSoAccrualGlAccountCode);
        }
        
        /// assign NULL value
        public void SetSoAccrualGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnSoAccrualGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsStockAccrualGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnStockAccrualGlAccount);
        }
        
        /// assign NULL value
        public void SetStockAccrualGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnStockAccrualGlAccount);
        }
        
        /// test for NULL value
        public bool IsStockAdjGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStockAdjGlAccountCode);
        }
        
        /// assign NULL value
        public void SetStockAdjGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnStockAdjGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsStockGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStockGlAccountCode);
        }
        
        /// assign NULL value
        public void SetStockGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnStockGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsTaxExclInclNull()
        {
            return this.IsNull(this.myTable.ColumnTaxExclIncl);
        }
        
        /// assign NULL value
        public void SetTaxExclInclNull()
        {
            this.SetNull(this.myTable.ColumnTaxExclIncl);
        }
        
        /// test for NULL value
        public bool IsTaxExclInclIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnTaxExclInclIndicator);
        }
        
        /// assign NULL value
        public void SetTaxExclInclIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnTaxExclInclIndicator);
        }
        
        /// test for NULL value
        public bool IsTaxInputGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxInputGlAccountCode);
        }
        
        /// assign NULL value
        public void SetTaxInputGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxInputGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsTaxInputGlCcCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxInputGlCcCode);
        }
        
        /// assign NULL value
        public void SetTaxInputGlCcCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxInputGlCcCode);
        }
        
        /// test for NULL value
        public bool IsTaxOutputGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxOutputGlAccountCode);
        }
        
        /// assign NULL value
        public void SetTaxOutputGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxOutputGlAccountCode);
        }
        
        /// test for NULL value
        public bool IsTermsOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTermsOfPaymentCode);
        }
        
        /// assign NULL value
        public void SetTermsOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnTermsOfPaymentCode);
        }
        
        /// test for NULL value
        public bool IsLastPoRecNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastPoRecNumber);
        }
        
        /// assign NULL value
        public void SetLastPoRecNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastPoRecNumber);
        }
        
        /// test for NULL value
        public bool IsTaxGlAccountNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTaxGlAccountNumber);
        }
        
        /// assign NULL value
        public void SetTaxGlAccountNumberNull()
        {
            this.SetNull(this.myTable.ColumnTaxGlAccountNumber);
        }
        
        /// test for NULL value
        public bool IsActualsDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnActualsDataRetention);
        }
        
        /// assign NULL value
        public void SetActualsDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnActualsDataRetention);
        }
        
        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }
        
        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }
        
        /// test for NULL value
        public bool IsCalendarModeNull()
        {
            return this.IsNull(this.myTable.ColumnCalendarMode);
        }
        
        /// assign NULL value
        public void SetCalendarModeNull()
        {
            this.SetNull(this.myTable.ColumnCalendarMode);
        }
        
        /// test for NULL value
        public bool IsYearEndProcessStatusNull()
        {
            return this.IsNull(this.myTable.ColumnYearEndProcessStatus);
        }
        
        /// assign NULL value
        public void SetYearEndProcessStatusNull()
        {
            this.SetNull(this.myTable.ColumnYearEndProcessStatus);
        }
        
        /// test for NULL value
        public bool IsIltProcessingCentreNull()
        {
            return this.IsNull(this.myTable.ColumnIltProcessingCentre);
        }
        
        /// assign NULL value
        public void SetIltProcessingCentreNull()
        {
            this.SetNull(this.myTable.ColumnIltProcessingCentre);
        }
        
        /// test for NULL value
        public bool IsLastGiftBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastGiftBatchNumber);
        }
        
        /// assign NULL value
        public void SetLastGiftBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastGiftBatchNumber);
        }
        
        /// test for NULL value
        public bool IsIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnIntlCurrency);
        }
        
        /// assign NULL value
        public void SetIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnIntlCurrency);
        }
        
        /// test for NULL value
        public bool IsLastRecGiftBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastRecGiftBatchNumber);
        }
        
        /// assign NULL value
        public void SetLastRecGiftBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastRecGiftBatchNumber);
        }
        
        /// test for NULL value
        public bool IsGiftDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnGiftDataRetention);
        }
        
        /// assign NULL value
        public void SetGiftDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnGiftDataRetention);
        }
        
        /// test for NULL value
        public bool IsRecalculateAllPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnRecalculateAllPeriods);
        }
        
        /// assign NULL value
        public void SetRecalculateAllPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnRecalculateAllPeriods);
        }
        
        /// test for NULL value
        public bool IsBranchProcessingNull()
        {
            return this.IsNull(this.myTable.ColumnBranchProcessing);
        }
        
        /// assign NULL value
        public void SetBranchProcessingNull()
        {
            this.SetNull(this.myTable.ColumnBranchProcessing);
        }
        
        /// test for NULL value
        public bool IsConsolidationLedgerNull()
        {
            return this.IsNull(this.myTable.ColumnConsolidationLedger);
        }
        
        /// assign NULL value
        public void SetConsolidationLedgerNull()
        {
            this.SetNull(this.myTable.ColumnConsolidationLedger);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Ledger Init Flags
    [Serializable()]
    public class ALedgerInitFlagTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// 
        public DataColumn ColumnInitOptionName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ALedgerInitFlagTable() : 
                base("ALedgerInitFlag")
        {
        }
        
        /// constructor
        public ALedgerInitFlagTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ALedgerInitFlagTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ALedgerInitFlagRow this[int i]
        {
            get
            {
                return ((ALedgerInitFlagRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "a_ledger_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetInitOptionNameDBName()
        {
            return "a_init_option_name_c";
        }
        
        /// get help text for column
        public static string GetInitOptionNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetInitOptionNameLabel()
        {
            return "a_init_option_name_c";
        }
        
        /// get character length for column
        public static short GetInitOptionNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ALedgerInitFlag";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ledger_init_flag";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "a_ledger_init_flag";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_init_option_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnInitOptionName = this.Columns["a_init_option_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnInitOptionName};
        }
        
        /// get typed set of changes
        public ALedgerInitFlagTable GetChangesTyped()
        {
            return ((ALedgerInitFlagTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ALedgerInitFlagRow NewRowTyped(bool AWithDefaultValues)
        {
            ALedgerInitFlagRow ret = ((ALedgerInitFlagRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ALedgerInitFlagRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ALedgerInitFlagRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_init_option_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnInitOptionName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Ledger Init Flags
    [Serializable()]
    public class ALedgerInitFlagRow : System.Data.DataRow
    {
        
        private ALedgerInitFlagTable myTable;
        
        /// Constructor
        public ALedgerInitFlagRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ALedgerInitFlagTable)(this.Table));
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// 
        public String InitOptionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInitOptionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInitOptionName) 
                            || (((String)(this[this.myTable.ColumnInitOptionName])) != value)))
                {
                    this[this.myTable.ColumnInitOptionName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnInitOptionName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Used for initial set up of budgets, for how to calculate amounts for each period.  Some possible types are adhoc,same,percentage of annual.
    [Serializable()]
    public class ABudgetTypeTable : TTypedDataTable
    {
        
        /// The type. Adhoc, Split, Same, Inflate.
        public DataColumn ColumnBudgetTypeCode;
        
        /// 
        public DataColumn ColumnBudgetTypeDescription;
        
        /// The Petra programme filename of the process to call
        public DataColumn ColumnBudgetProcessToCall;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ABudgetTypeTable() : 
                base("ABudgetType")
        {
        }
        
        /// constructor
        public ABudgetTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ABudgetTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ABudgetTypeRow this[int i]
        {
            get
            {
                return ((ABudgetTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }
        
        /// get help text for column
        public static string GetBudgetTypeCodeHelp()
        {
            return "Enter the budget type code";
        }
        
        /// get label of column
        public static string GetBudgetTypeCodeLabel()
        {
            return "Budget Type Code";
        }
        
        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetTypeDescriptionDBName()
        {
            return "a_budget_type_description_c";
        }
        
        /// get help text for column
        public static string GetBudgetTypeDescriptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetTypeDescriptionLabel()
        {
            return "Budget Type Description";
        }
        
        /// get character length for column
        public static short GetBudgetTypeDescriptionLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetProcessToCallDBName()
        {
            return "a_budget_process_to_call_c";
        }
        
        /// get help text for column
        public static string GetBudgetProcessToCallHelp()
        {
            return "Enter the filename of the budget process to call";
        }
        
        /// get label of column
        public static string GetBudgetProcessToCallLabel()
        {
            return "Budget Process to Call";
        }
        
        /// get character length for column
        public static short GetBudgetProcessToCallLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ABudgetType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_budget_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Budget Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_budget_type_code_c",
                    "a_budget_type_description_c",
                    "a_budget_process_to_call_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnBudgetTypeDescription = this.Columns["a_budget_type_description_c"];
            this.ColumnBudgetProcessToCall = this.Columns["a_budget_process_to_call_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBudgetTypeCode};
        }
        
        /// get typed set of changes
        public ABudgetTypeTable GetChangesTyped()
        {
            return ((ABudgetTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ABudgetTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetTypeRow ret = ((ABudgetTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ABudgetTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_process_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBudgetTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBudgetTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnBudgetProcessToCall))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Used for initial set up of budgets, for how to calculate amounts for each period.  Some possible types are adhoc,same,percentage of annual.
    [Serializable()]
    public class ABudgetTypeRow : System.Data.DataRow
    {
        
        private ABudgetTypeTable myTable;
        
        /// Constructor
        public ABudgetTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ABudgetTypeTable)(this.Table));
        }
        
        /// The type. Adhoc, Split, Same, Inflate.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode) 
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }
        
        /// 
        public String BudgetTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeDescription) 
                            || (((String)(this[this.myTable.ColumnBudgetTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeDescription] = value;
                }
            }
        }
        
        /// The Petra programme filename of the process to call
        public String BudgetProcessToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetProcessToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetProcessToCall) 
                            || (((String)(this[this.myTable.ColumnBudgetProcessToCall])) != value)))
                {
                    this[this.myTable.ColumnBudgetProcessToCall] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this.SetNull(this.myTable.ColumnBudgetTypeDescription);
            this.SetNull(this.myTable.ColumnBudgetProcessToCall);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Details about each account code within a ledger. Also holds information on the summary account structure for reporting.
    [Serializable()]
    public class AAccountTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Income, Expense, Asset, Liability, Equity.  Suspense accounts are in a_suspense_account.
        public DataColumn ColumnAccountType;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnAccountCodeLongDesc;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAccountCodeShortDesc;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnEngAccountCodeShortDesc;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnEngAccountCodeLongDesc;
        
        /// Defines if the the transcation is a debit or credit transaction
        public DataColumn ColumnDebitCreditIndicator;
        
        /// Defines whether the acount is active or not
        public DataColumn ColumnAccountActiveFlag;
        
        /// Yes if the account has any analysis attributes.
        public DataColumn ColumnAnalysisAttributeFlag;
        
        /// 
        public DataColumn ColumnStandardAccountFlag;
        
        /// 
        public DataColumn ColumnConsolidationAccountFlag;
        
        /// 
        public DataColumn ColumnIntercompanyAccountFlag;
        
        /// The type of budget.  See the a_budget_type table.
        public DataColumn ColumnBudgetTypeCode;
        
        /// 
        public DataColumn ColumnFinStatementGroup;
        
        /// 
        public DataColumn ColumnPostingStatus;
        
        /// 
        public DataColumn ColumnSystemAccountFlag;
        
        /// 
        public DataColumn ColumnBudgetControlFlag;
        
        /// Which type of cost centres may be combined with this account.
        public DataColumn ColumnValidCcCombo;
        
        /// 
        public DataColumn ColumnForeignCurrencyFlag;
        
        /// This defines which currency is being used
        public DataColumn ColumnForeignCurrencyCode;
        
        /// Link to banking details to use for this account - only really used if this account is a bank account
        public DataColumn ColumnBankingDetailsKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountTable() : 
                base("AAccount")
        {
        }
        
        /// constructor
        public AAccountTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountRow this[int i]
        {
            get
            {
                return ((AAccountRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter a code for the account.";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountTypeDBName()
        {
            return "a_account_type_c";
        }
        
        /// get help text for column
        public static string GetAccountTypeHelp()
        {
            return "Choose the type of account (e.g., Asset)";
        }
        
        /// get label of column
        public static string GetAccountTypeLabel()
        {
            return "Account Type";
        }
        
        /// get character length for column
        public static short GetAccountTypeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeLongDescDBName()
        {
            return "a_account_code_long_desc_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeLongDescHelp()
        {
            return "Enter a description of the account (full).";
        }
        
        /// get label of column
        public static string GetAccountCodeLongDescLabel()
        {
            return "Long";
        }
        
        /// get character length for column
        public static short GetAccountCodeLongDescLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeShortDescDBName()
        {
            return "a_account_code_short_desc_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeShortDescHelp()
        {
            return "Enter a short description of the account.";
        }
        
        /// get label of column
        public static string GetAccountCodeShortDescLabel()
        {
            return "Short";
        }
        
        /// get character length for column
        public static short GetAccountCodeShortDescLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEngAccountCodeShortDescDBName()
        {
            return "a_eng_account_code_short_desc_c";
        }
        
        /// get help text for column
        public static string GetEngAccountCodeShortDescHelp()
        {
            return "Enter a short description in English.";
        }
        
        /// get label of column
        public static string GetEngAccountCodeShortDescLabel()
        {
            return "Short";
        }
        
        /// get character length for column
        public static short GetEngAccountCodeShortDescLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEngAccountCodeLongDescDBName()
        {
            return "a_eng_account_code_long_desc_c";
        }
        
        /// get help text for column
        public static string GetEngAccountCodeLongDescHelp()
        {
            return "Enter a description in English (full).";
        }
        
        /// get label of column
        public static string GetEngAccountCodeLongDescLabel()
        {
            return "Long";
        }
        
        /// get character length for column
        public static short GetEngAccountCodeLongDescLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }
        
        /// get help text for column
        public static string GetDebitCreditIndicatorHelp()
        {
            return "The normal status of the account balance: DR or CR.";
        }
        
        /// get label of column
        public static string GetDebitCreditIndicatorLabel()
        {
            return "Debit/Credit Indicator";
        }
        
        /// get display format for column
        public static short GetDebitCreditIndicatorLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountActiveFlagDBName()
        {
            return "a_account_active_flag_l";
        }
        
        /// get help text for column
        public static string GetAccountActiveFlagHelp()
        {
            return "Is this account available for posting transactions?";
        }
        
        /// get label of column
        public static string GetAccountActiveFlagLabel()
        {
            return "Active Account";
        }
        
        /// get display format for column
        public static short GetAccountActiveFlagLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeFlagDBName()
        {
            return "a_analysis_attribute_flag_l";
        }
        
        /// get help text for column
        public static string GetAnalysisAttributeFlagHelp()
        {
            return "Do you want to allow custom analysis on this account?";
        }
        
        /// get label of column
        public static string GetAnalysisAttributeFlagLabel()
        {
            return "Analysis Attribute Flag";
        }
        
        /// get display format for column
        public static short GetAnalysisAttributeFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStandardAccountFlagDBName()
        {
            return "a_standard_account_flag_l";
        }
        
        /// get help text for column
        public static string GetStandardAccountFlagHelp()
        {
            return "Is this a standard account?";
        }
        
        /// get label of column
        public static string GetStandardAccountFlagLabel()
        {
            return "Standard Account";
        }
        
        /// get display format for column
        public static short GetStandardAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetConsolidationAccountFlagDBName()
        {
            return "a_consolidation_account_flag_l";
        }
        
        /// get help text for column
        public static string GetConsolidationAccountFlagHelp()
        {
            return "Is this an account to be consolidated?";
        }
        
        /// get label of column
        public static string GetConsolidationAccountFlagLabel()
        {
            return "Consolidation Account";
        }
        
        /// get display format for column
        public static short GetConsolidationAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIntercompanyAccountFlagDBName()
        {
            return "a_intercompany_account_flag_l";
        }
        
        /// get help text for column
        public static string GetIntercompanyAccountFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetIntercompanyAccountFlagLabel()
        {
            return "Intercompany Account";
        }
        
        /// get display format for column
        public static short GetIntercompanyAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }
        
        /// get help text for column
        public static string GetBudgetTypeCodeHelp()
        {
            return "Select a type of budgeting for this account.";
        }
        
        /// get label of column
        public static string GetBudgetTypeCodeLabel()
        {
            return "Budget Type Code";
        }
        
        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFinStatementGroupDBName()
        {
            return "a_fin_statement_group_c";
        }
        
        /// get help text for column
        public static string GetFinStatementGroupHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFinStatementGroupLabel()
        {
            return "Financial Statement Group";
        }
        
        /// get character length for column
        public static short GetFinStatementGroupLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPostingStatusDBName()
        {
            return "a_posting_status_l";
        }
        
        /// get help text for column
        public static string GetPostingStatusHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPostingStatusLabel()
        {
            return "Posting Status";
        }
        
        /// get display format for column
        public static short GetPostingStatusLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemAccountFlagDBName()
        {
            return "a_system_account_flag_l";
        }
        
        /// get help text for column
        public static string GetSystemAccountFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemAccountFlagLabel()
        {
            return "System Account";
        }
        
        /// get display format for column
        public static short GetSystemAccountFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetControlFlagDBName()
        {
            return "a_budget_control_flag_l";
        }
        
        /// get help text for column
        public static string GetBudgetControlFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetControlFlagLabel()
        {
            return "Budget Control";
        }
        
        /// get display format for column
        public static short GetBudgetControlFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidCcComboDBName()
        {
            return "a_valid_cc_combo_c";
        }
        
        /// get help text for column
        public static string GetValidCcComboHelp()
        {
            return "Select cost centre type that may be combined with this account.";
        }
        
        /// get label of column
        public static string GetValidCcComboLabel()
        {
            return "Valid Cost Centre Combinations";
        }
        
        /// get character length for column
        public static short GetValidCcComboLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetForeignCurrencyFlagDBName()
        {
            return "a_foreign_currency_flag_l";
        }
        
        /// get help text for column
        public static string GetForeignCurrencyFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetForeignCurrencyFlagLabel()
        {
            return "a_foreign_currency_flag_l";
        }
        
        /// get display format for column
        public static short GetForeignCurrencyFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetForeignCurrencyCodeDBName()
        {
            return "a_foreign_currency_code_c";
        }
        
        /// get help text for column
        public static string GetForeignCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetForeignCurrencyCodeLabel()
        {
            return "Currency Code";
        }
        
        /// get character length for column
        public static short GetForeignCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "p_banking_details_key_i";
        }
        
        /// get help text for column
        public static string GetBankingDetailsKeyHelp()
        {
            return "Link to banking details to use for this account - only really used if this accoun" +
                "t is a bank account";
        }
        
        /// get label of column
        public static string GetBankingDetailsKeyLabel()
        {
            return "Banking Details for this account";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccount";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_account";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Account Master";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_account_code_c",
                    "a_account_type_c",
                    "a_account_code_long_desc_c",
                    "a_account_code_short_desc_c",
                    "a_eng_account_code_short_desc_c",
                    "a_eng_account_code_long_desc_c",
                    "a_debit_credit_indicator_l",
                    "a_account_active_flag_l",
                    "a_analysis_attribute_flag_l",
                    "a_standard_account_flag_l",
                    "a_consolidation_account_flag_l",
                    "a_intercompany_account_flag_l",
                    "a_budget_type_code_c",
                    "a_fin_statement_group_c",
                    "a_posting_status_l",
                    "a_system_account_flag_l",
                    "a_budget_control_flag_l",
                    "a_valid_cc_combo_c",
                    "a_foreign_currency_flag_l",
                    "a_foreign_currency_code_c",
                    "p_banking_details_key_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnAccountType = this.Columns["a_account_type_c"];
            this.ColumnAccountCodeLongDesc = this.Columns["a_account_code_long_desc_c"];
            this.ColumnAccountCodeShortDesc = this.Columns["a_account_code_short_desc_c"];
            this.ColumnEngAccountCodeShortDesc = this.Columns["a_eng_account_code_short_desc_c"];
            this.ColumnEngAccountCodeLongDesc = this.Columns["a_eng_account_code_long_desc_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnAccountActiveFlag = this.Columns["a_account_active_flag_l"];
            this.ColumnAnalysisAttributeFlag = this.Columns["a_analysis_attribute_flag_l"];
            this.ColumnStandardAccountFlag = this.Columns["a_standard_account_flag_l"];
            this.ColumnConsolidationAccountFlag = this.Columns["a_consolidation_account_flag_l"];
            this.ColumnIntercompanyAccountFlag = this.Columns["a_intercompany_account_flag_l"];
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnFinStatementGroup = this.Columns["a_fin_statement_group_c"];
            this.ColumnPostingStatus = this.Columns["a_posting_status_l"];
            this.ColumnSystemAccountFlag = this.Columns["a_system_account_flag_l"];
            this.ColumnBudgetControlFlag = this.Columns["a_budget_control_flag_l"];
            this.ColumnValidCcCombo = this.Columns["a_valid_cc_combo_c"];
            this.ColumnForeignCurrencyFlag = this.Columns["a_foreign_currency_flag_l"];
            this.ColumnForeignCurrencyCode = this.Columns["a_foreign_currency_code_c"];
            this.ColumnBankingDetailsKey = this.Columns["p_banking_details_key_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountCode};
        }
        
        /// get typed set of changes
        public AAccountTable GetChangesTyped()
        {
            return ((AAccountTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountRow ret = ((AAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_long_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_short_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_eng_account_code_short_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_eng_account_code_long_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_account_active_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_standard_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_consolidation_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_intercompany_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fin_statement_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_posting_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_system_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_control_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_valid_cc_combo_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_foreign_currency_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_foreign_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAccountType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnAccountCodeLongDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnAccountCodeShortDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnEngAccountCodeShortDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnEngAccountCodeLongDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDebitCreditIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAccountActiveFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAnalysisAttributeFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnStandardAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnConsolidationAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnIntercompanyAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnBudgetTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFinStatementGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPostingStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSystemAccountFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnBudgetControlFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnValidCcCombo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnForeignCurrencyFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnForeignCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBankingDetailsKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Details about each account code within a ledger. Also holds information on the summary account structure for reporting.
    [Serializable()]
    public class AAccountRow : System.Data.DataRow
    {
        
        private AAccountTable myTable;
        
        /// Constructor
        public AAccountRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Income, Expense, Asset, Liability, Equity.  Suspense accounts are in a_suspense_account.
        public String AccountType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountType) 
                            || (((String)(this[this.myTable.ColumnAccountType])) != value)))
                {
                    this[this.myTable.ColumnAccountType] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String AccountCodeLongDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeLongDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeLongDesc) 
                            || (((String)(this[this.myTable.ColumnAccountCodeLongDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeLongDesc] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String AccountCodeShortDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeShortDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeShortDesc) 
                            || (((String)(this[this.myTable.ColumnAccountCodeShortDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeShortDesc] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String EngAccountCodeShortDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEngAccountCodeShortDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEngAccountCodeShortDesc) 
                            || (((String)(this[this.myTable.ColumnEngAccountCodeShortDesc])) != value)))
                {
                    this[this.myTable.ColumnEngAccountCodeShortDesc] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String EngAccountCodeLongDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEngAccountCodeLongDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEngAccountCodeLongDesc) 
                            || (((String)(this[this.myTable.ColumnEngAccountCodeLongDesc])) != value)))
                {
                    this[this.myTable.ColumnEngAccountCodeLongDesc] = value;
                }
            }
        }
        
        /// Defines if the the transcation is a debit or credit transaction
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }
        
        /// Defines whether the acount is active or not
        public Boolean AccountActiveFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountActiveFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountActiveFlag) 
                            || (((Boolean)(this[this.myTable.ColumnAccountActiveFlag])) != value)))
                {
                    this[this.myTable.ColumnAccountActiveFlag] = value;
                }
            }
        }
        
        /// Yes if the account has any analysis attributes.
        public Boolean AnalysisAttributeFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeFlag) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisAttributeFlag])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean StandardAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStandardAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStandardAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnStandardAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnStandardAccountFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean ConsolidationAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConsolidationAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConsolidationAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnConsolidationAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnConsolidationAccountFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean IntercompanyAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntercompanyAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntercompanyAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnIntercompanyAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnIntercompanyAccountFlag] = value;
                }
            }
        }
        
        /// The type of budget.  See the a_budget_type table.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode) 
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }
        
        /// 
        public String FinStatementGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFinStatementGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFinStatementGroup) 
                            || (((String)(this[this.myTable.ColumnFinStatementGroup])) != value)))
                {
                    this[this.myTable.ColumnFinStatementGroup] = value;
                }
            }
        }
        
        /// 
        public Boolean PostingStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostingStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostingStatus) 
                            || (((Boolean)(this[this.myTable.ColumnPostingStatus])) != value)))
                {
                    this[this.myTable.ColumnPostingStatus] = value;
                }
            }
        }
        
        /// 
        public Boolean SystemAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAccountFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSystemAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemAccountFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean BudgetControlFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetControlFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetControlFlag) 
                            || (((Boolean)(this[this.myTable.ColumnBudgetControlFlag])) != value)))
                {
                    this[this.myTable.ColumnBudgetControlFlag] = value;
                }
            }
        }
        
        /// Which type of cost centres may be combined with this account.
        public String ValidCcCombo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidCcCombo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidCcCombo) 
                            || (((String)(this[this.myTable.ColumnValidCcCombo])) != value)))
                {
                    this[this.myTable.ColumnValidCcCombo] = value;
                }
            }
        }
        
        /// 
        public Boolean ForeignCurrencyFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForeignCurrencyFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForeignCurrencyFlag) 
                            || (((Boolean)(this[this.myTable.ColumnForeignCurrencyFlag])) != value)))
                {
                    this[this.myTable.ColumnForeignCurrencyFlag] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String ForeignCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForeignCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForeignCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnForeignCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnForeignCurrencyCode] = value;
                }
            }
        }
        
        /// Link to banking details to use for this account - only really used if this account is a bank account
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey) 
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnAccountType);
            this.SetNull(this.myTable.ColumnAccountCodeLongDesc);
            this.SetNull(this.myTable.ColumnAccountCodeShortDesc);
            this.SetNull(this.myTable.ColumnEngAccountCodeShortDesc);
            this.SetNull(this.myTable.ColumnEngAccountCodeLongDesc);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnAccountActiveFlag.Ordinal] = true;
            this[this.myTable.ColumnAnalysisAttributeFlag.Ordinal] = false;
            this[this.myTable.ColumnStandardAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnConsolidationAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnIntercompanyAccountFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this.SetNull(this.myTable.ColumnFinStatementGroup);
            this[this.myTable.ColumnPostingStatus.Ordinal] = true;
            this[this.myTable.ColumnSystemAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnBudgetControlFlag.Ordinal] = false;
            this[this.myTable.ColumnValidCcCombo.Ordinal] = "All";
            this[this.myTable.ColumnForeignCurrencyFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnForeignCurrencyCode);
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsAccountTypeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountType);
        }
        
        /// assign NULL value
        public void SetAccountTypeNull()
        {
            this.SetNull(this.myTable.ColumnAccountType);
        }
        
        /// test for NULL value
        public bool IsAccountCodeLongDescNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCodeLongDesc);
        }
        
        /// assign NULL value
        public void SetAccountCodeLongDescNull()
        {
            this.SetNull(this.myTable.ColumnAccountCodeLongDesc);
        }
        
        /// test for NULL value
        public bool IsAccountCodeShortDescNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCodeShortDesc);
        }
        
        /// assign NULL value
        public void SetAccountCodeShortDescNull()
        {
            this.SetNull(this.myTable.ColumnAccountCodeShortDesc);
        }
        
        /// test for NULL value
        public bool IsEngAccountCodeShortDescNull()
        {
            return this.IsNull(this.myTable.ColumnEngAccountCodeShortDesc);
        }
        
        /// assign NULL value
        public void SetEngAccountCodeShortDescNull()
        {
            this.SetNull(this.myTable.ColumnEngAccountCodeShortDesc);
        }
        
        /// test for NULL value
        public bool IsEngAccountCodeLongDescNull()
        {
            return this.IsNull(this.myTable.ColumnEngAccountCodeLongDesc);
        }
        
        /// assign NULL value
        public void SetEngAccountCodeLongDescNull()
        {
            this.SetNull(this.myTable.ColumnEngAccountCodeLongDesc);
        }
        
        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }
        
        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }
        
        /// test for NULL value
        public bool IsAccountActiveFlagNull()
        {
            return this.IsNull(this.myTable.ColumnAccountActiveFlag);
        }
        
        /// assign NULL value
        public void SetAccountActiveFlagNull()
        {
            this.SetNull(this.myTable.ColumnAccountActiveFlag);
        }
        
        /// test for NULL value
        public bool IsAnalysisAttributeFlagNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeFlag);
        }
        
        /// assign NULL value
        public void SetAnalysisAttributeFlagNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeFlag);
        }
        
        /// test for NULL value
        public bool IsStandardAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnStandardAccountFlag);
        }
        
        /// assign NULL value
        public void SetStandardAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnStandardAccountFlag);
        }
        
        /// test for NULL value
        public bool IsConsolidationAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnConsolidationAccountFlag);
        }
        
        /// assign NULL value
        public void SetConsolidationAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnConsolidationAccountFlag);
        }
        
        /// test for NULL value
        public bool IsIntercompanyAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnIntercompanyAccountFlag);
        }
        
        /// assign NULL value
        public void SetIntercompanyAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnIntercompanyAccountFlag);
        }
        
        /// test for NULL value
        public bool IsBudgetTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetTypeCode);
        }
        
        /// assign NULL value
        public void SetBudgetTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
        }
        
        /// test for NULL value
        public bool IsFinStatementGroupNull()
        {
            return this.IsNull(this.myTable.ColumnFinStatementGroup);
        }
        
        /// assign NULL value
        public void SetFinStatementGroupNull()
        {
            this.SetNull(this.myTable.ColumnFinStatementGroup);
        }
        
        /// test for NULL value
        public bool IsPostingStatusNull()
        {
            return this.IsNull(this.myTable.ColumnPostingStatus);
        }
        
        /// assign NULL value
        public void SetPostingStatusNull()
        {
            this.SetNull(this.myTable.ColumnPostingStatus);
        }
        
        /// test for NULL value
        public bool IsSystemAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAccountFlag);
        }
        
        /// assign NULL value
        public void SetSystemAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnSystemAccountFlag);
        }
        
        /// test for NULL value
        public bool IsBudgetControlFlagNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetControlFlag);
        }
        
        /// assign NULL value
        public void SetBudgetControlFlagNull()
        {
            this.SetNull(this.myTable.ColumnBudgetControlFlag);
        }
        
        /// test for NULL value
        public bool IsValidCcComboNull()
        {
            return this.IsNull(this.myTable.ColumnValidCcCombo);
        }
        
        /// assign NULL value
        public void SetValidCcComboNull()
        {
            this.SetNull(this.myTable.ColumnValidCcCombo);
        }
        
        /// test for NULL value
        public bool IsForeignCurrencyFlagNull()
        {
            return this.IsNull(this.myTable.ColumnForeignCurrencyFlag);
        }
        
        /// assign NULL value
        public void SetForeignCurrencyFlagNull()
        {
            this.SetNull(this.myTable.ColumnForeignCurrencyFlag);
        }
        
        /// test for NULL value
        public bool IsForeignCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnForeignCurrencyCode);
        }
        
        /// assign NULL value
        public void SetForeignCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnForeignCurrencyCode);
        }
        
        /// test for NULL value
        public bool IsBankingDetailsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnBankingDetailsKey);
        }
        
        /// assign NULL value
        public void SetBankingDetailsKeyNull()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Extra properties that might want to be saved with an account can be defined in this table.
    [Serializable()]
    public class AAccountPropertyCodeTable : TTypedDataTable
    {
        
        /// Code for the property
        public DataColumn ColumnPropertyCode;
        
        /// Description of this property
        public DataColumn ColumnDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountPropertyCodeTable() : 
                base("AAccountPropertyCode")
        {
        }
        
        /// constructor
        public AAccountPropertyCodeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountPropertyCodeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountPropertyCodeRow this[int i]
        {
            get
            {
                return ((AAccountPropertyCodeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPropertyCodeDBName()
        {
            return "a_property_code_c";
        }
        
        /// get help text for column
        public static string GetPropertyCodeHelp()
        {
            return "Code for the property";
        }
        
        /// get label of column
        public static string GetPropertyCodeLabel()
        {
            return "a_property_code_c";
        }
        
        /// get character length for column
        public static short GetPropertyCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Description of this property";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "a_description_c";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountPropertyCode";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_account_property_code";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Account Property Code Definition";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_property_code_c",
                    "a_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPropertyCode = this.Columns["a_property_code_c"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnPropertyCode};
        }
        
        /// get typed set of changes
        public AAccountPropertyCodeTable GetChangesTyped()
        {
            return ((AAccountPropertyCodeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountPropertyCodeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountPropertyCodeRow ret = ((AAccountPropertyCodeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountPropertyCodeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountPropertyCodeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_property_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPropertyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Extra properties that might want to be saved with an account can be defined in this table.
    [Serializable()]
    public class AAccountPropertyCodeRow : System.Data.DataRow
    {
        
        private AAccountPropertyCodeTable myTable;
        
        /// Constructor
        public AAccountPropertyCodeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountPropertyCodeTable)(this.Table));
        }
        
        /// Code for the property
        public String PropertyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyCode) 
                            || (((String)(this[this.myTable.ColumnPropertyCode])) != value)))
                {
                    this[this.myTable.ColumnPropertyCode] = value;
                }
            }
        }
        
        /// Description of this property
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPropertyCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Properties and optional values for an account can be saved in this table.
    [Serializable()]
    public class AAccountPropertyTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Code for the property
        public DataColumn ColumnPropertyCode;
        
        /// Description of this property
        public DataColumn ColumnPropertyValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountPropertyTable() : 
                base("AAccountProperty")
        {
        }
        
        /// constructor
        public AAccountPropertyTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountPropertyTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountPropertyRow this[int i]
        {
            get
            {
                return ((AAccountPropertyRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "a_ledger_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter a code for the account.";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPropertyCodeDBName()
        {
            return "a_property_code_c";
        }
        
        /// get help text for column
        public static string GetPropertyCodeHelp()
        {
            return "Code for the property";
        }
        
        /// get label of column
        public static string GetPropertyCodeLabel()
        {
            return "a_property_code_c";
        }
        
        /// get character length for column
        public static short GetPropertyCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPropertyValueDBName()
        {
            return "a_property_value_c";
        }
        
        /// get help text for column
        public static string GetPropertyValueHelp()
        {
            return "Description of this property";
        }
        
        /// get label of column
        public static string GetPropertyValueLabel()
        {
            return "a_property_value_c";
        }
        
        /// get character length for column
        public static short GetPropertyValueLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountProperty";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_account_property";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Account Property Code";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_account_code_c",
                    "a_property_code_c",
                    "a_property_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPropertyCode = this.Columns["a_property_code_c"];
            this.ColumnPropertyValue = this.Columns["a_property_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountCode,
                    this.ColumnPropertyCode,
                    this.ColumnPropertyValue};
        }
        
        /// get typed set of changes
        public AAccountPropertyTable GetChangesTyped()
        {
            return ((AAccountPropertyTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountPropertyRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountPropertyRow ret = ((AAccountPropertyRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountPropertyRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountPropertyRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_property_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_property_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPropertyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnPropertyValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Properties and optional values for an account can be saved in this table.
    [Serializable()]
    public class AAccountPropertyRow : System.Data.DataRow
    {
        
        private AAccountPropertyTable myTable;
        
        /// Constructor
        public AAccountPropertyRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountPropertyTable)(this.Table));
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Code for the property
        public String PropertyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyCode) 
                            || (((String)(this[this.myTable.ColumnPropertyCode])) != value)))
                {
                    this[this.myTable.ColumnPropertyCode] = value;
                }
            }
        }
        
        /// Description of this property
        public String PropertyValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyValue) 
                            || (((String)(this[this.myTable.ColumnPropertyValue])) != value)))
                {
                    this[this.myTable.ColumnPropertyValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPropertyCode);
            this.SetNull(this.myTable.ColumnPropertyValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPropertyValueNull()
        {
            return this.IsNull(this.myTable.ColumnPropertyValue);
        }
        
        /// assign NULL value
        public void SetPropertyValueNull()
        {
            this.SetNull(this.myTable.ColumnPropertyValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// hierarchy of accounts; what is the root account of the hierarchy
    [Serializable()]
    public class AAccountHierarchyTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// The code for the hierarchy
        public DataColumn ColumnAccountHierarchyCode;
        
        /// The root account of the hierarchy, which is at the top of the hierarchy
        public DataColumn ColumnRootAccountCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountHierarchyTable() : 
                base("AAccountHierarchy")
        {
        }
        
        /// constructor
        public AAccountHierarchyTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountHierarchyTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountHierarchyRow this[int i]
        {
            get
            {
                return ((AAccountHierarchyRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountHierarchyCodeDBName()
        {
            return "a_account_hierarchy_code_c";
        }
        
        /// get help text for column
        public static string GetAccountHierarchyCodeHelp()
        {
            return "The code for the hierarchy";
        }
        
        /// get label of column
        public static string GetAccountHierarchyCodeLabel()
        {
            return "Hierarchy";
        }
        
        /// get character length for column
        public static short GetAccountHierarchyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRootAccountCodeDBName()
        {
            return "a_root_account_code_c";
        }
        
        /// get help text for column
        public static string GetRootAccountCodeHelp()
        {
            return "The root account of the hierarchy, which is at the top of the hierarchy";
        }
        
        /// get label of column
        public static string GetRootAccountCodeLabel()
        {
            return "Root Account";
        }
        
        /// get character length for column
        public static short GetRootAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountHierarchy";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_account_hierarchy";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "a_account_hierarchy";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_account_hierarchy_code_c",
                    "a_root_account_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountHierarchyCode = this.Columns["a_account_hierarchy_code_c"];
            this.ColumnRootAccountCode = this.Columns["a_root_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountHierarchyCode};
        }
        
        /// get typed set of changes
        public AAccountHierarchyTable GetChangesTyped()
        {
            return ((AAccountHierarchyTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountHierarchyRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountHierarchyRow ret = ((AAccountHierarchyRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountHierarchyRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountHierarchyRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_hierarchy_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_root_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountHierarchyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnRootAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// hierarchy of accounts; what is the root account of the hierarchy
    [Serializable()]
    public class AAccountHierarchyRow : System.Data.DataRow
    {
        
        private AAccountHierarchyTable myTable;
        
        /// Constructor
        public AAccountHierarchyRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountHierarchyTable)(this.Table));
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The code for the hierarchy
        public String AccountHierarchyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountHierarchyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountHierarchyCode) 
                            || (((String)(this[this.myTable.ColumnAccountHierarchyCode])) != value)))
                {
                    this[this.myTable.ColumnAccountHierarchyCode] = value;
                }
            }
        }
        
        /// The root account of the hierarchy, which is at the top of the hierarchy
        public String RootAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRootAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRootAccountCode) 
                            || (((String)(this[this.myTable.ColumnRootAccountCode])) != value)))
                {
                    this[this.myTable.ColumnRootAccountCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
            this.SetNull(this.myTable.ColumnRootAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// the elements of the hierarchy of accounts; which account is reporting to which other account
    [Serializable()]
    public class AAccountHierarchyDetailTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// The code for the hierarchy
        public DataColumn ColumnAccountHierarchyCode;
        
        /// The reporting account
        public DataColumn ColumnReportingAccountCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCodeToReportTo;
        
        /// Order to display the account or heading on the Balance Sheet &amp; Income Statement report.
        public DataColumn ColumnReportOrder;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountHierarchyDetailTable() : 
                base("AAccountHierarchyDetail")
        {
        }
        
        /// constructor
        public AAccountHierarchyDetailTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountHierarchyDetailTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountHierarchyDetailRow this[int i]
        {
            get
            {
                return ((AAccountHierarchyDetailRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountHierarchyCodeDBName()
        {
            return "a_account_hierarchy_code_c";
        }
        
        /// get help text for column
        public static string GetAccountHierarchyCodeHelp()
        {
            return "The code for the hierarchy";
        }
        
        /// get label of column
        public static string GetAccountHierarchyCodeLabel()
        {
            return "Hierarchy";
        }
        
        /// get character length for column
        public static short GetAccountHierarchyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportingAccountCodeDBName()
        {
            return "a_reporting_account_code_c";
        }
        
        /// get help text for column
        public static string GetReportingAccountCodeHelp()
        {
            return "The reporting account";
        }
        
        /// get label of column
        public static string GetReportingAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetReportingAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeToReportToDBName()
        {
            return "a_account_code_to_report_to_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeToReportToHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeToReportToLabel()
        {
            return "Account Code to Report to";
        }
        
        /// get character length for column
        public static short GetAccountCodeToReportToLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportOrderDBName()
        {
            return "a_report_order_i";
        }
        
        /// get help text for column
        public static string GetReportOrderHelp()
        {
            return "Order to display the account or heading on the Balance Sheet & Income Statement r" +
                "eport.";
        }
        
        /// get label of column
        public static string GetReportOrderLabel()
        {
            return "Report Order";
        }
        
        /// get display format for column
        public static short GetReportOrderLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountHierarchyDetail";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_account_hierarchy_detail";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "a_account_hierarchy_detail";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_account_hierarchy_code_c",
                    "a_reporting_account_code_c",
                    "a_account_code_to_report_to_c",
                    "a_report_order_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountHierarchyCode = this.Columns["a_account_hierarchy_code_c"];
            this.ColumnReportingAccountCode = this.Columns["a_reporting_account_code_c"];
            this.ColumnAccountCodeToReportTo = this.Columns["a_account_code_to_report_to_c"];
            this.ColumnReportOrder = this.Columns["a_report_order_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountHierarchyCode,
                    this.ColumnReportingAccountCode};
        }
        
        /// get typed set of changes
        public AAccountHierarchyDetailTable GetChangesTyped()
        {
            return ((AAccountHierarchyDetailTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountHierarchyDetailRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountHierarchyDetailRow ret = ((AAccountHierarchyDetailRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountHierarchyDetailRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountHierarchyDetailRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_hierarchy_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_reporting_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_to_report_to_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_report_order_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountHierarchyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReportingAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAccountCodeToReportTo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReportOrder))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// the elements of the hierarchy of accounts; which account is reporting to which other account
    [Serializable()]
    public class AAccountHierarchyDetailRow : System.Data.DataRow
    {
        
        private AAccountHierarchyDetailTable myTable;
        
        /// Constructor
        public AAccountHierarchyDetailRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountHierarchyDetailTable)(this.Table));
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The code for the hierarchy
        public String AccountHierarchyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountHierarchyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountHierarchyCode) 
                            || (((String)(this[this.myTable.ColumnAccountHierarchyCode])) != value)))
                {
                    this[this.myTable.ColumnAccountHierarchyCode] = value;
                }
            }
        }
        
        /// The reporting account
        public String ReportingAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportingAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportingAccountCode) 
                            || (((String)(this[this.myTable.ColumnReportingAccountCode])) != value)))
                {
                    this[this.myTable.ColumnReportingAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCodeToReportTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeToReportTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeToReportTo) 
                            || (((String)(this[this.myTable.ColumnAccountCodeToReportTo])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeToReportTo] = value;
                }
            }
        }
        
        /// Order to display the account or heading on the Balance Sheet &amp; Income Statement report.
        public Int32 ReportOrder
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportOrder.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportOrder) 
                            || (((Int32)(this[this.myTable.ColumnReportOrder])) != value)))
                {
                    this[this.myTable.ColumnReportOrder] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
            this.SetNull(this.myTable.ColumnReportingAccountCode);
            this.SetNull(this.myTable.ColumnAccountCodeToReportTo);
            this.SetNull(this.myTable.ColumnReportOrder);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsReportOrderNull()
        {
            return this.IsNull(this.myTable.ColumnReportOrder);
        }
        
        /// assign NULL value
        public void SetReportOrderNull()
        {
            this.SetNull(this.myTable.ColumnReportOrder);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores standard and user-defined cost centre types.  For example: Foreign, Local.
    [Serializable()]
    public class ACostCentreTypesTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// Type of cost centre (Defaults: Foreign or Local)
        public DataColumn ColumnCostCentreType;
        
        /// The description of the cost centre type
        public DataColumn ColumnCcDescription;
        
        /// Can this cost centre type be deleted by the user?
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ACostCentreTypesTable() : 
                base("ACostCentreTypes")
        {
        }
        
        /// constructor
        public ACostCentreTypesTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ACostCentreTypesTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ACostCentreTypesRow this[int i]
        {
            get
            {
                return ((ACostCentreTypesRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreTypeDBName()
        {
            return "a_cost_centre_type_c";
        }
        
        /// get help text for column
        public static string GetCostCentreTypeHelp()
        {
            return "Enter the type of cost centre.";
        }
        
        /// get label of column
        public static string GetCostCentreTypeLabel()
        {
            return "Type";
        }
        
        /// get character length for column
        public static short GetCostCentreTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCcDescriptionDBName()
        {
            return "a_cc_description_c";
        }
        
        /// get help text for column
        public static string GetCcDescriptionHelp()
        {
            return "Enter the description of the cost centre type";
        }
        
        /// get label of column
        public static string GetCcDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetCcDescriptionLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "a_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "Can this cost centre type be deleted by the user?";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ACostCentreTypes";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_cost_centre_types";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Cost Centre Types";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_cost_centre_type_c",
                    "a_cc_description_c",
                    "a_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnCostCentreType = this.Columns["a_cost_centre_type_c"];
            this.ColumnCcDescription = this.Columns["a_cc_description_c"];
            this.ColumnDeletable = this.Columns["a_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnCostCentreType};
        }
        
        /// get typed set of changes
        public ACostCentreTypesTable GetChangesTyped()
        {
            return ((ACostCentreTypesTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ACostCentreTypesRow NewRowTyped(bool AWithDefaultValues)
        {
            ACostCentreTypesRow ret = ((ACostCentreTypesRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ACostCentreTypesRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACostCentreTypesRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cc_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostCentreType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCcDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores standard and user-defined cost centre types.  For example: Foreign, Local.
    [Serializable()]
    public class ACostCentreTypesRow : System.Data.DataRow
    {
        
        private ACostCentreTypesTable myTable;
        
        /// Constructor
        public ACostCentreTypesRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ACostCentreTypesTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Type of cost centre (Defaults: Foreign or Local)
        public String CostCentreType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreType) 
                            || (((String)(this[this.myTable.ColumnCostCentreType])) != value)))
                {
                    this[this.myTable.ColumnCostCentreType] = value;
                }
            }
        }
        
        /// The description of the cost centre type
        public String CcDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCcDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCcDescription) 
                            || (((String)(this[this.myTable.ColumnCcDescription])) != value)))
                {
                    this[this.myTable.ColumnCcDescription] = value;
                }
            }
        }
        
        /// Can this cost centre type be deleted by the user?
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnCostCentreType.Ordinal] = "Local";
            this.SetNull(this.myTable.ColumnCcDescription);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCcDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnCcDescription);
        }
        
        /// assign NULL value
        public void SetCcDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnCcDescription);
        }
        
        /// test for NULL value
        public bool IsDeletableNull()
        {
            return this.IsNull(this.myTable.ColumnDeletable);
        }
        
        /// assign NULL value
        public void SetDeletableNull()
        {
            this.SetNull(this.myTable.ColumnDeletable);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Master cost centre records which contain details of each cost centre and their relationship to each other; determines the cost centre structure.
    [Serializable()]
    public class ACostCentreTable : TTypedDataTable
    {
        
        /// The ledger in which the cost centre is used.
        public DataColumn ColumnLedgerNumber;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies which cost centre the cost centre summarises to.
        public DataColumn ColumnCostCentreToReportTo;
        
        /// 
        public DataColumn ColumnCostCentreName;
        
        /// 
        public DataColumn ColumnPostingCostCentreFlag;
        
        /// 
        public DataColumn ColumnCostCentreActiveFlag;
        
        /// 
        public DataColumn ColumnProjectStatus;
        
        /// 
        public DataColumn ColumnProjectConstraintDate;
        
        /// 
        public DataColumn ColumnProjectConstraintAmount;
        
        /// 
        public DataColumn ColumnSystemCostCentreFlag;
        
        /// Type of cost centre (Foreign or Local)
        public DataColumn ColumnCostCentreType;
        
        /// Key Focus Area that this cost centre relates to
        public DataColumn ColumnKeyFocusArea;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ACostCentreTable() : 
                base("ACostCentre")
        {
        }
        
        /// constructor
        public ACostCentreTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ACostCentreTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ACostCentreRow this[int i]
        {
            get
            {
                return ((ACostCentreRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreToReportToDBName()
        {
            return "a_cost_centre_to_report_to_c";
        }
        
        /// get help text for column
        public static string GetCostCentreToReportToHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreToReportToLabel()
        {
            return "Cost Centre to Report To";
        }
        
        /// get character length for column
        public static short GetCostCentreToReportToLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreNameDBName()
        {
            return "a_cost_centre_name_c";
        }
        
        /// get help text for column
        public static string GetCostCentreNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCostCentreNameLabel()
        {
            return "Cost Centre Name";
        }
        
        /// get character length for column
        public static short GetCostCentreNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPostingCostCentreFlagDBName()
        {
            return "a_posting_cost_centre_flag_l";
        }
        
        /// get help text for column
        public static string GetPostingCostCentreFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPostingCostCentreFlagLabel()
        {
            return "Posting/Summary";
        }
        
        /// get display format for column
        public static short GetPostingCostCentreFlagLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreActiveFlagDBName()
        {
            return "a_cost_centre_active_flag_l";
        }
        
        /// get help text for column
        public static string GetCostCentreActiveFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetCostCentreActiveFlagLabel()
        {
            return "Active Cost Centre";
        }
        
        /// get display format for column
        public static short GetCostCentreActiveFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectStatusDBName()
        {
            return "a_project_status_l";
        }
        
        /// get help text for column
        public static string GetProjectStatusHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProjectStatusLabel()
        {
            return "Project Status";
        }
        
        /// get display format for column
        public static short GetProjectStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectConstraintDateDBName()
        {
            return "a_project_constraint_date_d";
        }
        
        /// get help text for column
        public static string GetProjectConstraintDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProjectConstraintDateLabel()
        {
            return "Project Constraint Date";
        }
        
        /// get display format for column
        public static short GetProjectConstraintDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetProjectConstraintAmountDBName()
        {
            return "a_project_constraint_amount_n";
        }
        
        /// get help text for column
        public static string GetProjectConstraintAmountHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetProjectConstraintAmountLabel()
        {
            return "Project Constraint Amount";
        }
        
        /// get display format for column
        public static short GetProjectConstraintAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemCostCentreFlagDBName()
        {
            return "a_system_cost_centre_flag_l";
        }
        
        /// get help text for column
        public static string GetSystemCostCentreFlagHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSystemCostCentreFlagLabel()
        {
            return "System Cost Centre";
        }
        
        /// get display format for column
        public static short GetSystemCostCentreFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreTypeDBName()
        {
            return "a_cost_centre_type_c";
        }
        
        /// get help text for column
        public static string GetCostCentreTypeHelp()
        {
            return "Type of cost centre (foreign or local).";
        }
        
        /// get label of column
        public static string GetCostCentreTypeLabel()
        {
            return "Type";
        }
        
        /// get character length for column
        public static short GetCostCentreTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaDBName()
        {
            return "a_key_focus_area_c";
        }
        
        /// get help text for column
        public static string GetKeyFocusAreaHelp()
        {
            return "Key Focus Area that this cost centre relates to";
        }
        
        /// get label of column
        public static string GetKeyFocusAreaLabel()
        {
            return "Key Focus Area";
        }
        
        /// get character length for column
        public static short GetKeyFocusAreaLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ACostCentre";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_cost_centre";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Cost Centre";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_cost_centre_code_c",
                    "a_cost_centre_to_report_to_c",
                    "a_cost_centre_name_c",
                    "a_posting_cost_centre_flag_l",
                    "a_cost_centre_active_flag_l",
                    "a_project_status_l",
                    "a_project_constraint_date_d",
                    "a_project_constraint_amount_n",
                    "a_system_cost_centre_flag_l",
                    "a_cost_centre_type_c",
                    "a_key_focus_area_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnCostCentreToReportTo = this.Columns["a_cost_centre_to_report_to_c"];
            this.ColumnCostCentreName = this.Columns["a_cost_centre_name_c"];
            this.ColumnPostingCostCentreFlag = this.Columns["a_posting_cost_centre_flag_l"];
            this.ColumnCostCentreActiveFlag = this.Columns["a_cost_centre_active_flag_l"];
            this.ColumnProjectStatus = this.Columns["a_project_status_l"];
            this.ColumnProjectConstraintDate = this.Columns["a_project_constraint_date_d"];
            this.ColumnProjectConstraintAmount = this.Columns["a_project_constraint_amount_n"];
            this.ColumnSystemCostCentreFlag = this.Columns["a_system_cost_centre_flag_l"];
            this.ColumnCostCentreType = this.Columns["a_cost_centre_type_c"];
            this.ColumnKeyFocusArea = this.Columns["a_key_focus_area_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnCostCentreCode};
        }
        
        /// get typed set of changes
        public ACostCentreTable GetChangesTyped()
        {
            return ((ACostCentreTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ACostCentreRow NewRowTyped(bool AWithDefaultValues)
        {
            ACostCentreRow ret = ((ACostCentreRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ACostCentreRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACostCentreRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_to_report_to_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_posting_cost_centre_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_active_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_project_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_project_constraint_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_project_constraint_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_system_cost_centre_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnCostCentreToReportTo))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnCostCentreName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPostingCostCentreFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCostCentreActiveFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnProjectStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnProjectConstraintDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnProjectConstraintAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnSystemCostCentreFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnCostCentreType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnKeyFocusArea))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Master cost centre records which contain details of each cost centre and their relationship to each other; determines the cost centre structure.
    [Serializable()]
    public class ACostCentreRow : System.Data.DataRow
    {
        
        private ACostCentreTable myTable;
        
        /// Constructor
        public ACostCentreRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ACostCentreTable)(this.Table));
        }
        
        /// The ledger in which the cost centre is used.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre the cost centre summarises to.
        public String CostCentreToReportTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreToReportTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreToReportTo) 
                            || (((String)(this[this.myTable.ColumnCostCentreToReportTo])) != value)))
                {
                    this[this.myTable.ColumnCostCentreToReportTo] = value;
                }
            }
        }
        
        /// 
        public String CostCentreName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreName) 
                            || (((String)(this[this.myTable.ColumnCostCentreName])) != value)))
                {
                    this[this.myTable.ColumnCostCentreName] = value;
                }
            }
        }
        
        /// 
        public Boolean PostingCostCentreFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostingCostCentreFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostingCostCentreFlag) 
                            || (((Boolean)(this[this.myTable.ColumnPostingCostCentreFlag])) != value)))
                {
                    this[this.myTable.ColumnPostingCostCentreFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean CostCentreActiveFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreActiveFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreActiveFlag) 
                            || (((Boolean)(this[this.myTable.ColumnCostCentreActiveFlag])) != value)))
                {
                    this[this.myTable.ColumnCostCentreActiveFlag] = value;
                }
            }
        }
        
        /// 
        public Boolean ProjectStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectStatus) 
                            || (((Boolean)(this[this.myTable.ColumnProjectStatus])) != value)))
                {
                    this[this.myTable.ColumnProjectStatus] = value;
                }
            }
        }
        
        /// 
        public System.DateTime ProjectConstraintDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectConstraintDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectConstraintDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnProjectConstraintDate])) != value)))
                {
                    this[this.myTable.ColumnProjectConstraintDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ProjectConstraintDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnProjectConstraintDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ProjectConstraintDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnProjectConstraintDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public Double ProjectConstraintAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectConstraintAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectConstraintAmount) 
                            || (((Double)(this[this.myTable.ColumnProjectConstraintAmount])) != value)))
                {
                    this[this.myTable.ColumnProjectConstraintAmount] = value;
                }
            }
        }
        
        /// 
        public Boolean SystemCostCentreFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemCostCentreFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemCostCentreFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSystemCostCentreFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemCostCentreFlag] = value;
                }
            }
        }
        
        /// Type of cost centre (Foreign or Local)
        public String CostCentreType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreType) 
                            || (((String)(this[this.myTable.ColumnCostCentreType])) != value)))
                {
                    this[this.myTable.ColumnCostCentreType] = value;
                }
            }
        }
        
        /// Key Focus Area that this cost centre relates to
        public String KeyFocusArea
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusArea.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusArea) 
                            || (((String)(this[this.myTable.ColumnKeyFocusArea])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusArea] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnCostCentreToReportTo);
            this.SetNull(this.myTable.ColumnCostCentreName);
            this[this.myTable.ColumnPostingCostCentreFlag.Ordinal] = true;
            this[this.myTable.ColumnCostCentreActiveFlag.Ordinal] = true;
            this[this.myTable.ColumnProjectStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnProjectConstraintDate);
            this[this.myTable.ColumnProjectConstraintAmount.Ordinal] = 0;
            this[this.myTable.ColumnSystemCostCentreFlag.Ordinal] = false;
            this[this.myTable.ColumnCostCentreType.Ordinal] = "Local";
            this.SetNull(this.myTable.ColumnKeyFocusArea);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreToReportToNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreToReportTo);
        }
        
        /// assign NULL value
        public void SetCostCentreToReportToNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreToReportTo);
        }
        
        /// test for NULL value
        public bool IsCostCentreActiveFlagNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreActiveFlag);
        }
        
        /// assign NULL value
        public void SetCostCentreActiveFlagNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreActiveFlag);
        }
        
        /// test for NULL value
        public bool IsProjectStatusNull()
        {
            return this.IsNull(this.myTable.ColumnProjectStatus);
        }
        
        /// assign NULL value
        public void SetProjectStatusNull()
        {
            this.SetNull(this.myTable.ColumnProjectStatus);
        }
        
        /// test for NULL value
        public bool IsProjectConstraintDateNull()
        {
            return this.IsNull(this.myTable.ColumnProjectConstraintDate);
        }
        
        /// assign NULL value
        public void SetProjectConstraintDateNull()
        {
            this.SetNull(this.myTable.ColumnProjectConstraintDate);
        }
        
        /// test for NULL value
        public bool IsProjectConstraintAmountNull()
        {
            return this.IsNull(this.myTable.ColumnProjectConstraintAmount);
        }
        
        /// assign NULL value
        public void SetProjectConstraintAmountNull()
        {
            this.SetNull(this.myTable.ColumnProjectConstraintAmount);
        }
        
        /// test for NULL value
        public bool IsSystemCostCentreFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSystemCostCentreFlag);
        }
        
        /// assign NULL value
        public void SetSystemCostCentreFlagNull()
        {
            this.SetNull(this.myTable.ColumnSystemCostCentreFlag);
        }
        
        /// test for NULL value
        public bool IsCostCentreTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreType);
        }
        
        /// assign NULL value
        public void SetCostCentreTypeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreType);
        }
        
        /// test for NULL value
        public bool IsKeyFocusAreaNull()
        {
            return this.IsNull(this.myTable.ColumnKeyFocusArea);
        }
        
        /// assign NULL value
        public void SetKeyFocusAreaNull()
        {
            this.SetNull(this.myTable.ColumnKeyFocusArea);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of foreign ledgers (eg, other fields) which the local ledger may send transctions to.
    [Serializable()]
    public class AValidLedgerNumberTable : TTypedDataTable
    {
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type &quot;&quot;ledger&quot;&quot;.
        public DataColumn ColumnLedgerNumber;
        
        /// The ledger through which inter ledger transactions are routed for processing.
        public DataColumn ColumnIltProcessingCentre;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AValidLedgerNumberTable() : 
                base("AValidLedgerNumber")
        {
        }
        
        /// constructor
        public AValidLedgerNumberTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AValidLedgerNumberTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AValidLedgerNumberRow this[int i]
        {
            get
            {
                return ((AValidLedgerNumberRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner Key";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIltProcessingCentreDBName()
        {
            return "a_ilt_processing_centre_n";
        }
        
        /// get help text for column
        public static string GetIltProcessingCentreHelp()
        {
            return "The ledger through which inter ledger transactions are routed for processing.";
        }
        
        /// get label of column
        public static string GetIltProcessingCentreLabel()
        {
            return "ILT processing Centre";
        }
        
        /// get display format for column
        public static short GetIltProcessingCentreLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AValidLedgerNumber";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_valid_ledger_number";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Valid Ledger Number";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    1,
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_partner_key_n",
                    "a_ledger_number_i",
                    "a_ilt_processing_centre_n",
                    "a_cost_centre_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnIltProcessingCentre = this.Columns["a_ilt_processing_centre_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public AValidLedgerNumberTable GetChangesTyped()
        {
            return ((AValidLedgerNumberTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AValidLedgerNumberRow NewRowTyped(bool AWithDefaultValues)
        {
            AValidLedgerNumberRow ret = ((AValidLedgerNumberRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AValidLedgerNumberRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AValidLedgerNumberRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_processing_centre_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnIltProcessingCentre))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of foreign ledgers (eg, other fields) which the local ledger may send transctions to.
    [Serializable()]
    public class AValidLedgerNumberRow : System.Data.DataRow
    {
        
        private AValidLedgerNumberTable myTable;
        
        /// Constructor
        public AValidLedgerNumberRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AValidLedgerNumberTable)(this.Table));
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type &quot;&quot;ledger&quot;&quot;.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The ledger through which inter ledger transactions are routed for processing.
        public Int64 IltProcessingCentre
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltProcessingCentre.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltProcessingCentre) 
                            || (((Int64)(this[this.myTable.ColumnIltProcessingCentre])) != value)))
                {
                    this[this.myTable.ColumnIltProcessingCentre] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnIltProcessingCentre.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsIltProcessingCentreNull()
        {
            return this.IsNull(this.myTable.ColumnIltProcessingCentre);
        }
        
        /// assign NULL value
        public void SetIltProcessingCentreNull()
        {
            this.SetNull(this.myTable.ColumnIltProcessingCentre);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This defines a certain revision of a budget in a ledger in a year.
    [Serializable()]
    public class ABudgetRevisionTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// The year that this budget applies to
        public DataColumn ColumnYear;
        
        /// A budget can have several revisions per year
        public DataColumn ColumnRevision;
        
        /// A description of this revision of the budget
        public DataColumn ColumnDescription;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ABudgetRevisionTable() : 
                base("ABudgetRevision")
        {
        }
        
        /// constructor
        public ABudgetRevisionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ABudgetRevisionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ABudgetRevisionRow this[int i]
        {
            get
            {
                return ((ABudgetRevisionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }
        
        /// get help text for column
        public static string GetYearHelp()
        {
            return "The year that this budget applies to";
        }
        
        /// get label of column
        public static string GetYearLabel()
        {
            return "a_year_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetRevisionDBName()
        {
            return "a_revision_i";
        }
        
        /// get help text for column
        public static string GetRevisionHelp()
        {
            return "A budget can have several revisions per year";
        }
        
        /// get label of column
        public static string GetRevisionLabel()
        {
            return "a_revision_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Enter a description for this revision of the budget";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ABudgetRevision";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_budget_revision";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Budget Revision";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_year_i",
                    "a_revision_i",
                    "a_description_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnRevision = this.Columns["a_revision_i"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnYear,
                    this.ColumnRevision};
        }
        
        /// get typed set of changes
        public ABudgetRevisionTable GetChangesTyped()
        {
            return ((ABudgetRevisionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ABudgetRevisionRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetRevisionRow ret = ((ABudgetRevisionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ABudgetRevisionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetRevisionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_revision_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRevision))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This defines a certain revision of a budget in a ledger in a year.
    [Serializable()]
    public class ABudgetRevisionRow : System.Data.DataRow
    {
        
        private ABudgetRevisionTable myTable;
        
        /// Constructor
        public ABudgetRevisionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ABudgetRevisionTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The year that this budget applies to
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear) 
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }
        
        /// A budget can have several revisions per year
        public Int32 Revision
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRevision.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRevision) 
                            || (((Int32)(this[this.myTable.ColumnRevision])) != value)))
                {
                    this[this.myTable.ColumnRevision] = value;
                }
            }
        }
        
        /// A description of this revision of the budget
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYear);
            this[this.myTable.ColumnRevision.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Budget information for cost centre-account combinations.
    [Serializable()]
    public class ABudgetTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnBudgetSequence;
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// The year that this budget applies to
        public DataColumn ColumnYear;
        
        /// A budget can have several revisions per year
        public DataColumn ColumnRevision;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// See a_budget_type table.  Indicates the method used for creating the budget.
        public DataColumn ColumnBudgetTypeCode;
        
        /// Has the budget been &quot;&quot;posted&quot;&quot; to the general ledger master
        ///and account files.
        public DataColumn ColumnBudgetStatus;
        
        /// A comment for this specific budget item and revision
        public DataColumn ColumnComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ABudgetTable() : 
                base("ABudget")
        {
        }
        
        /// constructor
        public ABudgetTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ABudgetTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ABudgetRow this[int i]
        {
            get
            {
                return ((ABudgetRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetSequenceDBName()
        {
            return "a_budget_sequence_i";
        }
        
        /// get help text for column
        public static string GetBudgetSequenceHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetSequenceLabel()
        {
            return "a_budget_sequence_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }
        
        /// get help text for column
        public static string GetYearHelp()
        {
            return "The year that this budget applies to";
        }
        
        /// get label of column
        public static string GetYearLabel()
        {
            return "a_year_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetRevisionDBName()
        {
            return "a_revision_i";
        }
        
        /// get help text for column
        public static string GetRevisionHelp()
        {
            return "A budget can have several revisions per year";
        }
        
        /// get label of column
        public static string GetRevisionLabel()
        {
            return "a_revision_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }
        
        /// get help text for column
        public static string GetBudgetTypeCodeHelp()
        {
            return "Enter the budget type code.";
        }
        
        /// get label of column
        public static string GetBudgetTypeCodeLabel()
        {
            return "Budget Type Code";
        }
        
        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetStatusDBName()
        {
            return "a_budget_status_l";
        }
        
        /// get help text for column
        public static string GetBudgetStatusHelp()
        {
            return "Has the budget been \"\"posted\"\" to the general ledger master\r\nand account files.";
        }
        
        /// get label of column
        public static string GetBudgetStatusLabel()
        {
            return "Budget Posted Status";
        }
        
        /// get display format for column
        public static short GetBudgetStatusLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "a_comment_c";
        }
        
        /// get help text for column
        public static string GetCommentHelp()
        {
            return "Enter a comment for this specific budget item and revision";
        }
        
        /// get label of column
        public static string GetCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetCommentLength()
        {
            return 100;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ABudget";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_budget";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Budget";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_budget_sequence_i",
                    "a_ledger_number_i",
                    "a_year_i",
                    "a_revision_i",
                    "a_cost_centre_code_c",
                    "a_account_code_c",
                    "a_budget_type_code_c",
                    "a_budget_status_l",
                    "a_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetSequence = this.Columns["a_budget_sequence_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnRevision = this.Columns["a_revision_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnBudgetStatus = this.Columns["a_budget_status_l"];
            this.ColumnComment = this.Columns["a_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBudgetSequence};
        }
        
        /// get typed set of changes
        public ABudgetTable GetChangesTyped()
        {
            return ((ABudgetTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ABudgetRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetRow ret = ((ABudgetRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ABudgetRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_revision_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBudgetSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRevision))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBudgetTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBudgetStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 200);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Budget information for cost centre-account combinations.
    [Serializable()]
    public class ABudgetRow : System.Data.DataRow
    {
        
        private ABudgetTable myTable;
        
        /// Constructor
        public ABudgetRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ABudgetTable)(this.Table));
        }
        
        /// 
        public Int32 BudgetSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetSequence) 
                            || (((Int32)(this[this.myTable.ColumnBudgetSequence])) != value)))
                {
                    this[this.myTable.ColumnBudgetSequence] = value;
                }
            }
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The year that this budget applies to
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear) 
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }
        
        /// A budget can have several revisions per year
        public Int32 Revision
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRevision.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRevision) 
                            || (((Int32)(this[this.myTable.ColumnRevision])) != value)))
                {
                    this[this.myTable.ColumnRevision] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// See a_budget_type table.  Indicates the method used for creating the budget.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode) 
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }
        
        /// Has the budget been &quot;&quot;posted&quot;&quot; to the general ledger master
        ///and account files.
        public Boolean BudgetStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetStatus) 
                            || (((Boolean)(this[this.myTable.ColumnBudgetStatus])) != value)))
                {
                    this[this.myTable.ColumnBudgetStatus] = value;
                }
            }
        }
        
        /// A comment for this specific budget item and revision
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment) 
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnYear.Ordinal] = 0;
            this[this.myTable.ColumnRevision.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this[this.myTable.ColumnBudgetStatus.Ordinal] = true;
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBudgetStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetStatus);
        }
        
        /// assign NULL value
        public void SetBudgetStatusNull()
        {
            this.SetNull(this.myTable.ColumnBudgetStatus);
        }
        
        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }
        
        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// This is the budget data for one period (e.g. a month)
    [Serializable()]
    public class ABudgetPeriodTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnBudgetSequence;
        
        /// 
        public DataColumn ColumnPeriodNumber;
        
        /// Budget amount in base currency
        public DataColumn ColumnBudgetBase;
        
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetLastYear;
        
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetThisYear;
        
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetNextYear;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ABudgetPeriodTable() : 
                base("ABudgetPeriod")
        {
        }
        
        /// constructor
        public ABudgetPeriodTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ABudgetPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ABudgetPeriodRow this[int i]
        {
            get
            {
                return ((ABudgetPeriodRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetSequenceDBName()
        {
            return "a_budget_sequence_i";
        }
        
        /// get help text for column
        public static string GetBudgetSequenceHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetSequenceLabel()
        {
            return "a_budget_sequence_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }
        
        /// get help text for column
        public static string GetPeriodNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPeriodNumberLabel()
        {
            return "a_period_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetBaseDBName()
        {
            return "a_budget_base_n";
        }
        
        /// get help text for column
        public static string GetBudgetBaseHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBudgetBaseLabel()
        {
            return "Budget in Base Currency";
        }
        
        /// get display format for column
        public static short GetBudgetBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetLastYearDBName()
        {
            return "a_budget_last_year_n";
        }
        
        /// get help text for column
        public static string GetBudgetLastYearHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBudgetLastYearLabel()
        {
            return "Budget last Year";
        }
        
        /// get display format for column
        public static short GetBudgetLastYearLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetThisYearDBName()
        {
            return "a_budget_this_year_n";
        }
        
        /// get help text for column
        public static string GetBudgetThisYearHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBudgetThisYearLabel()
        {
            return "Budget This Year";
        }
        
        /// get display format for column
        public static short GetBudgetThisYearLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetNextYearDBName()
        {
            return "a_budget_next_year_n";
        }
        
        /// get help text for column
        public static string GetBudgetNextYearHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBudgetNextYearLabel()
        {
            return "Budget Next Year";
        }
        
        /// get display format for column
        public static short GetBudgetNextYearLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ABudgetPeriod";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_budget_period";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "a_budget_period";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_budget_sequence_i",
                    "a_period_number_i",
                    "a_budget_base_n",
                    "a_budget_last_year_n",
                    "a_budget_this_year_n",
                    "a_budget_next_year_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetSequence = this.Columns["a_budget_sequence_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnBudgetBase = this.Columns["a_budget_base_n"];
            this.ColumnBudgetLastYear = this.Columns["a_budget_last_year_n"];
            this.ColumnBudgetThisYear = this.Columns["a_budget_this_year_n"];
            this.ColumnBudgetNextYear = this.Columns["a_budget_next_year_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnBudgetSequence,
                    this.ColumnPeriodNumber};
        }
        
        /// get typed set of changes
        public ABudgetPeriodTable GetChangesTyped()
        {
            return ((ABudgetPeriodTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ABudgetPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetPeriodRow ret = ((ABudgetPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ABudgetPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetPeriodRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_last_year_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_this_year_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_next_year_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnBudgetSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBudgetBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBudgetLastYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBudgetThisYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBudgetNextYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// This is the budget data for one period (e.g. a month)
    [Serializable()]
    public class ABudgetPeriodRow : System.Data.DataRow
    {
        
        private ABudgetPeriodTable myTable;
        
        /// Constructor
        public ABudgetPeriodRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ABudgetPeriodTable)(this.Table));
        }
        
        /// 
        public Int32 BudgetSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetSequence) 
                            || (((Int32)(this[this.myTable.ColumnBudgetSequence])) != value)))
                {
                    this[this.myTable.ColumnBudgetSequence] = value;
                }
            }
        }
        
        /// 
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }
        
        /// Budget amount in base currency
        public Double BudgetBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetBase) 
                            || (((Double)(this[this.myTable.ColumnBudgetBase])) != value)))
                {
                    this[this.myTable.ColumnBudgetBase] = value;
                }
            }
        }
        
        /// Will cease to be used once a_budget_base_n is used
        public Double BudgetLastYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetLastYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetLastYear) 
                            || (((Double)(this[this.myTable.ColumnBudgetLastYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetLastYear] = value;
                }
            }
        }
        
        /// Will cease to be used once a_budget_base_n is used
        public Double BudgetThisYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetThisYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetThisYear) 
                            || (((Double)(this[this.myTable.ColumnBudgetThisYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetThisYear] = value;
                }
            }
        }
        
        /// Will cease to be used once a_budget_base_n is used
        public Double BudgetNextYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetNextYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetNextYear) 
                            || (((Double)(this[this.myTable.ColumnBudgetNextYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetNextYear] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnBudgetBase.Ordinal] = 0;
            this[this.myTable.ColumnBudgetLastYear.Ordinal] = 0;
            this[this.myTable.ColumnBudgetThisYear.Ordinal] = 0;
            this[this.myTable.ColumnBudgetNextYear.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBudgetBaseNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetBase);
        }
        
        /// assign NULL value
        public void SetBudgetBaseNull()
        {
            this.SetNull(this.myTable.ColumnBudgetBase);
        }
        
        /// test for NULL value
        public bool IsBudgetLastYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetLastYear);
        }
        
        /// assign NULL value
        public void SetBudgetLastYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetLastYear);
        }
        
        /// test for NULL value
        public bool IsBudgetThisYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetThisYear);
        }
        
        /// assign NULL value
        public void SetBudgetThisYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetThisYear);
        }
        
        /// test for NULL value
        public bool IsBudgetNextYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetNextYear);
        }
        
        /// assign NULL value
        public void SetBudgetNextYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetNextYear);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Information about each financial period in a ledger.
    [Serializable()]
    public class AAccountingPeriodTable : TTypedDataTable
    {
        
        /// The ledger that the period applies to.
        public DataColumn ColumnLedgerNumber;
        
        /// The accounting period number.  Must be &lt;= 20
        public DataColumn ColumnAccountingPeriodNumber;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAccountingPeriodDesc;
        
        /// 
        public DataColumn ColumnPeriodStartDate;
        
        /// 
        public DataColumn ColumnPeriodEndDate;
        
        /// 
        public DataColumn ColumnEffectiveDate;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountingPeriodTable() : 
                base("AAccountingPeriod")
        {
        }
        
        /// constructor
        public AAccountingPeriodTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountingPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountingPeriodRow this[int i]
        {
            get
            {
                return ((AAccountingPeriodRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountingPeriodNumberDBName()
        {
            return "a_accounting_period_number_i";
        }
        
        /// get help text for column
        public static string GetAccountingPeriodNumberHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetAccountingPeriodNumberLabel()
        {
            return "Period Number";
        }
        
        /// get display format for column
        public static short GetAccountingPeriodNumberLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountingPeriodDescDBName()
        {
            return "a_accounting_period_desc_c";
        }
        
        /// get help text for column
        public static string GetAccountingPeriodDescHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetAccountingPeriodDescLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetAccountingPeriodDescLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodStartDateDBName()
        {
            return "a_period_start_date_d";
        }
        
        /// get help text for column
        public static string GetPeriodStartDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPeriodStartDateLabel()
        {
            return "Period Start Date";
        }
        
        /// get display format for column
        public static short GetPeriodStartDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodEndDateDBName()
        {
            return "a_period_end_date_d";
        }
        
        /// get help text for column
        public static string GetPeriodEndDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPeriodEndDateLabel()
        {
            return "Period End Date";
        }
        
        /// get display format for column
        public static short GetPeriodEndDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEffectiveDateDBName()
        {
            return "a_effective_date_d";
        }
        
        /// get help text for column
        public static string GetEffectiveDateHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetEffectiveDateLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetEffectiveDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountingPeriod";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_accounting_period";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Accounting Period";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_accounting_period_number_i",
                    "a_accounting_period_desc_c",
                    "a_period_start_date_d",
                    "a_period_end_date_d",
                    "a_effective_date_d",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountingPeriodNumber = this.Columns["a_accounting_period_number_i"];
            this.ColumnAccountingPeriodDesc = this.Columns["a_accounting_period_desc_c"];
            this.ColumnPeriodStartDate = this.Columns["a_period_start_date_d"];
            this.ColumnPeriodEndDate = this.Columns["a_period_end_date_d"];
            this.ColumnEffectiveDate = this.Columns["a_effective_date_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountingPeriodNumber};
        }
        
        /// get typed set of changes
        public AAccountingPeriodTable GetChangesTyped()
        {
            return ((AAccountingPeriodTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountingPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountingPeriodRow ret = ((AAccountingPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountingPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountingPeriodRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_accounting_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_accounting_period_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_period_start_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_period_end_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_effective_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountingPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountingPeriodDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnPeriodStartDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnPeriodEndDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnEffectiveDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Information about each financial period in a ledger.
    [Serializable()]
    public class AAccountingPeriodRow : System.Data.DataRow
    {
        
        private AAccountingPeriodTable myTable;
        
        /// Constructor
        public AAccountingPeriodRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountingPeriodTable)(this.Table));
        }
        
        /// The ledger that the period applies to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// The accounting period number.  Must be &lt;= 20
        public Int32 AccountingPeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountingPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountingPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnAccountingPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnAccountingPeriodNumber] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String AccountingPeriodDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountingPeriodDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountingPeriodDesc) 
                            || (((String)(this[this.myTable.ColumnAccountingPeriodDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountingPeriodDesc] = value;
                }
            }
        }
        
        /// 
        public System.DateTime PeriodStartDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodStartDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodStartDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnPeriodStartDate])) != value)))
                {
                    this[this.myTable.ColumnPeriodStartDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime PeriodStartDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPeriodStartDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime PeriodStartDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPeriodStartDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public System.DateTime PeriodEndDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodEndDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodEndDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnPeriodEndDate])) != value)))
                {
                    this[this.myTable.ColumnPeriodEndDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime PeriodEndDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPeriodEndDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime PeriodEndDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnPeriodEndDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public System.DateTime EffectiveDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEffectiveDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEffectiveDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnEffectiveDate])) != value)))
                {
                    this[this.myTable.ColumnEffectiveDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime EffectiveDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnEffectiveDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime EffectiveDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnEffectiveDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnAccountingPeriodNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountingPeriodDesc);
            this.SetNull(this.myTable.ColumnPeriodStartDate);
            this.SetNull(this.myTable.ColumnPeriodEndDate);
            this[this.myTable.ColumnEffectiveDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// One record describing the limitations imposed on the accounting system.
    [Serializable()]
    public class AAccountingSystemParameterTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnNumberOfAccountingPeriods;
        
        /// 
        public DataColumn ColumnActualsDataRetention;
        
        /// 
        public DataColumn ColumnBudgetDataRetention;
        
        /// 
        public DataColumn ColumnNumberFwdPostingPeriods;
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// Recipient gift statement text
        public DataColumn ColumnRecipientGiftStatementTxt;
        
        /// Recipient gift statement text 2
        public DataColumn ColumnRecipientGiftStatementTx2;
        
        /// Donor gift statement text
        public DataColumn ColumnDonorGiftStatementTxt;
        
        /// Donor gift statement text 2
        public DataColumn ColumnDonorGiftStatementTx2;
        
        /// Hosa statement text
        public DataColumn ColumnHosaStatementTxt;
        
        /// Hosa (Home Office Statement of Accounts) statement text 2
        public DataColumn ColumnHosaStatementTx2;
        
        /// Hosa statement text 3
        public DataColumn ColumnHosaStatementTx3;
        
        /// Hosa statement text 4
        public DataColumn ColumnHosaStatementTx4;
        
        /// Text for the donor receipt heading.
        public DataColumn ColumnDonorReceiptTxt;
        
        /// Stewardship Report  text
        public DataColumn ColumnStewardshipReportTxt;
        
        /// Stewardship Report  text
        public DataColumn ColumnStewardshipReportTx2;
        
        /// Text for the yearly donor receipt heading.
        public DataColumn ColumnDonorYearlyReceiptTxt;
        
        /// How many years to retain gift data.
        public DataColumn ColumnGiftDataRetention;
        
        /// Text to put on receipt when addressing a deceased donor
        public DataColumn ColumnDeceasedAddressText;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAccountingSystemParameterTable() : 
                base("AAccountingSystemParameter")
        {
        }
        
        /// constructor
        public AAccountingSystemParameterTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAccountingSystemParameterTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAccountingSystemParameterRow this[int i]
        {
            get
            {
                return ((AAccountingSystemParameterRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberOfAccountingPeriodsDBName()
        {
            return "a_number_of_accounting_periods_i";
        }
        
        /// get help text for column
        public static string GetNumberOfAccountingPeriodsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNumberOfAccountingPeriodsLabel()
        {
            return "Number of Accounting Periods";
        }
        
        /// get display format for column
        public static short GetNumberOfAccountingPeriodsLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActualsDataRetentionDBName()
        {
            return "a_actuals_data_retention_i";
        }
        
        /// get help text for column
        public static string GetActualsDataRetentionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetActualsDataRetentionLabel()
        {
            return "Actuals Data Retention Period";
        }
        
        /// get display format for column
        public static short GetActualsDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetDataRetentionDBName()
        {
            return "a_budget_data_retention_i";
        }
        
        /// get help text for column
        public static string GetBudgetDataRetentionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBudgetDataRetentionLabel()
        {
            return "Budget Data Retention Period";
        }
        
        /// get display format for column
        public static short GetBudgetDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberFwdPostingPeriodsDBName()
        {
            return "a_number_fwd_posting_periods_i";
        }
        
        /// get help text for column
        public static string GetNumberFwdPostingPeriodsHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNumberFwdPostingPeriodsLabel()
        {
            return "Number Fwd Posting Periods";
        }
        
        /// get display format for column
        public static short GetNumberFwdPostingPeriodsLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecipientGiftStatementTxtDBName()
        {
            return "a_recipient_gift_statement_txt_c";
        }
        
        /// get help text for column
        public static string GetRecipientGiftStatementTxtHelp()
        {
            return "Enter the text for the Recipient Gift Statement header.";
        }
        
        /// get label of column
        public static string GetRecipientGiftStatementTxtLabel()
        {
            return "Recipient gift statement text";
        }
        
        /// get character length for column
        public static short GetRecipientGiftStatementTxtLength()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecipientGiftStatementTx2DBName()
        {
            return "a_recipient_gift_statement_tx2_c";
        }
        
        /// get help text for column
        public static string GetRecipientGiftStatementTx2Help()
        {
            return "Enter the second line of recipient Gift Statement text";
        }
        
        /// get label of column
        public static string GetRecipientGiftStatementTx2Label()
        {
            return "Recipient gift statement text 2";
        }
        
        /// get character length for column
        public static short GetRecipientGiftStatementTx2Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDonorGiftStatementTxtDBName()
        {
            return "a_donor_gift_statement_txt_c";
        }
        
        /// get help text for column
        public static string GetDonorGiftStatementTxtHelp()
        {
            return "Enter the text for the Donor gift statement header";
        }
        
        /// get label of column
        public static string GetDonorGiftStatementTxtLabel()
        {
            return "Donor gift statement text";
        }
        
        /// get character length for column
        public static short GetDonorGiftStatementTxtLength()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDonorGiftStatementTx2DBName()
        {
            return "a_donor_gift_statement_tx2_c";
        }
        
        /// get help text for column
        public static string GetDonorGiftStatementTx2Help()
        {
            return "Enter the second line of the donor gift statement text";
        }
        
        /// get label of column
        public static string GetDonorGiftStatementTx2Label()
        {
            return "Donor gift statement text 2";
        }
        
        /// get character length for column
        public static short GetDonorGiftStatementTx2Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHosaStatementTxtDBName()
        {
            return "a_hosa_statement_txt_c";
        }
        
        /// get help text for column
        public static string GetHosaStatementTxtHelp()
        {
            return "Enter the text for the Hosa statement";
        }
        
        /// get label of column
        public static string GetHosaStatementTxtLabel()
        {
            return "Hosa statement text";
        }
        
        /// get character length for column
        public static short GetHosaStatementTxtLength()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx2DBName()
        {
            return "a_hosa_statement_tx2_c";
        }
        
        /// get help text for column
        public static string GetHosaStatementTx2Help()
        {
            return "Enter the second line of the Hosa statement text";
        }
        
        /// get label of column
        public static string GetHosaStatementTx2Label()
        {
            return "Hosa statement text 2";
        }
        
        /// get character length for column
        public static short GetHosaStatementTx2Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx3DBName()
        {
            return "a_hosa_statement_tx3_c";
        }
        
        /// get help text for column
        public static string GetHosaStatementTx3Help()
        {
            return "Enter the third line of the Hosa statement text";
        }
        
        /// get label of column
        public static string GetHosaStatementTx3Label()
        {
            return "Hosa statement text 3";
        }
        
        /// get character length for column
        public static short GetHosaStatementTx3Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx4DBName()
        {
            return "a_hosa_statement_tx4_c";
        }
        
        /// get help text for column
        public static string GetHosaStatementTx4Help()
        {
            return "Enter the fourth line of the Hosa statement text";
        }
        
        /// get label of column
        public static string GetHosaStatementTx4Label()
        {
            return "Hosa statement text 4";
        }
        
        /// get character length for column
        public static short GetHosaStatementTx4Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDonorReceiptTxtDBName()
        {
            return "a_donor_receipt_txt_c";
        }
        
        /// get help text for column
        public static string GetDonorReceiptTxtHelp()
        {
            return "Enter text for the donor receipt heading.";
        }
        
        /// get label of column
        public static string GetDonorReceiptTxtLabel()
        {
            return "Text for the donor receipt heading.";
        }
        
        /// get character length for column
        public static short GetDonorReceiptTxtLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStewardshipReportTxtDBName()
        {
            return "a_stewardship_report_txt_c";
        }
        
        /// get help text for column
        public static string GetStewardshipReportTxtHelp()
        {
            return "Enter the text for the Stewardship Report";
        }
        
        /// get label of column
        public static string GetStewardshipReportTxtLabel()
        {
            return "Stewardship Report text";
        }
        
        /// get character length for column
        public static short GetStewardshipReportTxtLength()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStewardshipReportTx2DBName()
        {
            return "a_stewardship_report_tx2_c";
        }
        
        /// get help text for column
        public static string GetStewardshipReportTx2Help()
        {
            return "Enter the text for the Stewardship Report";
        }
        
        /// get label of column
        public static string GetStewardshipReportTx2Label()
        {
            return "Stewardship Report text, line 2";
        }
        
        /// get character length for column
        public static short GetStewardshipReportTx2Length()
        {
            return 132;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDonorYearlyReceiptTxtDBName()
        {
            return "a_donor_yearly_receipt_txt_c";
        }
        
        /// get help text for column
        public static string GetDonorYearlyReceiptTxtHelp()
        {
            return "Enter text for the yearly donor receipt.";
        }
        
        /// get label of column
        public static string GetDonorYearlyReceiptTxtLabel()
        {
            return "Text for the yearly donor receipt heading.";
        }
        
        /// get character length for column
        public static short GetDonorYearlyReceiptTxtLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftDataRetentionDBName()
        {
            return "a_gift_data_retention_i";
        }
        
        /// get help text for column
        public static string GetGiftDataRetentionHelp()
        {
            return "Enter how many years to retain gift data.";
        }
        
        /// get label of column
        public static string GetGiftDataRetentionLabel()
        {
            return "Gift Data Retention";
        }
        
        /// get display format for column
        public static short GetGiftDataRetentionLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeceasedAddressTextDBName()
        {
            return "a_deceased_address_text_c";
        }
        
        /// get help text for column
        public static string GetDeceasedAddressTextHelp()
        {
            return "Text to put on receipt when addressing a deceased donor";
        }
        
        /// get label of column
        public static string GetDeceasedAddressTextLabel()
        {
            return "a_deceased_address_text_c";
        }
        
        /// get character length for column
        public static short GetDeceasedAddressTextLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAccountingSystemParameter";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_accounting_system_parameter";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Accounting System Parameter";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_number_of_accounting_periods_i",
                    "a_actuals_data_retention_i",
                    "a_budget_data_retention_i",
                    "a_number_fwd_posting_periods_i",
                    "a_ledger_number_i",
                    "a_recipient_gift_statement_txt_c",
                    "a_recipient_gift_statement_tx2_c",
                    "a_donor_gift_statement_txt_c",
                    "a_donor_gift_statement_tx2_c",
                    "a_hosa_statement_txt_c",
                    "a_hosa_statement_tx2_c",
                    "a_hosa_statement_tx3_c",
                    "a_hosa_statement_tx4_c",
                    "a_donor_receipt_txt_c",
                    "a_stewardship_report_txt_c",
                    "a_stewardship_report_tx2_c",
                    "a_donor_yearly_receipt_txt_c",
                    "a_gift_data_retention_i",
                    "a_deceased_address_text_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnNumberOfAccountingPeriods = this.Columns["a_number_of_accounting_periods_i"];
            this.ColumnActualsDataRetention = this.Columns["a_actuals_data_retention_i"];
            this.ColumnBudgetDataRetention = this.Columns["a_budget_data_retention_i"];
            this.ColumnNumberFwdPostingPeriods = this.Columns["a_number_fwd_posting_periods_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnRecipientGiftStatementTxt = this.Columns["a_recipient_gift_statement_txt_c"];
            this.ColumnRecipientGiftStatementTx2 = this.Columns["a_recipient_gift_statement_tx2_c"];
            this.ColumnDonorGiftStatementTxt = this.Columns["a_donor_gift_statement_txt_c"];
            this.ColumnDonorGiftStatementTx2 = this.Columns["a_donor_gift_statement_tx2_c"];
            this.ColumnHosaStatementTxt = this.Columns["a_hosa_statement_txt_c"];
            this.ColumnHosaStatementTx2 = this.Columns["a_hosa_statement_tx2_c"];
            this.ColumnHosaStatementTx3 = this.Columns["a_hosa_statement_tx3_c"];
            this.ColumnHosaStatementTx4 = this.Columns["a_hosa_statement_tx4_c"];
            this.ColumnDonorReceiptTxt = this.Columns["a_donor_receipt_txt_c"];
            this.ColumnStewardshipReportTxt = this.Columns["a_stewardship_report_txt_c"];
            this.ColumnStewardshipReportTx2 = this.Columns["a_stewardship_report_tx2_c"];
            this.ColumnDonorYearlyReceiptTxt = this.Columns["a_donor_yearly_receipt_txt_c"];
            this.ColumnGiftDataRetention = this.Columns["a_gift_data_retention_i"];
            this.ColumnDeceasedAddressText = this.Columns["a_deceased_address_text_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber};
        }
        
        /// get typed set of changes
        public AAccountingSystemParameterTable GetChangesTyped()
        {
            return ((AAccountingSystemParameterTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAccountingSystemParameterRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountingSystemParameterRow ret = ((AAccountingSystemParameterRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAccountingSystemParameterRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountingSystemParameterRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_number_of_accounting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actuals_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_fwd_posting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_gift_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_gift_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_gift_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_gift_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_receipt_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stewardship_report_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stewardship_report_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_yearly_receipt_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_deceased_address_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnNumberOfAccountingPeriods))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnActualsDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBudgetDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnNumberFwdPostingPeriods))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRecipientGiftStatementTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnRecipientGiftStatementTx2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnDonorGiftStatementTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnDonorGiftStatementTx2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnHosaStatementTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnHosaStatementTx2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnHosaStatementTx3))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnHosaStatementTx4))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnDonorReceiptTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnStewardshipReportTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnStewardshipReportTx2))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 264);
            }
            if ((ACol == ColumnDonorYearlyReceiptTxt))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnGiftDataRetention))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDeceasedAddressText))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// One record describing the limitations imposed on the accounting system.
    [Serializable()]
    public class AAccountingSystemParameterRow : System.Data.DataRow
    {
        
        private AAccountingSystemParameterTable myTable;
        
        /// Constructor
        public AAccountingSystemParameterRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAccountingSystemParameterTable)(this.Table));
        }
        
        /// 
        public Int32 NumberOfAccountingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods) 
                            || (((Int32)(this[this.myTable.ColumnNumberOfAccountingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberOfAccountingPeriods] = value;
                }
            }
        }
        
        /// 
        public Int32 ActualsDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualsDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualsDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnActualsDataRetention])) != value)))
                {
                    this[this.myTable.ColumnActualsDataRetention] = value;
                }
            }
        }
        
        /// 
        public Int32 BudgetDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnBudgetDataRetention])) != value)))
                {
                    this[this.myTable.ColumnBudgetDataRetention] = value;
                }
            }
        }
        
        /// 
        public Int32 NumberFwdPostingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods) 
                            || (((Int32)(this[this.myTable.ColumnNumberFwdPostingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberFwdPostingPeriods] = value;
                }
            }
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Recipient gift statement text
        public String RecipientGiftStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientGiftStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientGiftStatementTxt) 
                            || (((String)(this[this.myTable.ColumnRecipientGiftStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnRecipientGiftStatementTxt] = value;
                }
            }
        }
        
        /// Recipient gift statement text 2
        public String RecipientGiftStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientGiftStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientGiftStatementTx2) 
                            || (((String)(this[this.myTable.ColumnRecipientGiftStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnRecipientGiftStatementTx2] = value;
                }
            }
        }
        
        /// Donor gift statement text
        public String DonorGiftStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorGiftStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorGiftStatementTxt) 
                            || (((String)(this[this.myTable.ColumnDonorGiftStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorGiftStatementTxt] = value;
                }
            }
        }
        
        /// Donor gift statement text 2
        public String DonorGiftStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorGiftStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorGiftStatementTx2) 
                            || (((String)(this[this.myTable.ColumnDonorGiftStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnDonorGiftStatementTx2] = value;
                }
            }
        }
        
        /// Hosa statement text
        public String HosaStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTxt) 
                            || (((String)(this[this.myTable.ColumnHosaStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTxt] = value;
                }
            }
        }
        
        /// Hosa (Home Office Statement of Accounts) statement text 2
        public String HosaStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx2) 
                            || (((String)(this[this.myTable.ColumnHosaStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx2] = value;
                }
            }
        }
        
        /// Hosa statement text 3
        public String HosaStatementTx3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx3) 
                            || (((String)(this[this.myTable.ColumnHosaStatementTx3])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx3] = value;
                }
            }
        }
        
        /// Hosa statement text 4
        public String HosaStatementTx4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx4) 
                            || (((String)(this[this.myTable.ColumnHosaStatementTx4])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx4] = value;
                }
            }
        }
        
        /// Text for the donor receipt heading.
        public String DonorReceiptTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorReceiptTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorReceiptTxt) 
                            || (((String)(this[this.myTable.ColumnDonorReceiptTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorReceiptTxt] = value;
                }
            }
        }
        
        /// Stewardship Report  text
        public String StewardshipReportTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStewardshipReportTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStewardshipReportTxt) 
                            || (((String)(this[this.myTable.ColumnStewardshipReportTxt])) != value)))
                {
                    this[this.myTable.ColumnStewardshipReportTxt] = value;
                }
            }
        }
        
        /// Stewardship Report  text
        public String StewardshipReportTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStewardshipReportTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStewardshipReportTx2) 
                            || (((String)(this[this.myTable.ColumnStewardshipReportTx2])) != value)))
                {
                    this[this.myTable.ColumnStewardshipReportTx2] = value;
                }
            }
        }
        
        /// Text for the yearly donor receipt heading.
        public String DonorYearlyReceiptTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorYearlyReceiptTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorYearlyReceiptTxt) 
                            || (((String)(this[this.myTable.ColumnDonorYearlyReceiptTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorYearlyReceiptTxt] = value;
                }
            }
        }
        
        /// How many years to retain gift data.
        public Int32 GiftDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftDataRetention) 
                            || (((Int32)(this[this.myTable.ColumnGiftDataRetention])) != value)))
                {
                    this[this.myTable.ColumnGiftDataRetention] = value;
                }
            }
        }
        
        /// Text to put on receipt when addressing a deceased donor
        public String DeceasedAddressText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeceasedAddressText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeceasedAddressText) 
                            || (((String)(this[this.myTable.ColumnDeceasedAddressText])) != value)))
                {
                    this[this.myTable.ColumnDeceasedAddressText] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnActualsDataRetention.Ordinal] = 0;
            this[this.myTable.ColumnBudgetDataRetention.Ordinal] = 0;
            this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTxt);
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTx2);
            this.SetNull(this.myTable.ColumnDonorGiftStatementTxt);
            this.SetNull(this.myTable.ColumnDonorGiftStatementTx2);
            this.SetNull(this.myTable.ColumnHosaStatementTxt);
            this.SetNull(this.myTable.ColumnHosaStatementTx2);
            this.SetNull(this.myTable.ColumnHosaStatementTx3);
            this.SetNull(this.myTable.ColumnHosaStatementTx4);
            this.SetNull(this.myTable.ColumnDonorReceiptTxt);
            this.SetNull(this.myTable.ColumnStewardshipReportTxt);
            this.SetNull(this.myTable.ColumnStewardshipReportTx2);
            this.SetNull(this.myTable.ColumnDonorYearlyReceiptTxt);
            this[this.myTable.ColumnGiftDataRetention.Ordinal] = 2;
            this.SetNull(this.myTable.ColumnDeceasedAddressText);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsNumberOfAccountingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }
        
        /// assign NULL value
        public void SetNumberOfAccountingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }
        
        /// test for NULL value
        public bool IsActualsDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnActualsDataRetention);
        }
        
        /// assign NULL value
        public void SetActualsDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnActualsDataRetention);
        }
        
        /// test for NULL value
        public bool IsBudgetDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetDataRetention);
        }
        
        /// assign NULL value
        public void SetBudgetDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnBudgetDataRetention);
        }
        
        /// test for NULL value
        public bool IsNumberFwdPostingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }
        
        /// assign NULL value
        public void SetNumberFwdPostingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }
        
        /// test for NULL value
        public bool IsRecipientGiftStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientGiftStatementTxt);
        }
        
        /// assign NULL value
        public void SetRecipientGiftStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTxt);
        }
        
        /// test for NULL value
        public bool IsRecipientGiftStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnRecipientGiftStatementTx2);
        }
        
        /// assign NULL value
        public void SetRecipientGiftStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTx2);
        }
        
        /// test for NULL value
        public bool IsDonorGiftStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorGiftStatementTxt);
        }
        
        /// assign NULL value
        public void SetDonorGiftStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorGiftStatementTxt);
        }
        
        /// test for NULL value
        public bool IsDonorGiftStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnDonorGiftStatementTx2);
        }
        
        /// assign NULL value
        public void SetDonorGiftStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnDonorGiftStatementTx2);
        }
        
        /// test for NULL value
        public bool IsHosaStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTxt);
        }
        
        /// assign NULL value
        public void SetHosaStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTxt);
        }
        
        /// test for NULL value
        public bool IsHosaStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx2);
        }
        
        /// assign NULL value
        public void SetHosaStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx2);
        }
        
        /// test for NULL value
        public bool IsHosaStatementTx3Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx3);
        }
        
        /// assign NULL value
        public void SetHosaStatementTx3Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx3);
        }
        
        /// test for NULL value
        public bool IsHosaStatementTx4Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx4);
        }
        
        /// assign NULL value
        public void SetHosaStatementTx4Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx4);
        }
        
        /// test for NULL value
        public bool IsDonorReceiptTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorReceiptTxt);
        }
        
        /// assign NULL value
        public void SetDonorReceiptTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorReceiptTxt);
        }
        
        /// test for NULL value
        public bool IsStewardshipReportTxtNull()
        {
            return this.IsNull(this.myTable.ColumnStewardshipReportTxt);
        }
        
        /// assign NULL value
        public void SetStewardshipReportTxtNull()
        {
            this.SetNull(this.myTable.ColumnStewardshipReportTxt);
        }
        
        /// test for NULL value
        public bool IsStewardshipReportTx2Null()
        {
            return this.IsNull(this.myTable.ColumnStewardshipReportTx2);
        }
        
        /// assign NULL value
        public void SetStewardshipReportTx2Null()
        {
            this.SetNull(this.myTable.ColumnStewardshipReportTx2);
        }
        
        /// test for NULL value
        public bool IsDonorYearlyReceiptTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorYearlyReceiptTxt);
        }
        
        /// assign NULL value
        public void SetDonorYearlyReceiptTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorYearlyReceiptTxt);
        }
        
        /// test for NULL value
        public bool IsGiftDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnGiftDataRetention);
        }
        
        /// assign NULL value
        public void SetGiftDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnGiftDataRetention);
        }
        
        /// test for NULL value
        public bool IsDeceasedAddressTextNull()
        {
            return this.IsNull(this.myTable.ColumnDeceasedAddressText);
        }
        
        /// assign NULL value
        public void SetDeceasedAddressTextNull()
        {
            this.SetNull(this.myTable.ColumnDeceasedAddressText);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// List of tables in the financial system, meant to be used with analysis attributes. Not available.
    [Serializable()]
    public class AAnalysisStoreTableTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnStoreName;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAnalysisStoreTableTable() : 
                base("AAnalysisStoreTable")
        {
        }
        
        /// constructor
        public AAnalysisStoreTableTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAnalysisStoreTableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAnalysisStoreTableRow this[int i]
        {
            get
            {
                return ((AAnalysisStoreTableRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetStoreNameDBName()
        {
            return "a_store_name_c";
        }
        
        /// get help text for column
        public static string GetStoreNameHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStoreNameLabel()
        {
            return "Store Name";
        }
        
        /// get character length for column
        public static short GetStoreNameLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAnalysisStoreTable";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_analysis_store_table";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Analysis Store Table";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_store_name_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStoreName = this.Columns["a_store_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnStoreName};
        }
        
        /// get typed set of changes
        public AAnalysisStoreTableTable GetChangesTyped()
        {
            return ((AAnalysisStoreTableTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAnalysisStoreTableRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisStoreTableRow ret = ((AAnalysisStoreTableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAnalysisStoreTableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisStoreTableRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_store_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnStoreName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// List of tables in the financial system, meant to be used with analysis attributes. Not available.
    [Serializable()]
    public class AAnalysisStoreTableRow : System.Data.DataRow
    {
        
        private AAnalysisStoreTableTable myTable;
        
        /// Constructor
        public AAnalysisStoreTableRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAnalysisStoreTableTable)(this.Table));
        }
        
        /// 
        public String StoreName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStoreName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStoreName) 
                            || (((String)(this[this.myTable.ColumnStoreName])) != value)))
                {
                    this[this.myTable.ColumnStoreName] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStoreName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Types of analysis attributes.
    [Serializable()]
    public class AAnalysisTypeTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAnalysisTypeDescription;
        
        /// Shows what type of analysis attribute it is
        public DataColumn ColumnAnalysisMode;
        
        /// 
        public DataColumn ColumnAnalysisStore;
        
        /// The name of the field within a table which will be used as the analysis attribute
        public DataColumn ColumnAnalysisElement;
        
        /// To indicate whether the user or system has set up the analysis type.
        public DataColumn ColumnSystemAnalysisType;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAnalysisTypeTable() : 
                base("AAnalysisType")
        {
        }
        
        /// constructor
        public AAnalysisTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAnalysisTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAnalysisTypeRow this[int i]
        {
            get
            {
                return ((AAnalysisTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeDescriptionDBName()
        {
            return "a_analysis_type_description_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetAnalysisTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeDescriptionLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisModeDBName()
        {
            return "a_analysis_mode_l";
        }
        
        /// get help text for column
        public static string GetAnalysisModeHelp()
        {
            return "Shows what type of analysis attribute it is";
        }
        
        /// get label of column
        public static string GetAnalysisModeLabel()
        {
            return "Mode";
        }
        
        /// get display format for column
        public static short GetAnalysisModeLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisStoreDBName()
        {
            return "a_analysis_store_c";
        }
        
        /// get help text for column
        public static string GetAnalysisStoreHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisStoreLabel()
        {
            return "Analysis Store";
        }
        
        /// get character length for column
        public static short GetAnalysisStoreLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisElementDBName()
        {
            return "a_analysis_element_c";
        }
        
        /// get help text for column
        public static string GetAnalysisElementHelp()
        {
            return "The name of the field within a table which will be used as the analysis attribute" +
                "";
        }
        
        /// get label of column
        public static string GetAnalysisElementLabel()
        {
            return "Analysis Element";
        }
        
        /// get character length for column
        public static short GetAnalysisElementLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemAnalysisTypeDBName()
        {
            return "a_system_analysis_type_l";
        }
        
        /// get help text for column
        public static string GetSystemAnalysisTypeHelp()
        {
            return "To indicate whether the user or system has set up the analysis type.";
        }
        
        /// get label of column
        public static string GetSystemAnalysisTypeLabel()
        {
            return "System Analysis Type";
        }
        
        /// get display format for column
        public static short GetSystemAnalysisTypeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAnalysisType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_analysis_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Analysis Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_analysis_type_code_c",
                    "a_analysis_type_description_c",
                    "a_analysis_mode_l",
                    "a_analysis_store_c",
                    "a_analysis_element_c",
                    "a_system_analysis_type_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisTypeDescription = this.Columns["a_analysis_type_description_c"];
            this.ColumnAnalysisMode = this.Columns["a_analysis_mode_l"];
            this.ColumnAnalysisStore = this.Columns["a_analysis_store_c"];
            this.ColumnAnalysisElement = this.Columns["a_analysis_element_c"];
            this.ColumnSystemAnalysisType = this.Columns["a_system_analysis_type_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public AAnalysisTypeTable GetChangesTyped()
        {
            return ((AAnalysisTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAnalysisTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisTypeRow ret = ((AAnalysisTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAnalysisTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_mode_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_store_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_element_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_analysis_type_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnAnalysisMode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAnalysisStore))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnAnalysisElement))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnSystemAnalysisType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Types of analysis attributes.
    [Serializable()]
    public class AAnalysisTypeRow : System.Data.DataRow
    {
        
        private AAnalysisTypeTable myTable;
        
        /// Constructor
        public AAnalysisTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAnalysisTypeTable)(this.Table));
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String AnalysisTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeDescription) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeDescription] = value;
                }
            }
        }
        
        /// Shows what type of analysis attribute it is
        public Boolean AnalysisMode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisMode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisMode) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisMode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisMode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisStore
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisStore.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisStore) 
                            || (((String)(this[this.myTable.ColumnAnalysisStore])) != value)))
                {
                    this[this.myTable.ColumnAnalysisStore] = value;
                }
            }
        }
        
        /// The name of the field within a table which will be used as the analysis attribute
        public String AnalysisElement
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisElement.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisElement) 
                            || (((String)(this[this.myTable.ColumnAnalysisElement])) != value)))
                {
                    this[this.myTable.ColumnAnalysisElement] = value;
                }
            }
        }
        
        /// To indicate whether the user or system has set up the analysis type.
        public Boolean SystemAnalysisType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAnalysisType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAnalysisType) 
                            || (((Boolean)(this[this.myTable.ColumnSystemAnalysisType])) != value)))
                {
                    this[this.myTable.ColumnSystemAnalysisType] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeDescription);
            this[this.myTable.ColumnAnalysisMode.Ordinal] = true;
            this.SetNull(this.myTable.ColumnAnalysisStore);
            this.SetNull(this.myTable.ColumnAnalysisElement);
            this[this.myTable.ColumnSystemAnalysisType.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsAnalysisStoreNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisStore);
        }
        
        /// assign NULL value
        public void SetAnalysisStoreNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisStore);
        }
        
        /// test for NULL value
        public bool IsAnalysisElementNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisElement);
        }
        
        /// assign NULL value
        public void SetAnalysisElementNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisElement);
        }
        
        /// test for NULL value
        public bool IsSystemAnalysisTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAnalysisType);
        }
        
        /// assign NULL value
        public void SetSystemAnalysisTypeNull()
        {
            this.SetNull(this.myTable.ColumnSystemAnalysisType);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Indicates which accounts use analysis attributes and what attribute types may be used with the account.   Analysis attributes are user-definable extra information to be stored against an account.
    [Serializable()]
    public class AAnalysisAttributeTable : TTypedDataTable
    {
        
        /// The number of the ledger in which the analysis attribute is used.
        public DataColumn ColumnLedgerNumber;
        
        /// A code indicating the type of analysis.  Valid analysis types are stored in the a_analysis_type table.
        public DataColumn ColumnAnalysisTypeCode;
        
        /// This identifies the account the financial transaction analysis information must be stored against.
        public DataColumn ColumnAccountCode;
        
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        
        /// Analysis attributes cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public DataColumn ColumnActive;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AAnalysisAttributeTable() : 
                base("AAnalysisAttribute")
        {
        }
        
        /// constructor
        public AAnalysisAttributeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AAnalysisAttributeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AAnalysisAttributeRow this[int i]
        {
            get
            {
                return ((AAnalysisAttributeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "Select the type of analysis for the account.";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Select an account code to set up analysis on.";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Select if analysis attribute can be used";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "Active";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AAnalysisAttribute";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_analysis_attribute";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Analysis Attribute";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    2,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_analysis_type_code_c",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_active_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAccountCode,
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public AAnalysisAttributeTable GetChangesTyped()
        {
            return ((AAnalysisAttributeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AAnalysisAttributeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisAttributeRow ret = ((AAnalysisAttributeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AAnalysisAttributeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisAttributeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Indicates which accounts use analysis attributes and what attribute types may be used with the account.   Analysis attributes are user-definable extra information to be stored against an account.
    [Serializable()]
    public class AAnalysisAttributeRow : System.Data.DataRow
    {
        
        private AAnalysisAttributeTable myTable;
        
        /// Constructor
        public AAnalysisAttributeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AAnalysisAttributeTable)(this.Table));
        }
        
        /// The number of the ledger in which the analysis attribute is used.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// A code indicating the type of analysis.  Valid analysis types are stored in the a_analysis_type table.
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction analysis information must be stored against.
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// Analysis attributes cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Hold (monthly) corporate rates.
    [Serializable()]
    public class ACorporateExchangeRateTable : TTypedDataTable
    {
        
        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        
        /// System generated time stamp.
        public DataColumn ColumnTimeEffectiveFrom;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ACorporateExchangeRateTable() : 
                base("ACorporateExchangeRate")
        {
        }
        
        /// constructor
        public ACorporateExchangeRateTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ACorporateExchangeRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ACorporateExchangeRateRow this[int i]
        {
            get
            {
                return ((ACorporateExchangeRateRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }
        
        /// get help text for column
        public static string GetFromCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetFromCurrencyCodeLabel()
        {
            return "From Currency Code";
        }
        
        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }
        
        /// get help text for column
        public static string GetToCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetToCurrencyCodeLabel()
        {
            return "To Currency Code";
        }
        
        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }
        
        /// get help text for column
        public static string GetRateOfExchangeHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetRateOfExchangeLabel()
        {
            return "Rate of exchange";
        }
        
        /// get display format for column
        public static short GetRateOfExchangeLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveFromHelp()
        {
            return "Enter the date which the rate becomes effective";
        }
        
        /// get label of column
        public static string GetDateEffectiveFromLabel()
        {
            return "Date Effective From";
        }
        
        /// get display format for column
        public static short GetDateEffectiveFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }
        
        /// get help text for column
        public static string GetTimeEffectiveFromHelp()
        {
            return "System generated time stamp.";
        }
        
        /// get label of column
        public static string GetTimeEffectiveFromLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetTimeEffectiveFromLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ACorporateExchangeRate";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_corporate_exchange_rate";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Corporate Exchange Rate";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_from_currency_code_c",
                    "a_to_currency_code_c",
                    "a_rate_of_exchange_n",
                    "a_date_effective_from_d",
                    "a_time_effective_from_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFromCurrencyCode,
                    this.ColumnToCurrencyCode,
                    this.ColumnDateEffectiveFrom};
        }
        
        /// get typed set of changes
        public ACorporateExchangeRateTable GetChangesTyped()
        {
            return ((ACorporateExchangeRateTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ACorporateExchangeRateRow NewRowTyped(bool AWithDefaultValues)
        {
            ACorporateExchangeRateRow ret = ((ACorporateExchangeRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ACorporateExchangeRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACorporateExchangeRateRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFromCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnRateOfExchange))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTimeEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Hold (monthly) corporate rates.
    [Serializable()]
    public class ACorporateExchangeRateRow : System.Data.DataRow
    {
        
        private ACorporateExchangeRateTable myTable;
        
        /// Constructor
        public ACorporateExchangeRateRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ACorporateExchangeRateTable)(this.Table));
        }
        
        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }
        
        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange) 
                            || (((Double)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }
        
        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// System generated time stamp.
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom) 
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Ad hoc exchange rates.
    [Serializable()]
    public class ADailyExchangeRateTable : TTypedDataTable
    {
        
        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        
        /// The date and time
        public DataColumn ColumnTimeEffectiveFrom;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ADailyExchangeRateTable() : 
                base("ADailyExchangeRate")
        {
        }
        
        /// constructor
        public ADailyExchangeRateTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ADailyExchangeRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ADailyExchangeRateRow this[int i]
        {
            get
            {
                return ((ADailyExchangeRateRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }
        
        /// get help text for column
        public static string GetFromCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetFromCurrencyCodeLabel()
        {
            return "From Currency Code";
        }
        
        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }
        
        /// get help text for column
        public static string GetToCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetToCurrencyCodeLabel()
        {
            return "To Currency Code";
        }
        
        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }
        
        /// get help text for column
        public static string GetRateOfExchangeHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetRateOfExchangeLabel()
        {
            return "Rate of exchange";
        }
        
        /// get display format for column
        public static short GetRateOfExchangeLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveFromHelp()
        {
            return "Enter the date which the rate becomes effective";
        }
        
        /// get label of column
        public static string GetDateEffectiveFromLabel()
        {
            return "Date Effective From";
        }
        
        /// get display format for column
        public static short GetDateEffectiveFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }
        
        /// get help text for column
        public static string GetTimeEffectiveFromHelp()
        {
            return "The date and time";
        }
        
        /// get label of column
        public static string GetTimeEffectiveFromLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetTimeEffectiveFromLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ADailyExchangeRate";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_daily_exchange_rate";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Daily Exchange Rate";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    3,
                    4};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_from_currency_code_c",
                    "a_to_currency_code_c",
                    "a_rate_of_exchange_n",
                    "a_date_effective_from_d",
                    "a_time_effective_from_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFromCurrencyCode,
                    this.ColumnToCurrencyCode,
                    this.ColumnDateEffectiveFrom,
                    this.ColumnTimeEffectiveFrom};
        }
        
        /// get typed set of changes
        public ADailyExchangeRateTable GetChangesTyped()
        {
            return ((ADailyExchangeRateTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ADailyExchangeRateRow NewRowTyped(bool AWithDefaultValues)
        {
            ADailyExchangeRateRow ret = ((ADailyExchangeRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ADailyExchangeRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ADailyExchangeRateRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFromCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnRateOfExchange))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTimeEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Ad hoc exchange rates.
    [Serializable()]
    public class ADailyExchangeRateRow : System.Data.DataRow
    {
        
        private ADailyExchangeRateTable myTable;
        
        /// Constructor
        public ADailyExchangeRateRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ADailyExchangeRateTable)(this.Table));
        }
        
        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }
        
        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange) 
                            || (((Double)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }
        
        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// The date and time
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom) 
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// email addresses of our organisation
    [Serializable()]
    public class PEmailTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnEmailAddress;
        
        /// 
        public DataColumn ColumnDescription;
        
        /// 
        public DataColumn ColumnValid;
        
        /// This defines if the email code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public DataColumn ColumnDeletable;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public PEmailTable() : 
                base("PEmail")
        {
        }
        
        /// constructor
        public PEmailTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public PEmailTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public PEmailRow this[int i]
        {
            get
            {
                return ((PEmailRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }
        
        /// get help text for column
        public static string GetEmailAddressHelp()
        {
            return "Enter any valid email address";
        }
        
        /// get label of column
        public static string GetEmailAddressLabel()
        {
            return "Email Address";
        }
        
        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }
        
        /// get help text for column
        public static string GetDescriptionHelp()
        {
            return "Enter the full description of this email address";
        }
        
        /// get label of column
        public static string GetDescriptionLabel()
        {
            return "Email Address Description";
        }
        
        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetValidDBName()
        {
            return "p_valid_l";
        }
        
        /// get help text for column
        public static string GetValidHelp()
        {
            return "Select if address can be selected by users";
        }
        
        /// get label of column
        public static string GetValidLabel()
        {
            return "Valid";
        }
        
        /// get display format for column
        public static short GetValidLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }
        
        /// get help text for column
        public static string GetDeletableHelp()
        {
            return "This code is Required for System operation by other code";
        }
        
        /// get label of column
        public static string GetDeletableLabel()
        {
            return "Deletable";
        }
        
        /// get display format for column
        public static short GetDeletableLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "PEmail";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "p_email";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Email";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "p_email_address_c",
                    "p_description_c",
                    "p_valid_l",
                    "p_deletable_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnValid = this.Columns["p_valid_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnEmailAddress};
        }
        
        /// get typed set of changes
        public PEmailTable GetChangesTyped()
        {
            return ((PEmailTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public PEmailRow NewRowTyped(bool AWithDefaultValues)
        {
            PEmailRow ret = ((PEmailRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public PEmailRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PEmailRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnEmailAddress))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnValid))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDeletable))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// email addresses of our organisation
    [Serializable()]
    public class PEmailRow : System.Data.DataRow
    {
        
        private PEmailTable myTable;
        
        /// Constructor
        public PEmailRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((PEmailTable)(this.Table));
        }
        
        /// 
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress) 
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }
        
        /// 
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription) 
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }
        
        /// 
        public Boolean Valid
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValid.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValid) 
                            || (((Boolean)(this[this.myTable.ColumnValid])) != value)))
                {
                    this[this.myTable.ColumnValid] = value;
                }
            }
        }
        
        /// This defines if the email code can be deleted.
        ///This can only be updated by the system manager.
        ///At the risk of serious operational integrity.
        ///Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable) 
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnEmailAddress.Ordinal] = "first.last@field.om.org";
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnValid.Ordinal] = true;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }
        
        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }
        
        /// test for NULL value
        public bool IsValidNull()
        {
            return this.IsNull(this.myTable.ColumnValid);
        }
        
        /// assign NULL value
        public void SetValidNull()
        {
            this.SetNull(this.myTable.ColumnValid);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Where Petra supports it a cross reference between a file and destination can be established for automatic distribution.
    [Serializable()]
    public class AEmailDestinationTable : TTypedDataTable
    {
        
        /// A code to describe the file which is to be distributed via email.
        public DataColumn ColumnFileCode;
        
        /// If this value matches that in the email program then use the partner kay associated with this value.
        public DataColumn ColumnConditionalValue;
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        
        /// 
        public DataColumn ColumnEmailAddress;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AEmailDestinationTable() : 
                base("AEmailDestination")
        {
        }
        
        /// constructor
        public AEmailDestinationTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AEmailDestinationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AEmailDestinationRow this[int i]
        {
            get
            {
                return ((AEmailDestinationRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFileCodeDBName()
        {
            return "a_file_code_c";
        }
        
        /// get help text for column
        public static string GetFileCodeHelp()
        {
            return "Enter the code for the file you wish to email from the list.";
        }
        
        /// get label of column
        public static string GetFileCodeLabel()
        {
            return "File Code";
        }
        
        /// get character length for column
        public static short GetFileCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetConditionalValueDBName()
        {
            return "a_conditional_value_c";
        }
        
        /// get help text for column
        public static string GetConditionalValueHelp()
        {
            return "Enter the condition value";
        }
        
        /// get label of column
        public static string GetConditionalValueLabel()
        {
            return "Condition Value";
        }
        
        /// get character length for column
        public static short GetConditionalValueLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }
        
        /// get help text for column
        public static string GetPartnerKeyHelp()
        {
            return "Enter the partner key to pick up their email address";
        }
        
        /// get label of column
        public static string GetPartnerKeyLabel()
        {
            return "Partner";
        }
        
        /// get display format for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }
        
        /// get help text for column
        public static string GetEmailAddressHelp()
        {
            return "Enter an Email address.";
        }
        
        /// get label of column
        public static string GetEmailAddressLabel()
        {
            return "Email Address";
        }
        
        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 250;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AEmailDestination";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_email_destination";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Email Destination";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_file_code_c",
                    "a_conditional_value_c",
                    "p_partner_key_n",
                    "p_email_address_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileCode = this.Columns["a_file_code_c"];
            this.ColumnConditionalValue = this.Columns["a_conditional_value_c"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFileCode,
                    this.ColumnConditionalValue,
                    this.ColumnPartnerKey};
        }
        
        /// get typed set of changes
        public AEmailDestinationTable GetChangesTyped()
        {
            return ((AEmailDestinationTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AEmailDestinationRow NewRowTyped(bool AWithDefaultValues)
        {
            AEmailDestinationRow ret = ((AEmailDestinationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AEmailDestinationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEmailDestinationRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_file_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_conditional_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFileCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnConditionalValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnPartnerKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnEmailAddress))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 500);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Where Petra supports it a cross reference between a file and destination can be established for automatic distribution.
    [Serializable()]
    public class AEmailDestinationRow : System.Data.DataRow
    {
        
        private AEmailDestinationTable myTable;
        
        /// Constructor
        public AEmailDestinationRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AEmailDestinationTable)(this.Table));
        }
        
        /// A code to describe the file which is to be distributed via email.
        public String FileCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileCode) 
                            || (((String)(this[this.myTable.ColumnFileCode])) != value)))
                {
                    this[this.myTable.ColumnFileCode] = value;
                }
            }
        }
        
        /// If this value matches that in the email program then use the partner kay associated with this value.
        public String ConditionalValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConditionalValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConditionalValue) 
                            || (((String)(this[this.myTable.ColumnConditionalValue])) != value)))
                {
                    this[this.myTable.ColumnConditionalValue] = value;
                }
            }
        }
        
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey) 
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }
        
        /// 
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress) 
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileCode);
            this.SetNull(this.myTable.ColumnConditionalValue);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnEmailAddress);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsConditionalValueNull()
        {
            return this.IsNull(this.myTable.ColumnConditionalValue);
        }
        
        /// assign NULL value
        public void SetConditionalValueNull()
        {
            this.SetNull(this.myTable.ColumnConditionalValue);
        }
        
        /// test for NULL value
        public bool IsEmailAddressNull()
        {
            return this.IsNull(this.myTable.ColumnEmailAddress);
        }
        
        /// assign NULL value
        public void SetEmailAddressNull()
        {
            this.SetNull(this.myTable.ColumnEmailAddress);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Fees owed to another ledger.
    ///(e.g. admin grant)
    [Serializable()]
    public class AFeesPayableTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// Identifies a specific fee.
        public DataColumn ColumnFeeCode;
        
        /// 
        public DataColumn ColumnChargeOption;
        
        /// 
        public DataColumn ColumnChargePercentage;
        
        /// This is a the max or min amount charged dependent on the charge option.  The value is the number of currency units.
        public DataColumn ColumnChargeAmount;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// explain what this fee is for.
        public DataColumn ColumnFeeDescription;
        
        /// This identifies the account for the DR side of the financial transaction.
        public DataColumn ColumnDrAccountCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFeesPayableTable() : 
                base("AFeesPayable")
        {
        }
        
        /// constructor
        public AFeesPayableTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFeesPayableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFeesPayableRow this[int i]
        {
            get
            {
                return ((AFeesPayableRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFeeCodeDBName()
        {
            return "a_fee_code_c";
        }
        
        /// get help text for column
        public static string GetFeeCodeHelp()
        {
            return "Enter a code for this fee";
        }
        
        /// get label of column
        public static string GetFeeCodeLabel()
        {
            return "Fee Code";
        }
        
        /// get character length for column
        public static short GetFeeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargeOptionDBName()
        {
            return "a_charge_option_c";
        }
        
        /// get help text for column
        public static string GetChargeOptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetChargeOptionLabel()
        {
            return "Charge Option";
        }
        
        /// get character length for column
        public static short GetChargeOptionLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargePercentageDBName()
        {
            return "a_charge_percentage_n";
        }
        
        /// get help text for column
        public static string GetChargePercentageHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetChargePercentageLabel()
        {
            return "Charge Percentage";
        }
        
        /// get display format for column
        public static short GetChargePercentageLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargeAmountDBName()
        {
            return "a_charge_amount_n";
        }
        
        /// get help text for column
        public static string GetChargeAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetChargeAmountLabel()
        {
            return "Charge Amount";
        }
        
        /// get display format for column
        public static short GetChargeAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFeeDescriptionDBName()
        {
            return "a_fee_description_c";
        }
        
        /// get help text for column
        public static string GetFeeDescriptionHelp()
        {
            return "Enter a description for this fee.";
        }
        
        /// get label of column
        public static string GetFeeDescriptionLabel()
        {
            return "Fee Description";
        }
        
        /// get character length for column
        public static short GetFeeDescriptionLength()
        {
            return 24;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDrAccountCodeDBName()
        {
            return "a_dr_account_code_c";
        }
        
        /// get help text for column
        public static string GetDrAccountCodeHelp()
        {
            return "Selecct an expense account code to debit for this fee.";
        }
        
        /// get label of column
        public static string GetDrAccountCodeLabel()
        {
            return "DR Account Code";
        }
        
        /// get character length for column
        public static short GetDrAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFeesPayable";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_fees_payable";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Admin. Grants Payable";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_fee_code_c",
                    "a_charge_option_c",
                    "a_charge_percentage_n",
                    "a_charge_amount_n",
                    "a_cost_centre_code_c",
                    "a_account_code_c",
                    "a_fee_description_c",
                    "a_dr_account_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnFeeCode = this.Columns["a_fee_code_c"];
            this.ColumnChargeOption = this.Columns["a_charge_option_c"];
            this.ColumnChargePercentage = this.Columns["a_charge_percentage_n"];
            this.ColumnChargeAmount = this.Columns["a_charge_amount_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnFeeDescription = this.Columns["a_fee_description_c"];
            this.ColumnDrAccountCode = this.Columns["a_dr_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnFeeCode};
        }
        
        /// get typed set of changes
        public AFeesPayableTable GetChangesTyped()
        {
            return ((AFeesPayableTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFeesPayableRow NewRowTyped(bool AWithDefaultValues)
        {
            AFeesPayableRow ret = ((AFeesPayableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFeesPayableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFeesPayableRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_option_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_percentage_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_dr_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFeeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnChargeOption))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnChargePercentage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 5);
            }
            if ((ACol == ColumnChargeAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFeeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 48);
            }
            if ((ACol == ColumnDrAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Fees owed to another ledger.
    ///(e.g. admin grant)
    [Serializable()]
    public class AFeesPayableRow : System.Data.DataRow
    {
        
        private AFeesPayableTable myTable;
        
        /// Constructor
        public AFeesPayableRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFeesPayableTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Identifies a specific fee.
        public String FeeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeCode) 
                            || (((String)(this[this.myTable.ColumnFeeCode])) != value)))
                {
                    this[this.myTable.ColumnFeeCode] = value;
                }
            }
        }
        
        /// 
        public String ChargeOption
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeOption.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeOption) 
                            || (((String)(this[this.myTable.ColumnChargeOption])) != value)))
                {
                    this[this.myTable.ColumnChargeOption] = value;
                }
            }
        }
        
        /// 
        public Decimal ChargePercentage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargePercentage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargePercentage) 
                            || (((Decimal)(this[this.myTable.ColumnChargePercentage])) != value)))
                {
                    this[this.myTable.ColumnChargePercentage] = value;
                }
            }
        }
        
        /// This is a the max or min amount charged dependent on the charge option.  The value is the number of currency units.
        public Double ChargeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeAmount) 
                            || (((Double)(this[this.myTable.ColumnChargeAmount])) != value)))
                {
                    this[this.myTable.ColumnChargeAmount] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// explain what this fee is for.
        public String FeeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeDescription) 
                            || (((String)(this[this.myTable.ColumnFeeDescription])) != value)))
                {
                    this[this.myTable.ColumnFeeDescription] = value;
                }
            }
        }
        
        /// This identifies the account for the DR side of the financial transaction.
        public String DrAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDrAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDrAccountCode) 
                            || (((String)(this[this.myTable.ColumnDrAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDrAccountCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFeeCode);
            this.SetNull(this.myTable.ColumnChargeOption);
            this[this.myTable.ColumnChargePercentage.Ordinal] = 0;
            this[this.myTable.ColumnChargeAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnFeeDescription);
            this.SetNull(this.myTable.ColumnDrAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsChargePercentageNull()
        {
            return this.IsNull(this.myTable.ColumnChargePercentage);
        }
        
        /// assign NULL value
        public void SetChargePercentageNull()
        {
            this.SetNull(this.myTable.ColumnChargePercentage);
        }
        
        /// test for NULL value
        public bool IsChargeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnChargeAmount);
        }
        
        /// assign NULL value
        public void SetChargeAmountNull()
        {
            this.SetNull(this.myTable.ColumnChargeAmount);
        }
        
        /// test for NULL value
        public bool IsFeeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFeeDescription);
        }
        
        /// assign NULL value
        public void SetFeeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFeeDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Charges to collect from other ledgers.
    ///(e.g. office admin fee)
    [Serializable()]
    public class AFeesReceivableTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// Identifies a specific fee.
        public DataColumn ColumnFeeCode;
        
        /// 
        public DataColumn ColumnChargeOption;
        
        /// 
        public DataColumn ColumnChargePercentage;
        
        /// This is a the max or min amount charged dependent on the charge option in number of currency units
        public DataColumn ColumnChargeAmount;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Description of what this admin charge is for.
        public DataColumn ColumnFeeDescription;
        
        /// This identifies the account for the DR side of the financial transaction.
        public DataColumn ColumnDrAccountCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFeesReceivableTable() : 
                base("AFeesReceivable")
        {
        }
        
        /// constructor
        public AFeesReceivableTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFeesReceivableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFeesReceivableRow this[int i]
        {
            get
            {
                return ((AFeesReceivableRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFeeCodeDBName()
        {
            return "a_fee_code_c";
        }
        
        /// get help text for column
        public static string GetFeeCodeHelp()
        {
            return "Enter a code for this fee";
        }
        
        /// get label of column
        public static string GetFeeCodeLabel()
        {
            return "Fee Code";
        }
        
        /// get character length for column
        public static short GetFeeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargeOptionDBName()
        {
            return "a_charge_option_c";
        }
        
        /// get help text for column
        public static string GetChargeOptionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetChargeOptionLabel()
        {
            return "Charge Option";
        }
        
        /// get character length for column
        public static short GetChargeOptionLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargePercentageDBName()
        {
            return "a_charge_percentage_n";
        }
        
        /// get help text for column
        public static string GetChargePercentageHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetChargePercentageLabel()
        {
            return "Charge Percentage";
        }
        
        /// get display format for column
        public static short GetChargePercentageLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetChargeAmountDBName()
        {
            return "a_charge_amount_n";
        }
        
        /// get help text for column
        public static string GetChargeAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetChargeAmountLabel()
        {
            return "Charge Amount";
        }
        
        /// get display format for column
        public static short GetChargeAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFeeDescriptionDBName()
        {
            return "a_fee_description_c";
        }
        
        /// get help text for column
        public static string GetFeeDescriptionHelp()
        {
            return "Enter a description of what this fee is for.";
        }
        
        /// get label of column
        public static string GetFeeDescriptionLabel()
        {
            return "Fee Description";
        }
        
        /// get character length for column
        public static short GetFeeDescriptionLength()
        {
            return 24;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDrAccountCodeDBName()
        {
            return "a_dr_account_code_c";
        }
        
        /// get help text for column
        public static string GetDrAccountCodeHelp()
        {
            return "Selecct an expense account code to debit for this fee.";
        }
        
        /// get label of column
        public static string GetDrAccountCodeLabel()
        {
            return "DR Account Code";
        }
        
        /// get character length for column
        public static short GetDrAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFeesReceivable";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_fees_receivable";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Admin. Grants Receivable";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_fee_code_c",
                    "a_charge_option_c",
                    "a_charge_percentage_n",
                    "a_charge_amount_n",
                    "a_cost_centre_code_c",
                    "a_account_code_c",
                    "a_fee_description_c",
                    "a_dr_account_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnFeeCode = this.Columns["a_fee_code_c"];
            this.ColumnChargeOption = this.Columns["a_charge_option_c"];
            this.ColumnChargePercentage = this.Columns["a_charge_percentage_n"];
            this.ColumnChargeAmount = this.Columns["a_charge_amount_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnFeeDescription = this.Columns["a_fee_description_c"];
            this.ColumnDrAccountCode = this.Columns["a_dr_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnFeeCode};
        }
        
        /// get typed set of changes
        public AFeesReceivableTable GetChangesTyped()
        {
            return ((AFeesReceivableTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFeesReceivableRow NewRowTyped(bool AWithDefaultValues)
        {
            AFeesReceivableRow ret = ((AFeesReceivableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFeesReceivableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFeesReceivableRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_option_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_percentage_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_dr_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFeeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnChargeOption))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnChargePercentage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 5);
            }
            if ((ACol == ColumnChargeAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFeeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 48);
            }
            if ((ACol == ColumnDrAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Charges to collect from other ledgers.
    ///(e.g. office admin fee)
    [Serializable()]
    public class AFeesReceivableRow : System.Data.DataRow
    {
        
        private AFeesReceivableTable myTable;
        
        /// Constructor
        public AFeesReceivableRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFeesReceivableTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Identifies a specific fee.
        public String FeeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeCode) 
                            || (((String)(this[this.myTable.ColumnFeeCode])) != value)))
                {
                    this[this.myTable.ColumnFeeCode] = value;
                }
            }
        }
        
        /// 
        public String ChargeOption
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeOption.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeOption) 
                            || (((String)(this[this.myTable.ColumnChargeOption])) != value)))
                {
                    this[this.myTable.ColumnChargeOption] = value;
                }
            }
        }
        
        /// 
        public Decimal ChargePercentage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargePercentage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargePercentage) 
                            || (((Decimal)(this[this.myTable.ColumnChargePercentage])) != value)))
                {
                    this[this.myTable.ColumnChargePercentage] = value;
                }
            }
        }
        
        /// This is a the max or min amount charged dependent on the charge option in number of currency units
        public Double ChargeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeAmount) 
                            || (((Double)(this[this.myTable.ColumnChargeAmount])) != value)))
                {
                    this[this.myTable.ColumnChargeAmount] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Description of what this admin charge is for.
        public String FeeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeDescription) 
                            || (((String)(this[this.myTable.ColumnFeeDescription])) != value)))
                {
                    this[this.myTable.ColumnFeeDescription] = value;
                }
            }
        }
        
        /// This identifies the account for the DR side of the financial transaction.
        public String DrAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDrAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDrAccountCode) 
                            || (((String)(this[this.myTable.ColumnDrAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDrAccountCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFeeCode);
            this.SetNull(this.myTable.ColumnChargeOption);
            this[this.myTable.ColumnChargePercentage.Ordinal] = 0;
            this[this.myTable.ColumnChargeAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnFeeDescription);
            this.SetNull(this.myTable.ColumnDrAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsChargePercentageNull()
        {
            return this.IsNull(this.myTable.ColumnChargePercentage);
        }
        
        /// assign NULL value
        public void SetChargePercentageNull()
        {
            this.SetNull(this.myTable.ColumnChargePercentage);
        }
        
        /// test for NULL value
        public bool IsChargeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnChargeAmount);
        }
        
        /// assign NULL value
        public void SetChargeAmountNull()
        {
            this.SetNull(this.myTable.ColumnChargeAmount);
        }
        
        /// test for NULL value
        public bool IsFeeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFeeDescription);
        }
        
        /// assign NULL value
        public void SetFeeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFeeDescription);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Defines the different groups of accounts for financial statements and defines the attributes of each group.  Currently unused in Petra release 1.
    [Serializable()]
    public class AFinStatementGroupTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnLedgerNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// 
        public DataColumn ColumnFinStatementGroup;
        
        /// 
        public DataColumn ColumnReportSection;
        
        /// 
        public DataColumn ColumnContraFinStatementGroup;
        
        /// 
        public DataColumn ColumnHeading;
        
        /// 
        public DataColumn ColumnIndentBy;
        
        /// 
        public DataColumn ColumnNumberOfBlankLines;
        
        /// 
        public DataColumn ColumnRankingInSection;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFinStatementGroupTable() : 
                base("AFinStatementGroup")
        {
        }
        
        /// constructor
        public AFinStatementGroupTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFinStatementGroupTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFinStatementGroupRow this[int i]
        {
            get
            {
                return ((AFinStatementGroupRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFinStatementGroupDBName()
        {
            return "a_fin_statement_group_c";
        }
        
        /// get help text for column
        public static string GetFinStatementGroupHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFinStatementGroupLabel()
        {
            return "Group";
        }
        
        /// get character length for column
        public static short GetFinStatementGroupLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReportSectionDBName()
        {
            return "a_report_section_c";
        }
        
        /// get help text for column
        public static string GetReportSectionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetReportSectionLabel()
        {
            return "Section";
        }
        
        /// get character length for column
        public static short GetReportSectionLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetContraFinStatementGroupDBName()
        {
            return "a_contra_fin_statement_group_c";
        }
        
        /// get help text for column
        public static string GetContraFinStatementGroupHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetContraFinStatementGroupLabel()
        {
            return "Contra Group";
        }
        
        /// get character length for column
        public static short GetContraFinStatementGroupLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHeadingDBName()
        {
            return "a_heading_c";
        }
        
        /// get help text for column
        public static string GetHeadingHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetHeadingLabel()
        {
            return "Heading";
        }
        
        /// get character length for column
        public static short GetHeadingLength()
        {
            return 30;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIndentByDBName()
        {
            return "a_indent_by_i";
        }
        
        /// get help text for column
        public static string GetIndentByHelp()
        {
            return "Indent the heading by this number of spaces";
        }
        
        /// get label of column
        public static string GetIndentByLabel()
        {
            return "Indent";
        }
        
        /// get display format for column
        public static short GetIndentByLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberOfBlankLinesDBName()
        {
            return "a_number_of_blank_lines_i";
        }
        
        /// get help text for column
        public static string GetNumberOfBlankLinesHelp()
        {
            return "Number of blank lines to appear after line";
        }
        
        /// get label of column
        public static string GetNumberOfBlankLinesLabel()
        {
            return "Blank Lines";
        }
        
        /// get display format for column
        public static short GetNumberOfBlankLinesLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRankingInSectionDBName()
        {
            return "a_ranking_in_section_i";
        }
        
        /// get help text for column
        public static string GetRankingInSectionHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetRankingInSectionLabel()
        {
            return "Ranking";
        }
        
        /// get display format for column
        public static short GetRankingInSectionLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFinStatementGroup";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_fin_statement_group";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Financial Statement Groups";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    2,
                    1,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_account_code_c",
                    "a_fin_statement_group_c",
                    "a_report_section_c",
                    "a_contra_fin_statement_group_c",
                    "a_heading_c",
                    "a_indent_by_i",
                    "a_number_of_blank_lines_i",
                    "a_ranking_in_section_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnFinStatementGroup = this.Columns["a_fin_statement_group_c"];
            this.ColumnReportSection = this.Columns["a_report_section_c"];
            this.ColumnContraFinStatementGroup = this.Columns["a_contra_fin_statement_group_c"];
            this.ColumnHeading = this.Columns["a_heading_c"];
            this.ColumnIndentBy = this.Columns["a_indent_by_i"];
            this.ColumnNumberOfBlankLines = this.Columns["a_number_of_blank_lines_i"];
            this.ColumnRankingInSection = this.Columns["a_ranking_in_section_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnFinStatementGroup,
                    this.ColumnAccountCode,
                    this.ColumnReportSection};
        }
        
        /// get typed set of changes
        public AFinStatementGroupTable GetChangesTyped()
        {
            return ((AFinStatementGroupTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFinStatementGroupRow NewRowTyped(bool AWithDefaultValues)
        {
            AFinStatementGroupRow ret = ((AFinStatementGroupRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFinStatementGroupRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFinStatementGroupRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fin_statement_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_report_section_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_contra_fin_statement_group_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_heading_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_indent_by_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_blank_lines_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ranking_in_section_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnFinStatementGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnReportSection))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnContraFinStatementGroup))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnHeading))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 60);
            }
            if ((ACol == ColumnIndentBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnNumberOfBlankLines))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRankingInSection))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Defines the different groups of accounts for financial statements and defines the attributes of each group.  Currently unused in Petra release 1.
    [Serializable()]
    public class AFinStatementGroupRow : System.Data.DataRow
    {
        
        private AFinStatementGroupTable myTable;
        
        /// Constructor
        public AFinStatementGroupRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFinStatementGroupTable)(this.Table));
        }
        
        /// 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// 
        public String FinStatementGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFinStatementGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFinStatementGroup) 
                            || (((String)(this[this.myTable.ColumnFinStatementGroup])) != value)))
                {
                    this[this.myTable.ColumnFinStatementGroup] = value;
                }
            }
        }
        
        /// 
        public String ReportSection
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportSection.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportSection) 
                            || (((String)(this[this.myTable.ColumnReportSection])) != value)))
                {
                    this[this.myTable.ColumnReportSection] = value;
                }
            }
        }
        
        /// 
        public String ContraFinStatementGroup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContraFinStatementGroup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContraFinStatementGroup) 
                            || (((String)(this[this.myTable.ColumnContraFinStatementGroup])) != value)))
                {
                    this[this.myTable.ColumnContraFinStatementGroup] = value;
                }
            }
        }
        
        /// 
        public String Heading
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeading.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeading) 
                            || (((String)(this[this.myTable.ColumnHeading])) != value)))
                {
                    this[this.myTable.ColumnHeading] = value;
                }
            }
        }
        
        /// 
        public Int32 IndentBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIndentBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIndentBy) 
                            || (((Int32)(this[this.myTable.ColumnIndentBy])) != value)))
                {
                    this[this.myTable.ColumnIndentBy] = value;
                }
            }
        }
        
        /// 
        public Int32 NumberOfBlankLines
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfBlankLines.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfBlankLines) 
                            || (((Int32)(this[this.myTable.ColumnNumberOfBlankLines])) != value)))
                {
                    this[this.myTable.ColumnNumberOfBlankLines] = value;
                }
            }
        }
        
        /// 
        public Int32 RankingInSection
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRankingInSection.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRankingInSection) 
                            || (((Int32)(this[this.myTable.ColumnRankingInSection])) != value)))
                {
                    this[this.myTable.ColumnRankingInSection] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnFinStatementGroup);
            this.SetNull(this.myTable.ColumnReportSection);
            this.SetNull(this.myTable.ColumnContraFinStatementGroup);
            this.SetNull(this.myTable.ColumnHeading);
            this.SetNull(this.myTable.ColumnIndentBy);
            this[this.myTable.ColumnNumberOfBlankLines.Ordinal] = 0;
            this[this.myTable.ColumnRankingInSection.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsContraFinStatementGroupNull()
        {
            return this.IsNull(this.myTable.ColumnContraFinStatementGroup);
        }
        
        /// assign NULL value
        public void SetContraFinStatementGroupNull()
        {
            this.SetNull(this.myTable.ColumnContraFinStatementGroup);
        }
        
        /// test for NULL value
        public bool IsHeadingNull()
        {
            return this.IsNull(this.myTable.ColumnHeading);
        }
        
        /// assign NULL value
        public void SetHeadingNull()
        {
            this.SetNull(this.myTable.ColumnHeading);
        }
        
        /// test for NULL value
        public bool IsIndentByNull()
        {
            return this.IsNull(this.myTable.ColumnIndentBy);
        }
        
        /// assign NULL value
        public void SetIndentByNull()
        {
            this.SetNull(this.myTable.ColumnIndentBy);
        }
        
        /// test for NULL value
        public bool IsNumberOfBlankLinesNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfBlankLines);
        }
        
        /// assign NULL value
        public void SetNumberOfBlankLinesNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfBlankLines);
        }
        
        /// test for NULL value
        public bool IsRankingInSectionNull()
        {
            return this.IsNull(this.myTable.ColumnRankingInSection);
        }
        
        /// assign NULL value
        public void SetRankingInSectionNull()
        {
            this.SetNull(this.myTable.ColumnRankingInSection);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The form description for user definable forms such as receipts
    [Serializable()]
    public class AFormTable : TTypedDataTable
    {
        
        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        
        /// The name of the form being created for the form code.
        public DataColumn ColumnFormName;
        
        /// Description of the form
        public DataColumn ColumnFormDescription;
        
        /// If there are several types of form then it can be specified here.  Eg an annual receipt and an individual receipt.
        public DataColumn ColumnFormTypeCode;
        
        /// The number of repeating lines that will be displayed on each page of a form.
        public DataColumn ColumnNumberOfDetails;
        
        /// Is the report to be formatted to print in bold or not.
        public DataColumn ColumnPrintInBold;
        
        /// The total number of lines that can be displayed on the page
        public DataColumn ColumnLinesOnPage;
        
        /// The minimum amount that is acceptable on a receipt
        public DataColumn ColumnMinimumAmount;
        
        /// Allows the exclusion of certain records from a report
        public DataColumn ColumnOptions;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFormTable() : 
                base("AForm")
        {
        }
        
        /// constructor
        public AFormTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFormTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFormRow this[int i]
        {
            get
            {
                return ((AFormRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }
        
        /// get help text for column
        public static string GetFormCodeHelp()
        {
            return "Enter the code which defines the type of form you are creating";
        }
        
        /// get label of column
        public static string GetFormCodeLabel()
        {
            return "Form Code";
        }
        
        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "a_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "Enter a name for your form";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormDescriptionDBName()
        {
            return "a_form_description_c";
        }
        
        /// get help text for column
        public static string GetFormDescriptionHelp()
        {
            return "Enter the description of the form";
        }
        
        /// get label of column
        public static string GetFormDescriptionLabel()
        {
            return "Form Description";
        }
        
        /// get character length for column
        public static short GetFormDescriptionLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormTypeCodeDBName()
        {
            return "a_form_type_code_c";
        }
        
        /// get help text for column
        public static string GetFormTypeCodeHelp()
        {
            return "Enter the form type if required.";
        }
        
        /// get label of column
        public static string GetFormTypeCodeLabel()
        {
            return "Form Type";
        }
        
        /// get character length for column
        public static short GetFormTypeCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNumberOfDetailsDBName()
        {
            return "a_number_of_details_i";
        }
        
        /// get help text for column
        public static string GetNumberOfDetailsHelp()
        {
            return "Enter the number of detail lines to be printed on each page.";
        }
        
        /// get label of column
        public static string GetNumberOfDetailsLabel()
        {
            return "Number of Detail Lines";
        }
        
        /// get display format for column
        public static short GetNumberOfDetailsLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrintInBoldDBName()
        {
            return "a_print_in_bold_l";
        }
        
        /// get help text for column
        public static string GetPrintInBoldHelp()
        {
            return "Set toggle if you wish the report to be in bold type.";
        }
        
        /// get label of column
        public static string GetPrintInBoldLabel()
        {
            return "Print in Bold";
        }
        
        /// get display format for column
        public static short GetPrintInBoldLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLinesOnPageDBName()
        {
            return "a_lines_on_page_i";
        }
        
        /// get help text for column
        public static string GetLinesOnPageHelp()
        {
            return "Enter the number of lines on the page";
        }
        
        /// get label of column
        public static string GetLinesOnPageLabel()
        {
            return "Number of Lines on Page";
        }
        
        /// get display format for column
        public static short GetLinesOnPageLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMinimumAmountDBName()
        {
            return "a_minimum_amount_n";
        }
        
        /// get help text for column
        public static string GetMinimumAmountHelp()
        {
            return "Do not print receipt if the total is less than this value +/-";
        }
        
        /// get label of column
        public static string GetMinimumAmountLabel()
        {
            return "Minimum Amount";
        }
        
        /// get display format for column
        public static short GetMinimumAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetOptionsDBName()
        {
            return "a_options_c";
        }
        
        /// get help text for column
        public static string GetOptionsHelp()
        {
            return "Allows the exclusion of certain records from a report";
        }
        
        /// get label of column
        public static string GetOptionsLabel()
        {
            return "Options";
        }
        
        /// get character length for column
        public static short GetOptionsLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AForm";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_form";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Form";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_form_code_c",
                    "a_form_name_c",
                    "a_form_description_c",
                    "a_form_type_code_c",
                    "a_number_of_details_i",
                    "a_print_in_bold_l",
                    "a_lines_on_page_i",
                    "a_minimum_amount_n",
                    "a_options_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormName = this.Columns["a_form_name_c"];
            this.ColumnFormDescription = this.Columns["a_form_description_c"];
            this.ColumnFormTypeCode = this.Columns["a_form_type_code_c"];
            this.ColumnNumberOfDetails = this.Columns["a_number_of_details_i"];
            this.ColumnPrintInBold = this.Columns["a_print_in_bold_l"];
            this.ColumnLinesOnPage = this.Columns["a_lines_on_page_i"];
            this.ColumnMinimumAmount = this.Columns["a_minimum_amount_n"];
            this.ColumnOptions = this.Columns["a_options_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFormCode,
                    this.ColumnFormName};
        }
        
        /// get typed set of changes
        public AFormTable GetChangesTyped()
        {
            return ((AFormTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFormRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormRow ret = ((AFormRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFormRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_details_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_print_in_bold_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_lines_on_page_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_minimum_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_options_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFormCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnFormTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnNumberOfDetails))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPrintInBold))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnLinesOnPage))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnMinimumAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnOptions))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The form description for user definable forms such as receipts
    [Serializable()]
    public class AFormRow : System.Data.DataRow
    {
        
        private AFormTable myTable;
        
        /// Constructor
        public AFormRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFormTable)(this.Table));
        }
        
        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode) 
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }
        
        /// The name of the form being created for the form code.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// Description of the form
        public String FormDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormDescription) 
                            || (((String)(this[this.myTable.ColumnFormDescription])) != value)))
                {
                    this[this.myTable.ColumnFormDescription] = value;
                }
            }
        }
        
        /// If there are several types of form then it can be specified here.  Eg an annual receipt and an individual receipt.
        public String FormTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormTypeCode) 
                            || (((String)(this[this.myTable.ColumnFormTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormTypeCode] = value;
                }
            }
        }
        
        /// The number of repeating lines that will be displayed on each page of a form.
        public Int32 NumberOfDetails
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfDetails.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfDetails) 
                            || (((Int32)(this[this.myTable.ColumnNumberOfDetails])) != value)))
                {
                    this[this.myTable.ColumnNumberOfDetails] = value;
                }
            }
        }
        
        /// Is the report to be formatted to print in bold or not.
        public Boolean PrintInBold
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrintInBold.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrintInBold) 
                            || (((Boolean)(this[this.myTable.ColumnPrintInBold])) != value)))
                {
                    this[this.myTable.ColumnPrintInBold] = value;
                }
            }
        }
        
        /// The total number of lines that can be displayed on the page
        public Int32 LinesOnPage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLinesOnPage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLinesOnPage) 
                            || (((Int32)(this[this.myTable.ColumnLinesOnPage])) != value)))
                {
                    this[this.myTable.ColumnLinesOnPage] = value;
                }
            }
        }
        
        /// The minimum amount that is acceptable on a receipt
        public Double MinimumAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinimumAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinimumAmount) 
                            || (((Double)(this[this.myTable.ColumnMinimumAmount])) != value)))
                {
                    this[this.myTable.ColumnMinimumAmount] = value;
                }
            }
        }
        
        /// Allows the exclusion of certain records from a report
        public String Options
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOptions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOptions) 
                            || (((String)(this[this.myTable.ColumnOptions])) != value)))
                {
                    this[this.myTable.ColumnOptions] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormName);
            this.SetNull(this.myTable.ColumnFormDescription);
            this.SetNull(this.myTable.ColumnFormTypeCode);
            this[this.myTable.ColumnNumberOfDetails.Ordinal] = 0;
            this[this.myTable.ColumnPrintInBold.Ordinal] = false;
            this[this.myTable.ColumnLinesOnPage.Ordinal] = 66;
            this[this.myTable.ColumnMinimumAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnOptions);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFormDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFormDescription);
        }
        
        /// assign NULL value
        public void SetFormDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFormDescription);
        }
        
        /// test for NULL value
        public bool IsNumberOfDetailsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfDetails);
        }
        
        /// assign NULL value
        public void SetNumberOfDetailsNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfDetails);
        }
        
        /// test for NULL value
        public bool IsMinimumAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMinimumAmount);
        }
        
        /// assign NULL value
        public void SetMinimumAmountNull()
        {
            this.SetNull(this.myTable.ColumnMinimumAmount);
        }
        
        /// test for NULL value
        public bool IsOptionsNull()
        {
            return this.IsNull(this.myTable.ColumnOptions);
        }
        
        /// assign NULL value
        public void SetOptionsNull()
        {
            this.SetNull(this.myTable.ColumnOptions);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The element types that are available for placing in forms.
    [Serializable()]
    public class AFormElementTypeTable : TTypedDataTable
    {
        
        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        
        /// The code of an element type that can be positioned for use on a form.
        public DataColumn ColumnFormElementTypeCode;
        
        /// Description of Element Type
        public DataColumn ColumnFormElementTypeDesc;
        
        /// 
        public DataColumn ColumnDefaultLength;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFormElementTypeTable() : 
                base("AFormElementType")
        {
        }
        
        /// constructor
        public AFormElementTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFormElementTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFormElementTypeRow this[int i]
        {
            get
            {
                return ((AFormElementTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }
        
        /// get help text for column
        public static string GetFormCodeHelp()
        {
            return "Enter the code which defines the type of form you are creating";
        }
        
        /// get label of column
        public static string GetFormCodeLabel()
        {
            return "Form Code";
        }
        
        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormElementTypeCodeDBName()
        {
            return "a_form_element_type_code_c";
        }
        
        /// get help text for column
        public static string GetFormElementTypeCodeHelp()
        {
            return "Choose an element type";
        }
        
        /// get label of column
        public static string GetFormElementTypeCodeLabel()
        {
            return "Form Element Type Code";
        }
        
        /// get character length for column
        public static short GetFormElementTypeCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormElementTypeDescDBName()
        {
            return "a_form_element_type_desc_c";
        }
        
        /// get help text for column
        public static string GetFormElementTypeDescHelp()
        {
            return "Enter Element type description";
        }
        
        /// get label of column
        public static string GetFormElementTypeDescLabel()
        {
            return "Element Type Description";
        }
        
        /// get character length for column
        public static short GetFormElementTypeDescLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDefaultLengthDBName()
        {
            return "a_default_length_i";
        }
        
        /// get help text for column
        public static string GetDefaultLengthHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDefaultLengthLabel()
        {
            return "Default Length";
        }
        
        /// get display format for column
        public static short GetDefaultLengthLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFormElementType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_form_element_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Form Element Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_form_code_c",
                    "a_form_element_type_code_c",
                    "a_form_element_type_desc_c",
                    "a_default_length_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormElementTypeCode = this.Columns["a_form_element_type_code_c"];
            this.ColumnFormElementTypeDesc = this.Columns["a_form_element_type_desc_c"];
            this.ColumnDefaultLength = this.Columns["a_default_length_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFormCode,
                    this.ColumnFormElementTypeCode};
        }
        
        /// get typed set of changes
        public AFormElementTypeTable GetChangesTyped()
        {
            return ((AFormElementTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFormElementTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormElementTypeRow ret = ((AFormElementTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFormElementTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormElementTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_default_length_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFormCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormElementTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnFormElementTypeDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDefaultLength))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The element types that are available for placing in forms.
    [Serializable()]
    public class AFormElementTypeRow : System.Data.DataRow
    {
        
        private AFormElementTypeTable myTable;
        
        /// Constructor
        public AFormElementTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFormElementTypeTable)(this.Table));
        }
        
        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode) 
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }
        
        /// The code of an element type that can be positioned for use on a form.
        public String FormElementTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeCode) 
                            || (((String)(this[this.myTable.ColumnFormElementTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeCode] = value;
                }
            }
        }
        
        /// Description of Element Type
        public String FormElementTypeDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeDesc) 
                            || (((String)(this[this.myTable.ColumnFormElementTypeDesc])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeDesc] = value;
                }
            }
        }
        
        /// 
        public Int32 DefaultLength
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultLength) 
                            || (((Int32)(this[this.myTable.ColumnDefaultLength])) != value)))
                {
                    this[this.myTable.ColumnDefaultLength] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
            this.SetNull(this.myTable.ColumnFormElementTypeDesc);
            this[this.myTable.ColumnDefaultLength.Ordinal] = 1;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsFormElementTypeDescNull()
        {
            return this.IsNull(this.myTable.ColumnFormElementTypeDesc);
        }
        
        /// assign NULL value
        public void SetFormElementTypeDescNull()
        {
            this.SetNull(this.myTable.ColumnFormElementTypeDesc);
        }
        
        /// test for NULL value
        public bool IsDefaultLengthNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultLength);
        }
        
        /// assign NULL value
        public void SetDefaultLengthNull()
        {
            this.SetNull(this.myTable.ColumnDefaultLength);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Each element that can be displayed on a form is defined on this table.
    [Serializable()]
    public class AFormElementTable : TTypedDataTable
    {
        
        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        
        /// The name of the form being created for the form code.
        public DataColumn ColumnFormName;
        
        /// Unique identifier of each form element within a form
        public DataColumn ColumnFormSequence;
        
        /// The code of an element type that can be possitioned for use on a form.
        public DataColumn ColumnFormElementTypeCode;
        
        /// The column that the element is to be displayed at on the form.
        public DataColumn ColumnColumn;
        
        /// The row on the page that the element is to be displayed at.
        public DataColumn ColumnRow;
        
        /// The display length for the element.  e.g. it may be necessary to truncate fields.
        public DataColumn ColumnLength;
        
        /// This stores the number of characters to skip prior to printing.  It can be used to spread a description over two lines.
        public DataColumn ColumnSkip;
        
        /// Indicates when the element is printed.  This would indicate detail lines, first, last page etc.
        public DataColumn ColumnWhenPrint;
        
        /// Text to be displayed if the element is defined as a literal.
        public DataColumn ColumnLiteralText;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFormElementTable() : 
                base("AFormElement")
        {
        }
        
        /// constructor
        public AFormElementTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFormElementTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFormElementRow this[int i]
        {
            get
            {
                return ((AFormElementRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }
        
        /// get help text for column
        public static string GetFormCodeHelp()
        {
            return "Enter the code which defines the type of form you are creating";
        }
        
        /// get label of column
        public static string GetFormCodeLabel()
        {
            return "Form Code";
        }
        
        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "a_form_name_c";
        }
        
        /// get help text for column
        public static string GetFormNameHelp()
        {
            return "Enter a name for your form";
        }
        
        /// get label of column
        public static string GetFormNameLabel()
        {
            return "Form Name";
        }
        
        /// get character length for column
        public static short GetFormNameLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormSequenceDBName()
        {
            return "a_form_sequence_i";
        }
        
        /// get help text for column
        public static string GetFormSequenceHelp()
        {
            return "Unique identifier of each form element within a form";
        }
        
        /// get label of column
        public static string GetFormSequenceLabel()
        {
            return "Form element sequence";
        }
        
        /// get display format for column
        public static short GetFormSequenceLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFormElementTypeCodeDBName()
        {
            return "a_form_element_type_code_c";
        }
        
        /// get help text for column
        public static string GetFormElementTypeCodeHelp()
        {
            return "Choose an element type";
        }
        
        /// get label of column
        public static string GetFormElementTypeCodeLabel()
        {
            return "Form Element Type Code";
        }
        
        /// get character length for column
        public static short GetFormElementTypeCodeLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetColumnDBName()
        {
            return "a_column_i";
        }
        
        /// get help text for column
        public static string GetColumnHelp()
        {
            return "Enter the column that the element is to be displayed in.";
        }
        
        /// get label of column
        public static string GetColumnLabel()
        {
            return "Column";
        }
        
        /// get display format for column
        public static short GetColumnLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRowDBName()
        {
            return "a_row_i";
        }
        
        /// get help text for column
        public static string GetRowHelp()
        {
            return "Enter the row/line number that the element is to be displayed.";
        }
        
        /// get label of column
        public static string GetRowLabel()
        {
            return "Row";
        }
        
        /// get display format for column
        public static short GetRowLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLengthDBName()
        {
            return "a_length_i";
        }
        
        /// get help text for column
        public static string GetLengthHelp()
        {
            return "Enter the number of characters to be displayed.";
        }
        
        /// get label of column
        public static string GetLengthLabel()
        {
            return "Length to display";
        }
        
        /// get display format for column
        public static short GetLengthLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSkipDBName()
        {
            return "a_skip_i";
        }
        
        /// get help text for column
        public static string GetSkipHelp()
        {
            return "Enter the number of characters to skip for the element.";
        }
        
        /// get label of column
        public static string GetSkipLabel()
        {
            return "Characters to skip";
        }
        
        /// get display format for column
        public static short GetSkipLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetWhenPrintDBName()
        {
            return "a_when_print_c";
        }
        
        /// get help text for column
        public static string GetWhenPrintHelp()
        {
            return "Enter the code which corresponds to where the element is placed";
        }
        
        /// get label of column
        public static string GetWhenPrintLabel()
        {
            return "When Print?";
        }
        
        /// get character length for column
        public static short GetWhenPrintLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLiteralTextDBName()
        {
            return "a_literal_text_c";
        }
        
        /// get help text for column
        public static string GetLiteralTextHelp()
        {
            return "Enter the text for the element.";
        }
        
        /// get label of column
        public static string GetLiteralTextLabel()
        {
            return "Literal Text";
        }
        
        /// get character length for column
        public static short GetLiteralTextLength()
        {
            return 1000;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFormElement";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_form_element";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Form Element";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_form_code_c",
                    "a_form_name_c",
                    "a_form_sequence_i",
                    "a_form_element_type_code_c",
                    "a_column_i",
                    "a_row_i",
                    "a_length_i",
                    "a_skip_i",
                    "a_when_print_c",
                    "a_literal_text_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormName = this.Columns["a_form_name_c"];
            this.ColumnFormSequence = this.Columns["a_form_sequence_i"];
            this.ColumnFormElementTypeCode = this.Columns["a_form_element_type_code_c"];
            this.ColumnColumn = this.Columns["a_column_i"];
            this.ColumnRow = this.Columns["a_row_i"];
            this.ColumnLength = this.Columns["a_length_i"];
            this.ColumnSkip = this.Columns["a_skip_i"];
            this.ColumnWhenPrint = this.Columns["a_when_print_c"];
            this.ColumnLiteralText = this.Columns["a_literal_text_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFormCode,
                    this.ColumnFormName,
                    this.ColumnFormSequence};
        }
        
        /// get typed set of changes
        public AFormElementTable GetChangesTyped()
        {
            return ((AFormElementTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFormElementRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormElementRow ret = ((AFormElementRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFormElementRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormElementRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_column_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_row_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_length_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_skip_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_when_print_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_literal_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFormCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormName))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnFormSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFormElementTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnColumn))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnRow))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLength))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSkip))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnWhenPrint))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnLiteralText))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 2000);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Each element that can be displayed on a form is defined on this table.
    [Serializable()]
    public class AFormElementRow : System.Data.DataRow
    {
        
        private AFormElementTable myTable;
        
        /// Constructor
        public AFormElementRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFormElementTable)(this.Table));
        }
        
        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode) 
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }
        
        /// The name of the form being created for the form code.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName) 
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }
        
        /// Unique identifier of each form element within a form
        public Int32 FormSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormSequence) 
                            || (((Int32)(this[this.myTable.ColumnFormSequence])) != value)))
                {
                    this[this.myTable.ColumnFormSequence] = value;
                }
            }
        }
        
        /// The code of an element type that can be possitioned for use on a form.
        public String FormElementTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeCode) 
                            || (((String)(this[this.myTable.ColumnFormElementTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeCode] = value;
                }
            }
        }
        
        /// The column that the element is to be displayed at on the form.
        public Int32 Column
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnColumn.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnColumn) 
                            || (((Int32)(this[this.myTable.ColumnColumn])) != value)))
                {
                    this[this.myTable.ColumnColumn] = value;
                }
            }
        }
        
        /// The row on the page that the element is to be displayed at.
        public Int32 Row
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRow.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRow) 
                            || (((Int32)(this[this.myTable.ColumnRow])) != value)))
                {
                    this[this.myTable.ColumnRow] = value;
                }
            }
        }
        
        /// The display length for the element.  e.g. it may be necessary to truncate fields.
        public Int32 Length
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLength) 
                            || (((Int32)(this[this.myTable.ColumnLength])) != value)))
                {
                    this[this.myTable.ColumnLength] = value;
                }
            }
        }
        
        /// This stores the number of characters to skip prior to printing.  It can be used to spread a description over two lines.
        public Int32 Skip
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSkip.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSkip) 
                            || (((Int32)(this[this.myTable.ColumnSkip])) != value)))
                {
                    this[this.myTable.ColumnSkip] = value;
                }
            }
        }
        
        /// Indicates when the element is printed.  This would indicate detail lines, first, last page etc.
        public String WhenPrint
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWhenPrint.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWhenPrint) 
                            || (((String)(this[this.myTable.ColumnWhenPrint])) != value)))
                {
                    this[this.myTable.ColumnWhenPrint] = value;
                }
            }
        }
        
        /// Text to be displayed if the element is defined as a literal.
        public String LiteralText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLiteralText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLiteralText) 
                            || (((String)(this[this.myTable.ColumnLiteralText])) != value)))
                {
                    this[this.myTable.ColumnLiteralText] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnFormSequence.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
            this[this.myTable.ColumnColumn.Ordinal] = 1;
            this[this.myTable.ColumnRow.Ordinal] = 1;
            this[this.myTable.ColumnLength.Ordinal] = 1;
            this[this.myTable.ColumnSkip.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnWhenPrint);
            this.SetNull(this.myTable.ColumnLiteralText);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSkipNull()
        {
            return this.IsNull(this.myTable.ColumnSkip);
        }
        
        /// assign NULL value
        public void SetSkipNull()
        {
            this.SetNull(this.myTable.ColumnSkip);
        }
        
        /// test for NULL value
        public bool IsLiteralTextNull()
        {
            return this.IsNull(this.myTable.ColumnLiteralText);
        }
        
        /// assign NULL value
        public void SetLiteralTextNull()
        {
            this.SetNull(this.myTable.ColumnLiteralText);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Available analysis values that may be given to a transaction for each analysis type.
    [Serializable()]
    public class AFreeformAnalysisTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// Value of analysis code
        public DataColumn ColumnAnalysisValue;
        
        /// Ledger Number 
        public DataColumn ColumnLedgerNumber;
        
        /// Analysis attribute values cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public DataColumn ColumnActive;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AFreeformAnalysisTable() : 
                base("AFreeformAnalysis")
        {
        }
        
        /// constructor
        public AFreeformAnalysisTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AFreeformAnalysisTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AFreeformAnalysisRow this[int i]
        {
            get
            {
                return ((AFreeformAnalysisRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisValueDBName()
        {
            return "a_analysis_value_c";
        }
        
        /// get help text for column
        public static string GetAnalysisValueHelp()
        {
            return "Value of analysis code";
        }
        
        /// get label of column
        public static string GetAnalysisValueLabel()
        {
            return "Value";
        }
        
        /// get character length for column
        public static short GetAnalysisValueLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Ledger Number ";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Select if analysis attribute value can be used";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "Active";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AFreeformAnalysis";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_freeform_analysis";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Analysis Attribute Values";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    2,
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_analysis_type_code_c",
                    "a_analysis_value_c",
                    "a_ledger_number_i",
                    "a_active_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisValue = this.Columns["a_analysis_value_c"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnAnalysisTypeCode,
                    this.ColumnAnalysisValue};
        }
        
        /// get typed set of changes
        public AFreeformAnalysisTable GetChangesTyped()
        {
            return ((AFreeformAnalysisTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AFreeformAnalysisRow NewRowTyped(bool AWithDefaultValues)
        {
            AFreeformAnalysisRow ret = ((AFreeformAnalysisRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AFreeformAnalysisRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFreeformAnalysisRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Available analysis values that may be given to a transaction for each analysis type.
    [Serializable()]
    public class AFreeformAnalysisRow : System.Data.DataRow
    {
        
        private AFreeformAnalysisTable myTable;
        
        /// Constructor
        public AFreeformAnalysisRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AFreeformAnalysisTable)(this.Table));
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// Value of analysis code
        public String AnalysisValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisValue) 
                            || (((String)(this[this.myTable.ColumnAnalysisValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisValue] = value;
                }
            }
        }
        
        /// Ledger Number 
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Analysis attribute values cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisValue);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// All balances on accounts, including summary information is stored here.
    [Serializable()]
    public class AGeneralLedgerMasterTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnGlmSequence;
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// 
        public DataColumn ColumnYear;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// 
        public DataColumn ColumnYtdActualBase;
        
        /// Special period for the year end close journal.
        public DataColumn ColumnClosingPeriodActualBase;
        
        /// Starting Balance in the ledger currency
        public DataColumn ColumnStartBalanceBase;
        
        /// Total for the current year, 2nd (int'l) base currency.
        public DataColumn ColumnYtdActualIntl;
        
        /// Special period for the year end close journal.
        public DataColumn ColumnClosingPeriodActualIntl;
        
        /// Starting Balance (Int'l)
        public DataColumn ColumnStartBalanceIntl;
        
        /// 
        public DataColumn ColumnYtdActualForeign;
        
        /// 
        public DataColumn ColumnStartBalanceForeign;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AGeneralLedgerMasterTable() : 
                base("AGeneralLedgerMaster")
        {
        }
        
        /// constructor
        public AGeneralLedgerMasterTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AGeneralLedgerMasterTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AGeneralLedgerMasterRow this[int i]
        {
            get
            {
                return ((AGeneralLedgerMasterRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGlmSequenceDBName()
        {
            return "a_glm_sequence_i";
        }
        
        /// get help text for column
        public static string GetGlmSequenceHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetGlmSequenceLabel()
        {
            return "a_glm_sequence_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }
        
        /// get help text for column
        public static string GetYearHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetYearLabel()
        {
            return "a_year_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYtdActualBaseDBName()
        {
            return "a_ytd_actual_base_n";
        }
        
        /// get help text for column
        public static string GetYtdActualBaseHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetYtdActualBaseLabel()
        {
            return "a_ytd_actual_base_n";
        }
        
        /// get display format for column
        public static short GetYtdActualBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetClosingPeriodActualBaseDBName()
        {
            return "a_closing_period_actual_base_n";
        }
        
        /// get help text for column
        public static string GetClosingPeriodActualBaseHelp()
        {
            return "Special period for the year end close journal.";
        }
        
        /// get label of column
        public static string GetClosingPeriodActualBaseLabel()
        {
            return "Year End Closing Period Actual";
        }
        
        /// get display format for column
        public static short GetClosingPeriodActualBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStartBalanceBaseDBName()
        {
            return "a_start_balance_base_n";
        }
        
        /// get help text for column
        public static string GetStartBalanceBaseHelp()
        {
            return "Starting Balance in the ledger currency";
        }
        
        /// get label of column
        public static string GetStartBalanceBaseLabel()
        {
            return "Starting Balance";
        }
        
        /// get display format for column
        public static short GetStartBalanceBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYtdActualIntlDBName()
        {
            return "a_ytd_actual_intl_n";
        }
        
        /// get help text for column
        public static string GetYtdActualIntlHelp()
        {
            return "Total for the current year, 2nd (int\'l) base currency.";
        }
        
        /// get label of column
        public static string GetYtdActualIntlLabel()
        {
            return "YTD Total (Int\'l)";
        }
        
        /// get display format for column
        public static short GetYtdActualIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetClosingPeriodActualIntlDBName()
        {
            return "a_closing_period_actual_intl_n";
        }
        
        /// get help text for column
        public static string GetClosingPeriodActualIntlHelp()
        {
            return "Special period for the year end close journal.";
        }
        
        /// get label of column
        public static string GetClosingPeriodActualIntlLabel()
        {
            return "Year End Closing Period Actual (Int\'l)";
        }
        
        /// get display format for column
        public static short GetClosingPeriodActualIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStartBalanceIntlDBName()
        {
            return "a_start_balance_intl_n";
        }
        
        /// get help text for column
        public static string GetStartBalanceIntlHelp()
        {
            return "Ledger starting balance, in the second (int\'l) base currency.";
        }
        
        /// get label of column
        public static string GetStartBalanceIntlLabel()
        {
            return "Starting Balance (Int\'l)";
        }
        
        /// get display format for column
        public static short GetStartBalanceIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetYtdActualForeignDBName()
        {
            return "a_ytd_actual_foreign_n";
        }
        
        /// get help text for column
        public static string GetYtdActualForeignHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetYtdActualForeignLabel()
        {
            return "a_ytd_actual_foreign_n";
        }
        
        /// get display format for column
        public static short GetYtdActualForeignLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetStartBalanceForeignDBName()
        {
            return "a_start_balance_foreign_n";
        }
        
        /// get help text for column
        public static string GetStartBalanceForeignHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetStartBalanceForeignLabel()
        {
            return "a_start_balance_foreign_n";
        }
        
        /// get display format for column
        public static short GetStartBalanceForeignLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AGeneralLedgerMaster";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_general_ledger_master";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "General Ledger Master";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_glm_sequence_i",
                    "a_ledger_number_i",
                    "a_year_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_ytd_actual_base_n",
                    "a_closing_period_actual_base_n",
                    "a_start_balance_base_n",
                    "a_ytd_actual_intl_n",
                    "a_closing_period_actual_intl_n",
                    "a_start_balance_intl_n",
                    "a_ytd_actual_foreign_n",
                    "a_start_balance_foreign_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGlmSequence = this.Columns["a_glm_sequence_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnYtdActualBase = this.Columns["a_ytd_actual_base_n"];
            this.ColumnClosingPeriodActualBase = this.Columns["a_closing_period_actual_base_n"];
            this.ColumnStartBalanceBase = this.Columns["a_start_balance_base_n"];
            this.ColumnYtdActualIntl = this.Columns["a_ytd_actual_intl_n"];
            this.ColumnClosingPeriodActualIntl = this.Columns["a_closing_period_actual_intl_n"];
            this.ColumnStartBalanceIntl = this.Columns["a_start_balance_intl_n"];
            this.ColumnYtdActualForeign = this.Columns["a_ytd_actual_foreign_n"];
            this.ColumnStartBalanceForeign = this.Columns["a_start_balance_foreign_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGlmSequence};
        }
        
        /// get typed set of changes
        public AGeneralLedgerMasterTable GetChangesTyped()
        {
            return ((AGeneralLedgerMasterTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AGeneralLedgerMasterRow NewRowTyped(bool AWithDefaultValues)
        {
            AGeneralLedgerMasterRow ret = ((AGeneralLedgerMasterRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AGeneralLedgerMasterRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AGeneralLedgerMasterRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_glm_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_closing_period_actual_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_closing_period_actual_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_foreign_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_foreign_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGlmSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnYtdActualBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnClosingPeriodActualBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnStartBalanceBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnYtdActualIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnClosingPeriodActualIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnStartBalanceIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnYtdActualForeign))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnStartBalanceForeign))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// All balances on accounts, including summary information is stored here.
    [Serializable()]
    public class AGeneralLedgerMasterRow : System.Data.DataRow
    {
        
        private AGeneralLedgerMasterTable myTable;
        
        /// Constructor
        public AGeneralLedgerMasterRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AGeneralLedgerMasterTable)(this.Table));
        }
        
        /// 
        public Int32 GlmSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGlmSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGlmSequence) 
                            || (((Int32)(this[this.myTable.ColumnGlmSequence])) != value)))
                {
                    this[this.myTable.ColumnGlmSequence] = value;
                }
            }
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear) 
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// 
        public Double YtdActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualBase) 
                            || (((Double)(this[this.myTable.ColumnYtdActualBase])) != value)))
                {
                    this[this.myTable.ColumnYtdActualBase] = value;
                }
            }
        }
        
        /// Special period for the year end close journal.
        public Double ClosingPeriodActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosingPeriodActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosingPeriodActualBase) 
                            || (((Double)(this[this.myTable.ColumnClosingPeriodActualBase])) != value)))
                {
                    this[this.myTable.ColumnClosingPeriodActualBase] = value;
                }
            }
        }
        
        /// Starting Balance in the ledger currency
        public Double StartBalanceBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceBase) 
                            || (((Double)(this[this.myTable.ColumnStartBalanceBase])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceBase] = value;
                }
            }
        }
        
        /// Total for the current year, 2nd (int'l) base currency.
        public Double YtdActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualIntl) 
                            || (((Double)(this[this.myTable.ColumnYtdActualIntl])) != value)))
                {
                    this[this.myTable.ColumnYtdActualIntl] = value;
                }
            }
        }
        
        /// Special period for the year end close journal.
        public Double ClosingPeriodActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosingPeriodActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosingPeriodActualIntl) 
                            || (((Double)(this[this.myTable.ColumnClosingPeriodActualIntl])) != value)))
                {
                    this[this.myTable.ColumnClosingPeriodActualIntl] = value;
                }
            }
        }
        
        /// Starting Balance (Int'l)
        public Double StartBalanceIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceIntl) 
                            || (((Double)(this[this.myTable.ColumnStartBalanceIntl])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceIntl] = value;
                }
            }
        }
        
        /// 
        public Double YtdActualForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualForeign) 
                            || (((Double)(this[this.myTable.ColumnYtdActualForeign])) != value)))
                {
                    this[this.myTable.ColumnYtdActualForeign] = value;
                }
            }
        }
        
        /// 
        public Double StartBalanceForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceForeign) 
                            || (((Double)(this[this.myTable.ColumnStartBalanceForeign])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceForeign] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYear);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnYtdActualBase.Ordinal] = 0;
            this[this.myTable.ColumnClosingPeriodActualBase.Ordinal] = 0;
            this[this.myTable.ColumnStartBalanceBase.Ordinal] = 0;
            this[this.myTable.ColumnYtdActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnClosingPeriodActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnStartBalanceIntl.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYtdActualForeign);
            this.SetNull(this.myTable.ColumnStartBalanceForeign);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsYtdActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualBase);
        }
        
        /// assign NULL value
        public void SetYtdActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualBase);
        }
        
        /// test for NULL value
        public bool IsClosingPeriodActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnClosingPeriodActualBase);
        }
        
        /// assign NULL value
        public void SetClosingPeriodActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnClosingPeriodActualBase);
        }
        
        /// test for NULL value
        public bool IsStartBalanceBaseNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceBase);
        }
        
        /// assign NULL value
        public void SetStartBalanceBaseNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceBase);
        }
        
        /// test for NULL value
        public bool IsYtdActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualIntl);
        }
        
        /// assign NULL value
        public void SetYtdActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualIntl);
        }
        
        /// test for NULL value
        public bool IsClosingPeriodActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnClosingPeriodActualIntl);
        }
        
        /// assign NULL value
        public void SetClosingPeriodActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnClosingPeriodActualIntl);
        }
        
        /// test for NULL value
        public bool IsStartBalanceIntlNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceIntl);
        }
        
        /// assign NULL value
        public void SetStartBalanceIntlNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceIntl);
        }
        
        /// test for NULL value
        public bool IsYtdActualForeignNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualForeign);
        }
        
        /// assign NULL value
        public void SetYtdActualForeignNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualForeign);
        }
        
        /// test for NULL value
        public bool IsStartBalanceForeignNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceForeign);
        }
        
        /// assign NULL value
        public void SetStartBalanceForeignNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceForeign);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// The General Ledger Master data for one period (e.g. a month)
    [Serializable()]
    public class AGeneralLedgerMasterPeriodTable : TTypedDataTable
    {
        
        /// 
        public DataColumn ColumnGlmSequence;
        
        /// 
        public DataColumn ColumnPeriodNumber;
        
        /// This is a number of ledger currency units
        public DataColumn ColumnActualBase;
        
        /// This is a number of ledger currency units
        public DataColumn ColumnBudgetBase;
        
        /// Total for the specified period, 2nd (int'l) base currency.
        public DataColumn ColumnActualIntl;
        
        /// Total for the specified period, 2nd (int'l) base currency.
        public DataColumn ColumnBudgetIntl;
        
        /// 
        public DataColumn ColumnActualForeign;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AGeneralLedgerMasterPeriodTable() : 
                base("AGeneralLedgerMasterPeriod")
        {
        }
        
        /// constructor
        public AGeneralLedgerMasterPeriodTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AGeneralLedgerMasterPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AGeneralLedgerMasterPeriodRow this[int i]
        {
            get
            {
                return ((AGeneralLedgerMasterPeriodRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetGlmSequenceDBName()
        {
            return "a_glm_sequence_i";
        }
        
        /// get help text for column
        public static string GetGlmSequenceHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetGlmSequenceLabel()
        {
            return "a_glm_sequence_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }
        
        /// get help text for column
        public static string GetPeriodNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetPeriodNumberLabel()
        {
            return "a_period_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetActualBaseDBName()
        {
            return "a_actual_base_n";
        }
        
        /// get help text for column
        public static string GetActualBaseHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetActualBaseLabel()
        {
            return "Actual This Year";
        }
        
        /// get display format for column
        public static short GetActualBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetBaseDBName()
        {
            return "a_budget_base_n";
        }
        
        /// get help text for column
        public static string GetBudgetBaseHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBudgetBaseLabel()
        {
            return "Budget This Year";
        }
        
        /// get display format for column
        public static short GetBudgetBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActualIntlDBName()
        {
            return "a_actual_intl_n";
        }
        
        /// get help text for column
        public static string GetActualIntlHelp()
        {
            return "Total for the specified period, 2nd (int\'l) base currency.";
        }
        
        /// get label of column
        public static string GetActualIntlLabel()
        {
            return "Actual This Year (Int\'l)";
        }
        
        /// get display format for column
        public static short GetActualIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBudgetIntlDBName()
        {
            return "a_budget_intl_n";
        }
        
        /// get help text for column
        public static string GetBudgetIntlHelp()
        {
            return "Total for the specified period, 2nd (int\'l) base currency.";
        }
        
        /// get label of column
        public static string GetBudgetIntlLabel()
        {
            return "Budget This Year (int\'l)";
        }
        
        /// get display format for column
        public static short GetBudgetIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActualForeignDBName()
        {
            return "a_actual_foreign_n";
        }
        
        /// get help text for column
        public static string GetActualForeignHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetActualForeignLabel()
        {
            return "a_actual_foreign_n";
        }
        
        /// get display format for column
        public static short GetActualForeignLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AGeneralLedgerMasterPeriod";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_general_ledger_master_period";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "a_general_ledger_master_period";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_glm_sequence_i",
                    "a_period_number_i",
                    "a_actual_base_n",
                    "a_budget_base_n",
                    "a_actual_intl_n",
                    "a_budget_intl_n",
                    "a_actual_foreign_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGlmSequence = this.Columns["a_glm_sequence_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnActualBase = this.Columns["a_actual_base_n"];
            this.ColumnBudgetBase = this.Columns["a_budget_base_n"];
            this.ColumnActualIntl = this.Columns["a_actual_intl_n"];
            this.ColumnBudgetIntl = this.Columns["a_budget_intl_n"];
            this.ColumnActualForeign = this.Columns["a_actual_foreign_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnGlmSequence,
                    this.ColumnPeriodNumber};
        }
        
        /// get typed set of changes
        public AGeneralLedgerMasterPeriodTable GetChangesTyped()
        {
            return ((AGeneralLedgerMasterPeriodTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AGeneralLedgerMasterPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            AGeneralLedgerMasterPeriodRow ret = ((AGeneralLedgerMasterPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AGeneralLedgerMasterPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AGeneralLedgerMasterPeriodRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_glm_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_foreign_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnGlmSequence))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnActualBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBudgetBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnActualIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBudgetIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnActualForeign))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// The General Ledger Master data for one period (e.g. a month)
    [Serializable()]
    public class AGeneralLedgerMasterPeriodRow : System.Data.DataRow
    {
        
        private AGeneralLedgerMasterPeriodTable myTable;
        
        /// Constructor
        public AGeneralLedgerMasterPeriodRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AGeneralLedgerMasterPeriodTable)(this.Table));
        }
        
        /// 
        public Int32 GlmSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGlmSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGlmSequence) 
                            || (((Int32)(this[this.myTable.ColumnGlmSequence])) != value)))
                {
                    this[this.myTable.ColumnGlmSequence] = value;
                }
            }
        }
        
        /// 
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }
        
        /// This is a number of ledger currency units
        public Double ActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualBase) 
                            || (((Double)(this[this.myTable.ColumnActualBase])) != value)))
                {
                    this[this.myTable.ColumnActualBase] = value;
                }
            }
        }
        
        /// This is a number of ledger currency units
        public Double BudgetBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetBase) 
                            || (((Double)(this[this.myTable.ColumnBudgetBase])) != value)))
                {
                    this[this.myTable.ColumnBudgetBase] = value;
                }
            }
        }
        
        /// Total for the specified period, 2nd (int'l) base currency.
        public Double ActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualIntl) 
                            || (((Double)(this[this.myTable.ColumnActualIntl])) != value)))
                {
                    this[this.myTable.ColumnActualIntl] = value;
                }
            }
        }
        
        /// Total for the specified period, 2nd (int'l) base currency.
        public Double BudgetIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetIntl) 
                            || (((Double)(this[this.myTable.ColumnBudgetIntl])) != value)))
                {
                    this[this.myTable.ColumnBudgetIntl] = value;
                }
            }
        }
        
        /// 
        public Double ActualForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualForeign) 
                            || (((Double)(this[this.myTable.ColumnActualForeign])) != value)))
                {
                    this[this.myTable.ColumnActualForeign] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
            this.SetNull(this.myTable.ColumnPeriodNumber);
            this[this.myTable.ColumnActualBase.Ordinal] = 0;
            this[this.myTable.ColumnBudgetBase.Ordinal] = 0;
            this[this.myTable.ColumnActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnBudgetIntl.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnActualForeign);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnActualBase);
        }
        
        /// assign NULL value
        public void SetActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnActualBase);
        }
        
        /// test for NULL value
        public bool IsBudgetBaseNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetBase);
        }
        
        /// assign NULL value
        public void SetBudgetBaseNull()
        {
            this.SetNull(this.myTable.ColumnBudgetBase);
        }
        
        /// test for NULL value
        public bool IsActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnActualIntl);
        }
        
        /// assign NULL value
        public void SetActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnActualIntl);
        }
        
        /// test for NULL value
        public bool IsBudgetIntlNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetIntl);
        }
        
        /// assign NULL value
        public void SetBudgetIntlNull()
        {
            this.SetNull(this.myTable.ColumnBudgetIntl);
        }
        
        /// test for NULL value
        public bool IsActualForeignNull()
        {
            return this.IsNull(this.myTable.ColumnActualForeign);
        }
        
        /// assign NULL value
        public void SetActualForeignNull()
        {
            this.SetNull(this.myTable.ColumnActualForeign);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Contains the calculation for the stewardship for a particular run.  Files and reports can be recreated from this.  ICH = International Clearing House (Handles transfering of funds and admin grant fees among offices.)
    [Serializable()]
    public class AIchStewardshipTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnPeriodNumber;
        
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        
        /// This is the date the stewardship was processed.
        public DataColumn ColumnDateProcessed;
        
        /// Income amount for foreign cost centre's stewardship
        public DataColumn ColumnIncomeAmount;
        
        /// Expense amount for foreign cost centre's stewardship
        public DataColumn ColumnExpenseAmount;
        
        /// Direct Transfer amount for foreign cost centre's stewardship
        public DataColumn ColumnDirectXferAmount;
        
        /// Income amount for foreign cost centre's stewardship in International Currency
        public DataColumn ColumnIncomeAmountIntl;
        
        /// Expense amount for foreign cost centre's stewardship in international currency
        public DataColumn ColumnExpenseAmountIntl;
        
        /// Direct Transfer amount for foreign cost centre's stewardship in international currency.
        public DataColumn ColumnDirectXferAmountIntl;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AIchStewardshipTable() : 
                base("AIchStewardship")
        {
        }
        
        /// constructor
        public AIchStewardshipTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AIchStewardshipTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AIchStewardshipRow this[int i]
        {
            get
            {
                return ((AIchStewardshipRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }
        
        /// get help text for column
        public static string GetPeriodNumberHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetPeriodNumberLabel()
        {
            return "Period Number";
        }
        
        /// get display format for column
        public static short GetPeriodNumberLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }
        
        /// get help text for column
        public static string GetIchNumberHelp()
        {
            return "identifes the ICH process number";
        }
        
        /// get label of column
        public static string GetIchNumberLabel()
        {
            return "ICH Process Number";
        }
        
        /// get display format for column
        public static short GetIchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateProcessedDBName()
        {
            return "a_date_processed_d";
        }
        
        /// get help text for column
        public static string GetDateProcessedHelp()
        {
            return "This is the date the stewardship was processed.";
        }
        
        /// get label of column
        public static string GetDateProcessedLabel()
        {
            return "Date Processed";
        }
        
        /// get display format for column
        public static short GetDateProcessedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIncomeAmountDBName()
        {
            return "a_income_amount_n";
        }
        
        /// get help text for column
        public static string GetIncomeAmountHelp()
        {
            return "Enter the income amount";
        }
        
        /// get label of column
        public static string GetIncomeAmountLabel()
        {
            return "Income Amount";
        }
        
        /// get display format for column
        public static short GetIncomeAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExpenseAmountDBName()
        {
            return "a_expense_amount_n";
        }
        
        /// get help text for column
        public static string GetExpenseAmountHelp()
        {
            return "Enter the expense amount";
        }
        
        /// get label of column
        public static string GetExpenseAmountLabel()
        {
            return "Expense Amount";
        }
        
        /// get display format for column
        public static short GetExpenseAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDirectXferAmountDBName()
        {
            return "a_direct_xfer_amount_n";
        }
        
        /// get help text for column
        public static string GetDirectXferAmountHelp()
        {
            return "Enter the Direct Transfer amount";
        }
        
        /// get label of column
        public static string GetDirectXferAmountLabel()
        {
            return "Direct Transfer Amount";
        }
        
        /// get display format for column
        public static short GetDirectXferAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIncomeAmountIntlDBName()
        {
            return "a_income_amount_intl_n";
        }
        
        /// get help text for column
        public static string GetIncomeAmountIntlHelp()
        {
            return "Enter the income amount";
        }
        
        /// get label of column
        public static string GetIncomeAmountIntlLabel()
        {
            return "Income Amount(Intl)";
        }
        
        /// get display format for column
        public static short GetIncomeAmountIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExpenseAmountIntlDBName()
        {
            return "a_expense_amount_intl_n";
        }
        
        /// get help text for column
        public static string GetExpenseAmountIntlHelp()
        {
            return "Enter the expense amount";
        }
        
        /// get label of column
        public static string GetExpenseAmountIntlLabel()
        {
            return "Expense Amount(Intl)";
        }
        
        /// get display format for column
        public static short GetExpenseAmountIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDirectXferAmountIntlDBName()
        {
            return "a_direct_xfer_amount_intl_n";
        }
        
        /// get help text for column
        public static string GetDirectXferAmountIntlHelp()
        {
            return "Enter the Direct Transfer amount";
        }
        
        /// get label of column
        public static string GetDirectXferAmountIntlLabel()
        {
            return "Direct Transfer Amount(Intl)";
        }
        
        /// get display format for column
        public static short GetDirectXferAmountIntlLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AIchStewardship";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_ich_stewardship";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Stewardship";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_period_number_i",
                    "a_ich_number_i",
                    "a_cost_centre_code_c",
                    "a_date_processed_d",
                    "a_income_amount_n",
                    "a_expense_amount_n",
                    "a_direct_xfer_amount_n",
                    "a_income_amount_intl_n",
                    "a_expense_amount_intl_n",
                    "a_direct_xfer_amount_intl_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnDateProcessed = this.Columns["a_date_processed_d"];
            this.ColumnIncomeAmount = this.Columns["a_income_amount_n"];
            this.ColumnExpenseAmount = this.Columns["a_expense_amount_n"];
            this.ColumnDirectXferAmount = this.Columns["a_direct_xfer_amount_n"];
            this.ColumnIncomeAmountIntl = this.Columns["a_income_amount_intl_n"];
            this.ColumnExpenseAmountIntl = this.Columns["a_expense_amount_intl_n"];
            this.ColumnDirectXferAmountIntl = this.Columns["a_direct_xfer_amount_intl_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnPeriodNumber,
                    this.ColumnIchNumber,
                    this.ColumnCostCentreCode};
        }
        
        /// get typed set of changes
        public AIchStewardshipTable GetChangesTyped()
        {
            return ((AIchStewardshipTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AIchStewardshipRow NewRowTyped(bool AWithDefaultValues)
        {
            AIchStewardshipRow ret = ((AIchStewardshipRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AIchStewardshipRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AIchStewardshipRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_processed_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_income_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_expense_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_direct_xfer_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_income_amount_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_expense_amount_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_direct_xfer_amount_intl_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnIchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDateProcessed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnIncomeAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnExpenseAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDirectXferAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnIncomeAmountIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnExpenseAmountIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDirectXferAmountIntl))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Contains the calculation for the stewardship for a particular run.  Files and reports can be recreated from this.  ICH = International Clearing House (Handles transfering of funds and admin grant fees among offices.)
    [Serializable()]
    public class AIchStewardshipRow : System.Data.DataRow
    {
        
        private AIchStewardshipTable myTable;
        
        /// Constructor
        public AIchStewardshipRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AIchStewardshipTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }
        
        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber) 
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This is the date the stewardship was processed.
        public System.DateTime DateProcessed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateProcessed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateProcessed) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateProcessed])) != value)))
                {
                    this[this.myTable.ColumnDateProcessed] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateProcessedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateProcessed], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateProcessedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateProcessed.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Income amount for foreign cost centre's stewardship
        public Double IncomeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIncomeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIncomeAmount) 
                            || (((Double)(this[this.myTable.ColumnIncomeAmount])) != value)))
                {
                    this[this.myTable.ColumnIncomeAmount] = value;
                }
            }
        }
        
        /// Expense amount for foreign cost centre's stewardship
        public Double ExpenseAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExpenseAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExpenseAmount) 
                            || (((Double)(this[this.myTable.ColumnExpenseAmount])) != value)))
                {
                    this[this.myTable.ColumnExpenseAmount] = value;
                }
            }
        }
        
        /// Direct Transfer amount for foreign cost centre's stewardship
        public Double DirectXferAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDirectXferAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDirectXferAmount) 
                            || (((Double)(this[this.myTable.ColumnDirectXferAmount])) != value)))
                {
                    this[this.myTable.ColumnDirectXferAmount] = value;
                }
            }
        }
        
        /// Income amount for foreign cost centre's stewardship in International Currency
        public Double IncomeAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIncomeAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIncomeAmountIntl) 
                            || (((Double)(this[this.myTable.ColumnIncomeAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnIncomeAmountIntl] = value;
                }
            }
        }
        
        /// Expense amount for foreign cost centre's stewardship in international currency
        public Double ExpenseAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExpenseAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExpenseAmountIntl) 
                            || (((Double)(this[this.myTable.ColumnExpenseAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnExpenseAmountIntl] = value;
                }
            }
        }
        
        /// Direct Transfer amount for foreign cost centre's stewardship in international currency.
        public Double DirectXferAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDirectXferAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDirectXferAmountIntl) 
                            || (((Double)(this[this.myTable.ColumnDirectXferAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnDirectXferAmountIntl] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnDateProcessed);
            this[this.myTable.ColumnIncomeAmount.Ordinal] = 0;
            this[this.myTable.ColumnExpenseAmount.Ordinal] = 0;
            this[this.myTable.ColumnDirectXferAmount.Ordinal] = 0;
            this[this.myTable.ColumnIncomeAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnExpenseAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnDirectXferAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsIncomeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnIncomeAmount);
        }
        
        /// assign NULL value
        public void SetIncomeAmountNull()
        {
            this.SetNull(this.myTable.ColumnIncomeAmount);
        }
        
        /// test for NULL value
        public bool IsExpenseAmountNull()
        {
            return this.IsNull(this.myTable.ColumnExpenseAmount);
        }
        
        /// assign NULL value
        public void SetExpenseAmountNull()
        {
            this.SetNull(this.myTable.ColumnExpenseAmount);
        }
        
        /// test for NULL value
        public bool IsDirectXferAmountNull()
        {
            return this.IsNull(this.myTable.ColumnDirectXferAmount);
        }
        
        /// assign NULL value
        public void SetDirectXferAmountNull()
        {
            this.SetNull(this.myTable.ColumnDirectXferAmount);
        }
        
        /// test for NULL value
        public bool IsIncomeAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnIncomeAmountIntl);
        }
        
        /// assign NULL value
        public void SetIncomeAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnIncomeAmountIntl);
        }
        
        /// test for NULL value
        public bool IsExpenseAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnExpenseAmountIntl);
        }
        
        /// assign NULL value
        public void SetExpenseAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnExpenseAmountIntl);
        }
        
        /// test for NULL value
        public bool IsDirectXferAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnDirectXferAmountIntl);
        }
        
        /// assign NULL value
        public void SetDirectXferAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnDirectXferAmountIntl);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Special payment programs the donor may give money through. (ie, Gift Aid in the UK). Currently not used in Petra release 1.
    [Serializable()]
    public class AMethodOfGivingTable : TTypedDataTable
    {
        
        /// Defines how a gift is given
        public DataColumn ColumnMethodOfGivingCode;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnMethodOfGivingDesc;
        
        /// Shows if the method of giving involves a trust
        public DataColumn ColumnTrustFlag;
        
        /// Shows if this method of giving involves a tax rebate
        public DataColumn ColumnTaxRebateFlag;
        
        /// Shows if this method of giving is used by recurring gifts
        public DataColumn ColumnRecurringMethodFlag;
        
        /// Shows whether this code is active
        public DataColumn ColumnActive;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AMethodOfGivingTable() : 
                base("AMethodOfGiving")
        {
        }
        
        /// constructor
        public AMethodOfGivingTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AMethodOfGivingTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AMethodOfGivingRow this[int i]
        {
            get
            {
                return ((AMethodOfGivingRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetMethodOfGivingCodeDBName()
        {
            return "a_method_of_giving_code_c";
        }
        
        /// get help text for column
        public static string GetMethodOfGivingCodeHelp()
        {
            return "Enter method of giving";
        }
        
        /// get label of column
        public static string GetMethodOfGivingCodeLabel()
        {
            return "Method Of Giving";
        }
        
        /// get character length for column
        public static short GetMethodOfGivingCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMethodOfGivingDescDBName()
        {
            return "a_method_of_giving_desc_c";
        }
        
        /// get help text for column
        public static string GetMethodOfGivingDescHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetMethodOfGivingDescLabel()
        {
            return "Method of Giving Description";
        }
        
        /// get character length for column
        public static short GetMethodOfGivingDescLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTrustFlagDBName()
        {
            return "a_trust_flag_l";
        }
        
        /// get help text for column
        public static string GetTrustFlagHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetTrustFlagLabel()
        {
            return "Trust Flag";
        }
        
        /// get display format for column
        public static short GetTrustFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTaxRebateFlagDBName()
        {
            return "a_tax_rebate_flag_l";
        }
        
        /// get help text for column
        public static string GetTaxRebateFlagHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetTaxRebateFlagLabel()
        {
            return "Tax Rebate Flag";
        }
        
        /// get display format for column
        public static short GetTaxRebateFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRecurringMethodFlagDBName()
        {
            return "a_recurring_method_flag_l";
        }
        
        /// get help text for column
        public static string GetRecurringMethodFlagHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetRecurringMethodFlagLabel()
        {
            return "Recurring Method Flag";
        }
        
        /// get display format for column
        public static short GetRecurringMethodFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }
        
        /// get help text for column
        public static string GetActiveHelp()
        {
            return "Select if this method can be used";
        }
        
        /// get label of column
        public static string GetActiveLabel()
        {
            return "Active";
        }
        
        /// get display format for column
        public static short GetActiveLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AMethodOfGiving";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_method_of_giving";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Method of Giving";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_method_of_giving_code_c",
                    "a_method_of_giving_desc_c",
                    "a_trust_flag_l",
                    "a_tax_rebate_flag_l",
                    "a_recurring_method_flag_l",
                    "a_active_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnMethodOfGivingCode = this.Columns["a_method_of_giving_code_c"];
            this.ColumnMethodOfGivingDesc = this.Columns["a_method_of_giving_desc_c"];
            this.ColumnTrustFlag = this.Columns["a_trust_flag_l"];
            this.ColumnTaxRebateFlag = this.Columns["a_tax_rebate_flag_l"];
            this.ColumnRecurringMethodFlag = this.Columns["a_recurring_method_flag_l"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnMethodOfGivingCode};
        }
        
        /// get typed set of changes
        public AMethodOfGivingTable GetChangesTyped()
        {
            return ((AMethodOfGivingTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AMethodOfGivingRow NewRowTyped(bool AWithDefaultValues)
        {
            AMethodOfGivingRow ret = ((AMethodOfGivingRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AMethodOfGivingRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AMethodOfGivingRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_method_of_giving_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_giving_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_trust_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_rebate_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_recurring_method_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnMethodOfGivingCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnMethodOfGivingDesc))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnTrustFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTaxRebateFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnRecurringMethodFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnActive))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Special payment programs the donor may give money through. (ie, Gift Aid in the UK). Currently not used in Petra release 1.
    [Serializable()]
    public class AMethodOfGivingRow : System.Data.DataRow
    {
        
        private AMethodOfGivingTable myTable;
        
        /// Constructor
        public AMethodOfGivingRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AMethodOfGivingTable)(this.Table));
        }
        
        /// Defines how a gift is given
        public String MethodOfGivingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfGivingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfGivingCode) 
                            || (((String)(this[this.myTable.ColumnMethodOfGivingCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfGivingCode] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String MethodOfGivingDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfGivingDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfGivingDesc) 
                            || (((String)(this[this.myTable.ColumnMethodOfGivingDesc])) != value)))
                {
                    this[this.myTable.ColumnMethodOfGivingDesc] = value;
                }
            }
        }
        
        /// Shows if the method of giving involves a trust
        public Boolean TrustFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTrustFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTrustFlag) 
                            || (((Boolean)(this[this.myTable.ColumnTrustFlag])) != value)))
                {
                    this[this.myTable.ColumnTrustFlag] = value;
                }
            }
        }
        
        /// Shows if this method of giving involves a tax rebate
        public Boolean TaxRebateFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxRebateFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxRebateFlag) 
                            || (((Boolean)(this[this.myTable.ColumnTaxRebateFlag])) != value)))
                {
                    this[this.myTable.ColumnTaxRebateFlag] = value;
                }
            }
        }
        
        /// Shows if this method of giving is used by recurring gifts
        public Boolean RecurringMethodFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecurringMethodFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecurringMethodFlag) 
                            || (((Boolean)(this[this.myTable.ColumnRecurringMethodFlag])) != value)))
                {
                    this[this.myTable.ColumnRecurringMethodFlag] = value;
                }
            }
        }
        
        /// Shows whether this code is active
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive) 
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnMethodOfGivingCode);
            this.SetNull(this.myTable.ColumnMethodOfGivingDesc);
            this[this.myTable.ColumnTrustFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxRebateFlag.Ordinal] = false;
            this[this.myTable.ColumnRecurringMethodFlag.Ordinal] = false;
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }
        
        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Stores administrative fees and grants which have been calculated on gifts.
    [Serializable()]
    public class AProcessedFeeTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// the fee which the calculated amounts are stored against.
        public DataColumn ColumnFeeCode;
        
        /// Cost centre code which the fee will be charged against.
        public DataColumn ColumnCostCentreCode;
        
        /// Period number
        public DataColumn ColumnPeriodNumber;
        
        /// Total Amount of the fee for the given period.
        public DataColumn ColumnPeriodicAmount;
        
        /// Number of the gift batch containing this detail.
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a gift transaction within a gift batch.
        public DataColumn ColumnGiftTransactionNumber;
        
        /// Identifies a gift detail within a gift transaction.   When a donor gives a donation to multiple recipients (a split gift), a gift detail record is created for each recipient.
        public DataColumn ColumnDetailNumber;
        
        /// Date &quot;&quot;admin fee calculations&quot;&quot; have been run to fee total has been created as a transaction in the general ledger.
        public DataColumn ColumnProcessedDate;
        
        /// System generated time stamp.
        public DataColumn ColumnTimestamp;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AProcessedFeeTable() : 
                base("AProcessedFee")
        {
        }
        
        /// constructor
        public AProcessedFeeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AProcessedFeeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AProcessedFeeRow this[int i]
        {
            get
            {
                return ((AProcessedFeeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFeeCodeDBName()
        {
            return "a_fee_code_c";
        }
        
        /// get help text for column
        public static string GetFeeCodeHelp()
        {
            return "the fee which the calculated amounts are stored against.";
        }
        
        /// get label of column
        public static string GetFeeCodeLabel()
        {
            return "Fee Code";
        }
        
        /// get character length for column
        public static short GetFeeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Cost centre code which the fee will be charged against.";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }
        
        /// get help text for column
        public static string GetPeriodNumberHelp()
        {
            return "Period number";
        }
        
        /// get label of column
        public static string GetPeriodNumberLabel()
        {
            return "Period Number";
        }
        
        /// get display format for column
        public static short GetPeriodNumberLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodicAmountDBName()
        {
            return "a_periodic_amount_n";
        }
        
        /// get help text for column
        public static string GetPeriodicAmountHelp()
        {
            return "Total Amount of the fee for the given period.";
        }
        
        /// get label of column
        public static string GetPeriodicAmountLabel()
        {
            return "Total Amount";
        }
        
        /// get display format for column
        public static short GetPeriodicAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "Number of the gift batch containing this detail.";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "a_batch_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetGiftTransactionNumberDBName()
        {
            return "a_gift_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetGiftTransactionNumberHelp()
        {
            return "Identifies a gift transaction within a gift batch.";
        }
        
        /// get label of column
        public static string GetGiftTransactionNumberLabel()
        {
            return "a_gift_transaction_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }
        
        /// get help text for column
        public static string GetDetailNumberHelp()
        {
            return "Identifies a gift detail within a gift transaction.   When a donor gives a donati" +
                "on to multiple recipients (a split gift), a gift detail record is created for ea" +
                "ch recipient.";
        }
        
        /// get label of column
        public static string GetDetailNumberLabel()
        {
            return "a_detail_number_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetProcessedDateDBName()
        {
            return "a_processed_date_d";
        }
        
        /// get help text for column
        public static string GetProcessedDateHelp()
        {
            return "Date \"\"admin fee calculations\"\" were pushed through to the ledger";
        }
        
        /// get label of column
        public static string GetProcessedDateLabel()
        {
            return "Processed Date";
        }
        
        /// get display format for column
        public static short GetProcessedDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimestampDBName()
        {
            return "s_timestamp_i";
        }
        
        /// get help text for column
        public static string GetTimestampHelp()
        {
            return "System generated time stamp.";
        }
        
        /// get label of column
        public static string GetTimestampLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetTimestampLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AProcessedFee";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_processed_fee";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Processed Fees";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    5,
                    6,
                    7,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_fee_code_c",
                    "a_cost_centre_code_c",
                    "a_period_number_i",
                    "a_periodic_amount_n",
                    "a_batch_number_i",
                    "a_gift_transaction_number_i",
                    "a_detail_number_i",
                    "a_processed_date_d",
                    "s_timestamp_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnFeeCode = this.Columns["a_fee_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnPeriodicAmount = this.Columns["a_periodic_amount_n"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnGiftTransactionNumber = this.Columns["a_gift_transaction_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnProcessedDate = this.Columns["a_processed_date_d"];
            this.ColumnTimestamp = this.Columns["s_timestamp_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnGiftTransactionNumber,
                    this.ColumnDetailNumber,
                    this.ColumnFeeCode};
        }
        
        /// get typed set of changes
        public AProcessedFeeTable GetChangesTyped()
        {
            return ((AProcessedFeeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AProcessedFeeRow NewRowTyped(bool AWithDefaultValues)
        {
            AProcessedFeeRow ret = ((AProcessedFeeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AProcessedFeeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AProcessedFeeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_periodic_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_processed_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_timestamp_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnFeeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnPeriodicAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnGiftTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDetailNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnProcessedDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTimestamp))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Stores administrative fees and grants which have been calculated on gifts.
    [Serializable()]
    public class AProcessedFeeRow : System.Data.DataRow
    {
        
        private AProcessedFeeTable myTable;
        
        /// Constructor
        public AProcessedFeeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AProcessedFeeTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// the fee which the calculated amounts are stored against.
        public String FeeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeCode) 
                            || (((String)(this[this.myTable.ColumnFeeCode])) != value)))
                {
                    this[this.myTable.ColumnFeeCode] = value;
                }
            }
        }
        
        /// Cost centre code which the fee will be charged against.
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// Period number
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }
        
        /// Total Amount of the fee for the given period.
        public Double PeriodicAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodicAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodicAmount) 
                            || (((Double)(this[this.myTable.ColumnPeriodicAmount])) != value)))
                {
                    this[this.myTable.ColumnPeriodicAmount] = value;
                }
            }
        }
        
        /// Number of the gift batch containing this detail.
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a gift transaction within a gift batch.
        public Int32 GiftTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnGiftTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnGiftTransactionNumber] = value;
                }
            }
        }
        
        /// Identifies a gift detail within a gift transaction.   When a donor gives a donation to multiple recipients (a split gift), a gift detail record is created for each recipient.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber) 
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }
        
        /// Date &quot;&quot;admin fee calculations&quot;&quot; have been run to fee total has been created as a transaction in the general ledger.
        public System.DateTime ProcessedDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProcessedDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProcessedDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnProcessedDate])) != value)))
                {
                    this[this.myTable.ColumnProcessedDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime ProcessedDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnProcessedDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime ProcessedDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnProcessedDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// System generated time stamp.
        public Int32 Timestamp
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimestamp.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimestamp) 
                            || (((Int32)(this[this.myTable.ColumnTimestamp])) != value)))
                {
                    this[this.myTable.ColumnTimestamp] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFeeCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnPeriodicAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchNumber);
            this.SetNull(this.myTable.ColumnGiftTransactionNumber);
            this.SetNull(this.myTable.ColumnDetailNumber);
            this.SetNull(this.myTable.ColumnProcessedDate);
            this.SetNull(this.myTable.ColumnTimestamp);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsProcessedDateNull()
        {
            return this.IsNull(this.myTable.ColumnProcessedDate);
        }
        
        /// assign NULL value
        public void SetProcessedDateNull()
        {
            this.SetNull(this.myTable.ColumnProcessedDate);
        }
        
        /// test for NULL value
        public bool IsTimestampNull()
        {
            return this.IsNull(this.myTable.ColumnTimestamp);
        }
        
        /// assign NULL value
        public void SetTimestampNull()
        {
            this.SetNull(this.myTable.ColumnTimestamp);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Various ways a transaction may originate, depending on the subsystem.
    [Serializable()]
    public class ATransactionTypeTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnDebitAccountCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnCreditAccountCode;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastRecurringJournal;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnTransactionTypeDescription;
        
        /// 
        public DataColumn ColumnBalancingAccountCode;
        
        /// Is this transaction type a special transaction type or not?
        public DataColumn ColumnSpecialTransactionType;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ATransactionTypeTable() : 
                base("ATransactionType")
        {
        }
        
        /// constructor
        public ATransactionTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ATransactionTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ATransactionTypeRow this[int i]
        {
            get
            {
                return ((ATransactionTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System Code";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Transaction Type Code";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitAccountCodeDBName()
        {
            return "a_debit_account_code_c";
        }
        
        /// get help text for column
        public static string GetDebitAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetDebitAccountCodeLabel()
        {
            return "Debit Account Code";
        }
        
        /// get character length for column
        public static short GetDebitAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreditAccountCodeDBName()
        {
            return "a_credit_account_code_c";
        }
        
        /// get help text for column
        public static string GetCreditAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetCreditAccountCodeLabel()
        {
            return "Credit Account Code";
        }
        
        /// get character length for column
        public static short GetCreditAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }
        
        /// get help text for column
        public static string GetLastJournalHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetLastJournalLabel()
        {
            return "Last Journal Number";
        }
        
        /// get display format for column
        public static short GetLastJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastRecurringJournalDBName()
        {
            return "a_last_recurring_journal_i";
        }
        
        /// get help text for column
        public static string GetLastRecurringJournalHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetLastRecurringJournalLabel()
        {
            return "Last Recurring Journal Number";
        }
        
        /// get display format for column
        public static short GetLastRecurringJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeDescriptionDBName()
        {
            return "a_transaction_type_description_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetTransactionTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetTransactionTypeDescriptionLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBalancingAccountCodeDBName()
        {
            return "a_balancing_account_code_c";
        }
        
        /// get help text for column
        public static string GetBalancingAccountCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBalancingAccountCodeLabel()
        {
            return "Balancing Account Code";
        }
        
        /// get character length for column
        public static short GetBalancingAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecialTransactionTypeDBName()
        {
            return "a_special_transaction_type_l";
        }
        
        /// get help text for column
        public static string GetSpecialTransactionTypeHelp()
        {
            return "Set to YES or NO.";
        }
        
        /// get label of column
        public static string GetSpecialTransactionTypeLabel()
        {
            return "Special Transaction Type";
        }
        
        /// get display format for column
        public static short GetSpecialTransactionTypeLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ATransactionType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_transaction_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Transaction Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_sub_system_code_c",
                    "a_transaction_type_code_c",
                    "a_debit_account_code_c",
                    "a_credit_account_code_c",
                    "a_last_journal_i",
                    "a_last_recurring_journal_i",
                    "a_transaction_type_description_c",
                    "a_balancing_account_code_c",
                    "a_special_transaction_type_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnDebitAccountCode = this.Columns["a_debit_account_code_c"];
            this.ColumnCreditAccountCode = this.Columns["a_credit_account_code_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnLastRecurringJournal = this.Columns["a_last_recurring_journal_i"];
            this.ColumnTransactionTypeDescription = this.Columns["a_transaction_type_description_c"];
            this.ColumnBalancingAccountCode = this.Columns["a_balancing_account_code_c"];
            this.ColumnSpecialTransactionType = this.Columns["a_special_transaction_type_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnSubSystemCode,
                    this.ColumnTransactionTypeCode};
        }
        
        /// get typed set of changes
        public ATransactionTypeTable GetChangesTyped()
        {
            return ((ATransactionTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ATransactionTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransactionTypeRow ret = ((ATransactionTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ATransactionTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransactionTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_credit_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_recurring_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_balancing_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_special_transaction_type_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDebitAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCreditAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnLastRecurringJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnBalancingAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnSpecialTransactionType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Various ways a transaction may originate, depending on the subsystem.
    [Serializable()]
    public class ATransactionTypeRow : System.Data.DataRow
    {
        
        private ATransactionTypeTable myTable;
        
        /// Constructor
        public ATransactionTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ATransactionTypeTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String DebitAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitAccountCode) 
                            || (((String)(this[this.myTable.ColumnDebitAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDebitAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String CreditAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreditAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreditAccountCode) 
                            || (((String)(this[this.myTable.ColumnCreditAccountCode])) != value)))
                {
                    this[this.myTable.ColumnCreditAccountCode] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastRecurringJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecurringJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecurringJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastRecurringJournal])) != value)))
                {
                    this[this.myTable.ColumnLastRecurringJournal] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String TransactionTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeDescription) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeDescription] = value;
                }
            }
        }
        
        /// 
        public String BalancingAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBalancingAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBalancingAccountCode) 
                            || (((String)(this[this.myTable.ColumnBalancingAccountCode])) != value)))
                {
                    this[this.myTable.ColumnBalancingAccountCode] = value;
                }
            }
        }
        
        /// Is this transaction type a special transaction type or not?
        public Boolean SpecialTransactionType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialTransactionType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialTransactionType) 
                            || (((Boolean)(this[this.myTable.ColumnSpecialTransactionType])) != value)))
                {
                    this[this.myTable.ColumnSpecialTransactionType] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnDebitAccountCode);
            this.SetNull(this.myTable.ColumnCreditAccountCode);
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnLastRecurringJournal.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
            this.SetNull(this.myTable.ColumnBalancingAccountCode);
            this[this.myTable.ColumnSpecialTransactionType.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBalancingAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBalancingAccountCode);
        }
        
        /// assign NULL value
        public void SetBalancingAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnBalancingAccountCode);
        }
        
        /// test for NULL value
        public bool IsSpecialTransactionTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialTransactionType);
        }
        
        /// assign NULL value
        public void SetSpecialTransactionTypeNull()
        {
            this.SetNull(this.myTable.ColumnSpecialTransactionType);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL batches from the previous financial year.
    [Serializable()]
    public class APreviousYearBatchTable : TTypedDataTable
    {
        
        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public DataColumn ColumnBatchPeriod;
        
        /// The financial year that the batch belongs to.
        public DataColumn ColumnBatchYear;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateOfEntry;
        
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public APreviousYearBatchTable() : 
                base("APreviousYearBatch")
        {
        }
        
        /// constructor
        public APreviousYearBatchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public APreviousYearBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public APreviousYearBatchRow this[int i]
        {
            get
            {
                return ((APreviousYearBatchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }
        
        /// get help text for column
        public static string GetBatchDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetBatchDescriptionLabel()
        {
            return "Batch Description";
        }
        
        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }
        
        /// get help text for column
        public static string GetBatchControlTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchControlTotalLabel()
        {
            return "Batch Control Total";
        }
        
        /// get display format for column
        public static short GetBatchControlTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }
        
        /// get help text for column
        public static string GetBatchRunningTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchRunningTotalLabel()
        {
            return "Batch Running Total";
        }
        
        /// get display format for column
        public static short GetBatchRunningTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchDebitTotalLabel()
        {
            return "Batch Debit Total";
        }
        
        /// get display format for column
        public static short GetBatchDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchCreditTotalLabel()
        {
            return "Batch Credit Total";
        }
        
        /// get display format for column
        public static short GetBatchCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }
        
        /// get help text for column
        public static string GetBatchPeriodHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetBatchPeriodLabel()
        {
            return "Batch Period Number";
        }
        
        /// get display format for column
        public static short GetBatchPeriodLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchYearDBName()
        {
            return "a_batch_year_i";
        }
        
        /// get help text for column
        public static string GetBatchYearHelp()
        {
            return "The financial year that the batch belongs to.";
        }
        
        /// get label of column
        public static string GetBatchYearLabel()
        {
            return "a_batch_year_i";
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Entry Date";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }
        
        /// get help text for column
        public static string GetBatchStatusHelp()
        {
            return "Has this batch been posted yet?";
        }
        
        /// get label of column
        public static string GetBatchStatusLabel()
        {
            return "Batch status";
        }
        
        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }
        
        /// get help text for column
        public static string GetLastJournalHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetLastJournalLabel()
        {
            return "Last Journal Number";
        }
        
        /// get display format for column
        public static short GetLastJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "APreviousYearBatch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_batch";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Batch (Last Year)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_batch_description_c",
                    "a_batch_control_total_n",
                    "a_batch_running_total_n",
                    "a_batch_debit_total_n",
                    "a_batch_credit_total_n",
                    "a_batch_period_i",
                    "a_batch_year_i",
                    "a_date_effective_d",
                    "a_date_of_entry_d",
                    "a_batch_status_c",
                    "a_last_journal_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnBatchYear = this.Columns["a_batch_year_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber};
        }
        
        /// get typed set of changes
        public APreviousYearBatchTable GetChangesTyped()
        {
            return ((APreviousYearBatchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public APreviousYearBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearBatchRow ret = ((APreviousYearBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public APreviousYearBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearBatchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnBatchControlTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchRunningTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchYear))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnBatchStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnLastJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL batches from the previous financial year.
    [Serializable()]
    public class APreviousYearBatchRow : System.Data.DataRow
    {
        
        private APreviousYearBatchTable myTable;
        
        /// Constructor
        public APreviousYearBatchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((APreviousYearBatchTable)(this.Table));
        }
        
        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription) 
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Double BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }
        
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod) 
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }
        
        /// The financial year that the batch belongs to.
        public Int32 BatchYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchYear) 
                            || (((Int32)(this[this.myTable.ColumnBatchYear])) != value)))
                {
                    this[this.myTable.ColumnBatchYear] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus) 
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchYear);
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Posted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }
        
        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }
        
        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }
        
        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL journals from the previous financial year.
    [Serializable()]
    public class APreviousYearJournalTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// 
        public DataColumn ColumnLastTransactionNumber;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        
        /// 
        public DataColumn ColumnBaseCurrency;
        
        /// The rate of exchange from the journal currency (in a_transaction_currency_c) to the ledger base currency.
        public DataColumn ColumnExchangeRateToBase;
        
        /// The date and time
        public DataColumn ColumnExchangeRateTime;
        
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public APreviousYearJournalTable() : 
                base("APreviousYearJournal")
        {
        }
        
        /// constructor
        public APreviousYearJournalTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public APreviousYearJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public APreviousYearJournalRow this[int i]
        {
            get
            {
                return ((APreviousYearJournalRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }
        
        /// get help text for column
        public static string GetJournalDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetJournalDescriptionLabel()
        {
            return "Journal Description";
        }
        
        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalDebitTotalLabel()
        {
            return "Journal Debit Total";
        }
        
        /// get display format for column
        public static short GetJournalDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalCreditTotalLabel()
        {
            return "Journal Credit Total";
        }
        
        /// get display format for column
        public static short GetJournalCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }
        
        /// get help text for column
        public static string GetJournalPeriodHelp()
        {
            return "This defines which accounting period is being used";
        }
        
        /// get label of column
        public static string GetJournalPeriodLabel()
        {
            return "Journal Period Number";
        }
        
        /// get display format for column
        public static short GetJournalPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Enter the date for the batch to come into effect.";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Date Effective";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Transaction Type";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetLastTransactionNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastTransactionNumberLabel()
        {
            return "Last Transaction Number";
        }
        
        /// get display format for column
        public static short GetLastTransactionNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }
        
        /// get help text for column
        public static string GetJournalStatusHelp()
        {
            return "Has a journal been posted yet";
        }
        
        /// get label of column
        public static string GetJournalStatusLabel()
        {
            return "Journal Status";
        }
        
        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }
        
        /// get help text for column
        public static string GetTransactionCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetTransactionCurrencyLabel()
        {
            return "Transaction Currency";
        }
        
        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }
        
        /// get help text for column
        public static string GetBaseCurrencyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBaseCurrencyLabel()
        {
            return "a_base_currency_c";
        }
        
        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }
        
        /// get help text for column
        public static string GetExchangeRateToBaseHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetExchangeRateToBaseLabel()
        {
            return "Exchange Rate to Base";
        }
        
        /// get display format for column
        public static short GetExchangeRateToBaseLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }
        
        /// get help text for column
        public static string GetExchangeRateTimeHelp()
        {
            return "The date and time";
        }
        
        /// get label of column
        public static string GetExchangeRateTimeLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetExchangeRateTimeLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }
        
        /// get help text for column
        public static string GetReversedHelp()
        {
            return "Indicates whether or not a journal has been reversed.";
        }
        
        /// get label of column
        public static string GetReversedLabel()
        {
            return "Journal Reversed?";
        }
        
        /// get display format for column
        public static short GetReversedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "APreviousYearJournal";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_journal";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Journal (Last Year)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_journal_description_c",
                    "a_journal_debit_total_n",
                    "a_journal_credit_total_n",
                    "a_journal_period_i",
                    "a_date_effective_d",
                    "a_transaction_type_code_c",
                    "a_last_transaction_number_i",
                    "a_sub_system_code_c",
                    "a_journal_status_c",
                    "a_transaction_currency_c",
                    "a_base_currency_c",
                    "a_exchange_rate_to_base_n",
                    "a_exchange_rate_time_i",
                    "a_reversed_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber};
        }
        
        /// get typed set of changes
        public APreviousYearJournalTable GetChangesTyped()
        {
            return ((APreviousYearJournalTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public APreviousYearJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearJournalRow ret = ((APreviousYearJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public APreviousYearJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearJournalRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnJournalDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnJournalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnExchangeRateToBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnExchangeRateTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReversed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL journals from the previous financial year.
    [Serializable()]
    public class APreviousYearJournalRow : System.Data.DataRow
    {
        
        private APreviousYearJournalTable myTable;
        
        /// Constructor
        public APreviousYearJournalRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((APreviousYearJournalTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription) 
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod) 
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// 
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus) 
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency) 
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }
        
        /// 
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency) 
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }
        
        /// The rate of exchange from the journal currency (in a_transaction_currency_c) to the ledger base currency.
        public Double ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase) 
                            || (((Double)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }
        
        /// The date and time
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime) 
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }
        
        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed) 
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }
        
        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL transactions from the previous financial year.
    [Serializable()]
    public class APreviousYearTransactionTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// 
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnPrimaryAccountCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnPrimaryCostCentreCode;
        
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        
        /// 
        public DataColumn ColumnAnalysisIndicator;
        
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        
        /// 
        public DataColumn ColumnNarrative;
        
        /// 
        public DataColumn ColumnDebitCreditIndicator;
        
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        
        /// 
        public DataColumn ColumnSubType;
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt porcessing centre
        public DataColumn ColumnSourceFlag;
        
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public APreviousYearTransactionTable() : 
                base("APreviousYearTransaction")
        {
        }
        
        /// constructor
        public APreviousYearTransactionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public APreviousYearTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public APreviousYearTransactionRow this[int i]
        {
            get
            {
                return ((APreviousYearTransactionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "a_journal_number_i";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetPrimaryAccountCodeLabel()
        {
            return "Primary Account Code";
        }
        
        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetPrimaryCostCentreCodeLabel()
        {
            return "Primary Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }
        
        /// get help text for column
        public static string GetTransactionDateHelp()
        {
            return "Date the transaction took place";
        }
        
        /// get label of column
        public static string GetTransactionDateLabel()
        {
            return "Transaction Date";
        }
        
        /// get display format for column
        public static short GetTransactionDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }
        
        /// get help text for column
        public static string GetTransactionAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetTransactionAmountLabel()
        {
            return "Transaction Amount";
        }
        
        /// get display format for column
        public static short GetTransactionAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInBaseCurrencyHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetAmountInBaseCurrencyLabel()
        {
            return "Amount in Base Currency";
        }
        
        /// get display format for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }
        
        /// get help text for column
        public static string GetAnalysisIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisIndicatorLabel()
        {
            return "Analysis Indicator";
        }
        
        /// get display format for column
        public static short GetAnalysisIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }
        
        /// get help text for column
        public static string GetReconciledStatusHelp()
        {
            return "Shows if the transaction has been reconciled or not";
        }
        
        /// get label of column
        public static string GetReconciledStatusLabel()
        {
            return "a_reconciled_status_l";
        }
        
        /// get display format for column
        public static short GetReconciledStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }
        
        /// get help text for column
        public static string GetNarrativeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNarrativeLabel()
        {
            return "Narrative";
        }
        
        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 120;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }
        
        /// get help text for column
        public static string GetDebitCreditIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDebitCreditIndicatorLabel()
        {
            return "Debit/Credit Indicator";
        }
        
        /// get display format for column
        public static short GetDebitCreditIndicatorLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }
        
        /// get help text for column
        public static string GetTransactionStatusHelp()
        {
            return "Has a transaction been posted yet";
        }
        
        /// get label of column
        public static string GetTransactionStatusLabel()
        {
            return "Transaction Posted Status";
        }
        
        /// get display format for column
        public static short GetTransactionStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }
        
        /// get help text for column
        public static string GetHeaderNumberHelp()
        {
            return "The header (eg, cashbook #) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetHeaderNumberLabel()
        {
            return "Header Number";
        }
        
        /// get display format for column
        public static short GetHeaderNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }
        
        /// get help text for column
        public static string GetDetailNumberHelp()
        {
            return "The detail (within the header) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetDetailNumberLabel()
        {
            return "Detail Number";
        }
        
        /// get display format for column
        public static short GetDetailNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }
        
        /// get help text for column
        public static string GetSubTypeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubTypeLabel()
        {
            return "a_sub_type_c";
        }
        
        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }
        
        /// get help text for column
        public static string GetToIltFlagHelp()
        {
            return "Indicates whether the ILT transaction has been transferred to transaction for ILT" +
                " file.";
        }
        
        /// get label of column
        public static string GetToIltFlagLabel()
        {
            return "Transferred to ILT Ledger";
        }
        
        /// get display format for column
        public static short GetToIltFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }
        
        /// get help text for column
        public static string GetSourceFlagHelp()
        {
            return "To flag a transaction as having come from a source ledger and\r\nbeen processed in " +
                "an ilt porcessing centre";
        }
        
        /// get label of column
        public static string GetSourceFlagLabel()
        {
            return "Source Transaction";
        }
        
        /// get display format for column
        public static short GetSourceFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }
        
        /// get help text for column
        public static string GetReferenceHelp()
        {
            return "Enter a reference code.";
        }
        
        /// get label of column
        public static string GetReferenceLabel()
        {
            return "Reference";
        }
        
        /// get character length for column
        public static short GetReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }
        
        /// get help text for column
        public static string GetSourceReferenceHelp()
        {
            return "Transaction key which initiated an ILT transaction";
        }
        
        /// get label of column
        public static string GetSourceReferenceLabel()
        {
            return "Source Reference";
        }
        
        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }
        
        /// get help text for column
        public static string GetSystemGeneratedHelp()
        {
            return "Was this transaction generated automatically by the system?";
        }
        
        /// get label of column
        public static string GetSystemGeneratedLabel()
        {
            return "System Generated";
        }
        
        /// get display format for column
        public static short GetSystemGeneratedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInIntlCurrencyHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetAmountInIntlCurrencyLabel()
        {
            return "Amount in International Currency";
        }
        
        /// get display format for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "APreviousYearTransaction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_transaction";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Transaction (Last Year)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_primary_account_code_c",
                    "a_cost_centre_code_c",
                    "a_primary_cost_centre_code_c",
                    "a_transaction_date_d",
                    "a_transaction_amount_n",
                    "a_amount_in_base_currency_n",
                    "a_analysis_indicator_l",
                    "a_reconciled_status_l",
                    "a_narrative_c",
                    "a_debit_credit_indicator_l",
                    "a_transaction_status_l",
                    "a_header_number_i",
                    "a_detail_number_i",
                    "a_sub_type_c",
                    "a_to_ilt_flag_l",
                    "a_source_flag_l",
                    "a_reference_c",
                    "a_source_reference_c",
                    "a_system_generated_l",
                    "a_amount_in_intl_currency_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber};
        }
        
        /// get typed set of changes
        public APreviousYearTransactionTable GetChangesTyped()
        {
            return ((APreviousYearTransactionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public APreviousYearTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearTransactionRow ret = ((APreviousYearTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public APreviousYearTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearTransactionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPrimaryAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnPrimaryCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAmountInBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAnalysisIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReconciledStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNarrative))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 240);
            }
            if ((ACol == ColumnDebitCreditIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTransactionStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnHeaderNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDetailNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToIltFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSourceFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSourceReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSystemGenerated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAmountInIntlCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL transactions from the previous financial year.
    [Serializable()]
    public class APreviousYearTransactionRow : System.Data.DataRow
    {
        
        private APreviousYearTransactionTable myTable;
        
        /// Constructor
        public APreviousYearTransactionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((APreviousYearTransactionTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }
        
        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime TransactionDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime TransactionDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is a number of currency units
        public Double TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount) 
                            || (((Double)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }
        
        /// 
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }
        
        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus) 
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }
        
        /// 
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative) 
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }
        
        /// 
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }
        
        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus) 
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber) 
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }
        
        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber) 
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }
        
        /// 
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType) 
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag) 
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt porcessing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }
        
        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference) 
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }
        
        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference) 
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }
        
        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated) 
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }
        
        /// The transaction amount in the second base currency.
        public Double AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }
        
        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }
        
        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }
        
        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }
        
        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }
        
        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }
        
        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }
        
        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }
        
        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }
        
        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }
        
        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }
        
        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }
        
        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }
        
        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }
        
        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL transaction Analysis Attributes from the previous financial year.
    [Serializable()]
    public class APrevYearTransAnalAttribTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// 
        public DataColumn ColumnAnalysisAttributeValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public APrevYearTransAnalAttribTable() : 
                base("APrevYearTransAnalAttrib")
        {
        }
        
        /// constructor
        public APrevYearTransAnalAttribTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public APrevYearTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public APrevYearTransAnalAttribRow this[int i]
        {
            get
            {
                return ((APrevYearTransAnalAttribRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }
        
        /// get help text for column
        public static string GetAnalysisAttributeValueHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisAttributeValueLabel()
        {
            return "Analysis Attribute Value";
        }
        
        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "APrevYearTransAnalAttrib";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_prev_year_trans_anal_attrib";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Last Year Trans Anal Attri";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    6};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_analysis_type_code_c",
                    "a_analysis_attribute_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber,
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public APrevYearTransAnalAttribTable GetChangesTyped()
        {
            return ((APrevYearTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public APrevYearTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            APrevYearTransAnalAttribRow ret = ((APrevYearTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public APrevYearTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APrevYearTransAnalAttribRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisAttributeValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL transaction Analysis Attributes from the previous financial year.
    [Serializable()]
    public class APrevYearTransAnalAttribRow : System.Data.DataRow
    {
        
        private APrevYearTransAnalAttribTable myTable;
        
        /// Constructor
        public APrevYearTransAnalAttribRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((APrevYearTransAnalAttribTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue) 
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Old rates no longer in use.
    [Serializable()]
    public class APrevYearCorpExRateTable : TTypedDataTable
    {
        
        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        
        /// System generated date/time stamp.
        public DataColumn ColumnTimeEffectiveFrom;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public APrevYearCorpExRateTable() : 
                base("APrevYearCorpExRate")
        {
        }
        
        /// constructor
        public APrevYearCorpExRateTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public APrevYearCorpExRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public APrevYearCorpExRateRow this[int i]
        {
            get
            {
                return ((APrevYearCorpExRateRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }
        
        /// get help text for column
        public static string GetFromCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetFromCurrencyCodeLabel()
        {
            return "From Currency Code";
        }
        
        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }
        
        /// get help text for column
        public static string GetToCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetToCurrencyCodeLabel()
        {
            return "To Currency Code";
        }
        
        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }
        
        /// get help text for column
        public static string GetRateOfExchangeHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetRateOfExchangeLabel()
        {
            return "Rate of exchange";
        }
        
        /// get display format for column
        public static short GetRateOfExchangeLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveFromHelp()
        {
            return "Enter the date which the rate becomes effective";
        }
        
        /// get label of column
        public static string GetDateEffectiveFromLabel()
        {
            return "Date Effective From";
        }
        
        /// get display format for column
        public static short GetDateEffectiveFromLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }
        
        /// get help text for column
        public static string GetTimeEffectiveFromHelp()
        {
            return "System generated date/time stamp.";
        }
        
        /// get label of column
        public static string GetTimeEffectiveFromLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetTimeEffectiveFromLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "APrevYearCorpExRate";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_prev_year_corp_ex_rate";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Corporate Exchange Rate";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_from_currency_code_c",
                    "a_to_currency_code_c",
                    "a_rate_of_exchange_n",
                    "a_date_effective_from_d",
                    "a_time_effective_from_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnFromCurrencyCode,
                    this.ColumnToCurrencyCode,
                    this.ColumnDateEffectiveFrom};
        }
        
        /// get typed set of changes
        public APrevYearCorpExRateTable GetChangesTyped()
        {
            return ((APrevYearCorpExRateTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public APrevYearCorpExRateRow NewRowTyped(bool AWithDefaultValues)
        {
            APrevYearCorpExRateRow ret = ((APrevYearCorpExRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public APrevYearCorpExRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APrevYearCorpExRateRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnFromCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnRateOfExchange))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnDateEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTimeEffectiveFrom))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Old rates no longer in use.
    [Serializable()]
    public class APrevYearCorpExRateRow : System.Data.DataRow
    {
        
        private APrevYearCorpExRateTable myTable;
        
        /// Constructor
        public APrevYearCorpExRateRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((APrevYearCorpExRateTable)(this.Table));
        }
        
        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }
        
        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange) 
                            || (((Double)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }
        
        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveFromLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveFromHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffectiveFrom.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// System generated date/time stamp.
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom) 
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsRateOfExchangeNull()
        {
            return this.IsNull(this.myTable.ColumnRateOfExchange);
        }
        
        /// assign NULL value
        public void SetRateOfExchangeNull()
        {
            this.SetNull(this.myTable.ColumnRateOfExchange);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL batches from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldBatchTable : TTypedDataTable
    {
        
        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public DataColumn ColumnBatchPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateOfEntry;
        
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AThisYearOldBatchTable() : 
                base("AThisYearOldBatch")
        {
        }
        
        /// constructor
        public AThisYearOldBatchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AThisYearOldBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AThisYearOldBatchRow this[int i]
        {
            get
            {
                return ((AThisYearOldBatchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }
        
        /// get help text for column
        public static string GetBatchDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetBatchDescriptionLabel()
        {
            return "Batch Description";
        }
        
        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }
        
        /// get help text for column
        public static string GetBatchControlTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchControlTotalLabel()
        {
            return "Batch Control Total";
        }
        
        /// get display format for column
        public static short GetBatchControlTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }
        
        /// get help text for column
        public static string GetBatchRunningTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchRunningTotalLabel()
        {
            return "Batch Running Total";
        }
        
        /// get display format for column
        public static short GetBatchRunningTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchDebitTotalLabel()
        {
            return "Batch Debit Total";
        }
        
        /// get display format for column
        public static short GetBatchDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchCreditTotalLabel()
        {
            return "Batch Credit Total";
        }
        
        /// get display format for column
        public static short GetBatchCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }
        
        /// get help text for column
        public static string GetBatchPeriodHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetBatchPeriodLabel()
        {
            return "Batch Period Number";
        }
        
        /// get display format for column
        public static short GetBatchPeriodLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Entry Date";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }
        
        /// get help text for column
        public static string GetBatchStatusHelp()
        {
            return "Has this batch been posted yet?";
        }
        
        /// get label of column
        public static string GetBatchStatusLabel()
        {
            return "Batch status";
        }
        
        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }
        
        /// get help text for column
        public static string GetLastJournalHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetLastJournalLabel()
        {
            return "Last Journal Number";
        }
        
        /// get display format for column
        public static short GetLastJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AThisYearOldBatch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_batch";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Batch (Previous)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_batch_description_c",
                    "a_batch_control_total_n",
                    "a_batch_running_total_n",
                    "a_batch_debit_total_n",
                    "a_batch_credit_total_n",
                    "a_batch_period_i",
                    "a_date_effective_d",
                    "a_date_of_entry_d",
                    "a_batch_status_c",
                    "a_last_journal_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber};
        }
        
        /// get typed set of changes
        public AThisYearOldBatchTable GetChangesTyped()
        {
            return ((AThisYearOldBatchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AThisYearOldBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldBatchRow ret = ((AThisYearOldBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AThisYearOldBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldBatchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnBatchControlTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchRunningTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnBatchStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnLastJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL batches from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldBatchRow : System.Data.DataRow
    {
        
        private AThisYearOldBatchTable myTable;
        
        /// Constructor
        public AThisYearOldBatchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AThisYearOldBatchTable)(this.Table));
        }
        
        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription) 
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Double BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }
        
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod) 
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus) 
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }
        
        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }
        
        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL journals from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldJournalTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// 
        public DataColumn ColumnLastTransactionNumber;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        
        /// 
        public DataColumn ColumnBaseCurrency;
        
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        
        /// The date and time
        public DataColumn ColumnExchangeRateTime;
        
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AThisYearOldJournalTable() : 
                base("AThisYearOldJournal")
        {
        }
        
        /// constructor
        public AThisYearOldJournalTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AThisYearOldJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AThisYearOldJournalRow this[int i]
        {
            get
            {
                return ((AThisYearOldJournalRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }
        
        /// get help text for column
        public static string GetJournalDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetJournalDescriptionLabel()
        {
            return "Journal Description";
        }
        
        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalDebitTotalLabel()
        {
            return "Journal Debit Total";
        }
        
        /// get display format for column
        public static short GetJournalDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalCreditTotalLabel()
        {
            return "Journal Credit Total";
        }
        
        /// get display format for column
        public static short GetJournalCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }
        
        /// get help text for column
        public static string GetJournalPeriodHelp()
        {
            return "This defines which accounting period is being used";
        }
        
        /// get label of column
        public static string GetJournalPeriodLabel()
        {
            return "Journal Period Number";
        }
        
        /// get display format for column
        public static short GetJournalPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Enter the date for the batch to come into effect.";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Date Effective";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Transaction Type";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetLastTransactionNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastTransactionNumberLabel()
        {
            return "Last Transaction Number";
        }
        
        /// get display format for column
        public static short GetLastTransactionNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }
        
        /// get help text for column
        public static string GetJournalStatusHelp()
        {
            return "Has a journal been posted yet";
        }
        
        /// get label of column
        public static string GetJournalStatusLabel()
        {
            return "Journal Status";
        }
        
        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }
        
        /// get help text for column
        public static string GetTransactionCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetTransactionCurrencyLabel()
        {
            return "Transaction Currency";
        }
        
        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }
        
        /// get help text for column
        public static string GetBaseCurrencyHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetBaseCurrencyLabel()
        {
            return "a_base_currency_c";
        }
        
        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }
        
        /// get help text for column
        public static string GetExchangeRateToBaseHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetExchangeRateToBaseLabel()
        {
            return "Exchange Rate to Base";
        }
        
        /// get display format for column
        public static short GetExchangeRateToBaseLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }
        
        /// get help text for column
        public static string GetExchangeRateTimeHelp()
        {
            return "The date and time";
        }
        
        /// get label of column
        public static string GetExchangeRateTimeLabel()
        {
            return "Time";
        }
        
        /// get display format for column
        public static short GetExchangeRateTimeLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }
        
        /// get help text for column
        public static string GetReversedHelp()
        {
            return "Indicates whether or not a journal has been reversed.";
        }
        
        /// get label of column
        public static string GetReversedLabel()
        {
            return "Journal Reversed?";
        }
        
        /// get display format for column
        public static short GetReversedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AThisYearOldJournal";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_journal";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Journal (Previous)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_journal_description_c",
                    "a_journal_debit_total_n",
                    "a_journal_credit_total_n",
                    "a_journal_period_i",
                    "a_date_effective_d",
                    "a_transaction_type_code_c",
                    "a_last_transaction_number_i",
                    "a_sub_system_code_c",
                    "a_journal_status_c",
                    "a_transaction_currency_c",
                    "a_base_currency_c",
                    "a_exchange_rate_to_base_n",
                    "a_exchange_rate_time_i",
                    "a_reversed_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber};
        }
        
        /// get typed set of changes
        public AThisYearOldJournalTable GetChangesTyped()
        {
            return ((AThisYearOldJournalTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AThisYearOldJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldJournalRow ret = ((AThisYearOldJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AThisYearOldJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldJournalRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnJournalDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnJournalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnExchangeRateToBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnExchangeRateTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReversed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL journals from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldJournalRow : System.Data.DataRow
    {
        
        private AThisYearOldJournalTable myTable;
        
        /// Constructor
        public AThisYearOldJournalRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AThisYearOldJournalTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription) 
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod) 
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// 
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus) 
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency) 
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }
        
        /// 
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency) 
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase) 
                            || (((Double)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }
        
        /// The date and time
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime) 
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }
        
        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed) 
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }
        
        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL transactions from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldTransactionTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// 
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnPrimaryAccountCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnPrimaryCostCentreCode;
        
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        
        /// 
        public DataColumn ColumnAnalysisIndicator;
        
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        
        /// 
        public DataColumn ColumnNarrative;
        
        /// 
        public DataColumn ColumnDebitCreditIndicator;
        
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        
        /// 
        public DataColumn ColumnSubType;
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt porcessing centre
        public DataColumn ColumnSourceFlag;
        
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AThisYearOldTransactionTable() : 
                base("AThisYearOldTransaction")
        {
        }
        
        /// constructor
        public AThisYearOldTransactionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AThisYearOldTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AThisYearOldTransactionRow this[int i]
        {
            get
            {
                return ((AThisYearOldTransactionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "a_journal_number_i";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetPrimaryAccountCodeLabel()
        {
            return "Primary Account Code";
        }
        
        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetPrimaryCostCentreCodeLabel()
        {
            return "Primary Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }
        
        /// get help text for column
        public static string GetTransactionDateHelp()
        {
            return "Date the transaction took place";
        }
        
        /// get label of column
        public static string GetTransactionDateLabel()
        {
            return "Transaction Date";
        }
        
        /// get display format for column
        public static short GetTransactionDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }
        
        /// get help text for column
        public static string GetTransactionAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetTransactionAmountLabel()
        {
            return "Transaction Amount";
        }
        
        /// get display format for column
        public static short GetTransactionAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInBaseCurrencyHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetAmountInBaseCurrencyLabel()
        {
            return "Amount in Base Currency";
        }
        
        /// get display format for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }
        
        /// get help text for column
        public static string GetAnalysisIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisIndicatorLabel()
        {
            return "Analysis Indicator";
        }
        
        /// get display format for column
        public static short GetAnalysisIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }
        
        /// get help text for column
        public static string GetReconciledStatusHelp()
        {
            return "Shows if the transaction has been reconciled or not";
        }
        
        /// get label of column
        public static string GetReconciledStatusLabel()
        {
            return "a_reconciled_status_l";
        }
        
        /// get display format for column
        public static short GetReconciledStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }
        
        /// get help text for column
        public static string GetNarrativeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNarrativeLabel()
        {
            return "Narrative";
        }
        
        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 120;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }
        
        /// get help text for column
        public static string GetDebitCreditIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDebitCreditIndicatorLabel()
        {
            return "Debit/Credit Indicator";
        }
        
        /// get display format for column
        public static short GetDebitCreditIndicatorLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }
        
        /// get help text for column
        public static string GetTransactionStatusHelp()
        {
            return "Has a transaction been posted yet";
        }
        
        /// get label of column
        public static string GetTransactionStatusLabel()
        {
            return "Transaction Posted Status";
        }
        
        /// get display format for column
        public static short GetTransactionStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }
        
        /// get help text for column
        public static string GetHeaderNumberHelp()
        {
            return "The header (eg, cashbook #) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetHeaderNumberLabel()
        {
            return "Header Number";
        }
        
        /// get display format for column
        public static short GetHeaderNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }
        
        /// get help text for column
        public static string GetDetailNumberHelp()
        {
            return "The detail (within the header) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetDetailNumberLabel()
        {
            return "Detail Number";
        }
        
        /// get display format for column
        public static short GetDetailNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }
        
        /// get help text for column
        public static string GetSubTypeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubTypeLabel()
        {
            return "a_sub_type_c";
        }
        
        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }
        
        /// get help text for column
        public static string GetToIltFlagHelp()
        {
            return "Indicates whether the ILT transaction has been transferred to transaction for ILT" +
                " file.";
        }
        
        /// get label of column
        public static string GetToIltFlagLabel()
        {
            return "Transferred to ILT Ledger";
        }
        
        /// get display format for column
        public static short GetToIltFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }
        
        /// get help text for column
        public static string GetSourceFlagHelp()
        {
            return "To flag a transaction as having come from a source ledger and\r\nbeen processed in " +
                "an ilt porcessing centre";
        }
        
        /// get label of column
        public static string GetSourceFlagLabel()
        {
            return "Source Transaction";
        }
        
        /// get display format for column
        public static short GetSourceFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }
        
        /// get help text for column
        public static string GetReferenceHelp()
        {
            return "Enter a reference code.";
        }
        
        /// get label of column
        public static string GetReferenceLabel()
        {
            return "Reference";
        }
        
        /// get character length for column
        public static short GetReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }
        
        /// get help text for column
        public static string GetSourceReferenceHelp()
        {
            return "Transaction key which initiated an ILT transaction";
        }
        
        /// get label of column
        public static string GetSourceReferenceLabel()
        {
            return "Source Reference";
        }
        
        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }
        
        /// get help text for column
        public static string GetSystemGeneratedHelp()
        {
            return "Was this transaction generated automatically by the system?";
        }
        
        /// get label of column
        public static string GetSystemGeneratedLabel()
        {
            return "System Generated";
        }
        
        /// get display format for column
        public static short GetSystemGeneratedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInIntlCurrencyHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetAmountInIntlCurrencyLabel()
        {
            return "Amount in International Currency";
        }
        
        /// get display format for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }
        
        /// get help text for column
        public static string GetIchNumberHelp()
        {
            return "identifes the ICH process number";
        }
        
        /// get label of column
        public static string GetIchNumberLabel()
        {
            return "ICH Process Number";
        }
        
        /// get display format for column
        public static short GetIchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AThisYearOldTransaction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_transaction";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Transaction (Previous)";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_primary_account_code_c",
                    "a_cost_centre_code_c",
                    "a_primary_cost_centre_code_c",
                    "a_transaction_date_d",
                    "a_transaction_amount_n",
                    "a_amount_in_base_currency_n",
                    "a_analysis_indicator_l",
                    "a_reconciled_status_l",
                    "a_narrative_c",
                    "a_debit_credit_indicator_l",
                    "a_transaction_status_l",
                    "a_header_number_i",
                    "a_detail_number_i",
                    "a_sub_type_c",
                    "a_to_ilt_flag_l",
                    "a_source_flag_l",
                    "a_reference_c",
                    "a_source_reference_c",
                    "a_system_generated_l",
                    "a_amount_in_intl_currency_n",
                    "a_ich_number_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber};
        }
        
        /// get typed set of changes
        public AThisYearOldTransactionTable GetChangesTyped()
        {
            return ((AThisYearOldTransactionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AThisYearOldTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldTransactionRow ret = ((AThisYearOldTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AThisYearOldTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldTransactionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPrimaryAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnPrimaryCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAmountInBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAnalysisIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReconciledStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNarrative))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 240);
            }
            if ((ACol == ColumnDebitCreditIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTransactionStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnHeaderNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDetailNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToIltFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSourceFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSourceReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSystemGenerated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAmountInIntlCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnIchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL transactions from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldTransactionRow : System.Data.DataRow
    {
        
        private AThisYearOldTransactionTable myTable;
        
        /// Constructor
        public AThisYearOldTransactionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AThisYearOldTransactionTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }
        
        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime TransactionDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime TransactionDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is a number of currency units
        public Double TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount) 
                            || (((Double)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }
        
        /// 
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }
        
        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus) 
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }
        
        /// 
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative) 
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }
        
        /// 
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }
        
        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus) 
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber) 
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }
        
        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber) 
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }
        
        /// 
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType) 
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag) 
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt porcessing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }
        
        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference) 
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }
        
        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference) 
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }
        
        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated) 
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }
        
        /// The transaction amount in the second base currency.
        public Double AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }
        
        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber) 
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }
        
        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }
        
        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }
        
        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }
        
        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }
        
        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }
        
        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }
        
        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }
        
        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }
        
        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }
        
        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }
        
        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }
        
        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }
        
        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }
        
        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// GL transaction Analysis Attributes from previous periods in the current financial year.
    [Serializable()]
    public class AThisyearoldTransAnalAttribTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// 
        public DataColumn ColumnAnalysisAttributeValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AThisyearoldTransAnalAttribTable() : 
                base("AThisyearoldTransAnalAttrib")
        {
        }
        
        /// constructor
        public AThisyearoldTransAnalAttribTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AThisyearoldTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AThisyearoldTransAnalAttribRow this[int i]
        {
            get
            {
                return ((AThisyearoldTransAnalAttribRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }
        
        /// get help text for column
        public static string GetAnalysisAttributeValueHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisAttributeValueLabel()
        {
            return "Analysis Attribute Value";
        }
        
        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AThisyearoldTransAnalAttrib";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_thisyearold_trans_anal_attrib";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "This Year Old Trans Anal Attri";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    6};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_analysis_type_code_c",
                    "a_analysis_attribute_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber,
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public AThisyearoldTransAnalAttribTable GetChangesTyped()
        {
            return ((AThisyearoldTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AThisyearoldTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisyearoldTransAnalAttribRow ret = ((AThisyearoldTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AThisyearoldTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisyearoldTransAnalAttribRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisAttributeValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// GL transaction Analysis Attributes from previous periods in the current financial year.
    [Serializable()]
    public class AThisyearoldTransAnalAttribRow : System.Data.DataRow
    {
        
        private AThisyearoldTransAnalAttribTable myTable;
        
        /// Constructor
        public AThisyearoldTransAnalAttribRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AThisyearoldTransAnalAttribTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue) 
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Templates of general ledger batches which can be copied into the ledger.
    [Serializable()]
    public class ARecurringBatchTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        
        /// This is a number of currency units
        public DataColumn ColumnBatchControlTotal;
        
        /// identifies the status of a batch
        public DataColumn ColumnBatchStatus;
        
        /// This is a number of currency units
        public DataColumn ColumnBatchRunningTotal;
        
        /// This is a number of currency units
        public DataColumn ColumnBatchDebitTotal;
        
        /// This is a number of currency units
        public DataColumn ColumnBatchCreditTotal;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnBatchPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnDateOfEntry;
        
        /// 
        public DataColumn ColumnFrequencyCode;
        
        /// 
        public DataColumn ColumnDateBatchLastRun;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ARecurringBatchTable() : 
                base("ARecurringBatch")
        {
        }
        
        /// constructor
        public ARecurringBatchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ARecurringBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ARecurringBatchRow this[int i]
        {
            get
            {
                return ((ARecurringBatchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }
        
        /// get help text for column
        public static string GetBatchDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetBatchDescriptionLabel()
        {
            return "Batch Description";
        }
        
        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }
        
        /// get help text for column
        public static string GetBatchControlTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchControlTotalLabel()
        {
            return "Batch Control Total";
        }
        
        /// get display format for column
        public static short GetBatchControlTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }
        
        /// get help text for column
        public static string GetBatchStatusHelp()
        {
            return "identifies the status of a batch";
        }
        
        /// get label of column
        public static string GetBatchStatusLabel()
        {
            return "Batch Status";
        }
        
        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }
        
        /// get help text for column
        public static string GetBatchRunningTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchRunningTotalLabel()
        {
            return "Batch Running Total";
        }
        
        /// get display format for column
        public static short GetBatchRunningTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchDebitTotalLabel()
        {
            return "Batch Debit Total";
        }
        
        /// get display format for column
        public static short GetBatchDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchCreditTotalLabel()
        {
            return "Batch Credit Total";
        }
        
        /// get display format for column
        public static short GetBatchCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }
        
        /// get help text for column
        public static string GetBatchPeriodHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetBatchPeriodLabel()
        {
            return "Batch Period Number";
        }
        
        /// get display format for column
        public static short GetBatchPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "Enter a user ID";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User ID";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Entry Date";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetFrequencyCodeDBName()
        {
            return "a_frequency_code_c";
        }
        
        /// get help text for column
        public static string GetFrequencyCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetFrequencyCodeLabel()
        {
            return "Frequency";
        }
        
        /// get character length for column
        public static short GetFrequencyCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateBatchLastRunDBName()
        {
            return "a_date_batch_last_run_d";
        }
        
        /// get help text for column
        public static string GetDateBatchLastRunHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateBatchLastRunLabel()
        {
            return "Date Batch Last Run";
        }
        
        /// get display format for column
        public static short GetDateBatchLastRunLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }
        
        /// get help text for column
        public static string GetLastJournalHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetLastJournalLabel()
        {
            return "Last Recurring Journal Number";
        }
        
        /// get display format for column
        public static short GetLastJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ARecurringBatch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_recurring_batch";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Recurring Batch";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_batch_description_c",
                    "a_batch_control_total_n",
                    "a_batch_status_c",
                    "a_batch_running_total_n",
                    "a_batch_debit_total_n",
                    "a_batch_credit_total_n",
                    "a_batch_period_i",
                    "a_date_effective_d",
                    "s_user_id_c",
                    "a_date_of_entry_d",
                    "a_frequency_code_c",
                    "a_date_batch_last_run_d",
                    "a_last_journal_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnFrequencyCode = this.Columns["a_frequency_code_c"];
            this.ColumnDateBatchLastRun = this.Columns["a_date_batch_last_run_d"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber};
        }
        
        /// get typed set of changes
        public ARecurringBatchTable GetChangesTyped()
        {
            return ((ARecurringBatchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ARecurringBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringBatchRow ret = ((ARecurringBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ARecurringBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringBatchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_frequency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_batch_last_run_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnBatchControlTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnBatchRunningTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnFrequencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDateBatchLastRun))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnLastJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Templates of general ledger batches which can be copied into the ledger.
    [Serializable()]
    public class ARecurringBatchRow : System.Data.DataRow
    {
        
        private ARecurringBatchTable myTable;
        
        /// Constructor
        public ARecurringBatchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ARecurringBatchTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription) 
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }
        
        /// identifies the status of a batch
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus) 
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod) 
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String FrequencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFrequencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFrequencyCode) 
                            || (((String)(this[this.myTable.ColumnFrequencyCode])) != value)))
                {
                    this[this.myTable.ColumnFrequencyCode] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateBatchLastRun
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateBatchLastRun.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateBatchLastRun) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateBatchLastRun])) != value)))
                {
                    this[this.myTable.ColumnDateBatchLastRun] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateBatchLastRunLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateBatchLastRun], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateBatchLastRunHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateBatchLastRun.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnFrequencyCode);
            this.SetNull(this.myTable.ColumnDateBatchLastRun);
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }
        
        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }
        
        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// test for NULL value
        public bool IsBatchPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnBatchPeriod);
        }
        
        /// assign NULL value
        public void SetBatchPeriodNull()
        {
            this.SetNull(this.myTable.ColumnBatchPeriod);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }
        
        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }
        
        /// test for NULL value
        public bool IsFrequencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFrequencyCode);
        }
        
        /// assign NULL value
        public void SetFrequencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnFrequencyCode);
        }
        
        /// test for NULL value
        public bool IsDateBatchLastRunNull()
        {
            return this.IsNull(this.myTable.ColumnDateBatchLastRun);
        }
        
        /// assign NULL value
        public void SetDateBatchLastRunNull()
        {
            this.SetNull(this.myTable.ColumnDateBatchLastRun);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Templates of general ledger journals which are copied into the ledger with recurring general ledger batches.
    [Serializable()]
    public class ARecurringJournalTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        
        /// identifies the status of a batch
        public DataColumn ColumnJournalStatus;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// This is how the partner paid. Eg cash, Cheque etc
        public DataColumn ColumnMethodOfPaymentCode;
        
        /// 
        public DataColumn ColumnLastTransactionNumber;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ARecurringJournalTable() : 
                base("ARecurringJournal")
        {
        }
        
        /// constructor
        public ARecurringJournalTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ARecurringJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ARecurringJournalRow this[int i]
        {
            get
            {
                return ((ARecurringJournalRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }
        
        /// get help text for column
        public static string GetJournalDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetJournalDescriptionLabel()
        {
            return "Journal Description";
        }
        
        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }
        
        /// get help text for column
        public static string GetJournalStatusHelp()
        {
            return "identifies the status of a batch";
        }
        
        /// get label of column
        public static string GetJournalStatusLabel()
        {
            return "Journal Status";
        }
        
        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalDebitTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalDebitTotalLabel()
        {
            return "Journal Debit Total";
        }
        
        /// get display format for column
        public static short GetJournalDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalCreditTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetJournalCreditTotalLabel()
        {
            return "Journal Credit Total";
        }
        
        /// get display format for column
        public static short GetJournalCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }
        
        /// get help text for column
        public static string GetJournalPeriodHelp()
        {
            return "This defines which accounting period is being used";
        }
        
        /// get label of column
        public static string GetJournalPeriodLabel()
        {
            return "Journal Period Number";
        }
        
        /// get display format for column
        public static short GetJournalPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Date the  batch comes into effect";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Transaction Type";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMethodOfPaymentCodeDBName()
        {
            return "a_method_of_payment_code_c";
        }
        
        /// get help text for column
        public static string GetMethodOfPaymentCodeHelp()
        {
            return "Enter the method of payment";
        }
        
        /// get label of column
        public static string GetMethodOfPaymentCodeLabel()
        {
            return "Method of Payment";
        }
        
        /// get character length for column
        public static short GetMethodOfPaymentCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetLastTransactionNumberHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetLastTransactionNumberLabel()
        {
            return "Last Transaction Number";
        }
        
        /// get display format for column
        public static short GetLastTransactionNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }
        
        /// get help text for column
        public static string GetExchangeRateToBaseHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetExchangeRateToBaseLabel()
        {
            return "Exchange Rate to Base";
        }
        
        /// get display format for column
        public static short GetExchangeRateToBaseLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }
        
        /// get help text for column
        public static string GetTransactionCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetTransactionCurrencyLabel()
        {
            return "Transaction Currency";
        }
        
        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ARecurringJournal";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_recurring_journal";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Recurring Journal";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_journal_description_c",
                    "a_journal_status_c",
                    "a_journal_debit_total_n",
                    "a_journal_credit_total_n",
                    "a_journal_period_i",
                    "a_date_effective_d",
                    "a_transaction_type_code_c",
                    "a_method_of_payment_code_c",
                    "a_last_transaction_number_i",
                    "a_sub_system_code_c",
                    "a_exchange_rate_to_base_n",
                    "a_transaction_currency_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnMethodOfPaymentCode = this.Columns["a_method_of_payment_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber};
        }
        
        /// get typed set of changes
        public ARecurringJournalTable GetChangesTyped()
        {
            return ((ARecurringJournalTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ARecurringJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringJournalRow ret = ((ARecurringJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ARecurringJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringJournalRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnJournalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnJournalDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnMethodOfPaymentCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnExchangeRateToBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnTransactionCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Templates of general ledger journals which are copied into the ledger with recurring general ledger batches.
    [Serializable()]
    public class ARecurringJournalRow : System.Data.DataRow
    {
        
        private ARecurringJournalTable myTable;
        
        /// Constructor
        public ARecurringJournalRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ARecurringJournalTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription) 
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }
        
        /// identifies the status of a batch
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus) 
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod) 
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// This is how the partner paid. Eg cash, Cheque etc
        public String MethodOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfPaymentCode) 
                            || (((String)(this[this.myTable.ColumnMethodOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfPaymentCode] = value;
                }
            }
        }
        
        /// 
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase) 
                            || (((Double)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency) 
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsJournalPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnJournalPeriod);
        }
        
        /// assign NULL value
        public void SetJournalPeriodNull()
        {
            this.SetNull(this.myTable.ColumnJournalPeriod);
        }
        
        /// test for NULL value
        public bool IsMethodOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfPaymentCode);
        }
        
        /// assign NULL value
        public void SetMethodOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Templates of general ledger transactions which are copied into the ledger with general ledger batches.
    [Serializable()]
    public class ARecurringTransactionTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Journal  number that transaction belongs to
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        
        /// This defines which currency is being used
        public DataColumn ColumnBaseCurrency;
        
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        
        /// 
        public DataColumn ColumnAnalysisIndicator;
        
        /// 
        public DataColumn ColumnMethodOfPaymentCode;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnPeriodNumber;
        
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledFlag;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// 
        public DataColumn ColumnNarrative;
        
        /// 
        public DataColumn ColumnReference;
        
        /// 
        public DataColumn ColumnDateOfEntry;
        
        /// 
        public DataColumn ColumnUserId;
        
        /// 
        public DataColumn ColumnDebitCreditIndicator;
        
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        
        /// 
        public DataColumn ColumnSubType;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ARecurringTransactionTable() : 
                base("ARecurringTransaction")
        {
        }
        
        /// constructor
        public ARecurringTransactionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ARecurringTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ARecurringTransactionRow this[int i]
        {
            get
            {
                return ((ARecurringTransactionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Journal  number that transaction belongs to";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }
        
        /// get help text for column
        public static string GetTransactionDateHelp()
        {
            return "Date the transaction took place";
        }
        
        /// get label of column
        public static string GetTransactionDateLabel()
        {
            return "Transaction Date";
        }
        
        /// get display format for column
        public static short GetTransactionDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }
        
        /// get help text for column
        public static string GetTransactionCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetTransactionCurrencyLabel()
        {
            return "Transaction Currency";
        }
        
        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }
        
        /// get help text for column
        public static string GetTransactionAmountHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetTransactionAmountLabel()
        {
            return "Transaction Amount";
        }
        
        /// get display format for column
        public static short GetTransactionAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }
        
        /// get help text for column
        public static string GetBaseCurrencyHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetBaseCurrencyLabel()
        {
            return "Base Currency";
        }
        
        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }
        
        /// get help text for column
        public static string GetExchangeRateToBaseHelp()
        {
            return "Enter the rate of exchange";
        }
        
        /// get label of column
        public static string GetExchangeRateToBaseLabel()
        {
            return "Exchange Rate to Base";
        }
        
        /// get display format for column
        public static short GetExchangeRateToBaseLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInBaseCurrencyHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetAmountInBaseCurrencyLabel()
        {
            return "Amount in Base Currency";
        }
        
        /// get display format for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }
        
        /// get help text for column
        public static string GetAnalysisIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisIndicatorLabel()
        {
            return "Analysis Indicator";
        }
        
        /// get display format for column
        public static short GetAnalysisIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetMethodOfPaymentCodeDBName()
        {
            return "a_method_of_payment_code_c";
        }
        
        /// get help text for column
        public static string GetMethodOfPaymentCodeHelp()
        {
            return "Enter a method of payment code";
        }
        
        /// get label of column
        public static string GetMethodOfPaymentCodeLabel()
        {
            return "Method of Payment Code";
        }
        
        /// get character length for column
        public static short GetMethodOfPaymentCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }
        
        /// get help text for column
        public static string GetPeriodNumberHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetPeriodNumberLabel()
        {
            return "Period Number";
        }
        
        /// get display format for column
        public static short GetPeriodNumberLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReconciledFlagDBName()
        {
            return "a_reconciled_flag_l";
        }
        
        /// get help text for column
        public static string GetReconciledFlagHelp()
        {
            return "Shows if the transaction has been reconciled or not";
        }
        
        /// get label of column
        public static string GetReconciledFlagLabel()
        {
            return "a_reconciled_flag_l";
        }
        
        /// get display format for column
        public static short GetReconciledFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System Code";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Special Transaction Type Code";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }
        
        /// get help text for column
        public static string GetNarrativeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetNarrativeLabel()
        {
            return "Narrative";
        }
        
        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 120;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }
        
        /// get help text for column
        public static string GetReferenceHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetReferenceLabel()
        {
            return "Reference";
        }
        
        /// get character length for column
        public static short GetReferenceLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Date of Entry";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }
        
        /// get help text for column
        public static string GetUserIdHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetUserIdLabel()
        {
            return "User Id";
        }
        
        /// get character length for column
        public static short GetUserIdLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }
        
        /// get help text for column
        public static string GetDebitCreditIndicatorHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetDebitCreditIndicatorLabel()
        {
            return "Debit/Credit Indicator";
        }
        
        /// get display format for column
        public static short GetDebitCreditIndicatorLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }
        
        /// get help text for column
        public static string GetTransactionStatusHelp()
        {
            return "Has a transaction been posted yet";
        }
        
        /// get label of column
        public static string GetTransactionStatusLabel()
        {
            return "Transaction Posted Status";
        }
        
        /// get display format for column
        public static short GetTransactionStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }
        
        /// get help text for column
        public static string GetHeaderNumberHelp()
        {
            return "The header (eg, cashbook #) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetHeaderNumberLabel()
        {
            return "Header Number";
        }
        
        /// get display format for column
        public static short GetHeaderNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }
        
        /// get help text for column
        public static string GetDetailNumberHelp()
        {
            return "The detail (within the header) that the transaction is associated with.";
        }
        
        /// get label of column
        public static string GetDetailNumberLabel()
        {
            return "Detail Number";
        }
        
        /// get display format for column
        public static short GetDetailNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }
        
        /// get help text for column
        public static string GetSubTypeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubTypeLabel()
        {
            return "a_sub_type_c";
        }
        
        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ARecurringTransaction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_recurring_transaction";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Recurring Transaction";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_transaction_date_d",
                    "a_transaction_currency_c",
                    "a_transaction_amount_n",
                    "a_base_currency_c",
                    "a_exchange_rate_to_base_n",
                    "a_amount_in_base_currency_n",
                    "a_analysis_indicator_l",
                    "a_method_of_payment_code_c",
                    "a_period_number_i",
                    "a_reconciled_flag_l",
                    "a_sub_system_code_c",
                    "a_transaction_type_code_c",
                    "a_narrative_c",
                    "a_reference_c",
                    "a_date_of_entry_d",
                    "s_user_id_c",
                    "a_debit_credit_indicator_l",
                    "a_transaction_status_l",
                    "a_header_number_i",
                    "a_detail_number_i",
                    "a_sub_type_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnMethodOfPaymentCode = this.Columns["a_method_of_payment_code_c"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnReconciledFlag = this.Columns["a_reconciled_flag_l"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber};
        }
        
        /// get typed set of changes
        public ARecurringTransactionTable GetChangesTyped()
        {
            return ((ARecurringTransactionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ARecurringTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringTransactionRow ret = ((ARecurringTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ARecurringTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringTransactionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTransactionAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnExchangeRateToBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAmountInBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAnalysisIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnMethodOfPaymentCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPeriodNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnReconciledFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnNarrative))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 240);
            }
            if ((ACol == ColumnReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnUserId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDebitCreditIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTransactionStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnHeaderNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDetailNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Templates of general ledger transactions which are copied into the ledger with general ledger batches.
    [Serializable()]
    public class ARecurringTransactionRow : System.Data.DataRow
    {
        
        private ARecurringTransactionTable myTable;
        
        /// Constructor
        public ARecurringTransactionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ARecurringTransactionTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Journal  number that transaction belongs to
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime TransactionDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime TransactionDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency) 
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount) 
                            || (((Double)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency) 
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }
        
        /// The rate of exchange
        public Double ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase) 
                            || (((Double)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }
        
        /// 
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }
        
        /// 
        public String MethodOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfPaymentCode) 
                            || (((String)(this[this.myTable.ColumnMethodOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfPaymentCode] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber) 
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }
        
        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledFlag) 
                            || (((Boolean)(this[this.myTable.ColumnReconciledFlag])) != value)))
                {
                    this[this.myTable.ColumnReconciledFlag] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// 
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative) 
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }
        
        /// 
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference) 
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }
        
        /// 
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// 
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId) 
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }
        
        /// 
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }
        
        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus) 
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }
        
        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber) 
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }
        
        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber) 
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }
        
        /// 
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType) 
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnReconciledFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnNarrative);
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnDateOfEntry);
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }
        
        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }
        
        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }
        
        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }
        
        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }
        
        /// test for NULL value
        public bool IsMethodOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfPaymentCode);
        }
        
        /// assign NULL value
        public void SetMethodOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
        }
        
        /// test for NULL value
        public bool IsPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodNumber);
        }
        
        /// assign NULL value
        public void SetPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnPeriodNumber);
        }
        
        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }
        
        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }
        
        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }
        
        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }
        
        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }
        
        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }
        
        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }
        
        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }
        
        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }
        
        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }
        
        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }
        
        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }
        
        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }
        
        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Detailed analysis information stored along with the recurring transaction template.
    [Serializable()]
    public class ARecurringTransAnalAttribTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// 
        public DataColumn ColumnAnalysisAttributeValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ARecurringTransAnalAttribTable() : 
                base("ARecurringTransAnalAttrib")
        {
        }
        
        /// constructor
        public ARecurringTransAnalAttribTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ARecurringTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ARecurringTransAnalAttribRow this[int i]
        {
            get
            {
                return ((ARecurringTransAnalAttribRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }
        
        /// get help text for column
        public static string GetAnalysisAttributeValueHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisAttributeValueLabel()
        {
            return "Analysis Attribute Value";
        }
        
        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ARecurringTransAnalAttrib";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_recurring_trans_anal_attrib";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Recurring Trans. Anal. Attrib.";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    6};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_analysis_type_code_c",
                    "a_analysis_attribute_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber,
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public ARecurringTransAnalAttribTable GetChangesTyped()
        {
            return ((ARecurringTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ARecurringTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringTransAnalAttribRow ret = ((ARecurringTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ARecurringTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringTransAnalAttribRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisAttributeValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Detailed analysis information stored along with the recurring transaction template.
    [Serializable()]
    public class ARecurringTransAnalAttribRow : System.Data.DataRow
    {
        
        private ARecurringTransAnalAttribTable myTable;
        
        /// Constructor
        public ARecurringTransAnalAttribRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ARecurringTransAnalAttribTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue) 
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Store current and forward period general ledger batches for a ledger.
    [Serializable()]
    public class ABatchTable : TTypedDataTable
    {
        
        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        
        /// Identifies the batch.
        public DataColumn ColumnBatchNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        
        /// This identifies which accounting period that the batch belongs to.
        public DataColumn ColumnBatchPeriod;
        
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        
        /// Date the  batch was created.
        public DataColumn ColumnDateOfEntry;
        
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ABatchTable() : 
                base("ABatch")
        {
        }
        
        /// constructor
        public ABatchTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ABatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ABatchRow this[int i]
        {
            get
            {
                return ((ABatchRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "Identifies the batch.";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }
        
        /// get help text for column
        public static string GetBatchDescriptionHelp()
        {
            return "Enter a description for this general ledger batch.";
        }
        
        /// get label of column
        public static string GetBatchDescriptionLabel()
        {
            return "Batch Description";
        }
        
        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }
        
        /// get help text for column
        public static string GetBatchControlTotalHelp()
        {
            return "(Optional) Enter the total amount of the batch (hash total).";
        }
        
        /// get label of column
        public static string GetBatchControlTotalLabel()
        {
            return "Batch Control Total";
        }
        
        /// get display format for column
        public static short GetBatchControlTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }
        
        /// get help text for column
        public static string GetBatchRunningTotalHelp()
        {
            return "Enter the amount";
        }
        
        /// get label of column
        public static string GetBatchRunningTotalLabel()
        {
            return "Batch Running Total";
        }
        
        /// get display format for column
        public static short GetBatchRunningTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchDebitTotalHelp()
        {
            return "Total amount of debits.";
        }
        
        /// get label of column
        public static string GetBatchDebitTotalLabel()
        {
            return "Batch Debit Total";
        }
        
        /// get display format for column
        public static short GetBatchDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }
        
        /// get help text for column
        public static string GetBatchCreditTotalHelp()
        {
            return "Total amount of credits.";
        }
        
        /// get label of column
        public static string GetBatchCreditTotalLabel()
        {
            return "Batch Credit Total";
        }
        
        /// get display format for column
        public static short GetBatchCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }
        
        /// get help text for column
        public static string GetBatchPeriodHelp()
        {
            return "Enter a number between 1 and 20";
        }
        
        /// get label of column
        public static string GetBatchPeriodLabel()
        {
            return "Batch Period Number";
        }
        
        /// get display format for column
        public static short GetBatchPeriodLength()
        {
            return 2;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Enter the date for which this batch is to take effect.";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Effective Date";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "Date the batch was created.";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Entry Date";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }
        
        /// get help text for column
        public static string GetBatchStatusHelp()
        {
            return "Shows the status of the batch.";
        }
        
        /// get label of column
        public static string GetBatchStatusLabel()
        {
            return "Batch status";
        }
        
        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }
        
        /// get help text for column
        public static string GetLastJournalHelp()
        {
            return "Last number used for a journal.";
        }
        
        /// get label of column
        public static string GetLastJournalLabel()
        {
            return "Last Journal Number";
        }
        
        /// get display format for column
        public static short GetLastJournalLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ABatch";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_batch";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Batch";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_batch_description_c",
                    "a_batch_control_total_n",
                    "a_batch_running_total_n",
                    "a_batch_debit_total_n",
                    "a_batch_credit_total_n",
                    "a_batch_period_i",
                    "a_date_effective_d",
                    "a_date_of_entry_d",
                    "a_batch_status_c",
                    "a_last_journal_i",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber};
        }
        
        /// get typed set of changes
        public ABatchTable GetChangesTyped()
        {
            return ((ABatchTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ABatchRow NewRowTyped(bool AWithDefaultValues)
        {
            ABatchRow ret = ((ABatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ABatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABatchRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnBatchControlTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchRunningTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnBatchPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnBatchStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnLastJournal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Store current and forward period general ledger batches for a ledger.
    [Serializable()]
    public class ABatchRow : System.Data.DataRow
    {
        
        private ABatchTable myTable;
        
        /// Constructor
        public ABatchRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ABatchTable)(this.Table));
        }
        
        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Identifies the batch.
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription) 
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }
        
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Double BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }
        
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }
        
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }
        
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Double BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }
        
        /// This identifies which accounting period that the batch belongs to.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod) 
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }
        
        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Date the  batch was created.
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus) 
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal) 
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }
        
        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }
        
        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }
        
        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }
        
        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Holds details of each general ledger journal, which contains a group of transactions.
    [Serializable()]
    public class AJournalTable : TTypedDataTable
    {
        
        /// The journal belongs to this ledger.
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch the journal belongs to.
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        
        /// This is a number of currency units in the currency of the transaction.
        public DataColumn ColumnJournalDebitTotal;
        
        /// This is the number of currency units in the currency of the transaction.
        public DataColumn ColumnJournalCreditTotal;
        
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        
        /// Date the journal comes into effect.
        public DataColumn ColumnDateEffective;
        
        /// Which type of journal is this?  Eg. STD, ALLOC, REALLOC, REVAL.
        public DataColumn ColumnTransactionTypeCode;
        
        /// The number of the last transaction within the journal.
        public DataColumn ColumnLastTransactionNumber;
        
        /// Indicates the sub system of accounts that the journal belongs to.  Eg. GL, AP, GR
        public DataColumn ColumnSubSystemCode;
        
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        
        /// The rate of exchange from the transaction currency (in a_transaction_currency_c) to the ledger base currency.
        public DataColumn ColumnExchangeRateToBase;
        
        /// The time component of the exchange rate.
        public DataColumn ColumnExchangeRateTime;
        
        /// Date the journal was created.
        public DataColumn ColumnDateOfEntry;
        
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AJournalTable() : 
                base("AJournal")
        {
        }
        
        /// constructor
        public AJournalTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AJournalRow this[int i]
        {
            get
            {
                return ((AJournalRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "The number of the batch containing this journal.";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "The number of this journal.";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }
        
        /// get help text for column
        public static string GetJournalDescriptionHelp()
        {
            return "Enter a description for this general ledger journal.";
        }
        
        /// get label of column
        public static string GetJournalDescriptionLabel()
        {
            return "Journal Description";
        }
        
        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalDebitTotalHelp()
        {
            return "The total amount of debits.";
        }
        
        /// get label of column
        public static string GetJournalDebitTotalLabel()
        {
            return "Journal Debit Total";
        }
        
        /// get display format for column
        public static short GetJournalDebitTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }
        
        /// get help text for column
        public static string GetJournalCreditTotalHelp()
        {
            return "The total amount of credits.";
        }
        
        /// get label of column
        public static string GetJournalCreditTotalLabel()
        {
            return "Journal Credit Total";
        }
        
        /// get display format for column
        public static short GetJournalCreditTotalLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }
        
        /// get help text for column
        public static string GetJournalPeriodHelp()
        {
            return "The financial period of the journal (same as the batch).";
        }
        
        /// get label of column
        public static string GetJournalPeriodLabel()
        {
            return "Journal Period Number";
        }
        
        /// get display format for column
        public static short GetJournalPeriodLength()
        {
            return 3;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }
        
        /// get help text for column
        public static string GetDateEffectiveHelp()
        {
            return "Enter the date for the journal to come into effect.";
        }
        
        /// get label of column
        public static string GetDateEffectiveLabel()
        {
            return "Date Effective";
        }
        
        /// get display format for column
        public static short GetDateEffectiveLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "Select the type of journal.";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Transaction Type";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetLastTransactionNumberHelp()
        {
            return "The number of the last transaction created in the journal.";
        }
        
        /// get label of column
        public static string GetLastTransactionNumberLabel()
        {
            return "Last Transaction Number";
        }
        
        /// get display format for column
        public static short GetLastTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "The subsystem from which this journal came.";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }
        
        /// get help text for column
        public static string GetJournalStatusHelp()
        {
            return "The posting status of the journal.";
        }
        
        /// get label of column
        public static string GetJournalStatusLabel()
        {
            return "Journal Status";
        }
        
        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }
        
        /// get help text for column
        public static string GetTransactionCurrencyHelp()
        {
            return "Select a currency code to use for the journal transactions.";
        }
        
        /// get label of column
        public static string GetTransactionCurrencyLabel()
        {
            return "Transaction Currency";
        }
        
        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }
        
        /// get help text for column
        public static string GetExchangeRateToBaseHelp()
        {
            return "Enter the exchange rate from the transaction currency to base.";
        }
        
        /// get label of column
        public static string GetExchangeRateToBaseLabel()
        {
            return "Exchange Rate to Base";
        }
        
        /// get display format for column
        public static short GetExchangeRateToBaseLength()
        {
            return 18;
        }
        
        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }
        
        /// get help text for column
        public static string GetExchangeRateTimeHelp()
        {
            return "The time component of the exchange rate.";
        }
        
        /// get label of column
        public static string GetExchangeRateTimeLabel()
        {
            return "Time (of Exchange Rate)";
        }
        
        /// get display format for column
        public static short GetExchangeRateTimeLength()
        {
            return 5;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }
        
        /// get help text for column
        public static string GetDateOfEntryHelp()
        {
            return "Date the journal was created.";
        }
        
        /// get label of column
        public static string GetDateOfEntryLabel()
        {
            return "Entry Date";
        }
        
        /// get display format for column
        public static short GetDateOfEntryLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }
        
        /// get help text for column
        public static string GetReversedHelp()
        {
            return "Indicates whether or not a journal has been reversed.";
        }
        
        /// get label of column
        public static string GetReversedLabel()
        {
            return "Journal Reversed?";
        }
        
        /// get display format for column
        public static short GetReversedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AJournal";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_journal";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Journal";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_journal_description_c",
                    "a_journal_debit_total_n",
                    "a_journal_credit_total_n",
                    "a_journal_period_i",
                    "a_date_effective_d",
                    "a_transaction_type_code_c",
                    "a_last_transaction_number_i",
                    "a_sub_system_code_c",
                    "a_journal_status_c",
                    "a_transaction_currency_c",
                    "a_exchange_rate_to_base_n",
                    "a_exchange_rate_time_i",
                    "a_date_of_entry_d",
                    "a_reversed_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber};
        }
        
        /// get typed set of changes
        public AJournalTable GetChangesTyped()
        {
            return ((AJournalTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            AJournalRow ret = ((AJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AJournalRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnJournalDebitTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalCreditTotal))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnJournalPeriod))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateEffective))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLastTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnJournalStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnExchangeRateToBase))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnExchangeRateTime))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDateOfEntry))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnReversed))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Holds details of each general ledger journal, which contains a group of transactions.
    [Serializable()]
    public class AJournalRow : System.Data.DataRow
    {
        
        private AJournalTable myTable;
        
        /// Constructor
        public AJournalRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AJournalTable)(this.Table));
        }
        
        /// The journal belongs to this ledger.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch the journal belongs to.
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription) 
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }
        
        /// This is a number of currency units in the currency of the transaction.
        public Double JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }
        
        /// This is the number of currency units in the currency of the transaction.
        public Double JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal) 
                            || (((Double)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }
        
        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod) 
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }
        
        /// Date the journal comes into effect.
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateEffectiveLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateEffectiveHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateEffective.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Which type of journal is this?  Eg. STD, ALLOC, REALLOC, REVAL.
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// The number of the last transaction within the journal.
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }
        
        /// Indicates the sub system of accounts that the journal belongs to.  Eg. GL, AP, GR
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus) 
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }
        
        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency) 
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }
        
        /// The rate of exchange from the transaction currency (in a_transaction_currency_c) to the ledger base currency.
        public Double ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase) 
                            || (((Double)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }
        
        /// The time component of the exchange rate.
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime) 
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }
        
        /// Date the journal was created.
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateOfEntryLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateOfEntryHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateOfEntry.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed) 
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }
        
        /// test for NULL value
        public bool IsJournalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnJournalStatus);
        }
        
        /// assign NULL value
        public void SetJournalStatusNull()
        {
            this.SetNull(this.myTable.ColumnJournalStatus);
        }
        
        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }
        
        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Detailed information for each debit and credit in a general ledger journal.
    [Serializable()]
    public class ATransactionTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// 
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// This identifies the account the financial transaction must be stored against [NOT USED]
        public DataColumn ColumnPrimaryAccountCode;
        
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        
        /// This identifies which cost centre an account is applied to [NOT USED]
        public DataColumn ColumnPrimaryCostCentreCode;
        
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        
        /// Used to get a yes no response from the user
        public DataColumn ColumnAnalysisIndicator;
        
        /// shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        
        /// 
        public DataColumn ColumnNarrative;
        
        /// 
        public DataColumn ColumnDebitCreditIndicator;
        
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        
        /// The header (eg, cashbook #) that the transaction is associated with. [NOT USED]
        public DataColumn ColumnHeaderNumber;
        
        /// The detail (within the header) that the transaction is associated with. [NOT USED]
        public DataColumn ColumnDetailNumber;
        
        /// 
        public DataColumn ColumnSubType;
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt processing centre
        public DataColumn ColumnSourceFlag;
        
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        
        /// Key ministry to which this transaction applies (just for fund transfers)
        public DataColumn ColumnKeyMinistryKey;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ATransactionTable() : 
                base("ATransaction")
        {
        }
        
        /// constructor
        public ATransactionTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ATransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ATransactionRow this[int i]
        {
            get
            {
                return ((ATransactionRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "The number of the batch containing this transaction.";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "The number of the journal containing the transaction.";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "The number of this transaction within the journal.";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 7;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code.";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetPrimaryAccountCodeLabel()
        {
            return "Primary Account Code";
        }
        
        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code (department or fund).";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetPrimaryCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetPrimaryCostCentreCodeLabel()
        {
            return "Primary Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }
        
        /// get help text for column
        public static string GetTransactionDateHelp()
        {
            return "The date the transaction is to take effect (same as journal).";
        }
        
        /// get label of column
        public static string GetTransactionDateLabel()
        {
            return "Transaction Date";
        }
        
        /// get display format for column
        public static short GetTransactionDateLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }
        
        /// get help text for column
        public static string GetTransactionAmountHelp()
        {
            return "Enter the transaction amount.";
        }
        
        /// get label of column
        public static string GetTransactionAmountLabel()
        {
            return "Transaction Amount";
        }
        
        /// get display format for column
        public static short GetTransactionAmountLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInBaseCurrencyHelp()
        {
            return "The transaction amount converted to the base currency.";
        }
        
        /// get label of column
        public static string GetAmountInBaseCurrencyLabel()
        {
            return "Amount in Base Currency";
        }
        
        /// get display format for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }
        
        /// get help text for column
        public static string GetAnalysisIndicatorHelp()
        {
            return "Enter \"\"YES\"\" or \"\"NO\"\"";
        }
        
        /// get label of column
        public static string GetAnalysisIndicatorLabel()
        {
            return "Analysis Indicator";
        }
        
        /// get display format for column
        public static short GetAnalysisIndicatorLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }
        
        /// get help text for column
        public static string GetReconciledStatusHelp()
        {
            return "shows if the transaction has been reconciled or not";
        }
        
        /// get label of column
        public static string GetReconciledStatusLabel()
        {
            return "a_reconciled_status_l";
        }
        
        /// get display format for column
        public static short GetReconciledStatusLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }
        
        /// get help text for column
        public static string GetNarrativeHelp()
        {
            return "Enter a description of the transaction.";
        }
        
        /// get label of column
        public static string GetNarrativeLabel()
        {
            return "Narrative";
        }
        
        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 80;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }
        
        /// get help text for column
        public static string GetDebitCreditIndicatorHelp()
        {
            return "Is the transaction a debit or credit?";
        }
        
        /// get label of column
        public static string GetDebitCreditIndicatorLabel()
        {
            return "Debit/Credit Indicator";
        }
        
        /// get display format for column
        public static short GetDebitCreditIndicatorLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }
        
        /// get help text for column
        public static string GetTransactionStatusHelp()
        {
            return "Posting status of the transaction.";
        }
        
        /// get label of column
        public static string GetTransactionStatusLabel()
        {
            return "Transaction Posted Status";
        }
        
        /// get display format for column
        public static short GetTransactionStatusLength()
        {
            return 15;
        }
        
        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }
        
        /// get help text for column
        public static string GetHeaderNumberHelp()
        {
            return "The header (eg, cashbook #) that the transaction is associated with. [NOT USED]";
        }
        
        /// get label of column
        public static string GetHeaderNumberLabel()
        {
            return "Header Number";
        }
        
        /// get display format for column
        public static short GetHeaderNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }
        
        /// get help text for column
        public static string GetDetailNumberHelp()
        {
            return "The detail (within the header) that the transaction is associated with. [NOT USED" +
                "]";
        }
        
        /// get label of column
        public static string GetDetailNumberLabel()
        {
            return "Detail Number";
        }
        
        /// get display format for column
        public static short GetDetailNumberLength()
        {
            return 9;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }
        
        /// get help text for column
        public static string GetSubTypeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSubTypeLabel()
        {
            return "a_sub_type_c";
        }
        
        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }
        
        /// get help text for column
        public static string GetToIltFlagHelp()
        {
            return "Indicates whether the ILT transaction has been transferred to transaction for ILT" +
                " file.";
        }
        
        /// get label of column
        public static string GetToIltFlagLabel()
        {
            return "Transferred to ILT Ledger";
        }
        
        /// get display format for column
        public static short GetToIltFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }
        
        /// get help text for column
        public static string GetSourceFlagHelp()
        {
            return "To flag a transaction as having come from a source ledger and\r\nbeen processed in " +
                "an ilt processing centre";
        }
        
        /// get label of column
        public static string GetSourceFlagLabel()
        {
            return "Source Transaction";
        }
        
        /// get display format for column
        public static short GetSourceFlagLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }
        
        /// get help text for column
        public static string GetReferenceHelp()
        {
            return "(Optional) Enter a reference code.";
        }
        
        /// get label of column
        public static string GetReferenceLabel()
        {
            return "Reference";
        }
        
        /// get character length for column
        public static short GetReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }
        
        /// get help text for column
        public static string GetSourceReferenceHelp()
        {
            return "Transaction key which initiated an ILT transaction";
        }
        
        /// get label of column
        public static string GetSourceReferenceLabel()
        {
            return "Source Reference";
        }
        
        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 50;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }
        
        /// get help text for column
        public static string GetSystemGeneratedHelp()
        {
            return "Was this transaction generated automatically by the system?";
        }
        
        /// get label of column
        public static string GetSystemGeneratedLabel()
        {
            return "System Generated";
        }
        
        /// get display format for column
        public static short GetSystemGeneratedLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }
        
        /// get help text for column
        public static string GetAmountInIntlCurrencyHelp()
        {
            return "The transaction amount converted to the \'second\' base currency.";
        }
        
        /// get label of column
        public static string GetAmountInIntlCurrencyLabel()
        {
            return "Amount in International Currency";
        }
        
        /// get display format for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 19;
        }
        
        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }
        
        /// get help text for column
        public static string GetIchNumberHelp()
        {
            return "identifes the ICH process number";
        }
        
        /// get label of column
        public static string GetIchNumberLabel()
        {
            return "ICH Process Number";
        }
        
        /// get display format for column
        public static short GetIchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyMinistryKeyDBName()
        {
            return "a_key_ministry_key_n";
        }
        
        /// get help text for column
        public static string GetKeyMinistryKeyHelp()
        {
            return "Key ministry to which this transaction applies (just for fund transfers)";
        }
        
        /// get label of column
        public static string GetKeyMinistryKeyLabel()
        {
            return "Key Ministry";
        }
        
        /// get display format for column
        public static short GetKeyMinistryKeyLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ATransaction";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_transaction";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Transaction";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_primary_account_code_c",
                    "a_cost_centre_code_c",
                    "a_primary_cost_centre_code_c",
                    "a_transaction_date_d",
                    "a_transaction_amount_n",
                    "a_amount_in_base_currency_n",
                    "a_analysis_indicator_l",
                    "a_reconciled_status_l",
                    "a_narrative_c",
                    "a_debit_credit_indicator_l",
                    "a_transaction_status_l",
                    "a_header_number_i",
                    "a_detail_number_i",
                    "a_sub_type_c",
                    "a_to_ilt_flag_l",
                    "a_source_flag_l",
                    "a_reference_c",
                    "a_source_reference_c",
                    "a_system_generated_l",
                    "a_amount_in_intl_currency_n",
                    "a_ich_number_i",
                    "a_key_ministry_key_n",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnKeyMinistryKey = this.Columns["a_key_ministry_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber};
        }
        
        /// get typed set of changes
        public ATransactionTable GetChangesTyped()
        {
            return ((ATransactionTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ATransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransactionRow ret = ((ATransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ATransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransactionRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Double)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_key_ministry_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnPrimaryAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnPrimaryCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionDate))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnTransactionAmount))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAmountInBaseCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnAnalysisIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReconciledStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnNarrative))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 160);
            }
            if ((ACol == ColumnDebitCreditIndicator))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnTransactionStatus))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnHeaderNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnDetailNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubType))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnToIltFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnSourceFlag))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSourceReference))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 100);
            }
            if ((ACol == ColumnSystemGenerated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnAmountInIntlCurrency))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 24);
            }
            if ((ACol == ColumnIchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnKeyMinistryKey))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Decimal, 10);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Detailed information for each debit and credit in a general ledger journal.
    [Serializable()]
    public class ATransactionRow : System.Data.DataRow
    {
        
        private ATransactionTable myTable;
        
        /// Constructor
        public ATransactionRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ATransactionTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// 
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against [NOT USED]
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// This identifies which cost centre an account is applied to [NOT USED]
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }
        
        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate) 
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime TransactionDateLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime TransactionDateHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnTransactionDate.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// This is a number of currency units
        public Double TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount) 
                            || (((Double)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }
        
        /// This is a number of currency units
        public Double AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }
        
        /// Used to get a yes no response from the user
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }
        
        /// shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus) 
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }
        
        /// 
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative) 
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }
        
        /// 
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator) 
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }
        
        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus) 
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }
        
        /// The header (eg, cashbook #) that the transaction is associated with. [NOT USED]
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber) 
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }
        
        /// The detail (within the header) that the transaction is associated with. [NOT USED]
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber) 
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }
        
        /// 
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType) 
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }
        
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag) 
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }
        
        /// To flag a transaction as having come from a source ledger and
        ///been processed in an ilt processing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag) 
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }
        
        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference) 
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }
        
        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference) 
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }
        
        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated) 
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }
        
        /// The transaction amount in the second base currency.
        public Double AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Double)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency) 
                            || (((Double)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }
        
        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber) 
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }
        
        /// Key ministry to which this transaction applies (just for fund transfers)
        public Int64 KeyMinistryKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyMinistryKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyMinistryKey) 
                            || (((Int64)(this[this.myTable.ColumnKeyMinistryKey])) != value)))
                {
                    this[this.myTable.ColumnKeyMinistryKey] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }
        
        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }
        
        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }
        
        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }
        
        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }
        
        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }
        
        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }
        
        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }
        
        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }
        
        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }
        
        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }
        
        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }
        
        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }
        
        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }
        
        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }
        
        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }
        
        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }
        
        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }
        
        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }
        
        /// test for NULL value
        public bool IsKeyMinistryKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKeyMinistryKey);
        }
        
        /// assign NULL value
        public void SetKeyMinistryKeyNull()
        {
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Analysis information entered by the user for a general ledger transaction.
    [Serializable()]
    public class ATransAnalAttribTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        
        /// 
        public DataColumn ColumnAnalysisTypeCode;
        
        /// 
        public DataColumn ColumnAnalysisAttributeValue;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ATransAnalAttribTable() : 
                base("ATransAnalAttrib")
        {
        }
        
        /// constructor
        public ATransAnalAttribTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ATransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ATransAnalAttribRow this[int i]
        {
            get
            {
                return ((ATransAnalAttribRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }
        
        /// get help text for column
        public static string GetBatchNumberHelp()
        {
            return "identifes which batch a transaction belongs to";
        }
        
        /// get label of column
        public static string GetBatchNumberLabel()
        {
            return "Batch Number";
        }
        
        /// get display format for column
        public static short GetBatchNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }
        
        /// get help text for column
        public static string GetJournalNumberHelp()
        {
            return "Identifies a journal within a batch";
        }
        
        /// get label of column
        public static string GetJournalNumberLabel()
        {
            return "Journal Number";
        }
        
        /// get display format for column
        public static short GetJournalNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }
        
        /// get help text for column
        public static string GetTransactionNumberHelp()
        {
            return "Identifies a transaction within a journal within a batch within a ledger";
        }
        
        /// get label of column
        public static string GetTransactionNumberLabel()
        {
            return "Transaction Number";
        }
        
        /// get display format for column
        public static short GetTransactionNumberLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }
        
        /// get help text for column
        public static string GetAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetAccountCodeLabel()
        {
            return "Account Code";
        }
        
        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }
        
        /// get help text for column
        public static string GetCostCentreCodeHelp()
        {
            return "Enter a cost centre code";
        }
        
        /// get label of column
        public static string GetCostCentreCodeLabel()
        {
            return "Cost Centre Code";
        }
        
        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }
        
        /// get help text for column
        public static string GetAnalysisTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisTypeCodeLabel()
        {
            return "Analysis Type Code";
        }
        
        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }
        
        /// get help text for column
        public static string GetAnalysisAttributeValueHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetAnalysisAttributeValueLabel()
        {
            return "Analysis Attribute Value";
        }
        
        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ATransAnalAttrib";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_trans_anal_attrib";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Transaction Analysis Attribute";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1,
                    2,
                    3,
                    6};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_batch_number_i",
                    "a_journal_number_i",
                    "a_transaction_number_i",
                    "a_account_code_c",
                    "a_cost_centre_code_c",
                    "a_analysis_type_code_c",
                    "a_analysis_attribute_value_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnBatchNumber,
                    this.ColumnJournalNumber,
                    this.ColumnTransactionNumber,
                    this.ColumnAnalysisTypeCode};
        }
        
        /// get typed set of changes
        public ATransAnalAttribTable GetChangesTyped()
        {
            return ((ATransAnalAttribTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ATransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransAnalAttribRow ret = ((ATransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ATransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransAnalAttribRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnBatchNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnJournalNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnTransactionNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnCostCentreCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnAnalysisTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnAnalysisAttributeValue))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Analysis information entered by the user for a general ledger transaction.
    [Serializable()]
    public class ATransAnalAttribRow : System.Data.DataRow
    {
        
        private ATransAnalAttribTable myTable;
        
        /// Constructor
        public ATransAnalAttribRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ATransAnalAttribTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber) 
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }
        
        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber) 
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }
        
        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber) 
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }
        
        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode) 
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }
        
        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode) 
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode) 
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }
        
        /// 
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue) 
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }
        
        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Lists the suspense accounts of each ledger.
    [Serializable()]
    public class ASuspenseAccountTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// This identifies an account which will be treated as a suspense account.
        public DataColumn ColumnSuspenseAccountCode;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ASuspenseAccountTable() : 
                base("ASuspenseAccount")
        {
        }
        
        /// constructor
        public ASuspenseAccountTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ASuspenseAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ASuspenseAccountRow this[int i]
        {
            get
            {
                return ((ASuspenseAccountRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSuspenseAccountCodeDBName()
        {
            return "a_suspense_account_code_c";
        }
        
        /// get help text for column
        public static string GetSuspenseAccountCodeHelp()
        {
            return "Enter an account code";
        }
        
        /// get label of column
        public static string GetSuspenseAccountCodeLabel()
        {
            return "Suspense Account Code";
        }
        
        /// get character length for column
        public static short GetSuspenseAccountCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ASuspenseAccount";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_suspense_account";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Suspense Account";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_suspense_account_code_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSuspenseAccountCode = this.Columns["a_suspense_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnSuspenseAccountCode};
        }
        
        /// get typed set of changes
        public ASuspenseAccountTable GetChangesTyped()
        {
            return ((ASuspenseAccountTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ASuspenseAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            ASuspenseAccountRow ret = ((ASuspenseAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ASuspenseAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASuspenseAccountRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_suspense_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSuspenseAccountCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Lists the suspense accounts of each ledger.
    [Serializable()]
    public class ASuspenseAccountRow : System.Data.DataRow
    {
        
        private ASuspenseAccountTable myTable;
        
        /// Constructor
        public ASuspenseAccountRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ASuspenseAccountTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// This identifies an account which will be treated as a suspense account.
        public String SuspenseAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSuspenseAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSuspenseAccountCode) 
                            || (((String)(this[this.myTable.ColumnSuspenseAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSuspenseAccountCode] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSuspenseAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Transaction types which have special processing. Eg. Allocation, Reallocation, Gift, Revaluation.
    [Serializable()]
    public class ASpecialTransTypeTable : TTypedDataTable
    {
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// 
        public DataColumn ColumnTransactionTypeCode;
        
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnTransactionTypeDescription;
        
        /// The filename of the process to call
        public DataColumn ColumnSpecTransProcessToCall;
        
        /// Process to call to undo the work of the special transaction process, if needed
        public DataColumn ColumnSpecTransUndoProcess;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ASpecialTransTypeTable() : 
                base("ASpecialTransType")
        {
        }
        
        /// constructor
        public ASpecialTransTypeTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ASpecialTransTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ASpecialTransTypeRow this[int i]
        {
            get
            {
                return ((ASpecialTransTypeRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System Code";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeCodeHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetTransactionTypeCodeLabel()
        {
            return "Special Transaction Type Code";
        }
        
        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetTransactionTypeDescriptionDBName()
        {
            return "a_transaction_type_description_c";
        }
        
        /// get help text for column
        public static string GetTransactionTypeDescriptionHelp()
        {
            return "Enter a description";
        }
        
        /// get label of column
        public static string GetTransactionTypeDescriptionLabel()
        {
            return "Description";
        }
        
        /// get character length for column
        public static short GetTransactionTypeDescriptionLength()
        {
            return 32;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecTransProcessToCallDBName()
        {
            return "a_spec_trans_process_to_call_c";
        }
        
        /// get help text for column
        public static string GetSpecTransProcessToCallHelp()
        {
            return "Enter the filename of the special transaction process to call";
        }
        
        /// get label of column
        public static string GetSpecTransProcessToCallLabel()
        {
            return "Process to Call";
        }
        
        /// get character length for column
        public static short GetSpecTransProcessToCallLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecTransUndoProcessDBName()
        {
            return "a_spec_trans_undo_process_c";
        }
        
        /// get help text for column
        public static string GetSpecTransUndoProcessHelp()
        {
            return "Process to call to undo the work of the special transaction process, if needed";
        }
        
        /// get label of column
        public static string GetSpecTransUndoProcessLabel()
        {
            return "Process for undo";
        }
        
        /// get character length for column
        public static short GetSpecTransUndoProcessLength()
        {
            return 40;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ASpecialTransType";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_special_trans_type";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Special Transaction Type";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_sub_system_code_c",
                    "a_transaction_type_code_c",
                    "a_transaction_type_description_c",
                    "a_spec_trans_process_to_call_c",
                    "a_spec_trans_undo_process_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnTransactionTypeDescription = this.Columns["a_transaction_type_description_c"];
            this.ColumnSpecTransProcessToCall = this.Columns["a_spec_trans_process_to_call_c"];
            this.ColumnSpecTransUndoProcess = this.Columns["a_spec_trans_undo_process_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnSubSystemCode,
                    this.ColumnTransactionTypeCode};
        }
        
        /// get typed set of changes
        public ASpecialTransTypeTable GetChangesTyped()
        {
            return ((ASpecialTransTypeTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ASpecialTransTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ASpecialTransTypeRow ret = ((ASpecialTransTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ASpecialTransTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASpecialTransTypeRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_spec_trans_process_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_spec_trans_undo_process_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnTransactionTypeCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnTransactionTypeDescription))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 64);
            }
            if ((ACol == ColumnSpecTransProcessToCall))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnSpecTransUndoProcess))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 80);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Transaction types which have special processing. Eg. Allocation, Reallocation, Gift, Revaluation.
    [Serializable()]
    public class ASpecialTransTypeRow : System.Data.DataRow
    {
        
        private ASpecialTransTypeTable myTable;
        
        /// Constructor
        public ASpecialTransTypeRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ASpecialTransTypeTable)(this.Table));
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// 
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }
        
        /// This is a short description which is 32 charcters long
        public String TransactionTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeDescription) 
                            || (((String)(this[this.myTable.ColumnTransactionTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeDescription] = value;
                }
            }
        }
        
        /// The filename of the process to call
        public String SpecTransProcessToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecTransProcessToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecTransProcessToCall) 
                            || (((String)(this[this.myTable.ColumnSpecTransProcessToCall])) != value)))
                {
                    this[this.myTable.ColumnSpecTransProcessToCall] = value;
                }
            }
        }
        
        /// Process to call to undo the work of the special transaction process, if needed
        public String SpecTransUndoProcess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecTransUndoProcess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecTransUndoProcess) 
                            || (((String)(this[this.myTable.ColumnSpecTransUndoProcess])) != value)))
                {
                    this[this.myTable.ColumnSpecTransUndoProcess] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
            this.SetNull(this.myTable.ColumnSpecTransProcessToCall);
            this.SetNull(this.myTable.ColumnSpecTransUndoProcess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSpecTransUndoProcessNull()
        {
            return this.IsNull(this.myTable.ColumnSpecTransUndoProcess);
        }
        
        /// assign NULL value
        public void SetSpecTransUndoProcessNull()
        {
            this.SetNull(this.myTable.ColumnSpecTransUndoProcess);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Shows which systems are interfaced (have been added) to each general ledger.
    [Serializable()]
    public class ASystemInterfaceTable : TTypedDataTable
    {
        
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        
        /// 
        public DataColumn ColumnSetUpComplete;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ASystemInterfaceTable() : 
                base("ASystemInterface")
        {
        }
        
        /// constructor
        public ASystemInterfaceTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ASystemInterfaceTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ASystemInterfaceRow this[int i]
        {
            get
            {
                return ((ASystemInterfaceRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }
        
        /// get help text for column
        public static string GetLedgerNumberHelp()
        {
            return "Enter the ledger number";
        }
        
        /// get label of column
        public static string GetLedgerNumberLabel()
        {
            return "Ledger Number";
        }
        
        /// get display format for column
        public static short GetLedgerNumberLength()
        {
            return 4;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }
        
        /// get help text for column
        public static string GetSubSystemCodeHelp()
        {
            return "Defines a sub system of accounts";
        }
        
        /// get label of column
        public static string GetSubSystemCodeLabel()
        {
            return "Sub System Code";
        }
        
        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSetUpCompleteDBName()
        {
            return "a_set_up_complete_l";
        }
        
        /// get help text for column
        public static string GetSetUpCompleteHelp()
        {
            return "";
        }
        
        /// get label of column
        public static string GetSetUpCompleteLabel()
        {
            return "Set Up Complete";
        }
        
        /// get display format for column
        public static short GetSetUpCompleteLength()
        {
            return 6;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ASystemInterface";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_system_interface";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "System Interface";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_ledger_number_i",
                    "a_sub_system_code_c",
                    "a_set_up_complete_l",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnSetUpComplete = this.Columns["a_set_up_complete_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnLedgerNumber,
                    this.ColumnSubSystemCode};
        }
        
        /// get typed set of changes
        public ASystemInterfaceTable GetChangesTyped()
        {
            return ((ASystemInterfaceTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ASystemInterfaceRow NewRowTyped(bool AWithDefaultValues)
        {
            ASystemInterfaceRow ret = ((ASystemInterfaceRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ASystemInterfaceRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASystemInterfaceRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_set_up_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnLedgerNumber))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Int);
            }
            if ((ACol == ColumnSubSystemCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnSetUpComplete))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Bit);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Shows which systems are interfaced (have been added) to each general ledger.
    [Serializable()]
    public class ASystemInterfaceRow : System.Data.DataRow
    {
        
        private ASystemInterfaceTable myTable;
        
        /// Constructor
        public ASystemInterfaceRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ASystemInterfaceTable)(this.Table));
        }
        
        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber) 
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }
        
        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode) 
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }
        
        /// 
        public Boolean SetUpComplete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSetUpComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSetUpComplete) 
                            || (((Boolean)(this[this.myTable.ColumnSetUpComplete])) != value)))
                {
                    this[this.myTable.ColumnSetUpComplete] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnSetUpComplete.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsSetUpCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnSetUpComplete);
        }
        
        /// assign NULL value
        public void SetSetUpCompleteNull()
        {
            this.SetNull(this.myTable.ColumnSetUpComplete);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Describes what is to be displayed for a currency and language combination when displaying the amount as text.
    [Serializable()]
    public class ACurrencyLanguageTable : TTypedDataTable
    {
        
        /// This defines which currency is being used
        public DataColumn ColumnCurrencyCode;
        
        /// This is the code used to identify a language.
        public DataColumn ColumnLanguageCode;
        
        /// The currency unit label when the amount is 1
        public DataColumn ColumnUnitLabelSingular;
        
        /// The currency unit label when the amount is &gt; 1
        public DataColumn ColumnUnitLabelPlural;
        
        /// This is needed to determine the gender in some languages.
        public DataColumn ColumnSpecialCode;
        
        /// Describes what to do with the decimal when representing it as text.  Not to display, display as text or as a numeric
        public DataColumn ColumnDecimalOptions;
        
        /// The currency decimal label when the amount is 1
        public DataColumn ColumnDecimalLabelSingular;
        
        /// The currency decimal label when the amount is &gt; 1
        public DataColumn ColumnDecimalLabelPlural;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public ACurrencyLanguageTable() : 
                base("ACurrencyLanguage")
        {
        }
        
        /// constructor
        public ACurrencyLanguageTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public ACurrencyLanguageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public ACurrencyLanguageRow this[int i]
        {
            get
            {
                return ((ACurrencyLanguageRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }
        
        /// get help text for column
        public static string GetCurrencyCodeHelp()
        {
            return "Enter a currency code";
        }
        
        /// get label of column
        public static string GetCurrencyCodeLabel()
        {
            return "Currency Code";
        }
        
        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 8;
        }
        
        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "p_language_code_c";
        }
        
        /// get help text for column
        public static string GetLanguageCodeHelp()
        {
            return "Enter an internationally accepted language code";
        }
        
        /// get label of column
        public static string GetLanguageCodeLabel()
        {
            return "Language Code";
        }
        
        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitLabelSingularDBName()
        {
            return "a_unit_label_singular_c";
        }
        
        /// get help text for column
        public static string GetUnitLabelSingularHelp()
        {
            return "Enter the label for the unit when the amount is 1";
        }
        
        /// get label of column
        public static string GetUnitLabelSingularLabel()
        {
            return "Singular";
        }
        
        /// get character length for column
        public static short GetUnitLabelSingularLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetUnitLabelPluralDBName()
        {
            return "a_unit_label_plural_c";
        }
        
        /// get help text for column
        public static string GetUnitLabelPluralHelp()
        {
            return "Enter the label for the unit when the amount is > 1";
        }
        
        /// get label of column
        public static string GetUnitLabelPluralLabel()
        {
            return "Plural";
        }
        
        /// get character length for column
        public static short GetUnitLabelPluralLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetSpecialCodeDBName()
        {
            return "a_special_code_c";
        }
        
        /// get help text for column
        public static string GetSpecialCodeHelp()
        {
            return "This is needed to determine the gender in some languages.";
        }
        
        /// get label of column
        public static string GetSpecialCodeLabel()
        {
            return "Special Code";
        }
        
        /// get character length for column
        public static short GetSpecialCodeLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDecimalOptionsDBName()
        {
            return "a_decimal_options_c";
        }
        
        /// get help text for column
        public static string GetDecimalOptionsHelp()
        {
            return "Enter the option required";
        }
        
        /// get label of column
        public static string GetDecimalOptionsLabel()
        {
            return "Decimal Option";
        }
        
        /// get character length for column
        public static short GetDecimalOptionsLength()
        {
            return 12;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDecimalLabelSingularDBName()
        {
            return "a_decimal_label_singular_c";
        }
        
        /// get help text for column
        public static string GetDecimalLabelSingularHelp()
        {
            return "Enter the label for the decimal when the amount is 1";
        }
        
        /// get label of column
        public static string GetDecimalLabelSingularLabel()
        {
            return "Singular";
        }
        
        /// get character length for column
        public static short GetDecimalLabelSingularLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDecimalLabelPluralDBName()
        {
            return "a_decimal_label_plural_c";
        }
        
        /// get help text for column
        public static string GetDecimalLabelPluralHelp()
        {
            return "Enter the label for the decimal when the amount is > 1";
        }
        
        /// get label of column
        public static string GetDecimalLabelPluralLabel()
        {
            return "Plural";
        }
        
        /// get character length for column
        public static short GetDecimalLabelPluralLength()
        {
            return 16;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "ACurrencyLanguage";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_currency_language";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Currency Language";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0,
                    1};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_currency_code_c",
                    "p_language_code_c",
                    "a_unit_label_singular_c",
                    "a_unit_label_plural_c",
                    "a_special_code_c",
                    "a_decimal_options_c",
                    "a_decimal_label_singular_c",
                    "a_decimal_label_plural_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnLanguageCode = this.Columns["p_language_code_c"];
            this.ColumnUnitLabelSingular = this.Columns["a_unit_label_singular_c"];
            this.ColumnUnitLabelPlural = this.Columns["a_unit_label_plural_c"];
            this.ColumnSpecialCode = this.Columns["a_special_code_c"];
            this.ColumnDecimalOptions = this.Columns["a_decimal_options_c"];
            this.ColumnDecimalLabelSingular = this.Columns["a_decimal_label_singular_c"];
            this.ColumnDecimalLabelPlural = this.Columns["a_decimal_label_plural_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnCurrencyCode,
                    this.ColumnLanguageCode};
        }
        
        /// get typed set of changes
        public ACurrencyLanguageTable GetChangesTyped()
        {
            return ((ACurrencyLanguageTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public ACurrencyLanguageRow NewRowTyped(bool AWithDefaultValues)
        {
            ACurrencyLanguageRow ret = ((ACurrencyLanguageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public ACurrencyLanguageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACurrencyLanguageRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_unit_label_singular_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_unit_label_plural_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_special_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_options_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_label_singular_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_label_plural_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnCurrencyCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 16);
            }
            if ((ACol == ColumnLanguageCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnUnitLabelSingular))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnUnitLabelPlural))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnSpecialCode))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnDecimalOptions))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 24);
            }
            if ((ACol == ColumnDecimalLabelSingular))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnDecimalLabelPlural))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 32);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Describes what is to be displayed for a currency and language combination when displaying the amount as text.
    [Serializable()]
    public class ACurrencyLanguageRow : System.Data.DataRow
    {
        
        private ACurrencyLanguageTable myTable;
        
        /// Constructor
        public ACurrencyLanguageRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((ACurrencyLanguageTable)(this.Table));
        }
        
        /// This defines which currency is being used
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode) 
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }
        
        /// This is the code used to identify a language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode) 
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }
        
        /// The currency unit label when the amount is 1
        public String UnitLabelSingular
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitLabelSingular.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitLabelSingular) 
                            || (((String)(this[this.myTable.ColumnUnitLabelSingular])) != value)))
                {
                    this[this.myTable.ColumnUnitLabelSingular] = value;
                }
            }
        }
        
        /// The currency unit label when the amount is &gt; 1
        public String UnitLabelPlural
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitLabelPlural.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitLabelPlural) 
                            || (((String)(this[this.myTable.ColumnUnitLabelPlural])) != value)))
                {
                    this[this.myTable.ColumnUnitLabelPlural] = value;
                }
            }
        }
        
        /// This is needed to determine the gender in some languages.
        public String SpecialCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialCode) 
                            || (((String)(this[this.myTable.ColumnSpecialCode])) != value)))
                {
                    this[this.myTable.ColumnSpecialCode] = value;
                }
            }
        }
        
        /// Describes what to do with the decimal when representing it as text.  Not to display, display as text or as a numeric
        public String DecimalOptions
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalOptions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalOptions) 
                            || (((String)(this[this.myTable.ColumnDecimalOptions])) != value)))
                {
                    this[this.myTable.ColumnDecimalOptions] = value;
                }
            }
        }
        
        /// The currency decimal label when the amount is 1
        public String DecimalLabelSingular
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalLabelSingular.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalLabelSingular) 
                            || (((String)(this[this.myTable.ColumnDecimalLabelSingular])) != value)))
                {
                    this[this.myTable.ColumnDecimalLabelSingular] = value;
                }
            }
        }
        
        /// The currency decimal label when the amount is &gt; 1
        public String DecimalLabelPlural
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalLabelPlural.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalLabelPlural) 
                            || (((String)(this[this.myTable.ColumnDecimalLabelPlural])) != value)))
                {
                    this[this.myTable.ColumnDecimalLabelPlural] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this.SetNull(this.myTable.ColumnLanguageCode);
            this.SetNull(this.myTable.ColumnUnitLabelSingular);
            this.SetNull(this.myTable.ColumnUnitLabelPlural);
            this.SetNull(this.myTable.ColumnSpecialCode);
            this.SetNull(this.myTable.ColumnDecimalOptions);
            this.SetNull(this.myTable.ColumnDecimalLabelSingular);
            this.SetNull(this.myTable.ColumnDecimalLabelPlural);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsUnitLabelSingularNull()
        {
            return this.IsNull(this.myTable.ColumnUnitLabelSingular);
        }
        
        /// assign NULL value
        public void SetUnitLabelSingularNull()
        {
            this.SetNull(this.myTable.ColumnUnitLabelSingular);
        }
        
        /// test for NULL value
        public bool IsUnitLabelPluralNull()
        {
            return this.IsNull(this.myTable.ColumnUnitLabelPlural);
        }
        
        /// assign NULL value
        public void SetUnitLabelPluralNull()
        {
            this.SetNull(this.myTable.ColumnUnitLabelPlural);
        }
        
        /// test for NULL value
        public bool IsSpecialCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialCode);
        }
        
        /// assign NULL value
        public void SetSpecialCodeNull()
        {
            this.SetNull(this.myTable.ColumnSpecialCode);
        }
        
        /// test for NULL value
        public bool IsDecimalOptionsNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalOptions);
        }
        
        /// assign NULL value
        public void SetDecimalOptionsNull()
        {
            this.SetNull(this.myTable.ColumnDecimalOptions);
        }
        
        /// test for NULL value
        public bool IsDecimalLabelSingularNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalLabelSingular);
        }
        
        /// assign NULL value
        public void SetDecimalLabelSingularNull()
        {
            this.SetNull(this.myTable.ColumnDecimalLabelSingular);
        }
        
        /// test for NULL value
        public bool IsDecimalLabelPluralNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalLabelPlural);
        }
        
        /// assign NULL value
        public void SetDecimalLabelPluralNull()
        {
            this.SetNull(this.myTable.ColumnDecimalLabelPlural);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
    
    /// Lookup table for Key Focus Areas
    [Serializable()]
    public class AKeyFocusAreaTable : TTypedDataTable
    {
        
        /// Name of Key Focus Area
        public DataColumn ColumnKeyFocusArea;
        
        /// Comment
        public DataColumn ColumnKeyFocusAreaComment;
        
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;
        
        /// constructor
        public AKeyFocusAreaTable() : 
                base("AKeyFocusArea")
        {
        }
        
        /// constructor
        public AKeyFocusAreaTable(string ATablename) : 
                base(ATablename)
        {
        }
        
        /// constructor for serialization
        public AKeyFocusAreaTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
        }
        
        /// Access a typed row by index
        public AKeyFocusAreaRow this[int i]
        {
            get
            {
                return ((AKeyFocusAreaRow)(this.Rows[i]));
            }
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaDBName()
        {
            return "a_key_focus_area_c";
        }
        
        /// get help text for column
        public static string GetKeyFocusAreaHelp()
        {
            return "Name of Key Focus Area";
        }
        
        /// get label of column
        public static string GetKeyFocusAreaLabel()
        {
            return "Key Focus Area";
        }
        
        /// get character length for column
        public static short GetKeyFocusAreaLength()
        {
            return 20;
        }
        
        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaCommentDBName()
        {
            return "a_key_focus_area_comment_c";
        }
        
        /// get help text for column
        public static string GetKeyFocusAreaCommentHelp()
        {
            return "Comment";
        }
        
        /// get label of column
        public static string GetKeyFocusAreaCommentLabel()
        {
            return "Comment";
        }
        
        /// get character length for column
        public static short GetKeyFocusAreaCommentLength()
        {
            return 200;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }
        
        /// get help text for column
        public static string GetDateCreatedHelp()
        {
            return "The date the record was created.";
        }
        
        /// get label of column
        public static string GetDateCreatedLabel()
        {
            return "Created Date";
        }
        
        /// get display format for column
        public static short GetDateCreatedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }
        
        /// get help text for column
        public static string GetCreatedByHelp()
        {
            return "User ID of who created this record.";
        }
        
        /// get label of column
        public static string GetCreatedByLabel()
        {
            return "Created By";
        }
        
        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }
        
        /// get help text for column
        public static string GetDateModifiedHelp()
        {
            return "The date the record was modified.";
        }
        
        /// get label of column
        public static string GetDateModifiedLabel()
        {
            return "Modified Date";
        }
        
        /// get display format for column
        public static short GetDateModifiedLength()
        {
            return 11;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }
        
        /// get help text for column
        public static string GetModifiedByHelp()
        {
            return "User ID of who last modified this record.";
        }
        
        /// get label of column
        public static string GetModifiedByLabel()
        {
            return "Modified By";
        }
        
        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 10;
        }
        
        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }
        
        /// get help text for column
        public static string GetModificationIdHelp()
        {
            return "This identifies the current version of the record.";
        }
        
        /// get label of column
        public static string GetModificationIdLabel()
        {
            return "";
        }
        
        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }
        
        /// CamelCase version of the tablename
        public static string GetTableName()
        {
            return "AKeyFocusArea";
        }
        
        /// original name of table in the database
        public static string GetTableDBName()
        {
            return "a_key_focus_area";
        }
        
        /// get table label for messages etc
        public static string GetTableLabel()
        {
            return "Key Focus Area";
        }
        
        /// get the index number of fields that are part of the primary key
        public static Int32[] GetPrimKeyColumnOrdList()
        {
            return new int[] {
                    0};
        }
        
        /// get the names of the columns
        public static String[] GetColumnStringList()
        {
            return new string[] {
                    "a_key_focus_area_c",
                    "a_key_focus_area_comment_c",
                    "s_date_created_d",
                    "s_created_by_c",
                    "s_date_modified_d",
                    "s_modified_by_c",
                    "s_modification_id_c"};
        }
        
        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKeyFocusArea = this.Columns["a_key_focus_area_c"];
            this.ColumnKeyFocusAreaComment = this.Columns["a_key_focus_area_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[] {
                    this.ColumnKeyFocusArea};
        }
        
        /// get typed set of changes
        public AKeyFocusAreaTable GetChangesTyped()
        {
            return ((AKeyFocusAreaTable)(base.GetChangesTypedInternal()));
        }
        
        /// create a new typed row
        public AKeyFocusAreaRow NewRowTyped(bool AWithDefaultValues)
        {
            AKeyFocusAreaRow ret = ((AKeyFocusAreaRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }
        
        /// create a new typed row, always with default values
        public AKeyFocusAreaRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }
        
        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AKeyFocusAreaRow(builder);
        }
        
        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }
        
        /// prepare odbc parameters for given column
        public override OdbcParameter CreateOdbcParameter(DataColumn ACol)
        {
            if ((ACol == ColumnKeyFocusArea))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 40);
            }
            if ((ACol == ColumnKeyFocusAreaComment))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 400);
            }
            if ((ACol == ColumnDateCreated))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnCreatedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnDateModified))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.Date);
            }
            if ((ACol == ColumnModifiedBy))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 20);
            }
            if ((ACol == ColumnModificationId))
            {
                return new System.Data.Odbc.OdbcParameter("", OdbcType.VarChar, 150);
            }
            return null;
        }
    }
    
    /// Lookup table for Key Focus Areas
    [Serializable()]
    public class AKeyFocusAreaRow : System.Data.DataRow
    {
        
        private AKeyFocusAreaTable myTable;
        
        /// Constructor
        public AKeyFocusAreaRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.myTable = ((AKeyFocusAreaTable)(this.Table));
        }
        
        /// Name of Key Focus Area
        public String KeyFocusArea
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusArea.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusArea) 
                            || (((String)(this[this.myTable.ColumnKeyFocusArea])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusArea] = value;
                }
            }
        }
        
        /// Comment
        public String KeyFocusAreaComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusAreaComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusAreaComment) 
                            || (((String)(this[this.myTable.ColumnKeyFocusAreaComment])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusAreaComment] = value;
                }
            }
        }
        
        /// The date the record was created.
        public System.DateTime DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateCreatedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateCreatedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateCreated.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy) 
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }
        
        /// The date the record was modified.
        public System.DateTime DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified) 
                            || (((System.DateTime)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }
        
        /// Returns the date value or the minimum date if the date is NULL
        public System.DateTime DateModifiedLowNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified], TNullHandlingEnum.nhReturnLowestDate);
            }
        }
        
        /// Returns the date value or the maximum date if the date is NULL
        public System.DateTime DateModifiedHighNull
        {
            get
            {
                return TSaveConvert.ObjectToDate(this[this.myTable.ColumnDateModified.Ordinal], TNullHandlingEnum.nhReturnHighestDate);
            }
        }
        
        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy) 
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }
        
        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId) 
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }
        
        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKeyFocusArea);
            this.SetNull(this.myTable.ColumnKeyFocusAreaComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }
        
        /// test for NULL value
        public bool IsKeyFocusAreaCommentNull()
        {
            return this.IsNull(this.myTable.ColumnKeyFocusAreaComment);
        }
        
        /// assign NULL value
        public void SetKeyFocusAreaCommentNull()
        {
            this.SetNull(this.myTable.ColumnKeyFocusAreaComment);
        }
        
        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }
        
        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }
        
        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }
        
        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }
        
        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }
        
        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }
        
        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }
        
        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }
        
        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }
        
        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
}
