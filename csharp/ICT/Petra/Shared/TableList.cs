/* Auto generated with nant generateORMTables
 * Do not modify this file manually!
 */
/*************************************************************************
 *
 * DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * @Authors:
 *       auto generated
 *
 * Copyright 2004-2010 by OM International
 *
 * This file is part of OpenPetra.org.
 *
 * OpenPetra.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenPetra.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.
 *
 ************************************************************************/
using System.Collections.Generic;

namespace Ict.Petra.Shared
{
    /// <summary>
    /// this returns a list of all database tables, ordered by the most referenced tables,
    /// which need to be created first and can be deleted last
    /// </summary>
    public class TTableList
    {
        public static List<string> GetCamelCaseNames()
        {
            List<string> list = new List<string>();
            #region CamelCaseTableNames
            list.Add("SUser");
            list.Add("AAccount");
            list.Add("AAccountHierarchy");
            list.Add("AAccountHierarchyDetail");
            list.Add("AAccountPropertyCode");
            list.Add("AAccountProperty");
            list.Add("AAccountingPeriod");
            list.Add("AAccountingSystemParameter");
            list.Add("AAnalysisType");
            list.Add("AAnalysisAttribute");
            list.Add("AAnalysisStoreTable");
            list.Add("AApDocument");
            list.Add("AApDocumentDetail");
            list.Add("AApAnalAttrib");
            list.Add("AApPayment");
            list.Add("AApDocumentPayment");
            list.Add("AApSupplier");
            list.Add("AArArticlePrice");
            list.Add("AArCategory");
            list.Add("AArArticle");
            list.Add("AArDiscount");
            list.Add("AArDefaultDiscount");
            list.Add("AArDiscountPerCategory");
            list.Add("AArInvoiceDetailDiscount");
            list.Add("AArInvoiceDiscount");
            list.Add("ABatch");
            list.Add("ABudgetPeriod");
            list.Add("ABudgetRevision");
            list.Add("ABudgetType");
            list.Add("ACostCentreTypes");
            list.Add("ACostCentre");
            list.Add("ABudget");
            list.Add("ACrdtNoteInvoiceLink");
            list.Add("ACurrency");
            list.Add("AArInvoice");
            list.Add("AArInvoiceDetail");
            list.Add("ACorporateExchangeRate");
            list.Add("ADailyExchangeRate");
            list.Add("AEmailDestination");
            list.Add("AEpAccount");
            list.Add("AEpMatch");
            list.Add("AEpPayment");
            list.Add("AEpDocumentPayment");
            list.Add("AEpStatement");
            list.Add("AEpTransaction");
            list.Add("AFeesPayable");
            list.Add("AFeesReceivable");
            list.Add("AFinStatementGroup");
            list.Add("AForm");
            list.Add("AFormElementType");
            list.Add("AFormElement");
            list.Add("AFreeformAnalysis");
            list.Add("AFrequency");
            list.Add("AGeneralLedgerMaster");
            list.Add("AGeneralLedgerMasterPeriod");
            list.Add("AGiftBatch");
            list.Add("AGift");
            list.Add("AGiftDetail");
            list.Add("AIchStewardship");
            list.Add("AJournal");
            list.Add("AKeyFocusArea");
            list.Add("ALedger");
            list.Add("ALedgerInitFlag");
            list.Add("AMethodOfGiving");
            list.Add("AMethodOfPayment");
            list.Add("AMotivationGroup");
            list.Add("AMotivationDetail");
            list.Add("AMotivationDetailFee");
            list.Add("APrevYearCorpExRate");
            list.Add("APreviousYearBatch");
            list.Add("APreviousYearJournal");
            list.Add("APreviousYearTransaction");
            list.Add("APrevYearTransAnalAttrib");
            list.Add("AProcessedFee");
            list.Add("ARecurringBatch");
            list.Add("ARecurringGiftBatch");
            list.Add("ARecurringGift");
            list.Add("ARecurringGiftDetail");
            list.Add("ARecurringJournal");
            list.Add("ARecurringTransaction");
            list.Add("ARecurringTransAnalAttrib");
            list.Add("ASubSystem");
            list.Add("ASpecialTransType");
            list.Add("ASuspenseAccount");
            list.Add("ASystemInterface");
            list.Add("ATaxType");
            list.Add("ATaxTable");
            list.Add("AThisYearOldBatch");
            list.Add("AThisYearOldJournal");
            list.Add("AThisYearOldTransaction");
            list.Add("AThisyearoldTransAnalAttrib");
            list.Add("ATransaction");
            list.Add("ATransAnalAttrib");
            list.Add("ATransactionType");
            list.Add("AValidLedgerNumber");
            list.Add("MExtractMaster");
            list.Add("MExtract");
            list.Add("MExtractParameter");
            list.Add("MExtractType");
            list.Add("PAcquisition");
            list.Add("PAction");
            list.Add("PAddressElement");
            list.Add("PAddressLayoutCode");
            list.Add("PAddressLayout");
            list.Add("PAddressLine");
            list.Add("PAddresseeType");
            list.Add("PBank");
            list.Add("PBankingType");
            list.Add("PBankingDetails");
            list.Add("PBankingDetailsUsageType");
            list.Add("PBankingDetailsUsage");
            list.Add("PBusiness");
            list.Add("PDenomination");
            list.Add("PChurch");
            list.Add("PContactAttribute");
            list.Add("PContactAttributeDetail");
            list.Add("PCountry");
            list.Add("PCustomisedGreeting");
            list.Add("PDataLabelLookupCategory");
            list.Add("PDataLabel");
            list.Add("PDataLabelLookup");
            list.Add("PDataLabelUse");
            list.Add("PDataLabelValueApplication");
            list.Add("PDataLabelValuePartner");
            list.Add("PEmail");
            list.Add("PFamily");
            list.Add("PFileInfo");
            list.Add("PFirstContact");
            list.Add("PFormLetterBody");
            list.Add("PFormLetterDesign");
            list.Add("PFormLetterInsert");
            list.Add("PFoundation");
            list.Add("PFoundationDeadline");
            list.Add("PFoundationProposalDetail");
            list.Add("PFoundationProposalStatus");
            list.Add("PFoundationProposal");
            list.Add("PInterestCategory");
            list.Add("PInterest");
            list.Add("PInternationalPostalType");
            list.Add("PLabel");
            list.Add("PLanguage");
            list.Add("ACurrencyLanguage");
            list.Add("PAddresseeTitleOverride");
            list.Add("PFormality");
            list.Add("PLocation");
            list.Add("PLocationType");
            list.Add("PMailing");
            list.Add("PMergeForm");
            list.Add("PMergeField");
            list.Add("PMethodOfContact");
            list.Add("POccupation");
            list.Add("POrganisation");
            list.Add("PPartnerAction");
            list.Add("PPartnerAttributeType");
            list.Add("PPartnerAttribute");
            list.Add("PPartnerBankingDetails");
            list.Add("PPartnerClasses");
            list.Add("PPartner");
            list.Add("PPartnerComment");
            list.Add("PPartnerContact");
            list.Add("PPartnerContactAttribute");
            list.Add("PPartnerContactFile");
            list.Add("PUnit");
            list.Add("PPartnerFieldOfService");
            list.Add("PPartnerFile");
            list.Add("PPartnerGraphic");
            list.Add("PPartnerInterest");
            list.Add("PPartnerLedger");
            list.Add("PPartnerLocation");
            list.Add("PPartnerMerge");
            list.Add("PPartnerRelationship");
            list.Add("PPartnerReminder");
            list.Add("PPartnerSet");
            list.Add("PPartnerSetPartner");
            list.Add("PPartnerShortCode");
            list.Add("PPartnerState");
            list.Add("PPartnerStatus");
            list.Add("PPartnerType");
            list.Add("PPerson");
            list.Add("PPostcodeRange");
            list.Add("PPostcodeRegion");
            list.Add("PProcess");
            list.Add("PProposalSubmissionType");
            list.Add("PPublication");
            list.Add("PPublicationCost");
            list.Add("PReasonSubscriptionCancelled");
            list.Add("PReasonSubscriptionGiven");
            list.Add("PRecentPartners");
            list.Add("PRelationCategory");
            list.Add("PRelation");
            list.Add("PReminderCategory");
            list.Add("PReports");
            list.Add("PState");
            list.Add("PSubscription");
            list.Add("PTax");
            list.Add("PTitle");
            list.Add("PTypeCategory");
            list.Add("PType");
            list.Add("PVenue");
            list.Add("PcAttendee");
            list.Add("PcBuilding");
            list.Add("PcConference");
            list.Add("PcConferenceCost");
            list.Add("PcConferenceOptionType");
            list.Add("PcConferenceOption");
            list.Add("PcConferenceVenue");
            list.Add("PcCostType");
            list.Add("PcDiscountCriteria");
            list.Add("PcDiscount");
            list.Add("PcEarlyLate");
            list.Add("PcExtraCost");
            list.Add("PcGroup");
            list.Add("PcRoom");
            list.Add("PcRoomAlloc");
            list.Add("PcRoomAttributeType");
            list.Add("PcRoomAttribute");
            list.Add("PcSupplement");
            list.Add("PhBooking");
            list.Add("PhRoomBooking");
            list.Add("PmApplicationFile");
            list.Add("PmApplicationForms");
            list.Add("PmApplicationFormsFile");
            list.Add("PmApplicationStatusHistory");
            list.Add("PmCommitmentStatus");
            list.Add("PmDocument");
            list.Add("PmDocumentCategory");
            list.Add("PmDocumentFile");
            list.Add("PmDocumentType");
            list.Add("PmFormalEducation");
            list.Add("PmGeneralApplication");
            list.Add("PmInterview");
            list.Add("PmJobAssignment");
            list.Add("PmLongTermSupportFigures");
            list.Add("PmOwnership");
            list.Add("PmPassportDetails");
            list.Add("PmPastExperience");
            list.Add("PmPersOfficeSpecificData");
            list.Add("PmPersonAbility");
            list.Add("PmPersonCommitmentStatus");
            list.Add("PmPersonEvaluation");
            list.Add("PmPersonFile");
            list.Add("PmPersonLanguage");
            list.Add("PmPersonQualification");
            list.Add("PmPersonSkill");
            list.Add("PmPersonVision");
            list.Add("PmPersonalData");
            list.Add("PmShortTermApplication");
            list.Add("PmSpecialNeed");
            list.Add("PmStaffData");
            list.Add("PmYearProgramApplication");
            list.Add("PtAbilityArea");
            list.Add("PtAbilityLevel");
            list.Add("PtAppFormTypes");
            list.Add("PtApplicantStatus");
            list.Add("PtApplicationType");
            list.Add("PtArrivalPoint");
            list.Add("PtAssignmentType");
            list.Add("PtCongressCode");
            list.Add("PtContact");
            list.Add("PtDriverStatus");
            list.Add("PtLanguageLevel");
            list.Add("PtLeadershipRating");
            list.Add("PtLeavingCode");
            list.Add("PtMaritalStatus");
            list.Add("PtOfficeSpecificDataLabels");
            list.Add("PtPartyType");
            list.Add("PtPassportType");
            list.Add("PtPersonalDataLabels");
            list.Add("PtPosition");
            list.Add("PtQualificationArea");
            list.Add("PtQualificationLevel");
            list.Add("PtReports");
            list.Add("PtSkillCategory");
            list.Add("PtSkillLevel");
            list.Add("PtSpecialApplicant");
            list.Add("PtTravelType");
            list.Add("PtValuableItem");
            list.Add("PtVisionArea");
            list.Add("PtVisionLevel");
            list.Add("PtXyzTbdPreferenceLevel");
            list.Add("SChangeEvent");
            list.Add("SDefaultFileVolume");
            list.Add("SErrorLog");
            list.Add("SErrorMessage");
            list.Add("SFile");
            list.Add("SBatchJob");
            list.Add("SForm");
            list.Add("SFunction");
            list.Add("SFunctionRelationship");
            list.Add("SGroup");
            list.Add("SGroupCostCentre");
            list.Add("SGroupDataLabel");
            list.Add("SGroupExtract");
            list.Add("SGroupFileInfo");
            list.Add("SGroupFunction");
            list.Add("SGroupGift");
            list.Add("SGroupLedger");
            list.Add("SGroupLocation");
            list.Add("SGroupModuleAccessPermission");
            list.Add("SGroupMotivation");
            list.Add("SGroupPartnerContact");
            list.Add("SGroupPartnerLocation");
            list.Add("SGroupPartnerReminder");
            list.Add("SGroupPartnerSet");
            list.Add("SGroupTableAccessPermission");
            list.Add("SJobGroup");
            list.Add("SLabel");
            list.Add("SLanguageSpecific");
            list.Add("SLogin");
            list.Add("SLogonMessage");
            list.Add("SModule");
            list.Add("SModuleFile");
            list.Add("SPatchLog");
            list.Add("SReportFile");
            list.Add("SReportOptions");
            list.Add("SReportsToArchive");
            list.Add("SSelectedOutputDestination");
            list.Add("SSystemDefaults");
            list.Add("SSystemStatus");
            list.Add("SSystemStatusLog");
            list.Add("SUserDefaults");
            list.Add("SUserGroup");
            list.Add("SUserModuleAccessPermission");
            list.Add("SUserTableAccessPermission");
            list.Add("SValidOutputForm");
            list.Add("SVolume");
            list.Add("SVolumePartnerGroup");
            list.Add("SVolumePartnerGroupPartner");
            list.Add("SWorkflowDefinition");
            list.Add("SWorkflowGroup");
            list.Add("SWorkflowInstance");
            list.Add("SWorkflowInstanceStep");
            list.Add("SWorkflowStep");
            list.Add("SWorkflowUser");
            list.Add("UUnitType");
            list.Add("UmJob");
            list.Add("UmJobLanguage");
            list.Add("UmJobQualification");
            list.Add("UmJobRequirement");
            list.Add("UmJobVision");
            list.Add("UmUnitAbility");
            list.Add("UmUnitCost");
            list.Add("UmUnitEvaluation");
            list.Add("UmUnitLanguage");
            list.Add("UmUnitStructure");
            list.Add("UmUnitVision");

            #endregion
        }
    }
}
