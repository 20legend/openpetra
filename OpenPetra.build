<?xml version="1.0"?>
<project name="OpenPetra">

<echo>operating system=${operating-system::to-string(environment::get-operating-system())}</echo>
<echo>platform=${platform::get-name()}</echo>


<include buildfile="inc/nant/OpenPetra.common.xml"/>

<!-- nant -projecthelp does not show imported targets-->
<target name="help" depends="" description="Displays the available targets and parameters.">
    <echo>
list of available commands:
  clean: cleans everything
  compile: compiles OpenPetra
  generateSolution: compiles OpenPetra and generates the project and solution files
  generateSolutionNoCompile: generates the project and solution files. compile should already be executed
  startPetraServer: run a local Petra Server
  stopPetraServer: stop the local Petra Server
  startPetraClient: run the Petra Client
  deleteBakFiles: delete all backup files

compat:
  createSQLStatements: generates the sql create table statements etc from the petra.xml
  dbdoc: generates database design documentation using sql2diagram
  recreateDatabase: needed after changes in table structure in petra.xml
  resetDatabase: just resets the data, resets the permissions
  patchDatabase: update the database to the latest development version
  generateORM: generates the cachedtables from the petra.xml
  generateGlue: generates the interfaces and instantiators, which is the glue between client and server
  cleanPetra: prepare for a clean build
  compilePetra: build all Petra C# code
  translationCompilePOFile: create the dlls required to be delivered with a new release

list of commands, which works in the specific csharp directories:
  indent: beautify the code according to coding style guide
  uncrustify: calls indent


not supported
  loc, ploc: count the lines of code, to be used for COCOMO etc
  translation: extracts string in winforms, creates and updates the .po files, and compiles the .mo files for delivery
  generateWebforms: generates the User Interface using the Ext.js AJAX framework
  generateWebform: generate a single Webform. requires parameter: -D:file=SampleApplicationForm
  compileTesting: build the testing projects and copy the version.txt
  startWebServer: start a webservice with Mono XSP and Postgresl (does not work with sqlite at the moment)
  buildRelease: requires this parameter: -D:ReleaseID=0.0.2.0
  setupRemote -D:ReleaseID=0.0.2.0 -D:OrgName=&quot;Your Organisation&quot; -D:PublisherUrl=www.ProviderWebsite.com -D:ServerHost=app.Provider.com -D:ServerPort=9000
  createPatch: requires these parameters: -D:OldVersion=0.0.8-1 -D:NewVersion=0.0.10-0
  packTestReportingRelease: quick snapshot of all debug executables and dlls and config files for quick test on another machine
</echo>
</target>

<target name="translationCompilePOFile" description="create the dlls with the i18n messages" >
  <property name="target" value="compile" overwrite="false" />
  <nant inheritall="false" target="${target}" 
        buildfile="i18n/i18n.build" />
</target>

<target name="custclean" description="Cleans the solution and project files">
  <foreach item="String" property="devenv-name" delim="," in="${projectfiles.templates-list}" >
    <delete>
      <fileset basedir="${path::combine(dir.projectfiles,devenv-name)}">
        <include name="OpenPetra.sln" />
        <include name="*.csproj" />
      </fileset>
    </delete>
  </foreach>
  <property name="target" value="clean" />
  <call target="translationCompilePOFile" />                           
</target>

<target name="nanttasks" depends="" description="goes into the directory inc/nantasks">
  <property name="target" value="compile" overwrite="false" />
  <nant inheritall="false" target="${target}" 
        buildfile="inc/nanttasks/nanttasks.build" />
</target>

<target name="csharp" depends="nanttasks" description="goes into the diretory csharp">
  <property name="target" value="compile" overwrite="false" />
  <nant inheritall="false" target="${target}" 
        buildfile="csharp/csharp.build" />
</target>

<target name="internal-subdirs" description="Goes into all necessary subdirectories" 
        depends="csharp,nanttasks" />


<target name="generateSolutionNoCompile" description="generates the project and solution files. Target compile should already be executed">
  <call target="generateCsprojectNoCompile" />
  <call target="generate-solution-all-internal" />
</target>

<target name="generateSolution" depends="compile" description="compiles OpenPetra and generates the project and solution files">
  <call target="generateSolutionNoCompile" />
</target>

<!-- Generate solution targets -->
<target name="generate-solution-all-internal" >
  <foreach item="String" property="devenv-name" delim="," in="${projectfiles.templates-list}" >
    <call target="generate-solution-internal" />
  </foreach>
</target>


<target name="generate-solution-internal" >
  <property name="templatedir" value="${path::combine(dir.incdir.template, devenv-name)}" />
  <property name="TemplateProject" value="" />
  <property name="TemplateConfiguration" value="" />
  <property name="SolutionGuid" value="{${OP::GUIDGen()}}" />
  <foreach item="File" property="ProjectFile">
    <in>
      <items basedir="${path::combine(dir.projectfiles, devenv-name)}">
        <include name="*.csproj"/>
      </items>
    </in>
    <do>  
      <xmlpeek file="${ProjectFile}"
              xpath="/*[local-name()='Project']/*[local-name()='PropertyGroup']/*[local-name()='ProjectGuid']"
              property="ProjectGuid"/>
      <property name="ProjectName" value="${path::get-file-name-without-extension(ProjectFile)}" />
      <loadfile file="${path::combine(templatedir, 'template.sln.project')}"
                property="tempTemplateProject" encoding="utf-8">  
        <filterchain>
          <expandproperties />
        </filterchain>
      </loadfile>
      <property name="TemplateProject" value="${TemplateProject}${tempTemplateProject}" />
      <loadfile file="${path::combine(templatedir, 'template.sln.configuration')}"
                property="tempTemplateConfiguration" encoding="utf-8">  
        <filterchain>
          <expandproperties />
        </filterchain>
      </loadfile>
      <property name="TemplateConfiguration" value="${TemplateConfiguration}${tempTemplateConfiguration}" />
    </do>
  </foreach>
  <copy file="${path::combine(templatedir, 'template.sln')}"
        tofile="${path::combine(dir.projectfiles,
                                path::combine(devenv-name, 'OpenPetra.sln'))}" 
        overwrite="true">  
    <filterchain>
      <expandproperties />
    </filterchain>
  </copy>

</target>

<!-- Include default implementation -->
<include buildfile="inc/nant/OpenPetra.subdirs.xml"/> 

<!-- Compat targets -->
<include buildfile="inc/nant/OpenPetra.tobe.migrated.xml"/>

</project>

