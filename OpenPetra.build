<?xml version="1.0"?>
<project name="OpenPetra" default="help">
    <sysinfo />
    <include buildfile="OpenPetra.build.config" />
    <include buildfile="OpenPetra.build.utils" />
    <property name="Output.dir" value="Debug" unless="${property::exists('Output.dir')}"/>
    <property name="Configuration" value="DEBUG" unless="${property::exists('Configuration')}"/>
    <property name="ReleaseID" value="0.0.0.99" unless="${property::exists('ReleaseID')}"/>
    <property name="ReleaseVersion" value="0.0.0-99" unless="${property::exists('ReleaseVersion')}"/>
    <property name="PetraRelease" value="0300"/>
    <property name="ThirdParty.dir" value="${OpenPetraRoot.dir}/csharp/ThirdParty/"/>
    <property name="PetraToolsExe.dir" value="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/${Output.dir}"/>
    <property name="PetraXML.file" value="${OpenPetraRoot.dir}/db/petra.xml"/>
    <property name="DBDoc.Output.dir" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/dbdoc"/>
    <property name="SQLitedb.file" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.db"/>
    <property name="TargetLanguage.Pofile" value="${Translation.TargetLanguage}.po"/>
    <property name="TargetLanguage.PofileWithPath" value="${OpenPetraRoot.dir}/i18n/${Translation.TargetLanguage}.po"/>
    <property name="WebServerInstall.dir" value="${OpenPetraRoot.dir}/qooxdoo/"/>

    <property name="IctNAntTasks.file" value="${ThirdParty.dir}/NAnt/Ict.Tools.NAntTasks.dll"/>
    <if test="${not file::exists(IctNAntTasks.file)}">
        <call target="compileCommon"/>
        <call target="compilePetraTools"/>
        <copy file="${PetraToolsExe.dir}/Ict.Tools.NAntTasks.dll" tofile="${IctNAntTasks.file}"/>
    </if>
    <loadtasks assembly="${IctNAntTasks.file}" if="${file::exists(IctNAntTasks.file)}"/>
    
    <!-- could use nant -projecthelp instead -->
    <target name="help" depends="" description="Displays the available targets and parameters.">
        <echo message="A list of available commands: TODO"/>
        <echo message=""/>
        <echo message="createSQLStatements: generates the sql create table statements etc from the petra.xml"/>
        <echo message="dbdoc: generates database design documentation using sql2diagram"/>
        <echo message="ndoc: todo"/>
        <echo message="uncrustify: beautify the code according to coding style guide"/>
        <echo message="checkcode: todo"/>
        <echo message="fixProjectFiles: use this for broken GUIDs in sln and csproj files"/>
        <echo message="recreateDatabase: needed after changes in table structure in petra.xml"/>
        <echo message="resetDatabase: just resets the data, resets the permissions"/>
        <echo message="translation: extracts string in winforms, creates and updates the .po files, and compiles the .mo files for delivery"/>
        <echo message="generateORM: generates the typed tables and typed datastore from the petra.xml"/>
        <echo message="generateGlue: generates the interfaces and instantiators, which is the glue between client and server"/>
        <echo message="generateGTK: generates the User Interface using GTK"/>
        <echo message="generateWinforms: generates the User Interface using System.Windows.Forms"/>
        <echo message="cleanPetra: prepare for a clean build"/>
        <echo message="compilePetra: build all Petra C# code"/>
        <echo message="startPetraServer: run a local Petra Server"/>
        <echo message="stopPetraServer: stop the local Petra Server"/>
        <echo message="startPetraClient: run the Petra Client"/>
        <echo message="startSOAPServer: start a webservice with Mono XSP and Postgresl (does not work with sqlite at the moment)"/>
        <echo message="buildRelease: requires these parameters: -D:ReleaseID=0.0.2.0 -D:ReleaseVersion=0.0.2-0"/>
    </target>
    
    <target name="compilePetraTools" description="compile the PetraTools">
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/PetraTools.sln"/>
        <call target="compileTemplate"/>
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/SQLite/System.Data.SQLite.ManagedOnly.dll" tofile="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/Debug/System.Data.SQLite.dll" overwrite="true"/>
        </if>
    </target>
    <target name="compileTesting" description="compile the Testing module">
        <property name="appconfigfile" value="${OpenPetraRoot.dir}/csharp/ICT/Testing/Reporting/app.config"/>
        <if test="${not file::exists(appconfigfile)}">
            <copy file="${OpenPetraRoot.dir}/csharp/ICT/Testing/Reporting/app-sample.config"
                tofile="${appconfigfile}"/>
            <!-- app.config is part of the Tests.Reporting project and will be copied to _bin/${Output.dir}/Tests.Reporting.dll.config -->
        </if>
    
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/Testing.sln"/>
        <call target="compileTemplate"/>

        <property name="appconfigfileBin" value="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/${Output.dir}/Tests.Reporting.dll.config"/>
        <if test="${not file::exists(appconfigfileBin)}">
            <!-- mdbuild does not seem to copy the app file -->
            <copy file="${appconfigfile}"
                tofile="${appconfigfileBin}"/>
        </if>
    </target>
    <target name="compilePetra" description="compile the whole of Petra" depends="compileCommon, compilePetraShared, compilePetraServerAdmin, compilePetraServer, compilePetraClient"/>
    <target name="compileTemplate">
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="${mdtool}" commandline="build --buildfile:${solution.file}">
               <environment>
                  <variable name="MONO_PATH" value="${NAntBin.dir}"/> <!-- variable does not exist yet; otherwise: value="${NAntBin.dir}:${environment::get-variable('MONO_PATH')}" -->
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <solution configuration="${Configuration}" solutionfile="${solution.file}" />
        </if>
    </target>
    <target name="compileCommon" description="compile Ict/Common">
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/Common.sln"/>
        <call target="compileTemplate"/>
    </target>
    <target name="compilePetraShared" description="compile Ict/Petra/Shared">
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/Shared.sln"/>
        <call target="compileTemplate"/>
    </target>
    <target name="compilePetraServer" description="compile Ict/Petra/Server">
        <property name="appconfigfile" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/app/PetraServerConsole/app.config"/>
        <if test="${not file::exists(appconfigfile)}">
            <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/app/PetraServerConsole/app-sample-${DBMS.Type}.config"
                tofile="${appconfigfile}"/>
            <!-- app.config is part of the PetraServerConsole project and will be copied to _bin/${Output.dir}/PetraServerConsole.exe.config -->
        </if>

        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/Server.sln"/>
        <call target="compileTemplate"/>

        <property name="appconfigfileBin" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}/PetraServerConsole.exe.config"/>
        <if test="${not file::exists(appconfigfileBin)}">
            <!-- mdbuild does not seem to copy the app file -->
            <copy file="${appconfigfile}"
                tofile="${appconfigfileBin}"/>
        </if>

        <copy todir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}">
            <fileset basedir="${ThirdParty.dir}/Mono">
                <include name="intl.dll" />
                <include name="MonoPosixHelper.dll" />
                <include name="Mono.Security.dll" />
            </fileset>
        </copy>
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <!-- requires sqlite 3.6.1 or higher to be installed on the linux system -->
            <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/SQLite/System.Data.SQLite.ManagedOnly.dll" 
                  tofile="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}/System.Data.SQLite.dll" overwrite="true"/>
        </if>
        <property name = "language.file" value="${OpenPetraRoot.dir}/i18n/${SelectedLanguage}.mo"/>
        <if test="${file::exists(language.file)}">
            <mkdir dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}/locale/${SelectedLanguage}/LC_MESSAGES" failonerror="false"/>
            <copy file="${language.file}"
                tofile="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}/locale/${SelectedLanguage}/LC_MESSAGES/i18n.mo" overwrite="true"/>
        </if>
    </target>
    <target name="compilePetraServerAdmin" description="compile Ict/Petra/ServerAdmin">
        <property name="appconfigfile" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/app/PetraServerAdminConsole/app.config"/>
        <if test="${not file::exists(appconfigfile)}">
            <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/app/PetraServerAdminConsole/app-sample.config"
                tofile="${appconfigfile}"/>
            <!-- app.config is part of the PetraServerAdminConsole project and will be copied to _bin/${Output.dir}/PetraServerAdminConsole.exe.config -->
        </if>
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/ServerAdmin.sln"/>
        <call target="compileTemplate"/>
        <property name="appconfigfileBin" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}/PetraServerAdminConsole.exe.config"/>
        <if test="${not file::exists(appconfigfileBin)}">
            <!-- mdbuild does not seem to copy the app file -->
            <copy file="${appconfigfile}"
                tofile="${appconfigfileBin}"/>
        </if>
    </target>
    <target name="compilePetraClient" description="compile Ict/Petra/Client">
        <property name="appconfigfile" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/app/PetraClient/app.config"/>
        <if test="${not file::exists(appconfigfile)}">
            <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/app/PetraClient/app-sample.config"
                tofile="${appconfigfile}"/>
            <!-- app.config is part of the PetraClient project and will be copied to _bin/${Output.dir}/PetraClient.exe.config -->
        </if>
        <property name="solution.file" value="${OpenPetraRoot.dir}/csharp/ICT/Client.sln"/>
        <call target="compileTemplate"/>
        <property name="appconfigfileBin" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/PetraClient.exe.config"/>
        <if test="${not file::exists(appconfigfileBin)}">
            <!-- mdbuild does not seem to copy the app file -->
            <copy file="${appconfigfile}"
                tofile="${appconfigfileBin}"/>
        </if>
        <copy todir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}">
            <fileset basedir="${ThirdParty.dir}/Mono">
                <include name="intl.dll" />
                <include name="MonoPosixHelper.dll" />
            </fileset>
        </copy>
        <mkdir dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/img" failonerror="false"/>
        <copy todir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/img">
            <fileset basedir="${OpenPetraRoot.dir}/resources">
                <include name="*.ico" />
                <include name="*.gif" />
                <include name="*.jpg" />
            </fileset>
        </copy>
        <property name = "language.file" value="${OpenPetraRoot.dir}/i18n/${SelectedLanguage}.mo"/>
        <if test="${file::exists(language.file)}">
            <mkdir dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/locale/${SelectedLanguage}/LC_MESSAGES" failonerror="false"/>
            <copy file="${language.file}"
                tofile="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/locale/${SelectedLanguage}/LC_MESSAGES/i18n.mo" overwrite="true"/>
        </if>
    </target>
    <target name="cleanPetra" description="remove all compiled code of Petra">
        <!-- alternatively could use solution task: http://nant.sourceforge.net/release/latest/help/tasks/solution.html -->
        <!-- but the clean task is not implemented yet: see https://sourceforge.net/tracker/?func=detail&atid=402868&aid=1534755&group_id=31650 -->
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Common/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Common/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Common/_bin/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_Client/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_Client/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_Client/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_ServerAdmin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_ServerAdmin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/_bin/Server_ServerAdmin/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/*.txt"/></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/*.txt" /></fileset></delete>
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/${Output.dir}" failonerror="false" />
        <delete dir="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/ObjCode" failonerror="false" />
        <delete failonerror="false"><fileset><include name="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/*.txt" /></fileset></delete>
    </target>
    
    <target name="createSQLStatements" depends="compilePetraTools" description="Create the SQL files.">
        <mkdir dir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}" failonerror="false"/>
        <!-- we don't need SQL statements for sqlite, but only for the other DBMS -->
        <if test="${DBMS.Type!='sqlite'}">
            <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:sql -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql" failonerror="true"/>
        </if>
    </target>

    <target name="dbdoc">
        <mkdir dir="${DBDoc.Output.dir}" failonerror="false"/>    
        <mkdir dir="${DBDoc.Output.dir}/tables" failonerror="false"/>    
        <mkdir dir="${DBDoc.Output.dir}/img" failonerror="false"/>    

        <mkdir dir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}" failonerror="false"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:sql -dbms:postgresql -petraxml:${PetraXML.file} -outputFile:${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql" failonerror="true"/>
        
        <copy todir="${DBDoc.Output.dir}">
            <fileset basedir="${OpenPetraRoot.dir}/db/html/">
                <include name="*.html" />
                <include name="*.css" />
                <include name="*.js" />
            </fileset>
        </copy>        
        
        <exec program="cmd.exe" workingdir="${DBDoc.Output.dir}" commandline="/C &quot;rem ${ThirdParty.dir}/sql2dia/sql2dia.exe -d ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql > ${OpenPetraRoot.dir}/db/doc/master_alltables.prj&quot;"/>
        <exec program="cmd.exe" workingdir="${DBDoc.Output.dir}" commandline="/C &quot;${ThirdParty.dir}/sql2dia/sql2dia.exe -g -f ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql > ${OpenPetraRoot.dir}/db/doc/master_alltables_bygroup.prj&quot;"/>
        <exec program="cmd.exe" workingdir="${DBDoc.Output.dir}" commandline="/C &quot;${ThirdParty.dir}/sql2dia/sql2dia.exe -f ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql -p ${OpenPetraRoot.dir}/db/doc/master_alltables.prj&quot;"/>
        <exec program="cmd.exe" workingdir="${DBDoc.Output.dir}" commandline="/C &quot;${ThirdParty.dir}/sql2dia/sql2dia.exe -f ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql -o ${OpenPetraRoot.dir}/db/doc/ -p ${OpenPetraRoot.dir}/db/doc/themed.prj&quot;"/>
        
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/db/doc/*.dia" />
                </items>
            </in>
            <do>
                <property name="filenameWithoutExtension" value="${script::GetFilenameWithoutExtension(filename)}"/>
                <exec program="${Dia.exe}" workingdir="${DBDoc.Output.dir}" commandline="--export=img/${filenameWithoutExtension}.png --filter=pixbuf-png &quot;${filename}&quot;"/>
            </do>
        </foreach>
    </target>
    
    <!-- todo: init pg database: initdb -->
    <!-- todo: start and stop pg database -->

    <target name="recreateDatabase" depends="createSQLStatements">
        <if test="${DBMS.Type=='sqlite'}">
             <delete file="${SQLitedb.file}" if="${file::exists(SQLitedb.file)}"/>
             <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:sql -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${SQLitedb.file} -password:${DBMS.Password}" failonerror="true"/>
        </if>
        <if test="${DBMS.Type=='postgresql'}">
             <echo message="please run sudo ls before calling this, then you don't need to enter a password for postgres user"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="DROP DATABASE IF EXISTS petra;" database="template1"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="CREATE DATABASE petra;" database="template1"/>
             <psql exe="${PostgreSQL.exe}" sqlfile="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql" database="petra"/>
        </if>
        <if test="${DBMS.Type=='mysql'}">
             <echo message="this will now take a while..."/>
             <exec program="cmd.exe" commandline="/C &quot;echo drop database if exists petra; | ${MySQL.exe} -u root&quot;"/>
             <exec program="cmd.exe" commandline="/C &quot;echo create database if not exists petra; | ${MySQL.exe} -u root&quot;"/>
             <!-- add -v before -u if you want to see the sql commands... -->
             <exec program="cmd.exe" commandline="/C &quot;${MySQL.exe}&quot; -u root petra &lt; ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/petra.sql"/>
        </if>
    </target>

    <target name="resetDatabase" depends="" description="useful for debugging the creation of fresh database"> <!-- depends: recreateDatabase --> 
		 <if test="${framework::get-target-framework() == 'mono-2.0'}" >
			 <property name="OpenPetraRoot.dir" value="${path::get-full-path(OpenPetraRoot.dir)}"/>
		 </if>
		 <if test="${framework::get-target-framework() == 'net-2.0'}" >
		    <!-- GetRealPath resolves problems with substed path for psql to load from; cannot find such file or path -->
			<property name="OpenPetraRoot.dir" value="${string::replace(script::GetRealPath(OpenPetraRoot.dir), '\', '/')}"/>
	     </if>
         <property name="BaseData.Dir" value="${OpenPetraRoot.dir}/db/basedata"/>
         <property name="DemoData.Dir" value="${OpenPetraRoot.dir}/db/${SelectedDemo}"/>

         <copy file="${BaseData.Dir}/init.sql"
            tofile="${BaseData.Dir}/init.sql.local" overwrite="true"/>
         <property name="Current.File" value="${BaseData.Dir}/init.sql.local"/>
         <property name="toReplace" value="{#ABSOLUTEBASEDATAPATH}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, BaseData.Dir)}'/>
         
         <copy file="${DemoData.Dir}/init.sql"
            tofile="${DemoData.Dir}/init.sql.local" overwrite="true"/>
         <property name="Current.File" value="${DemoData.Dir}/init.sql.local"/>
         <property name="toReplace" value="{#ABSOLUTEBASEDATAPATH}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, DemoData.Dir)}'/>

         <property name="toReplace" value="{#RELEASEVERSION}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, ReleaseVersion)}'/>
         
         <property name="passwordChangeme" value="CHANGEME"/>
         <property name="passwordsalt" value="${script::GetPasswordSalt()}"/>
         <property name="passwordhash" value="${script::GetPasswordHash(passwordChangeme, passwordsalt)}"/>
         <property name="Current.File" value="${BaseData.Dir}/init.sql.local"/>
         <property name="toReplace" value="{#PASSWORDHASHSYSADMIN}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, passwordhash)}'/>
         <property name="toReplace" value="{#PASSWORDSALTSYSADMIN}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, passwordsalt)}'/>

         <property name="passwordChangeme" value="demo"/>
         <property name="passwordsalt" value="${script::GetPasswordSalt()}"/>
         <property name="passwordhash" value="${script::GetPasswordHash(passwordChangeme, passwordsalt)}"/>
         <property name="Current.File" value="${DemoData.Dir}/init.sql.local"/>
         <property name="toReplace" value="{#PASSWORDHASHDEMO}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, passwordhash)}'/>
         <property name="toReplace" value="{#PASSWORDSALTDEMO}"/>
         <echo message='${script::ReplaceInFile(Current.File, toReplace, passwordsalt)}'/>

        <if test="${DBMS.Type=='sqlite'}">
             <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:load -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${SQLitedb.file} -datapath:${DemoData.Dir} -sqlfile:${DemoData.Dir}/clean.sql -password:${DBMS.Password}" failonerror="true"/>
             <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:load -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${SQLitedb.file} -datapath:${BaseData.Dir} -sqlfile:${BaseData.Dir}/clean.sql -password:${DBMS.Password}" failonerror="true"/>
             <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:load -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${SQLitedb.file} -datapath:${BaseData.Dir} -sqlfile:${BaseData.Dir}/init.sql.local -password:${DBMS.Password}" failonerror="true"/>
             <ExecDotNet program="${PetraToolsExe.dir}/GenerateSQL.exe" commandline="-do:load -dbms:${DBMS.Type} -petraxml:${PetraXML.file} -outputFile:${SQLitedb.file} -datapath:${DemoData.Dir} -sqlfile:${DemoData.Dir}/init.sql.local -password:${DBMS.Password}" failonerror="true"/>
        </if>
        <if test="${DBMS.Type=='postgresql'}">
             <psql exe="${PostgreSQL.exe}" sqlcommand="DROP OWNED BY petraserver; DROP USER IF EXISTS petraserver;" database="petra" failonerror="false"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="CREATE USER petraserver PASSWORD 'TOBESETBYINSTALLER';" database="petra"/>
             <property name="tempfile" value="${path::get-temp-path()}/userpermissions.sql"/>
             <if test="${framework::get-target-framework() == 'mono-2.0'}" >
                 <!-- at least on Mac, the tmp directory of the current user is returned, which the postgres user has no access to -->
                 <property name="tempfile" value="/tmp/userpermissions.sql"/>
             </if>
             <psql exe="${PostgreSQL.exe}" 
                sqlcommand="select 'GRANT SELECT,UPDATE,DELETE,INSERT ON ' || c.relname || ' TO petraserver;' from pg_class AS c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace where c.relkind = 'r' and n.nspname NOT IN('pg_catalog', 'pg_toast') and pg_table_is_visible(c.oid);"
                outputfile="${tempfile}"
                database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlfile="${tempfile}" database="petra"/>

             <psql exe="${PostgreSQL.exe}" sqlcommand="GRANT SELECT,UPDATE,USAGE ON seq_modification1 TO petraserver;" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="GRANT SELECT,UPDATE,USAGE ON seq_modification2 TO petraserver;" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="GRANT SELECT,UPDATE,USAGE ON s_login_s_login_process_id_r_seq TO petraserver;"  database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="GRANT SELECT,UPDATE,USAGE ON seq_location_number TO petraserver;" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlcommand="GRANT SELECT,UPDATE,USAGE ON seq_general_ledger_master TO petraserver;" database="petra"/>

             <psql exe="${PostgreSQL.exe}" sqlfile="${DemoData.Dir}/clean.sql" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlfile="${BaseData.Dir}/clean.sql" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlfile="${BaseData.Dir}/init.sql.local" database="petra"/>
             <psql exe="${PostgreSQL.exe}" sqlfile="${DemoData.Dir}/init.sql.local" database="petra"/>
        </if>
        <if test="${DBMS.Type=='mysql'}">
             <!-- todo -->
        </if>
    </target>

    <target name="startPetraServer" depends="" description="start a local Petra Server"> <!-- compilePetra, startDatabase??? -->
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}"
                    commandline="PetraServerConsole.exe -RunWithoutMenu:true"
                    spawn="true">
                    <!-- todo: install newer version of nant that knows spawn;
                         unfortunately, RunWithoutMenu:false would not work, because there is no extra window opened, and System.Console.ReadLine fails -->
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="cmd.exe" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}"
                    commandline="/C start PetraServerConsole.exe -RunWithoutMenu:false"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
    </target>

    <target name="startPetraClient" depends="" description="start the Petra Client"> <!-- compilePetra, startPetraServer??? -->
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}"
                    commandline="PetraClient.exe -AutoLogin:demo"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="cmd.exe" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}"
                    commandline="/C start PetraClient.exe -AutoLogin:demo"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
    </target>

    <target name="stopPetraServer" depends="" description="stop the local Petra Server">
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}"
                    commandline="PetraServerAdminConsole.exe -Command:Stop"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="PetraServerAdminConsole.exe" 
                    basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}"
                    commandline="-Command:Stop"/>
        </if>
    </target>
        
    <target name="startXSPServer">
        <exec program="cmd.exe" 
                workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/app/PetraClientAsp"
                commandline="/C start xsp2 --root . --port 8080 --applications /:."
                spawn="true">
            <environment>
                <variable name="PATH" path="${environment::get-variable('PATH')};${MonoBinPath}"/>
            </environment>
        </exec>
    </target>
    <target name="startSOAPServer" description="only supports postgresql server at the moment, not sqlite; would need microsoft xsp">
        <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/app/WebService/server.asmx"
                    tofile="${WebServerInstall.dir}/server.asmx" overwrite="true"/>
        <mkdir dir="${WebServerInstall.dir}/bin" failonerror="false"/>
        <copy todir="${WebServerInstall.dir}/bin">
            <!-- some unmanaged dlls cause problems for mono xsp -->
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Debug/">
                <include name="*.dll" />
                <exclude name="Mono*" />
                <exclude name="intl.dll" />
            </fileset>
        </copy>
        <property name="webconfigfile" value="${WebServerInstall.dir}/web.config"/>
        <if test="${not file::exists(webconfigfile)}">
            <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/app/WebService/web-sample-${DBMS.Type}.config"
                tofile="${webconfigfile}" overwrite="true"/>
        </if>
        <!-- TODO: run on linux as well? -->
        <exec program="cmd.exe" 
                workingdir="${WebServerInstall.dir}"
                commandline="/C start xsp2 --verbose --root . --port 8081 --applications /:."
                spawn="true">
            <environment>
                <variable name="PATH" path="${environment::get-variable('PATH')};${MonoBinPath}"/>
                <variable name="MONO_OPTIONS" value="--debug xsp2"/>
            </environment>
        </exec>
        <echo message="in your browser, go to http://localhost:8081/server.asmx"/>
        
        <!-- todo: 
          set path for python
          cd U:\openpetraorg\qooxdoo\OpenPetraOrg
          generate.py source-all
        -->
        
        <echo message="in your browser, go to http://localhost:8081/OpenPetraOrg/source/"/>
    </target>

    <target name="generateORMTables">
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:defaulttables -petraxml:${PetraXML.file} -outputshared:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
    </target>

    <target name="generateORMAccess">
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataaccess -petraxml:${PetraXML.file} -outputshared:${OpenPetraRoot.dir}/csharp/ICT/Petra/Server -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
    </target>

    <target name="generateORMDatasets">
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MCommon/data/CommonTypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MCommon.Data -outputFilename:Common.DataSets -StartTableId:5000 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MPartner/data/PartnerTypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MPartner.Partner.Data -outputFilename:Partner.DataSets -StartTableId:5100 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MPersonnel/data/PersonnelTypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MPersonnel.Personnel.Data -outputFilename:Personnel.DataSets -StartTableId:5200 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MHospitality/data/TypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MHospitality.Data -outputFilename:Hospitality.DataSets -StartTableId:5300 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MFinance/data/Finance.AP.TypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MFinance.AP.Data -outputFilename:Finance.AP.DataSets -StartTableId:5400 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateORM.exe" commandline="-do:dataset -petraxml:${PetraXML.file} -input:${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared/lib/MFinance/data/Finance.GL.TypedDataSets.xml -outputNamespace:Ict.Petra.Shared.MFinance.GL.Data -outputFilename:Finance.GL.DataSets -StartTableId:5500 -TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates"/>
    </target>
    
    <target name="generateORM" depends="compilePetraTools,generateORMTables,generateORMAccess,generateORMDatasets" description="Generate the typed datastore.">
    </target>
    
    <target name="generateGlue" depends="compilePetraTools" description="Generate the glue between client and server, ie. interfaces and instantiators">
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateSharedCode.exe" commandline="-xmlfile:${OpenPetraRoot.dir}/csharp/ICT/Petra/Definitions/NamespaceHierarchy.xml -outputdir:${OpenPetraRoot.dir}/csharp/ICT/Petra"/>
    </target>

    <target name="generateGTK" depends="compilePetraTools" description="Generate GTK User Interface">
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateGTK.exe" commandline="-ymlfile:${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/lib/MSysMan/MaintainUsers.yaml -petraxml:${PetraXML.file} -outputdir:${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/lib/MSysMan/gtk"/>
    </target>

    <target name="generateWinforms" depends="compilePetraTools" description="Generate Winforms User Interface">
        <!-- todo: go through all yaml files that have FormType different from abstract -->
        <property name="generateWinformsParameters" value="-TemplateDir:${OpenPetraRoot.dir}/csharp/ICT/PetraTools/Templates/Winforms -ResourceDir:${OpenPetraRoot.dir}/resources -petraxml:${PetraXML.file} -localisation:${GUILocalisation}"/>
        <property name="ClientPath" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateWinForms.exe" commandline="-ymlfile:${ClientPath}/app/PetraClient/MainWindow.yaml ${generateWinformsParameters}"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateWinForms.exe" commandline="-ymlfile:${ClientPath}/lib/MPartner/gui ${generateWinformsParameters}"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateWinForms.exe" commandline="-ymlfile:${ClientPath}/lib/MReporting/gui/MPartner ${generateWinformsParameters}"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateWinForms.exe" commandline="-ymlfile:${ClientPath}/lib/MReporting/gui/MFinance ${generateWinformsParameters}"/>
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateWinForms.exe" commandline="-ymlfile:${ClientPath}/lib/MFinance/gui ${generateWinformsParameters}"/>
    </target>

    <target name="translationTemplate">
        <!-- first collect all Catalog.GetString from all source files in solution; also resolve calls to Table.GetFieldnameHelp etc; result is in solutionName.CollectedGettext.cs -->
        <ExecDotNet program="${PetraToolsExe.dir}/GenerateI18N.exe" commandline="-solution:${OpenPetraRoot.dir}/csharp/ICT/${solutionName}.sln -petraxml:${PetraXML.file}"/>
        <!-- use solutionName.CollectedGettext.cs as input for po file -->
        <property name="collectedGettext.file" value="csharp/ICT/${solutionName}.CollectedGettext.cs"/>
        <if test="${file::exists(collectedGettext.file)}">
            <exec program="${Poedit.gettext}" workingdir="${OpenPetraRoot.dir}/i18n/" commandline="-j --add-comments=/// --no-location --from-code=UTF-8 ../${collectedGettext.file} -o ${TargetLanguage.Pofile}"/>
        </if>
    </target>

    <target name="translation">

        <!-- create initial version of .po file if it does not exist yet -->
        <if test="${not file::exists(TargetLanguage.PofileWithPath)}">
            <exec program="${Poedit.gettext}" workingdir="${OpenPetraRoot.dir}/i18n/" commandline="--force-po --no-location --from-code=UTF-8 ${OpenPetraRoot.dir}/csharp/ICT/Common/StringHelper.cs -o ${TargetLanguage.Pofile}"/>
            <property name="toReplace" value="Content-Type: text/plain; charset=CHARSET/n"/>
            <property name="newValue" value="Content-Type: text/plain; charset=UTF-8/n"/>
            <echo message='${script::ReplaceInFile(TargetLanguage.PofileWithPath, toReplace, newValue)}'/>
        </if>

        <property name="solutionName" value="Common"/>
        <call target="translationTemplate"/>
        <property name="solutionName" value="Shared"/>
        <call target="translationTemplate"/>
        <property name="solutionName" value="Client"/>
        <call target="translationTemplate"/>
        <property name="solutionName" value="Server"/>
        <call target="translationTemplate"/>
        <property name="solutionName" value="ServerAdmin"/>
        <call target="translationTemplate"/>

        <!-- compile the language file for delivery -->
        <mkdir dir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/i18n/locale/${Translation.TargetLanguage}/LC_MESSAGES" failonerror="false"/>
        <exec program="${Poedit.msgfmt}" commandline="${TargetLanguage.PofileWithPath} -o ${OpenPetraRoot.dir}/setup/petra${PetraRelease}/i18n/locale/${Translation.TargetLanguage}/LC_MESSAGES/i18n.mo"/>
    </target>
    
    <target name="uncrustifyTemplate">
        <attrib normal="true">
            <fileset>
                <include name="${uncrustifyFilesPath}/**.cs" />
                <exclude name="**/Templates/**"/>
            </fileset>
        </attrib>
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${uncrustifyFilesPath}/**.cs" />
                    <exclude name="**/Templates/**"/>
                </items>
            </in>
            <do>
                <if test="${not script::IsAutoGeneratedFile(filename)}">
                    <exec program="${Uncrustify.exe}" workingdir="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/CodeBeautifier" commandline="-c uncrustify-petra.cfg --no-backup &quot;${filename}&quot;"/>
                </if>
            </do>
        </foreach>
    </target>
    <target name="uncrustifyCommon">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Common"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyPetraShared">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Shared"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyPetraServer">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyPetraClient">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyPetraServerAdmin">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyExperimenting">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Experimenting"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyPetraTools">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/PetraTools"/>
        <call target="uncrustifyTemplate"/>
    </target>
    <target name="uncrustifyTesting">
        <property name="uncrustifyFilesPath" value="${OpenPetraRoot.dir}/csharp/ICT/Testing"/>
        <call target="uncrustifyTemplate"/>
    </target>
    
    <target name="uncrustify" depends="uncrustifyCommon, uncrustifyPetraShared, uncrustifyPetraServer, uncrustifyPetraClient, uncrustifyPetraServerAdmin, uncrustifyExperimenting, uncrustifyPetraTools, uncrustifyTesting"/>
    
    <target name="checkCode" description="check for correct file headers, missing xml comment generation, copyright, licensing, etc">
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**.cs" />
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**.csproj" />
                    <exclude name="**/Templates/**"/>
                </items>
            </in>
            <do>
                <if test='${not script::CheckCode(filename)}'>
                    <echo message="problem with ${filename}"/>
                </if>
            </do>
        </foreach>
    </target>

    <target name="fixProjectFiles">
        <ExecDotNet program="${PetraToolsExe.dir}/FixProjectFiles.exe" commandline="-solutionpath:${OpenPetraRoot.dir}/csharp/ICT -solutions:Common,Shared,Client,Server,ServerAdmin,PetraTools,Testing"/>
    </target>
    
    <target name="switchToDebug">
        <echo message="reset project files to Debug path..."/>
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**.csproj" />
                </items>
            </in>
            <do>
                <if test='${script::ChangeProjectFileRelease(filename, false)}'/>
            </do>
        </foreach>

        <echo message="revert version number in assemblies..."/>
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**AssemblyInfo.cs" />
                </items>
            </in>
            <do>
                <if test='${script::ChangeAssemblyVersion(filename, ReleaseID, false)}'/>
            </do>
        </foreach>
    </target>
    
    <target name="compileRelease">
        <!-- need to change the paths in all project files from _bin/Debug to _bin/Release -->
        <attrib normal="true">
            <fileset>
                <include name="${OpenPetraRoot.dir}/csharp/ICT/**.csproj" />
            </fileset>
        </attrib>
        
        <echo message="changing project files to Release path..."/>
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**.csproj" />
                </items>
            </in>
            <do>
                <if test='${script::ChangeProjectFileRelease(filename, true)}'/>
            </do>
        </foreach>
        
        <!-- change version number in Assembly files -->
        <attrib normal="true">
            <fileset>
                <include name="${OpenPetraRoot.dir}/csharp/ICT/**AssemblyInfo.cs" />
            </fileset>
        </attrib>
        <echo message="setting version number in assemblies..."/>
        <foreach item="File" property="filename">
            <in>
                <items>
                    <include name="${OpenPetraRoot.dir}/csharp/ICT/**AssemblyInfo.cs" />
                </items>
            </in>
            <do>
                <if test='${script::ChangeAssemblyVersion(filename, ReleaseID, true)}'/>
            </do>
        </foreach>

        <nant buildfile="OpenPetra.build" target="cleanPetra compilePetra">
            <properties>
                <property name="Output.dir" value="Release"/>
                <property name="Configuration" value="RELEASE"/>
            </properties>
        </nant>
        <call target="switchToDebug"/>
    </target>
    
    <target name="setupTemplate">
        <property name="Current.File" value="${SetupOriginal.File}.local"/>

        <copy file="${SetupOriginal.File}" tofile="${Current.File}" overwrite="true"/>
    
        <property name="toReplace" value="{#RELEASEVERSION}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, ReleaseVersion)}'/>
        <property name="toReplace" value="{#RELEASEID}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, ReleaseID)}'/>
        <property name="toReplace" value="{#PATCHVERSION}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, script::GetMainVersionWithoutBuildNr(ReleaseVersion))}'/>

        <exec program="${Innosetup.ISCC}" commandline=" ${Current.File}"
              workingdir="${path::get-directory-name(Current.File)}"/>
    </target>
    <target name="setupStandalone">
        <property name="SetupOriginal.File" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/standalone/standalone.iss"/>
        <call target="setupTemplate"/>
    </target>
    <target name="setupRemote">
        <property name="SetupOriginal.File" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteclientWin/remote.iss"/>
        <call target="setupTemplate"/>
    </target>
    <target name="setupLinuxServer">
        <!-- for the moment, just create a tar.gz file, with sub directories 
        manuals30 containing the release notes, 
        bin30 with just the server binaries,
        db30 with the demo sqlite database,
        reports30,
        etc30 with the 2 config files;
        start and maintain script in the root
        LICENSE file in the root, 
        INSTALL file with instructions, required packages, firewall etc?
        -->
        <property name="setupDir" value="${OpenPetraRoot.dir}/tmp/openpetraorg-${ReleaseVersion}"/>
        <delete dir="${setupDir}" failonerror="false"/>
        <mkdir dir="${setupDir}"/>
        <mkdir dir="${setupDir}/manuals30"/>
        <mkdir dir="${setupDir}/bin30"/>
        <mkdir dir="${setupDir}/bin30/locale/"/>
        <mkdir dir="${setupDir}/db30"/>
        <mkdir dir="${setupDir}/etc30"/>
        <mkdir dir="${setupDir}/reports30"/>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/SQLite/System.Data.SQLite.ManagedOnly.dll"
                    tofile="${setupDir}/bin30/System.Data.SQLite.dll"/>
       
        <copy todir="${setupDir}/bin30/locale/">
           <fileset basedir="${OpenPetraRoot.dir}/setup/petra0300/i18n/locale">
               <include name="**/*.mo" />
           </fileset> 
        </copy>
        
        <copy todir="${setupDir}/etc30">
            <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/">
                <include name="*.config" />
            </fileset>
        </copy>

        <copy todir="${setupDir}/manuals30">
            <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/releasenotes/">
                <include name="*.html" />
            </fileset>
        </copy>

        <copy todir="${setupDir}/reports30">
            <fileset basedir="${OpenPetraRoot.dir}/XmlReports/">
                <include name="*.dtd" />
                <include name="*.xml" />
            </fileset>
        </copy>
        
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demo.db"
                    tofile="${setupDir}/db30/demo.db"/>
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demo-pg.bak"
                    tofile="${setupDir}/db30/demo-pg.bak"/>

        <copy file="${OpenPetraRoot.dir}/LICENSE"
                    tofile="${setupDir}/LICENSE"/>
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/INSTALL"
                    tofile="${setupDir}/INSTALL"/>
        <!-- todo: make sure that the script files are in unix format? dos2unix? -->
        <!-- todo: can we change the executable flag? chmod a+x -->
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/start.sh"
                    tofile="${setupDir}/start.sh"/>
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/menu.sh"
                    tofile="${setupDir}/menu.sh"/>
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/stop.sh"
                    tofile="${setupDir}/stop.sh"/>
        <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/initpg.sh"
                    tofile="${setupDir}/initpg.sh"/>
        <tar destfile="openpetraorg-${ReleaseVersion}.tar.gz" compression="GZip">
            <fileset basedir="${setupDir}" prefix="openpetraorg-${ReleaseVersion}">
                <include name="**/*" />
            </fileset>
        </tar>
        
        <delete dir="${setupDir}"/>
    </target>

    <target name="createSQLiteDB">
        <property name="DBMS.Type" value="sqlite"/>
        <property name="DBMS.Password" value="CHANGEME"/>
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
                <!-- Linux version of sqlite does not work with encryption; 
                     use it only for testing purposes; 
                     see also http://sqlite.phxsoftware.com/forums/p/1508/6579.aspx#6579 -->        
                <property name="DBMS.Password" value=""/>
        </if>
        <call target="recreateDatabase"/>
        <call target="resetDatabase"/>
        <copy file="${SQLitedb.file}" tofile="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demo.db" overwrite="true"/>
    </target>

    <target name="createPostgreSQLDB">
        <property name="DBMS.Type" value="postgresql"/>
        <property name="DBMS.Password" value="CHANGEME"/>
        <call target="recreateDatabase"/>
        <call target="resetDatabase"/>
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <!-- this currently only works on Linux -->
            <ExecCmd program="sh" superuser="postgres" commandline="/C ${pgdump.exe} --format=c petra -f ${path::get-temp-path()}/demo-pg.bak"/>
            <copy file="${path::get-temp-path()}/demo-pg.bak" tofile="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demo-pg.bak" overwrite="true"/>
        </if>
    </target>
    
    <target name="buildReleaseWindows" depends="switchToDebug, createSQLiteDB, compileRelease, translation, setupStandalone, setupRemote"/>
    <target name="buildReleaseLinux" depends="switchToDebug, createSQLiteDB, createPostgreSQLDB, generateWinforms, compileRelease, translation, setupLinuxServer"/>
    <target name="buildRelease">
        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <call target="buildReleaseLinux"/>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <call target="buildReleaseWindows"/>
        </if>
    </target>
</project>
