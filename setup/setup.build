<?xml version="1.0"?>
<project name="OpenPetra-setup">

<include buildfile="../inc/nant/OpenPetra.common.xml" />

<property name="BuildClientArchive" value="false" overwrite="false" />
<property name="LinuxTargetDistribution-list" value="debian-postgresql,centos-postgresql" overwrite="false" />
<property name="PetraRelease" value="0300" overwrite="false" />

<target name="buildRPM">
  <property name="OpenBuildService" value="true"/>

  <call target="nanttasks"/>
  <call target="minimalGenerateSolution"/>
  <property name="solution" value="Server"/>
  <property name="onlyonce" value="true"/>
  <call target="quickCompile"/>
  <call target="createSQLStatements"/>
  <call target="translation"/>

  <property name="BuildArchive" value="server" overwrite="true"/>
  <call target="prepareSetupDirForTarFile"/>

  <!-- result is in dir.setup for building the rpm package -->
</target>

<!-- Linux -->
<target name="prepareSetupDirForTarFile">
<!-- for the moment, just create a tar.gz file, with sub directories manuals30 containing the release notes, 
     bin30 with just the server binaries, db30 with the demo sqlite database, demo30 with some sample files,
     reports30, sql30 with the sql scripts, etc30 with the 2 config files; start and maintain script in the root
     LICENSE file in the root, INSTALL file with instructions, required packages, firewall etc? 
-->
  <property name="dir.setup" value="${dir.bin}/tmp/openpetraorg-${ReleaseID}"/>
  <delete dir="${dir.setup}"/>
  <mkdir dir="${dir.setup}"/>
  
  <mkdir dir="${dir.setup}/db30"/>
  <mkdir dir="${dir.setup}/demo30"/>
  <mkdir dir="${dir.setup}/log30"/>
  <mkdir dir="${dir.setup}/etc30"/>
  <mkdir dir="${dir.setup}/reports30"/>
  <mkdir dir="${dir.setup}/patches30"/>  
  <mkdir dir="${dir.setup}/manuals30"/>
  <mkdir dir="${dir.setup}/sql30"/>
  <mkdir dir="${dir.setup}/formletters30"/>
  <mkdir dir="${dir.setup}/resources30"/>
  <mkdir dir="${dir.setup}/bin30"/>
  <mkdir dir="${dir.setup}/js30"/>

  <echo file="${dir.setup}/bin30/version.txt">${ReleaseVersion}</echo>
  <copy todir="${dir.setup}/bin30">
    <fileset basedir="${dir.bin}">
      <include name="*.dll" />
      <include name="*.exe" />
      <exclude name="Ict.Testing.*" />
      <exclude name="Ict.Tools.*" />
      <exclude name="ICT.Tools.*" />
      <exclude name="Ict.Petra.Tools.*" />
      <exclude name="Ict.Petra.Plugins.*.Testing*dll" />
      <exclude name="Ict.Petra.Plugins.*.exe" />
      <exclude name="ICSharpCode.NRefactory*" />
      <exclude name="Ionic.Zip*" />
      <exclude name="WebDriver*" />
      <exclude name="NUnitForms*" />
      <exclude name="Mono.*" />
      <include name="*/*.dll" /> <!-- i18n DLLs-->
    </fileset>
  </copy>
  <copy file="${dir.bin}/Ict.Petra.Tools.MSysMan.YmlGzImportExport.exe" todir="${dir.setup}/bin30" overwrite="true"/>

  <delete>
    <fileset>
      <include name="${dir.setup}/bin30/sqlite3.dll" />
    </fileset>
  </delete>

  <copy todir="${dir.setup}/resources30">
    <fileset basedir="${dir.root}/resources">
      <include name="*.ico" />
      <include name="*.png" />
    </fileset>
  </copy>       
  
  <copy todir="${dir.setup}/manuals30">
    <fileset basedir="${dir.root}/setup/petra${PetraRelease}/releasenotes/">
      <include name="*.html" />
    </fileset>
  </copy>
  <copy todir="${dir.setup}/reports30">
    <fileset basedir="${dir.root}/XmlReports/">
      <include name="*.dtd" />
      <!-- TODO exclude the report xml files from client tar, only include report settings -->
      <include name="**/*.xml" />
    </fileset>
  </copy>
  <copy file="${dir.root}/LICENSE" tofile="${dir.setup}/LICENSE"/>
  
  <mkdir dir="${dir.setup}/asmx"/>
  <copy todir="${dir.setup}/asmx">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/app/WebService">
       <include name="*.asmx" />
    </fileset>
  </copy>
  <copy todir="${dir.setup}/asmx" flatten="true">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Plugins">
       <include name="**/*.asmx" />
    </fileset>
  </copy>

  <foreach item="String" property="LinuxTargetDistribution" delim="," in="${LinuxTargetDistribution-list}" >
   <if test="${string::contains(LinuxTargetDistribution, DBMS.Type)}">
    <property name="LinuxTargetDistribution" value="${string::replace(LinuxTargetDistribution, '-' + DBMS.Type, '')}"/>
    <!-- ***************  copy the linux config script for the server side ***************  -->
    <copy file="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/${LinuxTargetDistribution}/openpetra-server.sh"
      tofile="${dir.setup}/openpetra-server.sh" overwrite="true"/>
   </if>
  </foreach>

  <!-- ***************  create the web.config file ***************  -->
  <property name="Config.file" value="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/web.config.my"/>
  <if test="${not file::exists(Config.file)}">
      <property name="Config.file" value="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/web.config"/>
  </if>
  <if test="${file::exists(Config.file)}">
      <copy file="${Config.file}"
          tofile="${dir.setup}/etc30/web-sample.config" overwrite="true">
          <filterchain>
              <expandproperties />
          </filterchain>
      </copy>
  </if>

  <copy todir="${dir.setup}/etc30">
    <fileset basedir="${dir.root}/setup/petra${PetraRelease}/linuxserver/">
        <include name="*.config" />
    </fileset>
    <filterchain>
        <expandproperties />
    </filterchain>
  </copy>
  <copy todir="${dir.setup}/demo30">
    <fileset basedir="${dir.bin}/demodata/">
        <include name="**/*.*" />
    </fileset>
  </copy>

  <copy todir="${dir.setup}/formletters30">
    <fileset basedir="${dir.root}/demodata/formletters/">
        <include name="*.html" />
        <include name="*.png" />
    </fileset>
  </copy>

  <if test="${string::contains(DBMS.Type, 'postgresql')}">
    <copy file="${dir.root}/setup/petra${PetraRelease}/createtables-PostgreSQL.sql"
              tofile="${dir.setup}/db30/createtables-PostgreSQL.sql"/>
    <copy file="${dir.root}/setup/petra${PetraRelease}/createconstraints-PostgreSQL.sql"
              tofile="${dir.setup}/db30/createconstraints-PostgreSQL.sql"/>
    <if test="${file::exists(dir.root + '/setup/petra' + PetraRelease + '/demodata-PostgreSQL.sql')}">
       <copy file="${dir.root}/setup/petra${PetraRelease}/demodata-PostgreSQL.sql"
              tofile="${dir.setup}/db30/demodata-PostgreSQL.sql"/>
    </if>
  </if>
  <if test="${string::contains(DBMS.Type, 'mysql')}">
    <copy file="${dir.root}/setup/petra${PetraRelease}/createtables-MySQL.sql"
              tofile="${dir.setup}/db30/createtables-MySQL.sql"/>
    <copy file="${dir.root}/setup/petra${PetraRelease}/createconstraints-MySQL.sql"
              tofile="${dir.setup}/db30/createconstraints-MySQL.sql"/>
    <copy file="${dir.root}/setup/petra${PetraRelease}/petra.sql"
              tofile="${dir.setup}/db30/createdb-MySQL.sql"/>
    <if test="${file::exists(dir.root + '/setup/petra' + PetraRelease + '/demodata-MySQL.sql')}">
        <copy file="${dir.root}/setup/petra${PetraRelease}/demodata-MySQL.sql"
              tofile="${dir.setup}/db30/demodata-MySQL.sql"/>
    </if>
  </if>
  <copy file="${dir.root}/setup/petra${PetraRelease}/linuxserver/INSTALL"
              tofile="${dir.setup}/INSTALL"/>
  <copy todir="${dir.setup}/sql30">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/sql/">
        <include name="*.sql" />
        <include name="*.yml" />
    </fileset>
  </copy>
  <foreach item="File" property="filename">
      <in>
          <items>
              <include name="${dir.root}/csharp/ICT/Petra/Plugins/**/sql/*.sql" />
          </items>
      </in>
      <do>
          <copy file="${filename}" tofile="${dir.setup}/sql30/${path::get-file-name(filename)}"/>
      </do>
  </foreach>
  <copy todir="${dir.setup}/sql30">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/lib/MSysMan/DBUpgrades/">
        <include name="*.sql" />
    </fileset>
  </copy>
</target> 

</project>
