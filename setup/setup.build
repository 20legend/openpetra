<?xml version="1.0"?>
<project name="OpenPetra-setup">

<include buildfile="../inc/nant/OpenPetra.common.xml" />

<property name="BuildClientArchive" value="false" overwrite="false" />
<property name="LinuxTargetDistribution-list" value="debian-postgresql,centos-postgresql" overwrite="false" />
<property name="PetraRelease" value="0300" overwrite="false" />

<target name="buildRPM">
  <property name="OpenBuildService" value="true"/>

  <call target="nanttasks"/>
  <call target="minimalGenerateSolution"/>
  <property name="solution" value="Server"/>
  <property name="onlyonce" value="true"/>
  <call target="quickCompile"/>
  <property name="solution" value="YmlGzImportExport"/>
  <call target="quickCompile"/>
  <call target="createSQLStatements"/>
  <call target="translation"/>

  <property name="dir.setup" value="${dir.bin}/tmp/openpetraorg-${ReleaseID}"/>
  <call target="prepareSetupDirForTarFile"/>

  <!-- result is in dir.setup for building the rpm package -->
</target>

<target name="install" depends="install.net, install.js"/>

<target name="install.net">
  <property name="dir.setup" value="${dir.bin}/tmp/openpetraorg-${ReleaseID}"/>

  <if test="${not directory::exists('/usr/local/openpetra/bin')}">
    <fail message="this only works if the openpetra rpm package has been installed already"/>
  </if>

  <call target="prepareSetupDirForTarFile"/>
  <copy todir="/usr/local/openpetra">
    <fileset basedir="${dir.setup}">
      <include name="**/*" />
    </fileset>
  </copy>

  <echo message="Restarting the OpenPetra server..."/>
  <exec program="bash"
    commandline="-c &quot;sudo systemctl restart openpetra;&quot;"/>
</target>

<target name="install.js">
  <exec program="bash"
        workingdir="${dir.root}/js-client"
        commandline="-c &quot;npm run build&quot;" />
  
  <copy todir="/usr/local/openpetra/client">
    <fileset basedir="${dir.root}/js-client">
      <include name="**/*" />
    </fileset>
  </copy>
</target>

<!-- Linux -->
<target name="prepareSetupDirForTarFile">
<!-- for the moment, just create a tar.gz file, with sub directories manuals containing the release notes, 
     bin with just the server binaries, db with the scripts to setup the database,
     reports, sql with the sql scripts, etc with the 2 config files; start and maintain script in the root
     LICENSE file in the root, INSTALL file with instructions, required packages, firewall etc? 
-->
  <delete dir="${dir.setup}"/>
  <mkdir dir="${dir.setup}"/>
  
  <mkdir dir="${dir.setup}/db"/>
  <mkdir dir="${dir.setup}/etc"/>
  <mkdir dir="${dir.setup}/reports"/>
  <mkdir dir="${dir.setup}/manuals"/>
  <mkdir dir="${dir.setup}/sql"/>
  <mkdir dir="${dir.setup}/emails"/>
  <mkdir dir="${dir.setup}/formletters"/>
  <mkdir dir="${dir.setup}/bin"/>
  <mkdir dir="${dir.setup}/server"/>
  <mkdir dir="${dir.setup}/client"/>

  <echo file="${dir.setup}/bin/version.txt">${ReleaseVersion}</echo>
  <copy todir="${dir.setup}/bin">
    <fileset basedir="${dir.bin}">
      <include name="*.dll" />
      <include name="*.exe" />
      <exclude name="Ict.Testing.*" />
      <exclude name="Ict.Tools.*" />
      <exclude name="ICT.Tools.*" />
      <exclude name="Ict.Petra.Tools.*" />
      <exclude name="Ict.Petra.Plugins.*.Testing*dll" />
      <exclude name="Ict.Petra.Plugins.*.exe" />
      <exclude name="ICSharpCode.NRefactory*" />
      <exclude name="Ionic.Zip*" />
      <exclude name="WebDriver*" />
      <exclude name="NUnitForms*" />
      <exclude name="Mono.*" />
      <exclude name="sqlite3.dll" />
      <include name="*/*.dll" /> <!-- i18n DLLs-->
    </fileset>
  </copy>
  <copy file="${dir.bin}/Ict.Petra.Tools.MSysMan.YmlGzImportExport.exe" todir="${dir.setup}/bin" overwrite="true"/>

  <copy todir="${dir.setup}/manuals">
    <fileset basedir="${dir.root}/setup/petra${PetraRelease}/releasenotes/">
      <include name="*.html" />
    </fileset>
  </copy>
  <copy todir="${dir.setup}/reports">
    <fileset basedir="${dir.root}/XmlReports/">
      <include name="*.dtd" />
      <include name="**/*.xml" />
      <include name="**/*.html" />
    </fileset>
  </copy>
  <copy file="${dir.root}/LICENSE" tofile="${dir.setup}/LICENSE"/>
  
  <copy todir="${dir.setup}/server">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/app/WebService">
       <include name="*.asmx" />
    </fileset>
  </copy>
  <copy todir="${dir.setup}/server" flatten="true">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Plugins">
       <include name="**/*.asmx" />
    </fileset>
  </copy>
  <copy file="${dir.root}/csharp/ICT/Petra/Server/app/WebService/Default.aspx"
      tofile="${dir.setup}/server/Default.aspx"/>

  <foreach item="String" property="LinuxTargetDistribution" delim="," in="${LinuxTargetDistribution-list}" >
   <if test="${string::contains(LinuxTargetDistribution, DBMS.Type)}">
    <property name="LinuxTargetDistribution" value="${string::replace(LinuxTargetDistribution, '-' + DBMS.Type, '')}"/>
    <!-- ***************  copy the linux config script for the server side ***************  -->
    <copy file="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/${LinuxTargetDistribution}/openpetra-server.sh"
      tofile="${dir.setup}/openpetra-server.sh" overwrite="true"/>
   </if>
  </foreach>

  <!-- ***************  create the web.config file ***************  -->
  <property name="Config.file" value="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/web.config.my"/>
  <if test="${not file::exists(Config.file)}">
      <property name="Config.file" value="${dir.root}/setup/petra${PetraRelease}/linuxserver/${DBMS.Type}/web.config"/>
  </if>
  <if test="${not file::exists(Config.file)}">
      <property name="Config.file" value="${dir.root}/setup/petra${PetraRelease}/linuxserver/web.config"/>
  </if>
  <if test="${file::exists(Config.file)}">
      <copy file="${Config.file}"
          tofile="${dir.setup}/etc/web-sample.config" overwrite="true">
          <filterchain>
              <expandproperties />
          </filterchain>
      </copy>
  </if>

  <copy todir="${dir.setup}/etc">
    <fileset basedir="${dir.root}/setup/petra${PetraRelease}/linuxserver/">
        <include name="*.config" />
    </fileset>
    <filterchain>
        <expandproperties />
    </filterchain>
  </copy>

  <copy todir="${dir.setup}/formletters">
    <fileset basedir="${dir.root}/demodata/formletters/">
        <include name="*.html" />
        <include name="*.png" />
    </fileset>
  </copy>

  <if test="${string::contains(DBMS.Type, 'postgresql') and file::exists(DeliveryDB.dir+'/createtables-PostgreSQL.sql')}">
    <copy file="${DeliveryDB.dir}/createtables-PostgreSQL.sql"
              tofile="${dir.setup}/db/createtables-PostgreSQL.sql"/>
    <copy file="${DeliveryDB.dir}/createconstraints-PostgreSQL.sql"
              tofile="${dir.setup}/db/createconstraints-PostgreSQL.sql"/>
    <if test="${file::exists(DeliveryDB.dir + '/demodata-PostgreSQL.sql')}">
       <copy file="${DeliveryDB.dir}/demodata-PostgreSQL.sql"
              tofile="${dir.setup}/db/demodata-PostgreSQL.sql"/>
    </if>
  </if>
  <if test="${string::contains(DBMS.Type, 'mysql') and file::exists(DeliveryDB.dir+'/createtables-MySQL.sql')}">
    <copy file="${DeliveryDB.dir}/createtables-MySQL.sql"
              tofile="${dir.setup}/db/createtables-MySQL.sql"/>
    <copy file="${DeliveryDB.dir}/createconstraints-MySQL.sql"
              tofile="${dir.setup}/db/createconstraints-MySQL.sql"/>
    <copy file="${DeliveryDB.dir}/petra.sql"
              tofile="${dir.setup}/db/createdb-MySQL.sql"/>
    <if test="${file::exists(DeliveryDB.dir + '/demodata-MySQL.sql')}">
        <copy file="${DeliveryDB.dir}/demodata-MySQL.sql"
              tofile="${dir.setup}/db/demodata-MySQL.sql"/>
    </if>
  </if>
  <copy file="${dir.root}/setup/petra${PetraRelease}/linuxserver/INSTALL"
              tofile="${dir.setup}/INSTALL"/>
  <copy todir="${dir.setup}/sql">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/sql/">
        <include name="*.sql" />
        <include name="*.yml" />
    </fileset>
  </copy>
  <foreach item="File" property="filename">
      <in>
          <items>
              <include name="${dir.root}/csharp/ICT/Petra/Plugins/**/sql/*.sql" />
          </items>
      </in>
      <do>
          <copy file="${filename}" tofile="${dir.setup}/sql/${path::get-file-name(filename)}"/>
      </do>
  </foreach>
  <copy todir="${dir.setup}/sql">
    <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/lib/MSysMan/DBUpgrades/">
        <include name="*.sql" />
    </fileset>
  </copy>
  <copy todir="${dir.setup}/emails">
    <fileset basedir="${dir.root}/inc/template/email/">
        <include name="*.txt" />
        <include name="*.html" />
    </fileset>
  </copy>
</target> 

</project>
